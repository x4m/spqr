// Code generated from SQLParser.g4 by ANTLR 4.9.1. DO NOT EDIT.

package parser // SQLParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)


// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa


var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 634, 7924, 
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9, 
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23, 
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4, 
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34, 
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9, 
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44, 
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4, 
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55, 
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9, 
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65, 
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4, 
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76, 
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9, 
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86, 
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4, 
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97, 
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102, 
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106, 
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111, 
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115, 
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120, 
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124, 
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129, 
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133, 
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138, 
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142, 
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147, 
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151, 
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156, 
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160, 
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165, 
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169, 
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174, 
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178, 
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183, 
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187, 
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192, 
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196, 
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201, 
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205, 
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210, 
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214, 
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219, 
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223, 
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228, 
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232, 
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237, 
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241, 
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246, 
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250, 
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255, 
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259, 
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264, 
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268, 
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273, 
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277, 
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282, 
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286, 
	4, 287, 9, 287, 4, 288, 9, 288, 4, 289, 9, 289, 4, 290, 9, 290, 4, 291, 
	9, 291, 4, 292, 9, 292, 4, 293, 9, 293, 4, 294, 9, 294, 4, 295, 9, 295, 
	4, 296, 9, 296, 4, 297, 9, 297, 4, 298, 9, 298, 4, 299, 9, 299, 4, 300, 
	9, 300, 4, 301, 9, 301, 4, 302, 9, 302, 4, 303, 9, 303, 4, 304, 9, 304, 
	4, 305, 9, 305, 4, 306, 9, 306, 4, 307, 9, 307, 4, 308, 9, 308, 4, 309, 
	9, 309, 4, 310, 9, 310, 4, 311, 9, 311, 4, 312, 9, 312, 4, 313, 9, 313, 
	4, 314, 9, 314, 4, 315, 9, 315, 4, 316, 9, 316, 4, 317, 9, 317, 4, 318, 
	9, 318, 4, 319, 9, 319, 4, 320, 9, 320, 4, 321, 9, 321, 4, 322, 9, 322, 
	4, 323, 9, 323, 4, 324, 9, 324, 4, 325, 9, 325, 4, 326, 9, 326, 4, 327, 
	9, 327, 4, 328, 9, 328, 4, 329, 9, 329, 4, 330, 9, 330, 4, 331, 9, 331, 
	4, 332, 9, 332, 4, 333, 9, 333, 4, 334, 9, 334, 4, 335, 9, 335, 4, 336, 
	9, 336, 4, 337, 9, 337, 4, 338, 9, 338, 4, 339, 9, 339, 4, 340, 9, 340, 
	4, 341, 9, 341, 4, 342, 9, 342, 4, 343, 9, 343, 4, 344, 9, 344, 4, 345, 
	9, 345, 4, 346, 9, 346, 4, 347, 9, 347, 4, 348, 9, 348, 4, 349, 9, 349, 
	4, 350, 9, 350, 4, 351, 9, 351, 4, 352, 9, 352, 4, 353, 9, 353, 4, 354, 
	9, 354, 4, 355, 9, 355, 4, 356, 9, 356, 4, 357, 9, 357, 4, 358, 9, 358, 
	4, 359, 9, 359, 4, 360, 9, 360, 4, 361, 9, 361, 4, 362, 9, 362, 4, 363, 
	9, 363, 4, 364, 9, 364, 4, 365, 9, 365, 4, 366, 9, 366, 4, 367, 9, 367, 
	4, 368, 9, 368, 4, 369, 9, 369, 4, 370, 9, 370, 4, 371, 9, 371, 4, 372, 
	9, 372, 4, 373, 9, 373, 4, 374, 9, 374, 4, 375, 9, 375, 4, 376, 9, 376, 
	4, 377, 9, 377, 4, 378, 9, 378, 4, 379, 9, 379, 4, 380, 9, 380, 4, 381, 
	9, 381, 4, 382, 9, 382, 4, 383, 9, 383, 4, 384, 9, 384, 4, 385, 9, 385, 
	4, 386, 9, 386, 4, 387, 9, 387, 4, 388, 9, 388, 4, 389, 9, 389, 4, 390, 
	9, 390, 4, 391, 9, 391, 4, 392, 9, 392, 4, 393, 9, 393, 4, 394, 9, 394, 
	3, 2, 5, 2, 790, 10, 2, 3, 2, 7, 2, 793, 10, 2, 12, 2, 14, 2, 796, 11, 
	2, 3, 2, 3, 2, 6, 2, 800, 10, 2, 13, 2, 14, 2, 801, 3, 2, 5, 2, 805, 10, 
	2, 7, 2, 807, 10, 2, 12, 2, 14, 2, 810, 11, 2, 3, 2, 3, 2, 3, 3, 3, 3, 
	3, 3, 3, 4, 5, 4, 818, 10, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 7, 5, 
	826, 10, 5, 12, 5, 14, 5, 829, 11, 5, 3, 5, 3, 5, 3, 6, 5, 6, 834, 10, 
	6, 3, 6, 3, 6, 5, 6, 838, 10, 6, 3, 6, 3, 6, 3, 7, 5, 7, 843, 10, 7, 3, 
	7, 3, 7, 3, 7, 7, 7, 848, 10, 7, 12, 7, 14, 7, 851, 11, 7, 3, 7, 3, 7, 
	3, 8, 3, 8, 3, 8, 5, 8, 858, 10, 8, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 864, 
	10, 9, 3, 10, 3, 10, 5, 10, 868, 10, 10, 3, 11, 3, 11, 3, 11, 3, 11, 5, 
	11, 874, 10, 11, 5, 11, 876, 10, 11, 3, 11, 3, 11, 3, 11, 7, 11, 881, 10, 
	11, 12, 11, 14, 11, 884, 11, 11, 5, 11, 886, 10, 11, 3, 11, 3, 11, 5, 11, 
	890, 10, 11, 3, 11, 3, 11, 5, 11, 894, 10, 11, 3, 11, 5, 11, 897, 10, 11, 
	3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 903, 10, 11, 3, 11, 3, 11, 3, 11, 3, 
	11, 5, 11, 909, 10, 11, 5, 11, 911, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 
	3, 11, 3, 11, 5, 11, 919, 10, 11, 3, 11, 3, 11, 5, 11, 923, 10, 11, 3, 
	11, 3, 11, 5, 11, 927, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 
	3, 12, 3, 12, 3, 12, 5, 12, 938, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 
	12, 5, 12, 945, 10, 12, 3, 12, 5, 12, 948, 10, 12, 3, 13, 3, 13, 5, 13, 
	952, 10, 13, 3, 13, 3, 13, 3, 13, 7, 13, 957, 10, 13, 12, 13, 14, 13, 960, 
	11, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 966, 10, 13, 3, 13, 5, 13, 969, 
	10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 
	5, 14, 980, 10, 14, 3, 14, 5, 14, 983, 10, 14, 3, 15, 3, 15, 3, 15, 3, 
	15, 5, 15, 989, 10, 15, 3, 15, 3, 15, 5, 15, 993, 10, 15, 3, 15, 5, 15, 
	996, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 1002, 10, 15, 3, 15, 3, 
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 1012, 10, 15, 3, 16, 
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 1020, 10, 16, 3, 16, 3, 16, 3, 
	16, 3, 16, 3, 16, 7, 16, 1027, 10, 16, 12, 16, 14, 16, 1030, 11, 16, 3, 
	16, 3, 16, 3, 16, 5, 16, 1035, 10, 16, 3, 16, 5, 16, 1038, 10, 16, 3, 16, 
	3, 16, 5, 16, 1042, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 
	16, 5, 16, 1051, 10, 16, 5, 16, 1053, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 
	3, 16, 5, 16, 1060, 10, 16, 3, 16, 3, 16, 5, 16, 1064, 10, 16, 3, 16, 3, 
	16, 3, 16, 3, 16, 5, 16, 1070, 10, 16, 3, 16, 3, 16, 5, 16, 1074, 10, 16, 
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 1081, 10, 16, 3, 16, 3, 16, 3, 
	16, 3, 16, 3, 16, 3, 16, 5, 16, 1089, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 
	5, 16, 1095, 10, 16, 3, 16, 3, 16, 3, 16, 5, 16, 1100, 10, 16, 3, 16, 5, 
	16, 1103, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16, 1111, 
	10, 16, 12, 16, 14, 16, 1114, 11, 16, 3, 16, 3, 16, 5, 16, 1118, 10, 16, 
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16, 1129, 
	10, 16, 12, 16, 14, 16, 1132, 11, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 
	3, 16, 5, 16, 1140, 10, 16, 3, 17, 3, 17, 5, 17, 1144, 10, 17, 3, 17, 5, 
	17, 1147, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 7, 17, 1153, 10, 17, 12, 
	17, 14, 17, 1156, 11, 17, 3, 17, 3, 17, 5, 17, 1160, 10, 17, 3, 17, 3, 
	17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 1170, 10, 18, 5, 18, 
	1172, 10, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 7, 19, 1180, 10, 
	19, 12, 19, 14, 19, 1183, 11, 19, 3, 19, 3, 19, 5, 19, 1187, 10, 19, 3, 
	20, 3, 20, 3, 20, 5, 20, 1192, 10, 20, 3, 20, 5, 20, 1195, 10, 20, 3, 20, 
	5, 20, 1198, 10, 20, 3, 20, 5, 20, 1201, 10, 20, 3, 20, 3, 20, 3, 20, 5, 
	20, 1206, 10, 20, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 
	1215, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 
	21, 5, 21, 1226, 10, 21, 3, 22, 3, 22, 5, 22, 1230, 10, 22, 3, 22, 3, 22, 
	5, 22, 1234, 10, 22, 3, 23, 3, 23, 3, 23, 5, 23, 1239, 10, 23, 3, 24, 3, 
	24, 3, 24, 7, 24, 1244, 10, 24, 12, 24, 14, 24, 1247, 11, 24, 3, 25, 3, 
	25, 3, 25, 3, 25, 3, 25, 7, 25, 1254, 10, 25, 12, 25, 14, 25, 1257, 11, 
	25, 3, 25, 3, 25, 5, 25, 1261, 10, 25, 3, 26, 3, 26, 3, 26, 3, 26, 7, 26, 
	1267, 10, 26, 12, 26, 14, 26, 1270, 11, 26, 3, 26, 3, 26, 3, 26, 5, 26, 
	1275, 10, 26, 3, 26, 5, 26, 1278, 10, 26, 3, 26, 5, 26, 1281, 10, 26, 3, 
	26, 5, 26, 1284, 10, 26, 5, 26, 1286, 10, 26, 3, 27, 3, 27, 5, 27, 1290, 
	10, 27, 3, 27, 3, 27, 5, 27, 1294, 10, 27, 3, 28, 3, 28, 5, 28, 1298, 10, 
	28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1306, 10, 29, 3, 30, 
	3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 1313, 10, 30, 3, 30, 3, 30, 3, 30, 3, 
	30, 5, 30, 1319, 10, 30, 3, 30, 3, 30, 5, 30, 1323, 10, 30, 5, 30, 1325, 
	10, 30, 3, 31, 3, 31, 3, 31, 5, 31, 1330, 10, 31, 3, 32, 3, 32, 3, 32, 
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 1372, 10, 32, 3, 32, 3, 32, 
	3, 32, 3, 32, 3, 32, 5, 32, 1379, 10, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 
	1416, 10, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 
	34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 1431, 10, 34, 3, 35, 3, 35, 3, 35, 
	3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 1440, 10, 35, 3, 35, 3, 35, 3, 35, 3, 
	35, 5, 35, 1446, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 
	1454, 10, 35, 3, 36, 3, 36, 5, 36, 1458, 10, 36, 3, 36, 3, 36, 3, 36, 3, 
	36, 3, 36, 5, 36, 1465, 10, 36, 3, 36, 3, 36, 5, 36, 1469, 10, 36, 6, 36, 
	1471, 10, 36, 13, 36, 14, 36, 1472, 3, 36, 5, 36, 1476, 10, 36, 3, 36, 
	3, 36, 3, 36, 5, 36, 1481, 10, 36, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36, 1487, 
	10, 36, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1493, 10, 37, 3, 38, 3, 38, 
	3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 1504, 10, 39, 5, 
	39, 1506, 10, 39, 3, 39, 3, 39, 5, 39, 1510, 10, 39, 3, 40, 3, 40, 3, 40, 
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1543, 10, 40, 3, 
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1562, 10, 40, 3, 40, 3, 
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1602, 10, 40, 3, 41, 3, 41, 3, 
	41, 3, 41, 3, 42, 5, 42, 1609, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 
	1615, 10, 42, 3, 43, 5, 43, 1618, 10, 43, 3, 43, 3, 43, 5, 43, 1622, 10, 
	43, 3, 43, 5, 43, 1625, 10, 43, 3, 43, 3, 43, 5, 43, 1629, 10, 43, 3, 43, 
	3, 43, 3, 43, 7, 43, 1634, 10, 43, 12, 43, 14, 43, 1637, 11, 43, 3, 43, 
	3, 43, 5, 43, 1641, 10, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 
	43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 
	3, 43, 3, 43, 3, 43, 5, 43, 1663, 10, 43, 3, 44, 3, 44, 5, 44, 1667, 10, 
	44, 3, 44, 5, 44, 1670, 10, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1675, 10, 44, 
	3, 44, 5, 44, 1678, 10, 44, 3, 44, 3, 44, 5, 44, 1682, 10, 44, 3, 44, 3, 
	44, 5, 44, 1686, 10, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 
	5, 44, 1695, 10, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 
	44, 1704, 10, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1722, 10, 
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1763, 10, 
	44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1769, 10, 44, 3, 44, 5, 44, 1772, 
	10, 44, 5, 44, 1774, 10, 44, 3, 45, 3, 45, 5, 45, 1778, 10, 45, 3, 45, 
	3, 45, 3, 45, 5, 45, 1783, 10, 45, 3, 45, 3, 45, 5, 45, 1787, 10, 45, 3, 
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1795, 10, 45, 3, 45, 3, 45, 
	3, 45, 3, 45, 3, 45, 5, 45, 1802, 10, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1807, 
	10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 
	3, 45, 6, 45, 1819, 10, 45, 13, 45, 14, 45, 1820, 5, 45, 1823, 10, 45, 
	3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 1829, 10, 46, 3, 46, 3, 46, 3, 46, 3, 
	46, 6, 46, 1835, 10, 46, 13, 46, 14, 46, 1836, 3, 46, 3, 46, 5, 46, 1841, 
	10, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1848, 10, 47, 3, 47, 
	3, 47, 3, 47, 3, 47, 5, 47, 1854, 10, 47, 3, 47, 5, 47, 1857, 10, 47, 5, 
	47, 1859, 10, 47, 3, 48, 3, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 50, 3, 50, 
	3, 50, 5, 50, 1870, 10, 50, 3, 50, 3, 50, 5, 50, 1874, 10, 50, 3, 51, 5, 
	51, 1877, 10, 51, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 3, 53, 3, 53, 3, 53, 
	5, 53, 1887, 10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 
	53, 1896, 10, 53, 12, 53, 14, 53, 1899, 11, 53, 3, 53, 3, 53, 3, 53, 3, 
	53, 3, 53, 5, 53, 1906, 10, 53, 3, 53, 3, 53, 5, 53, 1910, 10, 53, 3, 53, 
	3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 
	53, 3, 53, 3, 53, 5, 53, 1926, 10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 
	5, 53, 1933, 10, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 1940, 10, 
	53, 3, 54, 3, 54, 3, 54, 5, 54, 1945, 10, 54, 3, 55, 3, 55, 5, 55, 1949, 
	10, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 
	3, 55, 3, 55, 5, 55, 1962, 10, 55, 3, 55, 3, 55, 5, 55, 1966, 10, 55, 3, 
	56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 1973, 10, 56, 3, 56, 3, 56, 3, 56, 
	3, 56, 3, 56, 3, 56, 5, 56, 1981, 10, 56, 3, 56, 3, 56, 5, 56, 1985, 10, 
	56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 
	1996, 10, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 2003, 10, 57, 3, 
	57, 3, 57, 3, 57, 5, 57, 2008, 10, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 
	5, 58, 2015, 10, 58, 5, 58, 2017, 10, 58, 3, 58, 3, 58, 3, 58, 7, 58, 2022, 
	10, 58, 12, 58, 14, 58, 2025, 11, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 
	3, 58, 7, 58, 2033, 10, 58, 12, 58, 14, 58, 2036, 11, 58, 3, 58, 3, 58, 
	5, 58, 2040, 10, 58, 5, 58, 2042, 10, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 
	58, 5, 58, 2049, 10, 58, 5, 58, 2051, 10, 58, 3, 58, 3, 58, 3, 58, 3, 58, 
	3, 58, 3, 58, 5, 58, 2059, 10, 58, 5, 58, 2061, 10, 58, 3, 58, 3, 58, 3, 
	58, 3, 58, 3, 58, 5, 58, 2068, 10, 58, 5, 58, 2070, 10, 58, 3, 58, 3, 58, 
	5, 58, 2074, 10, 58, 3, 58, 3, 58, 5, 58, 2078, 10, 58, 3, 59, 3, 59, 3, 
	59, 3, 59, 3, 60, 3, 60, 5, 60, 2086, 10, 60, 3, 60, 3, 60, 3, 60, 3, 60, 
	5, 60, 2092, 10, 60, 3, 60, 5, 60, 2095, 10, 60, 7, 60, 2097, 10, 60, 12, 
	60, 14, 60, 2100, 11, 60, 3, 60, 3, 60, 5, 60, 2104, 10, 60, 3, 61, 3, 
	61, 5, 61, 2108, 10, 61, 3, 61, 3, 61, 3, 61, 3, 62, 3, 62, 5, 62, 2115, 
	10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 2122, 10, 62, 3, 62, 
	3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 2129, 10, 62, 3, 62, 3, 62, 3, 62, 3, 
	62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 2141, 10, 62, 3, 63, 
	3, 63, 3, 63, 5, 63, 2146, 10, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 
	63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2160, 10, 63, 3, 63, 
	3, 63, 5, 63, 2164, 10, 63, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2170, 10, 
	64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2177, 10, 64, 3, 64, 3, 64, 
	3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 7, 64, 2186, 10, 64, 12, 64, 14, 64, 
	2189, 11, 64, 5, 64, 2191, 10, 64, 3, 65, 3, 65, 5, 65, 2195, 10, 65, 3, 
	65, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2202, 10, 65, 3, 65, 3, 65, 3, 65, 
	3, 65, 3, 65, 3, 65, 5, 65, 2210, 10, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 
	65, 3, 65, 5, 65, 2218, 10, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 
	3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 2235, 
	10, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 67, 3, 67, 3, 67, 5, 67, 
	2245, 10, 67, 3, 67, 3, 67, 5, 67, 2249, 10, 67, 3, 68, 3, 68, 3, 68, 3, 
	68, 3, 68, 3, 68, 3, 68, 5, 68, 2258, 10, 68, 3, 68, 3, 68, 3, 68, 5, 68, 
	2263, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 2271, 10, 
	68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 7, 68, 
	2282, 10, 68, 12, 68, 14, 68, 2285, 11, 68, 3, 68, 3, 68, 3, 68, 3, 68, 
	3, 68, 7, 68, 2292, 10, 68, 12, 68, 14, 68, 2295, 11, 68, 3, 68, 3, 68, 
	5, 68, 2299, 10, 68, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 
	69, 3, 69, 3, 69, 3, 69, 5, 69, 2312, 10, 69, 3, 69, 3, 69, 3, 69, 3, 69, 
	3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 2324, 10, 69, 3, 70, 3, 
	70, 3, 70, 3, 70, 3, 71, 3, 71, 5, 71, 2332, 10, 71, 3, 71, 3, 71, 3, 71, 
	3, 71, 3, 71, 5, 71, 2339, 10, 71, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 
	72, 5, 72, 2347, 10, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 
	3, 72, 5, 72, 2357, 10, 72, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 
	73, 3, 73, 7, 73, 2367, 10, 73, 12, 73, 14, 73, 2370, 11, 73, 3, 73, 3, 
	73, 3, 73, 3, 73, 5, 73, 2376, 10, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 
	3, 73, 3, 73, 3, 73, 3, 73, 5, 73, 2387, 10, 73, 3, 73, 3, 73, 5, 73, 2391, 
	10, 73, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2398, 10, 74, 3, 74, 
	5, 74, 2401, 10, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2406, 10, 74, 3, 74, 3, 
	74, 5, 74, 2410, 10, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2417, 
	10, 74, 3, 74, 3, 74, 3, 74, 5, 74, 2422, 10, 74, 3, 74, 5, 74, 2425, 10, 
	74, 5, 74, 2427, 10, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 5, 75, 
	2435, 10, 75, 3, 76, 3, 76, 3, 76, 3, 76, 3, 77, 3, 77, 3, 77, 3, 78, 5, 
	78, 2445, 10, 78, 3, 78, 3, 78, 5, 78, 2449, 10, 78, 3, 78, 5, 78, 2452, 
	10, 78, 3, 78, 5, 78, 2455, 10, 78, 3, 78, 3, 78, 5, 78, 2459, 10, 78, 
	3, 78, 3, 78, 3, 78, 3, 79, 3, 79, 5, 79, 2466, 10, 79, 3, 79, 3, 79, 5, 
	79, 2470, 10, 79, 3, 79, 5, 79, 2473, 10, 79, 3, 79, 5, 79, 2476, 10, 79, 
	3, 79, 5, 79, 2479, 10, 79, 3, 80, 3, 80, 3, 80, 3, 80, 7, 80, 2485, 10, 
	80, 12, 80, 14, 80, 2488, 11, 80, 3, 80, 3, 80, 3, 81, 3, 81, 5, 81, 2494, 
	10, 81, 3, 81, 3, 81, 3, 81, 3, 81, 7, 81, 2500, 10, 81, 12, 81, 14, 81, 
	2503, 11, 81, 3, 81, 3, 81, 5, 81, 2507, 10, 81, 3, 81, 5, 81, 2510, 10, 
	81, 3, 81, 5, 81, 2513, 10, 81, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 7, 82, 
	2520, 10, 82, 12, 82, 14, 82, 2523, 11, 82, 3, 82, 3, 82, 3, 83, 3, 83, 
	3, 83, 3, 84, 3, 84, 5, 84, 2532, 10, 84, 3, 84, 3, 84, 5, 84, 2536, 10, 
	84, 3, 84, 3, 84, 5, 84, 2540, 10, 84, 3, 84, 3, 84, 3, 84, 5, 84, 2545, 
	10, 84, 5, 84, 2547, 10, 84, 3, 84, 3, 84, 3, 84, 5, 84, 2552, 10, 84, 
	5, 84, 2554, 10, 84, 3, 84, 5, 84, 2557, 10, 84, 3, 85, 3, 85, 5, 85, 2561, 
	10, 85, 3, 85, 5, 85, 2564, 10, 85, 3, 85, 5, 85, 2567, 10, 85, 3, 85, 
	3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 2575, 10, 85, 3, 85, 3, 85, 5, 
	85, 2579, 10, 85, 5, 85, 2581, 10, 85, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 
	3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 7, 86, 2595, 10, 86, 12, 
	86, 14, 86, 2598, 11, 86, 3, 86, 3, 86, 5, 86, 2602, 10, 86, 6, 86, 2604, 
	10, 86, 13, 86, 14, 86, 2605, 5, 86, 2608, 10, 86, 3, 86, 3, 86, 3, 86, 
	3, 86, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 7, 87, 2621, 10, 
	87, 12, 87, 14, 87, 2624, 11, 87, 5, 87, 2626, 10, 87, 3, 87, 3, 87, 3, 
	87, 3, 87, 3, 87, 3, 87, 7, 87, 2634, 10, 87, 12, 87, 14, 87, 2637, 11, 
	87, 5, 87, 2639, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 
	87, 5, 87, 2659, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 2677, 
	10, 87, 7, 87, 2679, 10, 87, 12, 87, 14, 87, 2682, 11, 87, 3, 87, 5, 87, 
	2685, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 2692, 10, 87, 3, 
	87, 5, 87, 2695, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 
	87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 
	2724, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 
	87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 2754, 
	10, 87, 7, 87, 2756, 10, 87, 12, 87, 14, 87, 2759, 11, 87, 3, 87, 3, 87, 
	5, 87, 2763, 10, 87, 3, 88, 3, 88, 3, 88, 5, 88, 2768, 10, 88, 3, 88, 3, 
	88, 3, 88, 3, 88, 3, 88, 7, 88, 2775, 10, 88, 12, 88, 14, 88, 2778, 11, 
	88, 3, 89, 3, 89, 5, 89, 2782, 10, 89, 3, 89, 3, 89, 3, 89, 5, 89, 2787, 
	10, 89, 3, 89, 3, 89, 5, 89, 2791, 10, 89, 3, 89, 3, 89, 3, 89, 3, 89, 
	3, 89, 5, 89, 2798, 10, 89, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 
	90, 3, 90, 3, 90, 3, 90, 7, 90, 2810, 10, 90, 12, 90, 14, 90, 2813, 11, 
	90, 3, 90, 3, 90, 3, 91, 3, 91, 3, 91, 3, 91, 3, 92, 3, 92, 3, 92, 3, 92, 
	3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 5, 92, 2832, 10, 92, 3, 
	92, 3, 92, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 
	3, 93, 5, 93, 2846, 10, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 
	93, 5, 93, 2855, 10, 93, 3, 93, 3, 93, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 
	3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 
	94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 5, 94, 2881, 10, 94, 3, 94, 
	3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 5, 94, 2890, 10, 94, 3, 94, 3, 
	94, 3, 95, 3, 95, 5, 95, 2896, 10, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 
	3, 95, 3, 95, 7, 95, 2905, 10, 95, 12, 95, 14, 95, 2908, 11, 95, 5, 95, 
	2910, 10, 95, 3, 95, 5, 95, 2913, 10, 95, 3, 96, 3, 96, 3, 96, 3, 96, 3, 
	96, 3, 96, 3, 96, 5, 96, 2922, 10, 96, 3, 97, 3, 97, 3, 97, 3, 97, 5, 97, 
	2928, 10, 97, 3, 97, 3, 97, 3, 97, 5, 97, 2933, 10, 97, 3, 98, 3, 98, 3, 
	98, 5, 98, 2938, 10, 98, 3, 98, 3, 98, 3, 98, 5, 98, 2943, 10, 98, 3, 98, 
	3, 98, 3, 98, 5, 98, 2948, 10, 98, 3, 99, 3, 99, 3, 99, 3, 99, 3, 99, 5, 
	99, 2955, 10, 99, 3, 99, 3, 99, 3, 99, 5, 99, 2960, 10, 99, 3, 100, 3, 
	100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 5, 100, 2969, 10, 100, 3, 
	100, 6, 100, 2972, 10, 100, 13, 100, 14, 100, 2973, 5, 100, 2976, 10, 100, 
	3, 101, 3, 101, 5, 101, 2980, 10, 101, 3, 101, 3, 101, 3, 101, 5, 101, 
	2985, 10, 101, 3, 101, 3, 101, 3, 102, 3, 102, 3, 102, 3, 102, 5, 102, 
	2993, 10, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 
	3, 102, 5, 102, 3003, 10, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 
	3, 102, 3, 102, 3, 102, 5, 102, 3013, 10, 102, 3, 102, 3, 102, 3, 102, 
	5, 102, 3018, 10, 102, 3, 103, 3, 103, 3, 103, 3, 104, 3, 104, 3, 104, 
	3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 5, 104, 3031, 10, 104, 3, 105, 
	3, 105, 3, 105, 3, 105, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 
	3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 
	3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 5, 106, 3057, 10, 106, 3, 106, 
	5, 106, 3060, 10, 106, 3, 106, 5, 106, 3063, 10, 106, 3, 106, 5, 106, 3066, 
	10, 106, 3, 106, 3, 106, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 
	3, 107, 7, 107, 3077, 10, 107, 12, 107, 14, 107, 3080, 11, 107, 3, 107, 
	3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 5, 107, 3089, 10, 107, 
	3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 5, 108, 3097, 10, 108, 
	3, 109, 3, 109, 3, 109, 3, 109, 3, 110, 3, 110, 3, 110, 3, 110, 3, 110, 
	3, 110, 3, 111, 3, 111, 3, 111, 3, 111, 5, 111, 3113, 10, 111, 3, 111, 
	3, 111, 3, 111, 3, 111, 5, 111, 3119, 10, 111, 3, 111, 5, 111, 3122, 10, 
	111, 3, 111, 3, 111, 5, 111, 3126, 10, 111, 3, 112, 3, 112, 3, 112, 3, 
	112, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 7, 113, 3138, 10, 
	113, 12, 113, 14, 113, 3141, 11, 113, 3, 113, 3, 113, 5, 113, 3145, 10, 
	113, 3, 114, 3, 114, 3, 114, 3, 114, 3, 115, 3, 115, 3, 115, 5, 115, 3154, 
	10, 115, 3, 115, 3, 115, 3, 115, 5, 115, 3159, 10, 115, 3, 115, 3, 115, 
	3, 115, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 7, 116, 3169, 10, 116, 
	12, 116, 14, 116, 3172, 11, 116, 3, 116, 5, 116, 3175, 10, 116, 3, 117, 
	3, 117, 5, 117, 3179, 10, 117, 3, 117, 3, 117, 3, 117, 7, 117, 3184, 10, 
	117, 12, 117, 14, 117, 3187, 11, 117, 3, 117, 5, 117, 3190, 10, 117, 3, 
	118, 3, 118, 3, 118, 3, 118, 5, 118, 3196, 10, 118, 3, 118, 3, 118, 3, 
	118, 5, 118, 3201, 10, 118, 3, 118, 3, 118, 3, 119, 3, 119, 5, 119, 3207, 
	10, 119, 3, 119, 3, 119, 3, 119, 3, 119, 3, 119, 3, 119, 5, 119, 3215, 
	10, 119, 3, 119, 5, 119, 3218, 10, 119, 3, 120, 3, 120, 5, 120, 3222, 10, 
	120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 
	120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 3, 
	120, 3, 120, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 
	121, 3, 122, 3, 122, 3, 122, 5, 122, 3254, 10, 122, 3, 122, 3, 122, 7, 
	122, 3258, 10, 122, 12, 122, 14, 122, 3261, 11, 122, 5, 122, 3263, 10, 
	122, 3, 123, 3, 123, 3, 123, 5, 123, 3268, 10, 123, 3, 124, 3, 124, 5, 
	124, 3272, 10, 124, 3, 125, 3, 125, 3, 125, 3, 125, 3, 125, 3, 125, 3, 
	125, 3, 125, 3, 125, 3, 125, 3, 125, 5, 125, 3285, 10, 125, 3, 125, 3, 
	125, 3, 125, 5, 125, 3290, 10, 125, 3, 125, 3, 125, 3, 125, 5, 125, 3295, 
	10, 125, 3, 126, 3, 126, 3, 126, 3, 126, 3, 126, 3, 126, 3, 126, 5, 126, 
	3304, 10, 126, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 
	3, 127, 3, 127, 5, 127, 3315, 10, 127, 3, 127, 5, 127, 3318, 10, 127, 3, 
	128, 3, 128, 3, 128, 5, 128, 3323, 10, 128, 3, 128, 6, 128, 3326, 10, 128, 
	13, 128, 14, 128, 3327, 5, 128, 3330, 10, 128, 3, 129, 3, 129, 5, 129, 
	3334, 10, 129, 3, 130, 3, 130, 3, 130, 3, 130, 5, 130, 3340, 10, 130, 3, 
	130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 7, 130, 3349, 10, 
	130, 12, 130, 14, 130, 3352, 11, 130, 3, 130, 3, 130, 5, 130, 3356, 10, 
	130, 3, 131, 3, 131, 5, 131, 3360, 10, 131, 3, 131, 3, 131, 3, 131, 3, 
	131, 3, 131, 5, 131, 3367, 10, 131, 3, 131, 3, 131, 3, 131, 3, 131, 3, 
	131, 3, 131, 3, 131, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 
	132, 3, 132, 5, 132, 3384, 10, 132, 3, 132, 3, 132, 3, 132, 3, 132, 5, 
	132, 3390, 10, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 7, 132, 3397, 
	10, 132, 12, 132, 14, 132, 3400, 11, 132, 3, 132, 3, 132, 5, 132, 3404, 
	10, 132, 3, 133, 3, 133, 3, 133, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 
	3, 134, 7, 134, 3415, 10, 134, 12, 134, 14, 134, 3418, 11, 134, 3, 134, 
	3, 134, 3, 135, 3, 135, 3, 135, 5, 135, 3425, 10, 135, 3, 135, 3, 135, 
	3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 
	3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 5, 136, 
	3446, 10, 136, 3, 137, 3, 137, 5, 137, 3450, 10, 137, 3, 137, 3, 137, 3, 
	137, 5, 137, 3455, 10, 137, 3, 137, 3, 137, 3, 137, 3, 137, 3, 137, 3, 
	137, 5, 137, 3463, 10, 137, 3, 137, 3, 137, 3, 137, 3, 137, 3, 137, 3, 
	137, 3, 137, 3, 137, 3, 137, 7, 137, 3474, 10, 137, 12, 137, 14, 137, 3477, 
	11, 137, 3, 137, 3, 137, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 
	5, 138, 3532, 10, 138, 3, 139, 3, 139, 3, 139, 3, 140, 3, 140, 3, 140, 
	5, 140, 3540, 10, 140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 7, 140, 
	3547, 10, 140, 12, 140, 14, 140, 3550, 11, 140, 3, 140, 3, 140, 3, 140, 
	3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 7, 140, 3562, 10, 
	140, 12, 140, 14, 140, 3565, 11, 140, 3, 140, 5, 140, 3568, 10, 140, 3, 
	140, 3, 140, 3, 140, 3, 140, 5, 140, 3574, 10, 140, 3, 141, 3, 141, 3, 
	141, 3, 141, 3, 141, 5, 141, 3581, 10, 141, 3, 141, 3, 141, 3, 141, 3, 
	141, 3, 141, 3, 141, 5, 141, 3589, 10, 141, 3, 141, 3, 141, 3, 141, 5, 
	141, 3594, 10, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 
	141, 5, 141, 3603, 10, 141, 5, 141, 3605, 10, 141, 3, 142, 3, 142, 3, 142, 
	7, 142, 3610, 10, 142, 12, 142, 14, 142, 3613, 11, 142, 3, 142, 5, 142, 
	3616, 10, 142, 3, 143, 3, 143, 5, 143, 3620, 10, 143, 3, 143, 3, 143, 3, 
	143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 5, 143, 3631, 10, 
	143, 3, 143, 3, 143, 5, 143, 3635, 10, 143, 3, 143, 3, 143, 3, 143, 3, 
	143, 3, 143, 3, 143, 7, 143, 3643, 10, 143, 12, 143, 14, 143, 3646, 11, 
	143, 3, 143, 3, 143, 5, 143, 3650, 10, 143, 3, 143, 3, 143, 5, 143, 3654, 
	10, 143, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 5, 144, 3661, 10, 144, 
	3, 145, 5, 145, 3664, 10, 145, 3, 145, 3, 145, 3, 145, 3, 145, 3, 145, 
	3, 145, 5, 145, 3672, 10, 145, 3, 145, 3, 145, 3, 145, 5, 145, 3677, 10, 
	145, 3, 145, 3, 145, 3, 145, 5, 145, 3682, 10, 145, 5, 145, 3684, 10, 145, 
	3, 145, 5, 145, 3687, 10, 145, 6, 145, 3689, 10, 145, 13, 145, 14, 145, 
	3690, 3, 145, 3, 145, 3, 145, 3, 145, 5, 145, 3697, 10, 145, 3, 145, 5, 
	145, 3700, 10, 145, 3, 145, 5, 145, 3703, 10, 145, 3, 145, 3, 145, 3, 145, 
	5, 145, 3708, 10, 145, 5, 145, 3710, 10, 145, 3, 145, 3, 145, 5, 145, 3714, 
	10, 145, 3, 145, 5, 145, 3717, 10, 145, 3, 145, 5, 145, 3720, 10, 145, 
	3, 145, 3, 145, 3, 145, 3, 145, 3, 146, 3, 146, 3, 146, 5, 146, 3729, 10, 
	146, 3, 146, 3, 146, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 148, 3, 
	148, 3, 148, 5, 148, 3741, 10, 148, 5, 148, 3743, 10, 148, 3, 148, 3, 148, 
	5, 148, 3747, 10, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 
	3, 148, 3, 148, 5, 148, 3757, 10, 148, 3, 148, 5, 148, 3760, 10, 148, 3, 
	149, 5, 149, 3763, 10, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 
	149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 
	149, 3, 149, 3, 149, 3, 149, 7, 149, 3783, 10, 149, 12, 149, 14, 149, 3786, 
	11, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 7, 149, 3793, 10, 149, 
	12, 149, 14, 149, 3796, 11, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 
	3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 5, 149, 
	3811, 10, 149, 3, 150, 3, 150, 3, 150, 7, 150, 3816, 10, 150, 12, 150, 
	14, 150, 3819, 11, 150, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 152, 
	3, 152, 3, 152, 7, 152, 3829, 10, 152, 12, 152, 14, 152, 3832, 11, 152, 
	3, 153, 3, 153, 5, 153, 3836, 10, 153, 3, 153, 3, 153, 3, 153, 3, 153, 
	3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 5, 153, 
	3850, 10, 153, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 
	5, 154, 3859, 10, 154, 3, 154, 3, 154, 3, 154, 3, 154, 5, 154, 3865, 10, 
	154, 3, 154, 3, 154, 3, 154, 3, 154, 5, 154, 3871, 10, 154, 5, 154, 3873, 
	10, 154, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 5, 155, 3880, 10, 155, 
	3, 156, 3, 156, 3, 156, 5, 156, 3885, 10, 156, 3, 157, 3, 157, 3, 157, 
	7, 157, 3890, 10, 157, 12, 157, 14, 157, 3893, 11, 157, 3, 158, 5, 158, 
	3896, 10, 158, 3, 158, 3, 158, 3, 159, 3, 159, 3, 159, 3, 159, 3, 159, 
	3, 159, 5, 159, 3906, 10, 159, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 
	5, 160, 3913, 10, 160, 5, 160, 3915, 10, 160, 3, 160, 3, 160, 3, 160, 3, 
	160, 3, 160, 5, 160, 3922, 10, 160, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 5, 
	161, 3946, 10, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 5, 161, 3966, 10, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 5, 161, 3976, 10, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 5, 161, 3994, 10, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 5, 161, 4048, 10, 
	161, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 
	162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 5, 162, 4064, 10, 162, 3, 
	162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 5, 162, 4072, 10, 162, 3, 
	162, 3, 162, 3, 162, 5, 162, 4077, 10, 162, 3, 162, 3, 162, 3, 162, 3, 
	162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 
	162, 3, 162, 3, 162, 3, 162, 5, 162, 4095, 10, 162, 3, 163, 3, 163, 5, 
	163, 4099, 10, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 5, 163, 4106, 
	10, 163, 5, 163, 4108, 10, 163, 3, 163, 3, 163, 3, 164, 6, 164, 4113, 10, 
	164, 13, 164, 14, 164, 4114, 3, 164, 5, 164, 4118, 10, 164, 3, 165, 3, 
	165, 3, 165, 3, 165, 3, 166, 3, 166, 3, 166, 3, 166, 3, 166, 7, 166, 4129, 
	10, 166, 12, 166, 14, 166, 4132, 11, 166, 3, 166, 3, 166, 3, 167, 3, 167, 
	3, 167, 3, 168, 3, 168, 3, 168, 3, 169, 3, 169, 3, 169, 3, 169, 7, 169, 
	4146, 10, 169, 12, 169, 14, 169, 4149, 11, 169, 5, 169, 4151, 10, 169, 
	3, 169, 5, 169, 4154, 10, 169, 3, 169, 5, 169, 4157, 10, 169, 3, 169, 3, 
	169, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 7, 170, 4166, 10, 170, 12, 
	170, 14, 170, 4169, 11, 170, 3, 171, 3, 171, 7, 171, 4173, 10, 171, 12, 
	171, 14, 171, 4176, 11, 171, 3, 171, 3, 171, 5, 171, 4180, 10, 171, 3, 
	172, 5, 172, 4183, 10, 172, 3, 172, 5, 172, 4186, 10, 172, 3, 172, 3, 172, 
	3, 172, 5, 172, 4191, 10, 172, 3, 173, 3, 173, 3, 174, 5, 174, 4196, 10, 
	174, 3, 174, 3, 174, 5, 174, 4200, 10, 174, 3, 174, 3, 174, 7, 174, 4204, 
	10, 174, 12, 174, 14, 174, 4207, 11, 174, 3, 175, 3, 175, 3, 175, 3, 175, 
	3, 175, 3, 175, 3, 175, 5, 175, 4216, 10, 175, 3, 175, 3, 175, 3, 175, 
	3, 175, 3, 175, 5, 175, 4223, 10, 175, 3, 175, 3, 175, 3, 175, 3, 175, 
	5, 175, 4229, 10, 175, 3, 175, 3, 175, 5, 175, 4233, 10, 175, 3, 175, 3, 
	175, 3, 175, 3, 175, 5, 175, 4239, 10, 175, 3, 175, 3, 175, 3, 175, 3, 
	175, 5, 175, 4245, 10, 175, 3, 176, 5, 176, 4248, 10, 176, 3, 176, 3, 176, 
	3, 177, 5, 177, 4253, 10, 177, 3, 177, 3, 177, 3, 178, 3, 178, 3, 179, 
	3, 179, 5, 179, 4261, 10, 179, 3, 179, 5, 179, 4264, 10, 179, 3, 179, 3, 
	179, 5, 179, 4268, 10, 179, 3, 180, 3, 180, 3, 180, 3, 180, 3, 180, 3, 
	180, 5, 180, 4276, 10, 180, 3, 180, 3, 180, 5, 180, 4280, 10, 180, 3, 180, 
	3, 180, 3, 180, 3, 180, 7, 180, 4286, 10, 180, 12, 180, 14, 180, 4289, 
	11, 180, 5, 180, 4291, 10, 180, 3, 180, 3, 180, 5, 180, 4295, 10, 180, 
	3, 180, 3, 180, 3, 180, 5, 180, 4300, 10, 180, 3, 181, 3, 181, 3, 181, 
	3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 
	3, 181, 3, 181, 7, 181, 4316, 10, 181, 12, 181, 14, 181, 4319, 11, 181, 
	5, 181, 4321, 10, 181, 3, 181, 3, 181, 5, 181, 4325, 10, 181, 3, 181, 3, 
	181, 3, 181, 5, 181, 4330, 10, 181, 5, 181, 4332, 10, 181, 3, 182, 3, 182, 
	5, 182, 4336, 10, 182, 3, 182, 3, 182, 3, 182, 3, 182, 5, 182, 4342, 10, 
	182, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183, 5, 183, 4351, 
	10, 183, 3, 184, 3, 184, 3, 184, 3, 184, 3, 185, 3, 185, 3, 185, 3, 185, 
	3, 185, 3, 185, 5, 185, 4363, 10, 185, 3, 185, 3, 185, 3, 185, 5, 185, 
	4368, 10, 185, 3, 185, 3, 185, 3, 185, 3, 185, 3, 185, 3, 185, 5, 185, 
	4376, 10, 185, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 
	3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186, 
	4393, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186, 4399, 10, 186, 3, 
	187, 3, 187, 5, 187, 4403, 10, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 
	187, 3, 187, 5, 187, 4411, 10, 187, 3, 188, 3, 188, 3, 188, 3, 188, 3, 
	188, 3, 188, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 
	190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 7, 190, 4433, 10, 
	190, 12, 190, 14, 190, 4436, 11, 190, 3, 190, 3, 190, 3, 190, 3, 190, 7, 
	190, 4442, 10, 190, 12, 190, 14, 190, 4445, 11, 190, 5, 190, 4447, 10, 
	190, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 
	191, 5, 191, 4458, 10, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 5, 
	191, 4465, 10, 191, 3, 191, 3, 191, 3, 191, 5, 191, 4470, 10, 191, 5, 191, 
	4472, 10, 191, 3, 191, 5, 191, 4475, 10, 191, 3, 191, 3, 191, 5, 191, 4479, 
	10, 191, 3, 192, 3, 192, 3, 192, 3, 192, 3, 192, 5, 192, 4486, 10, 192, 
	3, 192, 3, 192, 3, 192, 5, 192, 4491, 10, 192, 5, 192, 4493, 10, 192, 3, 
	192, 3, 192, 3, 193, 3, 193, 3, 193, 5, 193, 4500, 10, 193, 3, 193, 3, 
	193, 3, 193, 3, 193, 5, 193, 4506, 10, 193, 3, 194, 3, 194, 3, 194, 3, 
	194, 5, 194, 4512, 10, 194, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 3, 
	194, 3, 194, 5, 194, 4521, 10, 194, 3, 194, 3, 194, 3, 194, 3, 194, 7, 
	194, 4527, 10, 194, 12, 194, 14, 194, 4530, 11, 194, 3, 195, 3, 195, 3, 
	195, 3, 195, 3, 195, 3, 195, 5, 195, 4538, 10, 195, 3, 195, 3, 195, 3, 
	195, 5, 195, 4543, 10, 195, 3, 195, 5, 195, 4546, 10, 195, 3, 195, 3, 195, 
	3, 195, 3, 195, 3, 195, 3, 195, 5, 195, 4554, 10, 195, 3, 195, 3, 195, 
	3, 195, 3, 195, 3, 195, 5, 195, 4561, 10, 195, 3, 195, 3, 195, 3, 195, 
	5, 195, 4566, 10, 195, 5, 195, 4568, 10, 195, 3, 195, 5, 195, 4571, 10, 
	195, 3, 195, 3, 195, 3, 195, 3, 195, 5, 195, 4577, 10, 195, 3, 196, 3, 
	196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 5, 196, 4587, 10, 
	196, 3, 197, 3, 197, 3, 197, 5, 197, 4592, 10, 197, 3, 197, 3, 197, 3, 
	197, 3, 197, 5, 197, 4598, 10, 197, 3, 198, 5, 198, 4601, 10, 198, 3, 198, 
	3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 199, 
	3, 199, 3, 199, 3, 199, 3, 199, 5, 199, 4617, 10, 199, 3, 200, 3, 200, 
	3, 200, 3, 200, 3, 200, 3, 200, 3, 200, 7, 200, 4626, 10, 200, 12, 200, 
	14, 200, 4629, 11, 200, 3, 200, 3, 200, 3, 200, 5, 200, 4634, 10, 200, 
	3, 200, 5, 200, 4637, 10, 200, 3, 201, 3, 201, 3, 201, 3, 201, 3, 202, 
	3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 7, 202, 
	4652, 10, 202, 12, 202, 14, 202, 4655, 11, 202, 5, 202, 4657, 10, 202, 
	3, 203, 5, 203, 4660, 10, 203, 3, 203, 3, 203, 5, 203, 4664, 10, 203, 3, 
	204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 5, 204, 4672, 10, 204, 3, 
	204, 3, 204, 3, 204, 3, 204, 5, 204, 4678, 10, 204, 3, 205, 3, 205, 3, 
	205, 3, 205, 3, 205, 3, 205, 3, 206, 3, 206, 5, 206, 4688, 10, 206, 3, 
	207, 3, 207, 3, 207, 3, 207, 5, 207, 4694, 10, 207, 3, 207, 3, 207, 5, 
	207, 4698, 10, 207, 3, 207, 5, 207, 4701, 10, 207, 3, 207, 3, 207, 3, 207, 
	3, 207, 3, 207, 5, 207, 4708, 10, 207, 5, 207, 4710, 10, 207, 3, 207, 3, 
	207, 5, 207, 4714, 10, 207, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 
	208, 5, 208, 4722, 10, 208, 3, 208, 3, 208, 5, 208, 4726, 10, 208, 3, 208, 
	3, 208, 5, 208, 4730, 10, 208, 3, 208, 5, 208, 4733, 10, 208, 3, 208, 3, 
	208, 3, 208, 3, 208, 3, 208, 5, 208, 4740, 10, 208, 5, 208, 4742, 10, 208, 
	3, 209, 3, 209, 5, 209, 4746, 10, 209, 3, 209, 7, 209, 4749, 10, 209, 12, 
	209, 14, 209, 4752, 11, 209, 3, 210, 5, 210, 4755, 10, 210, 3, 210, 3, 
	210, 3, 210, 5, 210, 4760, 10, 210, 3, 210, 3, 210, 5, 210, 4764, 10, 210, 
	3, 210, 3, 210, 5, 210, 4768, 10, 210, 3, 210, 3, 210, 3, 210, 5, 210, 
	4773, 10, 210, 3, 210, 3, 210, 3, 210, 5, 210, 4778, 10, 210, 3, 210, 3, 
	210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 4788, 10, 
	210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 4796, 10, 
	210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 
	210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 4814, 
	10, 210, 3, 211, 3, 211, 5, 211, 4818, 10, 211, 3, 211, 5, 211, 4821, 10, 
	211, 3, 211, 5, 211, 4824, 10, 211, 3, 211, 5, 211, 4827, 10, 211, 3, 211, 
	3, 211, 5, 211, 4831, 10, 211, 3, 211, 3, 211, 5, 211, 4835, 10, 211, 3, 
	211, 3, 211, 5, 211, 4839, 10, 211, 3, 211, 3, 211, 5, 211, 4843, 10, 211, 
	3, 211, 5, 211, 4846, 10, 211, 3, 211, 3, 211, 3, 211, 5, 211, 4851, 10, 
	211, 3, 211, 3, 211, 5, 211, 4855, 10, 211, 3, 211, 5, 211, 4858, 10, 211, 
	3, 212, 3, 212, 3, 212, 3, 213, 3, 213, 3, 213, 3, 213, 3, 214, 3, 214, 
	3, 214, 3, 214, 7, 214, 4871, 10, 214, 12, 214, 14, 214, 4874, 11, 214, 
	3, 214, 3, 214, 3, 215, 3, 215, 5, 215, 4880, 10, 215, 3, 215, 3, 215, 
	3, 215, 3, 216, 3, 216, 3, 216, 5, 216, 4888, 10, 216, 3, 216, 6, 216, 
	4891, 10, 216, 13, 216, 14, 216, 4892, 5, 216, 4895, 10, 216, 3, 217, 3, 
	217, 5, 217, 4899, 10, 217, 3, 217, 3, 217, 3, 217, 5, 217, 4904, 10, 217, 
	3, 217, 5, 217, 4907, 10, 217, 3, 218, 3, 218, 3, 218, 5, 218, 4912, 10, 
	218, 3, 219, 5, 219, 4915, 10, 219, 3, 219, 6, 219, 4918, 10, 219, 13, 
	219, 14, 219, 4919, 3, 219, 5, 219, 4923, 10, 219, 3, 219, 3, 219, 5, 219, 
	4927, 10, 219, 3, 219, 3, 219, 3, 219, 5, 219, 4932, 10, 219, 3, 219, 3, 
	219, 3, 219, 3, 219, 5, 219, 4938, 10, 219, 3, 220, 3, 220, 5, 220, 4942, 
	10, 220, 3, 220, 3, 220, 5, 220, 4946, 10, 220, 3, 220, 3, 220, 3, 220, 
	5, 220, 4951, 10, 220, 3, 220, 3, 220, 5, 220, 4955, 10, 220, 5, 220, 4957, 
	10, 220, 3, 221, 5, 221, 4960, 10, 221, 3, 221, 3, 221, 5, 221, 4964, 10, 
	221, 3, 221, 3, 221, 5, 221, 4968, 10, 221, 3, 221, 3, 221, 3, 221, 5, 
	221, 4973, 10, 221, 3, 221, 3, 221, 5, 221, 4977, 10, 221, 3, 221, 5, 221, 
	4980, 10, 221, 3, 221, 5, 221, 4983, 10, 221, 3, 221, 5, 221, 4986, 10, 
	221, 3, 222, 5, 222, 4989, 10, 222, 3, 222, 3, 222, 5, 222, 4993, 10, 222, 
	3, 222, 3, 222, 5, 222, 4997, 10, 222, 3, 222, 3, 222, 5, 222, 5001, 10, 
	222, 3, 222, 3, 222, 5, 222, 5005, 10, 222, 3, 222, 5, 222, 5008, 10, 222, 
	3, 222, 5, 222, 5011, 10, 222, 3, 222, 5, 222, 5014, 10, 222, 3, 222, 3, 
	222, 3, 222, 3, 222, 5, 222, 5020, 10, 222, 3, 222, 3, 222, 5, 222, 5024, 
	10, 222, 3, 222, 5, 222, 5027, 10, 222, 3, 223, 3, 223, 3, 223, 5, 223, 
	5032, 10, 223, 3, 223, 3, 223, 3, 223, 5, 223, 5037, 10, 223, 3, 223, 3, 
	223, 3, 224, 3, 224, 3, 224, 5, 224, 5044, 10, 224, 3, 225, 3, 225, 3, 
	225, 3, 225, 5, 225, 5050, 10, 225, 3, 225, 3, 225, 3, 226, 3, 226, 3, 
	226, 3, 226, 5, 226, 5058, 10, 226, 3, 227, 3, 227, 3, 227, 3, 227, 3, 
	227, 7, 227, 5065, 10, 227, 12, 227, 14, 227, 5068, 11, 227, 3, 227, 3, 
	227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 227, 3, 
	227, 3, 227, 3, 227, 3, 227, 3, 227, 5, 227, 5085, 10, 227, 3, 228, 3, 
	228, 3, 228, 3, 228, 7, 228, 5091, 10, 228, 12, 228, 14, 228, 5094, 11, 
	228, 3, 228, 3, 228, 3, 229, 3, 229, 3, 229, 3, 229, 7, 229, 5102, 10, 
	229, 12, 229, 14, 229, 5105, 11, 229, 5, 229, 5107, 10, 229, 3, 229, 3, 
	229, 3, 229, 5, 229, 5112, 10, 229, 3, 230, 3, 230, 3, 230, 5, 230, 5117, 
	10, 230, 3, 231, 3, 231, 3, 231, 3, 231, 3, 232, 3, 232, 3, 232, 3, 232, 
	3, 232, 7, 232, 5128, 10, 232, 12, 232, 14, 232, 5131, 11, 232, 3, 232, 
	3, 232, 3, 233, 3, 233, 5, 233, 5137, 10, 233, 3, 234, 3, 234, 3, 234, 
	5, 234, 5142, 10, 234, 3, 235, 3, 235, 3, 235, 3, 235, 3, 235, 7, 235, 
	5149, 10, 235, 12, 235, 14, 235, 5152, 11, 235, 3, 235, 3, 235, 3, 236, 
	5, 236, 5157, 10, 236, 3, 236, 3, 236, 5, 236, 5161, 10, 236, 3, 237, 3, 
	237, 5, 237, 5165, 10, 237, 3, 238, 3, 238, 3, 238, 3, 238, 7, 238, 5171, 
	10, 238, 12, 238, 14, 238, 5174, 11, 238, 3, 238, 3, 238, 3, 239, 3, 239, 
	3, 239, 3, 239, 3, 239, 7, 239, 5183, 10, 239, 12, 239, 14, 239, 5186, 
	11, 239, 5, 239, 5188, 10, 239, 3, 240, 3, 240, 3, 240, 5, 240, 5193, 10, 
	240, 3, 240, 7, 240, 5196, 10, 240, 12, 240, 14, 240, 5199, 11, 240, 3, 
	240, 5, 240, 5202, 10, 240, 3, 241, 3, 241, 3, 241, 5, 241, 5207, 10, 241, 
	3, 241, 5, 241, 5210, 10, 241, 3, 241, 7, 241, 5213, 10, 241, 12, 241, 
	14, 241, 5216, 11, 241, 3, 242, 3, 242, 3, 242, 3, 243, 3, 243, 5, 243, 
	5223, 10, 243, 3, 243, 3, 243, 5, 243, 5227, 10, 243, 3, 243, 5, 243, 5230, 
	10, 243, 3, 244, 3, 244, 3, 244, 5, 244, 5235, 10, 244, 3, 244, 3, 244, 
	3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 7, 244, 5246, 10, 
	244, 12, 244, 14, 244, 5249, 11, 244, 3, 244, 3, 244, 3, 244, 3, 244, 5, 
	244, 5255, 10, 244, 3, 244, 3, 244, 3, 244, 5, 244, 5260, 10, 244, 3, 244, 
	3, 244, 3, 244, 5, 244, 5265, 10, 244, 3, 244, 3, 244, 3, 244, 3, 244, 
	3, 244, 7, 244, 5272, 10, 244, 12, 244, 14, 244, 5275, 11, 244, 3, 244, 
	3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 5, 244, 5283, 10, 244, 3, 244, 
	5, 244, 5286, 10, 244, 3, 244, 3, 244, 3, 244, 3, 244, 5, 244, 5292, 10, 
	244, 3, 244, 5, 244, 5295, 10, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 
	244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 5, 244, 5309, 
	10, 244, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 
	3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 5, 245, 5324, 10, 245, 3, 246, 
	3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 
	3, 246, 3, 246, 3, 246, 5, 246, 5339, 10, 246, 3, 247, 3, 247, 3, 248, 
	5, 248, 5344, 10, 248, 3, 248, 5, 248, 5347, 10, 248, 3, 248, 3, 248, 3, 
	248, 3, 248, 5, 248, 5353, 10, 248, 5, 248, 5355, 10, 248, 3, 249, 3, 249, 
	3, 249, 3, 249, 3, 250, 3, 250, 3, 250, 7, 250, 5364, 10, 250, 12, 250, 
	14, 250, 5367, 11, 250, 3, 251, 3, 251, 3, 251, 3, 251, 7, 251, 5373, 10, 
	251, 12, 251, 14, 251, 5376, 11, 251, 3, 251, 3, 251, 3, 252, 3, 252, 3, 
	252, 5, 252, 5383, 10, 252, 3, 253, 3, 253, 3, 253, 5, 253, 5388, 10, 253, 
	3, 254, 3, 254, 3, 254, 3, 255, 3, 255, 3, 255, 3, 255, 3, 255, 5, 255, 
	5398, 10, 255, 3, 256, 3, 256, 3, 256, 3, 256, 3, 256, 3, 256, 3, 256, 
	5, 256, 5407, 10, 256, 3, 257, 3, 257, 3, 257, 3, 258, 3, 258, 3, 258, 
	3, 258, 5, 258, 5416, 10, 258, 3, 259, 3, 259, 3, 259, 3, 259, 3, 259, 
	5, 259, 5423, 10, 259, 3, 260, 3, 260, 3, 260, 3, 260, 3, 260, 5, 260, 
	5430, 10, 260, 3, 261, 3, 261, 3, 261, 3, 261, 3, 262, 3, 262, 3, 262, 
	3, 262, 3, 263, 3, 263, 3, 263, 3, 263, 3, 263, 3, 263, 3, 263, 3, 263, 
	3, 263, 5, 263, 5449, 10, 263, 5, 263, 5451, 10, 263, 3, 264, 3, 264, 3, 
	265, 3, 265, 3, 265, 3, 265, 3, 265, 7, 265, 5460, 10, 265, 12, 265, 14, 
	265, 5463, 11, 265, 3, 266, 3, 266, 3, 267, 3, 267, 3, 267, 3, 268, 3, 
	268, 5, 268, 5472, 10, 268, 3, 268, 5, 268, 5475, 10, 268, 3, 269, 3, 269, 
	3, 270, 6, 270, 5480, 10, 270, 13, 270, 14, 270, 5481, 3, 270, 7, 270, 
	5485, 10, 270, 12, 270, 14, 270, 5488, 11, 270, 3, 270, 3, 270, 5, 270, 
	5492, 10, 270, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 
	3, 271, 5, 271, 5502, 10, 271, 3, 271, 3, 271, 5, 271, 5506, 10, 271, 3, 
	271, 5, 271, 5509, 10, 271, 3, 272, 3, 272, 5, 272, 5513, 10, 272, 3, 272, 
	3, 272, 5, 272, 5517, 10, 272, 3, 272, 3, 272, 3, 272, 5, 272, 5522, 10, 
	272, 3, 273, 3, 273, 5, 273, 5526, 10, 273, 3, 273, 3, 273, 5, 273, 5530, 
	10, 273, 3, 273, 5, 273, 5533, 10, 273, 3, 274, 3, 274, 5, 274, 5537, 10, 
	274, 3, 274, 3, 274, 3, 274, 3, 274, 5, 274, 5543, 10, 274, 3, 275, 3, 
	275, 5, 275, 5547, 10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 5, 275, 5553, 
	10, 275, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 
	3, 276, 3, 276, 5, 276, 5565, 10, 276, 3, 276, 3, 276, 3, 276, 3, 276, 
	3, 276, 3, 276, 5, 276, 5573, 10, 276, 3, 276, 5, 276, 5576, 10, 276, 3, 
	276, 3, 276, 5, 276, 5580, 10, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 
	276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 
	276, 5, 276, 5596, 10, 276, 3, 276, 3, 276, 3, 277, 5, 277, 5601, 10, 277, 
	3, 277, 3, 277, 5, 277, 5605, 10, 277, 3, 278, 3, 278, 3, 278, 5, 278, 
	5610, 10, 278, 3, 279, 3, 279, 3, 279, 5, 279, 5615, 10, 279, 3, 280, 3, 
	280, 3, 280, 5, 280, 5620, 10, 280, 3, 281, 3, 281, 3, 281, 3, 281, 3, 
	281, 5, 281, 5627, 10, 281, 3, 282, 3, 282, 3, 283, 3, 283, 3, 284, 3, 
	284, 3, 285, 3, 285, 3, 286, 3, 286, 3, 287, 3, 287, 3, 287, 3, 287, 3, 
	287, 5, 287, 5644, 10, 287, 3, 288, 3, 288, 3, 288, 7, 288, 5649, 10, 288, 
	12, 288, 14, 288, 5652, 11, 288, 3, 289, 5, 289, 5655, 10, 289, 3, 289, 
	3, 289, 3, 289, 5, 289, 5660, 10, 289, 3, 289, 6, 289, 5663, 10, 289, 13, 
	289, 14, 289, 5664, 5, 289, 5667, 10, 289, 3, 290, 3, 290, 5, 290, 5671, 
	10, 290, 3, 290, 3, 290, 3, 291, 3, 291, 3, 291, 5, 291, 5678, 10, 291, 
	3, 291, 5, 291, 5681, 10, 291, 3, 291, 3, 291, 3, 291, 5, 291, 5686, 10, 
	291, 3, 291, 3, 291, 5, 291, 5690, 10, 291, 3, 291, 3, 291, 3, 291, 3, 
	291, 5, 291, 5696, 10, 291, 3, 291, 3, 291, 3, 291, 3, 291, 5, 291, 5702, 
	10, 291, 3, 291, 5, 291, 5705, 10, 291, 3, 291, 5, 291, 5708, 10, 291, 
	3, 291, 3, 291, 5, 291, 5712, 10, 291, 3, 291, 5, 291, 5715, 10, 291, 3, 
	291, 3, 291, 5, 291, 5719, 10, 291, 3, 291, 5, 291, 5722, 10, 291, 3, 291, 
	3, 291, 5, 291, 5726, 10, 291, 3, 291, 3, 291, 3, 291, 3, 291, 5, 291, 
	5732, 10, 291, 3, 291, 3, 291, 3, 291, 5, 291, 5737, 10, 291, 3, 291, 3, 
	291, 5, 291, 5741, 10, 291, 3, 291, 3, 291, 3, 291, 5, 291, 5746, 10, 291, 
	3, 291, 3, 291, 5, 291, 5750, 10, 291, 3, 291, 3, 291, 3, 291, 3, 291, 
	3, 291, 7, 291, 5757, 10, 291, 12, 291, 14, 291, 5760, 11, 291, 3, 291, 
	3, 291, 5, 291, 5764, 10, 291, 5, 291, 5766, 10, 291, 3, 292, 3, 292, 3, 
	292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 
	292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 
	292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 3, 292, 5, 292, 5795, 10, 
	292, 3, 293, 3, 293, 3, 293, 3, 293, 3, 294, 3, 294, 3, 294, 3, 294, 5, 
	294, 5805, 10, 294, 3, 294, 3, 294, 3, 295, 3, 295, 3, 295, 3, 295, 3, 
	295, 5, 295, 5814, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 6, 295, 5820, 
	10, 295, 13, 295, 14, 295, 5821, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 5834, 10, 295, 3, 295, 
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 
	3, 295, 5, 295, 5856, 10, 295, 3, 295, 3, 295, 5, 295, 5860, 10, 295, 3, 
	295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 5868, 10, 295, 3, 
	295, 3, 295, 3, 295, 3, 295, 5, 295, 5874, 10, 295, 3, 295, 3, 295, 3, 
	295, 5, 295, 5879, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 5885, 
	10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 
	3, 295, 3, 295, 5, 295, 5897, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 5917, 10, 295, 3, 295, 
	3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 7, 295, 5925, 10, 295, 12, 295, 
	14, 295, 5928, 11, 295, 5, 295, 5930, 10, 295, 3, 295, 3, 295, 3, 295, 
	3, 295, 3, 295, 5, 295, 5937, 10, 295, 3, 295, 3, 295, 5, 295, 5941, 10, 
	295, 3, 295, 3, 295, 3, 295, 5, 295, 5946, 10, 295, 3, 295, 3, 295, 3, 
	295, 3, 295, 5, 295, 5952, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 5, 
	295, 5958, 10, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 295, 3, 
	295, 3, 295, 3, 295, 7, 295, 5969, 10, 295, 12, 295, 14, 295, 5972, 11, 
	295, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 5, 296, 5979, 10, 296, 3, 
	296, 3, 296, 3, 296, 3, 296, 6, 296, 5985, 10, 296, 13, 296, 14, 296, 5986, 
	3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 5, 296, 
	5997, 10, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 
	3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 
	3, 296, 3, 296, 3, 296, 5, 296, 6018, 10, 296, 3, 296, 3, 296, 3, 296, 
	3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 3, 296, 5, 296, 
	6031, 10, 296, 3, 296, 3, 296, 3, 296, 3, 296, 5, 296, 6037, 10, 296, 3, 
	296, 3, 296, 3, 296, 3, 296, 5, 296, 6043, 10, 296, 3, 296, 3, 296, 3, 
	296, 3, 296, 3, 296, 7, 296, 6050, 10, 296, 12, 296, 14, 296, 6053, 11, 
	296, 3, 297, 3, 297, 3, 297, 3, 297, 3, 297, 3, 297, 3, 297, 3, 297, 5, 
	297, 6063, 10, 297, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 298, 3, 
	298, 3, 298, 5, 298, 6073, 10, 298, 3, 299, 3, 299, 3, 299, 3, 299, 3, 
	299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 300, 3, 
	300, 3, 300, 3, 300, 3, 300, 5, 300, 6092, 10, 300, 3, 300, 3, 300, 3, 
	300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 3, 300, 5, 
	300, 6105, 10, 300, 3, 301, 3, 301, 3, 301, 5, 301, 6110, 10, 301, 3, 302, 
	3, 302, 3, 303, 3, 303, 3, 304, 3, 304, 5, 304, 6118, 10, 304, 3, 304, 
	3, 304, 3, 304, 3, 304, 3, 304, 6, 304, 6125, 10, 304, 13, 304, 14, 304, 
	6126, 3, 304, 3, 304, 5, 304, 6131, 10, 304, 3, 304, 3, 304, 3, 305, 3, 
	305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 305, 3, 306, 3, 306, 3, 306, 5, 
	306, 6145, 10, 306, 3, 306, 3, 306, 3, 306, 7, 306, 6150, 10, 306, 12, 
	306, 14, 306, 6153, 11, 306, 3, 306, 5, 306, 6156, 10, 306, 5, 306, 6158, 
	10, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 5, 306, 
	6167, 10, 306, 3, 306, 5, 306, 6170, 10, 306, 3, 306, 3, 306, 3, 306, 5, 
	306, 6175, 10, 306, 5, 306, 6177, 10, 306, 3, 306, 3, 306, 3, 306, 3, 306, 
	3, 306, 3, 306, 5, 306, 6185, 10, 306, 3, 307, 5, 307, 6188, 10, 307, 3, 
	307, 3, 307, 3, 307, 5, 307, 6193, 10, 307, 3, 307, 3, 307, 3, 308, 3, 
	308, 3, 309, 3, 309, 3, 309, 3, 309, 3, 309, 7, 309, 6204, 10, 309, 12, 
	309, 14, 309, 6207, 11, 309, 3, 309, 3, 309, 3, 309, 3, 309, 3, 309, 3, 
	309, 3, 309, 7, 309, 6216, 10, 309, 12, 309, 14, 309, 6219, 11, 309, 5, 
	309, 6221, 10, 309, 3, 309, 5, 309, 6224, 10, 309, 3, 310, 3, 310, 3, 310, 
	3, 310, 5, 310, 6230, 10, 310, 3, 310, 3, 310, 3, 310, 3, 310, 3, 311, 
	3, 311, 3, 311, 3, 311, 3, 311, 3, 311, 5, 311, 6242, 10, 311, 3, 312, 
	3, 312, 3, 312, 5, 312, 6247, 10, 312, 3, 312, 3, 312, 5, 312, 6251, 10, 
	312, 3, 312, 3, 312, 5, 312, 6255, 10, 312, 3, 312, 3, 312, 5, 312, 6259, 
	10, 312, 5, 312, 6261, 10, 312, 3, 313, 3, 313, 3, 313, 5, 313, 6266, 10, 
	313, 3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 5, 313, 6273, 10, 313, 3, 
	313, 3, 313, 3, 313, 5, 313, 6278, 10, 313, 5, 313, 6280, 10, 313, 3, 313, 
	3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 7, 313, 6289, 10, 313, 
	12, 313, 14, 313, 6292, 11, 313, 3, 313, 3, 313, 5, 313, 6296, 10, 313, 
	3, 313, 3, 313, 5, 313, 6300, 10, 313, 3, 313, 3, 313, 3, 313, 3, 313, 
	3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 
	3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 5, 313, 6320, 10, 313, 3, 313, 
	3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 3, 313, 5, 313, 6330, 10, 
	313, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 
	314, 3, 314, 5, 314, 6342, 10, 314, 3, 314, 3, 314, 3, 314, 3, 314, 5, 
	314, 6348, 10, 314, 7, 314, 6350, 10, 314, 12, 314, 14, 314, 6353, 11, 
	314, 3, 314, 3, 314, 5, 314, 6357, 10, 314, 3, 314, 3, 314, 7, 314, 6361, 
	10, 314, 12, 314, 14, 314, 6364, 11, 314, 3, 314, 3, 314, 3, 314, 3, 314, 
	3, 314, 3, 314, 3, 314, 5, 314, 6373, 10, 314, 3, 314, 3, 314, 3, 314, 
	3, 314, 5, 314, 6379, 10, 314, 7, 314, 6381, 10, 314, 12, 314, 14, 314, 
	6384, 11, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 
	3, 314, 5, 314, 6394, 10, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 
	3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 5, 314, 6406, 10, 314, 3, 314, 
	3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 5, 314, 6414, 10, 314, 5, 314, 
	6416, 10, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 
	3, 314, 5, 314, 6426, 10, 314, 3, 314, 3, 314, 3, 314, 5, 314, 6431, 10, 
	314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 
	314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 
	314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 
	314, 3, 314, 7, 314, 6461, 10, 314, 12, 314, 14, 314, 6464, 11, 314, 3, 
	314, 3, 314, 3, 314, 5, 314, 6469, 10, 314, 3, 314, 3, 314, 3, 314, 3, 
	314, 5, 314, 6475, 10, 314, 3, 314, 3, 314, 3, 314, 5, 314, 6480, 10, 314, 
	3, 314, 3, 314, 3, 314, 3, 314, 7, 314, 6486, 10, 314, 12, 314, 14, 314, 
	6489, 11, 314, 3, 314, 3, 314, 5, 314, 6493, 10, 314, 3, 315, 3, 315, 3, 
	315, 3, 315, 5, 315, 6499, 10, 315, 3, 315, 3, 315, 5, 315, 6503, 10, 315, 
	3, 315, 5, 315, 6506, 10, 315, 3, 315, 5, 315, 6509, 10, 315, 3, 315, 3, 
	315, 5, 315, 6513, 10, 315, 3, 316, 3, 316, 3, 316, 3, 316, 5, 316, 6519, 
	10, 316, 3, 316, 3, 316, 3, 317, 3, 317, 3, 317, 3, 317, 3, 317, 3, 317, 
	3, 318, 3, 318, 5, 318, 6531, 10, 318, 3, 318, 5, 318, 6534, 10, 318, 3, 
	318, 5, 318, 6537, 10, 318, 3, 318, 5, 318, 6540, 10, 318, 3, 318, 3, 318, 
	3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 5, 319, 6551, 10, 
	319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 3, 319, 5, 319, 6560, 
	10, 319, 5, 319, 6562, 10, 319, 3, 320, 3, 320, 3, 320, 3, 320, 3, 320, 
	5, 320, 6569, 10, 320, 3, 321, 3, 321, 3, 321, 5, 321, 6574, 10, 321, 3, 
	322, 3, 322, 3, 322, 5, 322, 6579, 10, 322, 3, 322, 3, 322, 3, 322, 5, 
	322, 6584, 10, 322, 7, 322, 6586, 10, 322, 12, 322, 14, 322, 6589, 11, 
	322, 5, 322, 6591, 10, 322, 3, 322, 3, 322, 3, 323, 3, 323, 3, 323, 3, 
	323, 3, 323, 3, 323, 3, 323, 5, 323, 6602, 10, 323, 5, 323, 6604, 10, 323, 
	3, 324, 3, 324, 3, 324, 3, 324, 3, 324, 5, 324, 6611, 10, 324, 5, 324, 
	6613, 10, 324, 3, 325, 3, 325, 3, 326, 3, 326, 3, 326, 3, 326, 3, 327, 
	5, 327, 6622, 10, 327, 3, 327, 3, 327, 7, 327, 6626, 10, 327, 12, 327, 
	14, 327, 6629, 11, 327, 3, 328, 3, 328, 3, 328, 3, 328, 5, 328, 6635, 10, 
	328, 3, 328, 3, 328, 3, 328, 5, 328, 6640, 10, 328, 3, 328, 3, 328, 3, 
	328, 5, 328, 6645, 10, 328, 3, 328, 3, 328, 3, 328, 3, 328, 5, 328, 6651, 
	10, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 
	5, 328, 6661, 10, 328, 3, 328, 3, 328, 3, 328, 3, 328, 7, 328, 6667, 10, 
	328, 12, 328, 14, 328, 6670, 11, 328, 5, 328, 6672, 10, 328, 3, 328, 3, 
	328, 3, 328, 5, 328, 6677, 10, 328, 5, 328, 6679, 10, 328, 3, 329, 5, 329, 
	6682, 10, 329, 3, 329, 3, 329, 7, 329, 6686, 10, 329, 12, 329, 14, 329, 
	6689, 11, 329, 3, 330, 3, 330, 5, 330, 6693, 10, 330, 3, 330, 3, 330, 3, 
	330, 7, 330, 6698, 10, 330, 12, 330, 14, 330, 6701, 11, 330, 3, 331, 3, 
	331, 3, 331, 3, 331, 3, 331, 7, 331, 6708, 10, 331, 12, 331, 14, 331, 6711, 
	11, 331, 3, 331, 3, 331, 5, 331, 6715, 10, 331, 3, 331, 3, 331, 5, 331, 
	6719, 10, 331, 3, 331, 5, 331, 6722, 10, 331, 3, 331, 3, 331, 3, 331, 3, 
	331, 3, 332, 3, 332, 3, 332, 3, 332, 3, 332, 3, 332, 5, 332, 6734, 10, 
	332, 3, 332, 3, 332, 3, 332, 5, 332, 6739, 10, 332, 3, 332, 7, 332, 6742, 
	10, 332, 12, 332, 14, 332, 6745, 11, 332, 3, 333, 3, 333, 3, 333, 5, 333, 
	6750, 10, 333, 3, 333, 3, 333, 3, 333, 3, 333, 3, 333, 5, 333, 6757, 10, 
	333, 3, 333, 5, 333, 6760, 10, 333, 3, 334, 3, 334, 3, 334, 3, 334, 3, 
	334, 3, 334, 3, 334, 7, 334, 6769, 10, 334, 12, 334, 14, 334, 6772, 11, 
	334, 3, 334, 3, 334, 5, 334, 6776, 10, 334, 5, 334, 6778, 10, 334, 3, 334, 
	5, 334, 6781, 10, 334, 3, 334, 5, 334, 6784, 10, 334, 3, 334, 3, 334, 3, 
	334, 3, 334, 7, 334, 6790, 10, 334, 12, 334, 14, 334, 6793, 11, 334, 5, 
	334, 6795, 10, 334, 3, 334, 3, 334, 5, 334, 6799, 10, 334, 3, 334, 5, 334, 
	6802, 10, 334, 3, 334, 3, 334, 5, 334, 6806, 10, 334, 3, 334, 3, 334, 3, 
	334, 3, 334, 3, 334, 3, 334, 3, 334, 3, 334, 3, 334, 7, 334, 6817, 10, 
	334, 12, 334, 14, 334, 6820, 11, 334, 5, 334, 6822, 10, 334, 3, 334, 3, 
	334, 5, 334, 6826, 10, 334, 3, 334, 3, 334, 5, 334, 6830, 10, 334, 3, 334, 
	5, 334, 6833, 10, 334, 3, 335, 3, 335, 3, 335, 7, 335, 6838, 10, 335, 12, 
	335, 14, 335, 6841, 11, 335, 3, 336, 3, 336, 3, 336, 3, 336, 5, 336, 6847, 
	10, 336, 3, 337, 3, 337, 5, 337, 6851, 10, 337, 3, 337, 5, 337, 6854, 10, 
	337, 3, 337, 3, 337, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 5, 338, 6863, 
	10, 338, 3, 338, 5, 338, 6866, 10, 338, 3, 338, 3, 338, 3, 338, 3, 338, 
	3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 5, 338, 6877, 10, 338, 5, 338, 
	6879, 10, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 5, 338, 
	6887, 10, 338, 5, 338, 6889, 10, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 
	338, 3, 338, 3, 338, 3, 338, 3, 338, 5, 338, 6900, 10, 338, 5, 338, 6902, 
	10, 338, 3, 338, 3, 338, 3, 338, 3, 338, 3, 338, 7, 338, 6909, 10, 338, 
	12, 338, 14, 338, 6912, 11, 338, 3, 339, 5, 339, 6915, 10, 339, 3, 339, 
	3, 339, 5, 339, 6919, 10, 339, 3, 339, 5, 339, 6922, 10, 339, 3, 339, 3, 
	339, 3, 339, 3, 339, 3, 339, 3, 339, 7, 339, 6930, 10, 339, 12, 339, 14, 
	339, 6933, 11, 339, 3, 339, 3, 339, 3, 339, 5, 339, 6938, 10, 339, 5, 339, 
	6940, 10, 339, 3, 339, 5, 339, 6943, 10, 339, 3, 339, 3, 339, 3, 339, 3, 
	339, 5, 339, 6949, 10, 339, 3, 339, 3, 339, 3, 339, 5, 339, 6954, 10, 339, 
	3, 339, 3, 339, 3, 339, 5, 339, 6959, 10, 339, 3, 339, 3, 339, 3, 339, 
	3, 339, 3, 339, 7, 339, 6966, 10, 339, 12, 339, 14, 339, 6969, 11, 339, 
	3, 339, 3, 339, 3, 339, 5, 339, 6974, 10, 339, 5, 339, 6976, 10, 339, 3, 
	339, 5, 339, 6979, 10, 339, 3, 339, 3, 339, 3, 339, 3, 339, 3, 339, 3, 
	339, 5, 339, 6987, 10, 339, 3, 339, 3, 339, 3, 339, 3, 339, 5, 339, 6993, 
	10, 339, 7, 339, 6995, 10, 339, 12, 339, 14, 339, 6998, 11, 339, 3, 339, 
	3, 339, 3, 339, 5, 339, 7003, 10, 339, 3, 339, 5, 339, 7006, 10, 339, 3, 
	339, 3, 339, 3, 339, 3, 339, 3, 339, 7, 339, 7013, 10, 339, 12, 339, 14, 
	339, 7016, 11, 339, 3, 339, 3, 339, 5, 339, 7020, 10, 339, 5, 339, 7022, 
	10, 339, 5, 339, 7024, 10, 339, 3, 340, 5, 340, 7027, 10, 340, 3, 340, 
	3, 340, 3, 340, 3, 340, 3, 340, 7, 340, 7034, 10, 340, 12, 340, 14, 340, 
	7037, 11, 340, 3, 340, 3, 340, 5, 340, 7041, 10, 340, 3, 341, 3, 341, 3, 
	341, 3, 341, 3, 341, 3, 341, 3, 341, 7, 341, 7050, 10, 341, 12, 341, 14, 
	341, 7053, 11, 341, 3, 341, 3, 341, 3, 342, 3, 342, 3, 342, 3, 342, 3, 
	343, 3, 343, 3, 343, 7, 343, 7064, 10, 343, 12, 343, 14, 343, 7067, 11, 
	343, 3, 344, 3, 344, 3, 344, 3, 344, 3, 344, 3, 344, 3, 344, 5, 344, 7076, 
	10, 344, 3, 344, 3, 344, 3, 344, 3, 344, 5, 344, 7082, 10, 344, 3, 345, 
	3, 345, 3, 345, 3, 345, 7, 345, 7088, 10, 345, 12, 345, 14, 345, 7091, 
	11, 345, 3, 346, 3, 346, 3, 346, 5, 346, 7096, 10, 346, 3, 346, 3, 346, 
	3, 346, 5, 346, 7101, 10, 346, 7, 346, 7103, 10, 346, 12, 346, 14, 346, 
	7106, 11, 346, 3, 346, 3, 346, 3, 347, 3, 347, 3, 347, 3, 347, 3, 347, 
	7, 347, 7115, 10, 347, 12, 347, 14, 347, 7118, 11, 347, 3, 348, 3, 348, 
	5, 348, 7122, 10, 348, 3, 348, 5, 348, 7125, 10, 348, 3, 349, 3, 349, 3, 
	349, 3, 349, 5, 349, 7131, 10, 349, 3, 350, 3, 350, 3, 350, 3, 351, 5, 
	351, 7137, 10, 351, 3, 351, 3, 351, 3, 351, 3, 351, 3, 351, 5, 351, 7144, 
	10, 351, 3, 351, 3, 351, 3, 351, 5, 351, 7149, 10, 351, 3, 351, 5, 351, 
	7152, 10, 351, 3, 351, 3, 351, 3, 351, 5, 351, 7157, 10, 351, 3, 351, 3, 
	351, 3, 351, 5, 351, 7162, 10, 351, 3, 351, 5, 351, 7165, 10, 351, 3, 351, 
	3, 351, 5, 351, 7169, 10, 351, 3, 352, 3, 352, 3, 352, 3, 352, 7, 352, 
	7175, 10, 352, 12, 352, 14, 352, 7178, 11, 352, 3, 352, 3, 352, 3, 353, 
	3, 353, 5, 353, 7184, 10, 353, 3, 354, 3, 354, 5, 354, 7188, 10, 354, 3, 
	354, 3, 354, 3, 354, 5, 354, 7193, 10, 354, 3, 355, 3, 355, 3, 355, 3, 
	355, 3, 355, 3, 355, 3, 355, 3, 355, 7, 355, 7203, 10, 355, 12, 355, 14, 
	355, 7206, 11, 355, 3, 355, 3, 355, 5, 355, 7210, 10, 355, 5, 355, 7212, 
	10, 355, 3, 356, 5, 356, 7215, 10, 356, 3, 356, 3, 356, 3, 356, 5, 356, 
	7220, 10, 356, 3, 356, 3, 356, 5, 356, 7224, 10, 356, 3, 356, 5, 356, 7227, 
	10, 356, 3, 356, 5, 356, 7230, 10, 356, 3, 356, 3, 356, 3, 356, 3, 356, 
	7, 356, 7236, 10, 356, 12, 356, 14, 356, 7239, 11, 356, 5, 356, 7241, 10, 
	356, 3, 356, 3, 356, 3, 356, 3, 356, 3, 356, 5, 356, 7248, 10, 356, 5, 
	356, 7250, 10, 356, 3, 356, 3, 356, 5, 356, 7254, 10, 356, 3, 357, 5, 357, 
	7257, 10, 357, 3, 357, 3, 357, 5, 357, 7261, 10, 357, 3, 357, 3, 357, 5, 
	357, 7265, 10, 357, 3, 357, 5, 357, 7268, 10, 357, 3, 357, 5, 357, 7271, 
	10, 357, 3, 357, 3, 357, 3, 357, 3, 357, 7, 357, 7277, 10, 357, 12, 357, 
	14, 357, 7280, 11, 357, 3, 357, 3, 357, 3, 357, 3, 357, 7, 357, 7286, 10, 
	357, 12, 357, 14, 357, 7289, 11, 357, 5, 357, 7291, 10, 357, 3, 357, 3, 
	357, 3, 357, 3, 357, 3, 357, 5, 357, 7298, 10, 357, 5, 357, 7300, 10, 357, 
	3, 357, 3, 357, 5, 357, 7304, 10, 357, 3, 358, 3, 358, 3, 358, 3, 358, 
	5, 358, 7310, 10, 358, 3, 358, 3, 358, 3, 358, 3, 358, 7, 358, 7316, 10, 
	358, 12, 358, 14, 358, 7319, 11, 358, 3, 358, 3, 358, 3, 358, 5, 358, 7324, 
	10, 358, 3, 358, 3, 358, 3, 358, 5, 358, 7329, 10, 358, 3, 358, 3, 358, 
	3, 358, 5, 358, 7334, 10, 358, 7, 358, 7336, 10, 358, 12, 358, 14, 358, 
	7339, 11, 358, 3, 358, 3, 358, 5, 358, 7343, 10, 358, 5, 358, 7345, 10, 
	358, 3, 359, 3, 359, 3, 359, 3, 359, 5, 359, 7351, 10, 359, 3, 360, 3, 
	360, 5, 360, 7355, 10, 360, 3, 360, 3, 360, 3, 360, 7, 360, 7360, 10, 360, 
	12, 360, 14, 360, 7363, 11, 360, 3, 360, 3, 360, 5, 360, 7367, 10, 360, 
	3, 360, 5, 360, 7370, 10, 360, 3, 361, 3, 361, 3, 361, 7, 361, 7375, 10, 
	361, 12, 361, 14, 361, 7378, 11, 361, 3, 362, 3, 362, 3, 362, 3, 362, 5, 
	362, 7384, 10, 362, 5, 362, 7386, 10, 362, 3, 362, 3, 362, 3, 362, 3, 362, 
	3, 362, 3, 362, 5, 362, 7394, 10, 362, 5, 362, 7396, 10, 362, 3, 363, 3, 
	363, 3, 363, 3, 363, 5, 363, 7402, 10, 363, 3, 364, 5, 364, 7405, 10, 364, 
	3, 364, 5, 364, 7408, 10, 364, 3, 364, 3, 364, 3, 364, 5, 364, 7413, 10, 
	364, 3, 364, 3, 364, 5, 364, 7417, 10, 364, 3, 365, 3, 365, 3, 365, 3, 
	365, 3, 366, 3, 366, 7, 366, 7425, 10, 366, 12, 366, 14, 366, 7428, 11, 
	366, 3, 367, 7, 367, 7431, 10, 367, 12, 367, 14, 367, 7434, 11, 367, 3, 
	367, 3, 367, 3, 367, 3, 367, 3, 368, 5, 368, 7441, 10, 368, 3, 368, 3, 
	368, 5, 368, 7445, 10, 368, 3, 368, 3, 368, 5, 368, 7449, 10, 368, 3, 368, 
	3, 368, 5, 368, 7453, 10, 368, 3, 368, 3, 368, 3, 368, 3, 368, 5, 368, 
	7459, 10, 368, 3, 368, 5, 368, 7462, 10, 368, 3, 368, 5, 368, 7465, 10, 
	368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 5, 368, 7472, 10, 368, 3, 
	368, 3, 368, 5, 368, 7476, 10, 368, 3, 369, 3, 369, 3, 369, 3, 369, 3, 
	369, 3, 369, 7, 369, 7484, 10, 369, 12, 369, 14, 369, 7487, 11, 369, 3, 
	370, 3, 370, 3, 370, 3, 370, 3, 370, 3, 370, 3, 370, 3, 370, 3, 370, 5, 
	370, 7498, 10, 370, 3, 371, 3, 371, 3, 371, 3, 371, 3, 371, 3, 371, 6, 
	371, 7506, 10, 371, 13, 371, 14, 371, 7507, 3, 372, 3, 372, 3, 372, 7, 
	372, 7513, 10, 372, 12, 372, 14, 372, 7516, 11, 372, 3, 373, 3, 373, 3, 
	373, 3, 373, 3, 373, 3, 373, 3, 373, 3, 373, 3, 373, 5, 373, 7527, 10, 
	373, 3, 374, 3, 374, 3, 374, 3, 374, 3, 374, 5, 374, 7534, 10, 374, 3, 
	374, 3, 374, 3, 374, 3, 374, 7, 374, 7540, 10, 374, 12, 374, 14, 374, 7543, 
	11, 374, 3, 374, 5, 374, 7546, 10, 374, 3, 375, 3, 375, 5, 375, 7550, 10, 
	375, 3, 375, 3, 375, 3, 375, 3, 375, 7, 375, 7556, 10, 375, 12, 375, 14, 
	375, 7559, 11, 375, 3, 376, 3, 376, 3, 376, 3, 376, 3, 377, 3, 377, 3, 
	377, 3, 377, 3, 377, 3, 377, 7, 377, 7571, 10, 377, 12, 377, 14, 377, 7574, 
	11, 377, 3, 377, 3, 377, 5, 377, 7578, 10, 377, 5, 377, 7580, 10, 377, 
	3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 7, 377, 7587, 10, 377, 12, 377, 
	14, 377, 7590, 11, 377, 5, 377, 7592, 10, 377, 3, 377, 3, 377, 5, 377, 
	7596, 10, 377, 3, 377, 5, 377, 7599, 10, 377, 3, 377, 3, 377, 5, 377, 7603, 
	10, 377, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 3, 377, 
	3, 377, 7, 377, 7614, 10, 377, 12, 377, 14, 377, 7617, 11, 377, 5, 377, 
	7619, 10, 377, 3, 377, 3, 377, 5, 377, 7623, 10, 377, 3, 377, 5, 377, 7626, 
	10, 377, 3, 377, 7, 377, 7629, 10, 377, 12, 377, 14, 377, 7632, 11, 377, 
	3, 378, 3, 378, 3, 378, 3, 378, 5, 378, 7638, 10, 378, 3, 379, 3, 379, 
	3, 379, 5, 379, 7643, 10, 379, 3, 380, 3, 380, 3, 380, 3, 380, 3, 380, 
	3, 380, 5, 380, 7651, 10, 380, 3, 381, 3, 381, 3, 381, 5, 381, 7656, 10, 
	381, 3, 381, 5, 381, 7659, 10, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 
	381, 3, 381, 3, 381, 3, 381, 3, 381, 7, 381, 7670, 10, 381, 12, 381, 14, 
	381, 7673, 11, 381, 3, 381, 3, 381, 5, 381, 7677, 10, 381, 3, 381, 3, 381, 
	5, 381, 7681, 10, 381, 3, 381, 5, 381, 7684, 10, 381, 3, 381, 3, 381, 3, 
	381, 5, 381, 7689, 10, 381, 3, 381, 5, 381, 7692, 10, 381, 3, 381, 3, 381, 
	3, 381, 5, 381, 7697, 10, 381, 3, 382, 3, 382, 3, 382, 5, 382, 7702, 10, 
	382, 3, 382, 3, 382, 3, 383, 3, 383, 3, 383, 5, 383, 7709, 10, 383, 3, 
	383, 5, 383, 7712, 10, 383, 3, 383, 5, 383, 7715, 10, 383, 3, 384, 3, 384, 
	5, 384, 7719, 10, 384, 3, 384, 3, 384, 3, 384, 7, 384, 7724, 10, 384, 12, 
	384, 14, 384, 7727, 11, 384, 5, 384, 7729, 10, 384, 3, 384, 5, 384, 7732, 
	10, 384, 3, 384, 3, 384, 5, 384, 7736, 10, 384, 3, 384, 3, 384, 5, 384, 
	7740, 10, 384, 3, 384, 3, 384, 5, 384, 7744, 10, 384, 3, 384, 3, 384, 3, 
	384, 5, 384, 7749, 10, 384, 3, 384, 3, 384, 3, 384, 3, 384, 5, 384, 7755, 
	10, 384, 5, 384, 7757, 10, 384, 3, 385, 3, 385, 3, 386, 3, 386, 3, 386, 
	3, 386, 3, 386, 3, 386, 3, 386, 3, 386, 3, 386, 7, 386, 7770, 10, 386, 
	12, 386, 14, 386, 7773, 11, 386, 3, 387, 3, 387, 3, 388, 3, 388, 5, 388, 
	7779, 10, 388, 3, 388, 3, 388, 3, 388, 3, 388, 3, 388, 3, 388, 5, 388, 
	7787, 10, 388, 3, 389, 5, 389, 7790, 10, 389, 3, 389, 5, 389, 7793, 10, 
	389, 3, 389, 3, 389, 3, 389, 3, 389, 3, 389, 5, 389, 7800, 10, 389, 3, 
	389, 3, 389, 5, 389, 7804, 10, 389, 3, 389, 3, 389, 5, 389, 7808, 10, 389, 
	5, 389, 7810, 10, 389, 3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 
	5, 390, 7818, 10, 390, 3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 5, 390, 
	7825, 10, 390, 3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 
	3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 3, 390, 7, 390, 7840, 10, 390, 
	12, 390, 14, 390, 7843, 11, 390, 3, 390, 3, 390, 5, 390, 7847, 10, 390, 
	3, 390, 3, 390, 3, 390, 3, 390, 5, 390, 7853, 10, 390, 3, 390, 3, 390, 
	3, 390, 3, 390, 5, 390, 7859, 10, 390, 3, 391, 3, 391, 3, 391, 3, 391, 
	7, 391, 7865, 10, 391, 12, 391, 14, 391, 7868, 11, 391, 3, 392, 3, 392, 
	3, 392, 3, 392, 3, 392, 3, 392, 3, 392, 3, 392, 3, 392, 7, 392, 7879, 10, 
	392, 12, 392, 14, 392, 7882, 11, 392, 3, 392, 3, 392, 5, 392, 7886, 10, 
	392, 3, 392, 3, 392, 3, 392, 3, 393, 3, 393, 5, 393, 7893, 10, 393, 3, 
	393, 3, 393, 3, 393, 3, 393, 7, 393, 7899, 10, 393, 12, 393, 14, 393, 7902, 
	11, 393, 3, 393, 3, 393, 3, 393, 6, 393, 7907, 10, 393, 13, 393, 14, 393, 
	7908, 3, 393, 3, 393, 5, 393, 7913, 10, 393, 3, 393, 3, 393, 3, 393, 3, 
	394, 3, 394, 3, 394, 3, 394, 5, 394, 7922, 10, 394, 3, 394, 2, 6, 588, 
	590, 662, 674, 395, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 
	66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 
	102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 
	132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 
	192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 
	222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 
	252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 
	282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 
	312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 
	372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 
	402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 
	432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 
	492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 
	582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 
	612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 
	642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 
	672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 
	702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 
	732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 
	762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 2, 111, 
	4, 2, 266, 266, 295, 295, 6, 2, 3, 3, 38, 38, 218, 218, 404, 404, 4, 2, 
	5, 5, 332, 332, 4, 2, 281, 281, 332, 332, 4, 2, 148, 148, 407, 407, 4, 
	2, 410, 410, 414, 414, 7, 2, 183, 183, 232, 232, 261, 261, 263, 263, 376, 
	376, 7, 2, 55, 55, 114, 114, 225, 225, 258, 258, 438, 438, 4, 2, 294, 294, 
	451, 451, 10, 2, 375, 375, 377, 377, 455, 455, 463, 463, 534, 534, 544, 
	544, 546, 546, 552, 552, 6, 2, 264, 264, 298, 298, 488, 488, 553, 553, 
	9, 2, 269, 269, 359, 360, 375, 375, 377, 377, 468, 468, 483, 483, 537, 
	537, 4, 2, 375, 375, 537, 537, 4, 2, 4, 4, 206, 206, 4, 2, 376, 376, 620, 
	620, 4, 2, 95, 95, 192, 192, 4, 2, 7, 7, 73, 73, 4, 2, 68, 68, 75, 75, 
	4, 2, 13, 13, 211, 211, 4, 2, 34, 34, 166, 166, 4, 2, 138, 138, 279, 279, 
	6, 2, 88, 88, 470, 470, 497, 497, 520, 520, 4, 2, 60, 60, 107, 107, 4, 
	2, 61, 61, 123, 123, 5, 2, 528, 528, 531, 531, 549, 549, 4, 2, 440, 440, 
	588, 588, 4, 2, 217, 217, 445, 445, 4, 2, 9, 9, 20, 20, 4, 2, 73, 73, 236, 
	236, 6, 2, 40, 40, 67, 67, 178, 178, 262, 262, 4, 2, 7, 7, 12, 12, 6, 2, 
	377, 377, 525, 525, 532, 532, 547, 548, 6, 2, 288, 288, 489, 490, 495, 
	495, 522, 522, 5, 2, 10, 10, 95, 95, 192, 192, 4, 2, 214, 214, 365, 365, 
	4, 2, 114, 114, 438, 438, 4, 2, 491, 491, 530, 530, 4, 2, 461, 461, 508, 
	508, 4, 2, 523, 524, 536, 536, 4, 2, 134, 134, 235, 235, 4, 2, 44, 44, 
	70, 70, 6, 2, 62, 62, 121, 121, 281, 281, 434, 434, 4, 2, 11, 11, 122, 
	122, 4, 2, 247, 247, 332, 332, 4, 2, 151, 151, 167, 167, 4, 2, 410, 410, 
	440, 440, 5, 2, 95, 95, 192, 192, 220, 220, 7, 2, 96, 96, 193, 193, 221, 
	221, 232, 232, 259, 259, 6, 2, 10, 10, 95, 95, 192, 192, 220, 220, 4, 2, 
	32, 32, 89, 89, 4, 2, 398, 398, 588, 588, 6, 2, 316, 316, 327, 327, 414, 
	414, 447, 447, 4, 2, 261, 261, 263, 263, 5, 2, 303, 303, 318, 318, 334, 
	334, 3, 2, 599, 600, 4, 2, 519, 519, 529, 529, 7, 2, 62, 62, 121, 121, 
	281, 281, 376, 376, 434, 434, 4, 2, 95, 95, 168, 168, 5, 2, 7, 7, 73, 73, 
	236, 236, 5, 2, 49, 49, 264, 264, 354, 354, 4, 2, 27, 27, 134, 134, 8, 
	2, 76, 76, 176, 176, 260, 260, 262, 262, 489, 490, 495, 495, 4, 2, 453, 
	453, 487, 487, 4, 2, 98, 98, 134, 134, 5, 2, 197, 197, 479, 479, 494, 494, 
	4, 2, 82, 82, 112, 112, 10, 2, 37, 37, 43, 43, 59, 59, 97, 97, 105, 105, 
	115, 115, 251, 251, 376, 376, 5, 2, 179, 179, 240, 240, 360, 360, 4, 2, 
	62, 62, 281, 281, 5, 2, 613, 614, 616, 616, 619, 619, 4, 2, 398, 398, 424, 
	424, 5, 2, 281, 281, 434, 434, 550, 550, 4, 2, 26, 26, 214, 214, 3, 2, 
	3, 301, 3, 2, 302, 352, 3, 2, 353, 375, 3, 2, 376, 451, 3, 2, 452, 586, 
	3, 2, 306, 307, 3, 2, 601, 603, 4, 2, 383, 383, 437, 437, 4, 2, 588, 588, 
	592, 596, 3, 2, 620, 621, 5, 2, 406, 406, 426, 426, 442, 442, 4, 2, 338, 
	338, 386, 386, 3, 2, 611, 612, 7, 2, 308, 308, 314, 315, 320, 320, 325, 
	325, 343, 343, 5, 2, 384, 384, 419, 419, 441, 441, 5, 2, 376, 376, 379, 
	379, 436, 436, 5, 2, 100, 100, 197, 197, 222, 222, 4, 2, 92, 92, 185, 185, 
	4, 2, 376, 376, 401, 401, 4, 2, 222, 222, 332, 332, 4, 2, 91, 91, 152, 
	152, 5, 2, 405, 405, 416, 416, 443, 443, 5, 2, 261, 261, 263, 263, 279, 
	279, 5, 2, 360, 360, 366, 366, 372, 372, 4, 2, 91, 91, 129, 129, 4, 2, 
	258, 258, 445, 445, 4, 2, 45, 45, 213, 213, 5, 2, 398, 398, 588, 588, 612, 
	612, 4, 2, 363, 363, 408, 408, 4, 2, 51, 51, 584, 584, 4, 2, 588, 588, 
	612, 612, 4, 2, 38, 38, 218, 218, 7, 2, 558, 558, 565, 565, 569, 570, 573, 
	573, 585, 585, 10, 2, 225, 225, 389, 390, 438, 438, 557, 557, 559, 559, 
	563, 563, 568, 568, 572, 572, 4, 2, 45, 45, 564, 564, 3, 2, 561, 562, 2, 
	9317, 2, 789, 3, 2, 2, 2, 4, 813, 3, 2, 2, 2, 6, 817, 3, 2, 2, 2, 8, 822, 
	3, 2, 2, 2, 10, 833, 3, 2, 2, 2, 12, 849, 3, 2, 2, 2, 14, 857, 3, 2, 2, 
	2, 16, 863, 3, 2, 2, 2, 18, 867, 3, 2, 2, 2, 20, 926, 3, 2, 2, 2, 22, 947, 
	3, 2, 2, 2, 24, 949, 3, 2, 2, 2, 26, 982, 3, 2, 2, 2, 28, 1011, 3, 2, 2, 
	2, 30, 1139, 3, 2, 2, 2, 32, 1141, 3, 2, 2, 2, 34, 1171, 3, 2, 2, 2, 36, 
	1173, 3, 2, 2, 2, 38, 1188, 3, 2, 2, 2, 40, 1210, 3, 2, 2, 2, 42, 1233, 
	3, 2, 2, 2, 44, 1238, 3, 2, 2, 2, 46, 1240, 3, 2, 2, 2, 48, 1248, 3, 2, 
	2, 2, 50, 1285, 3, 2, 2, 2, 52, 1293, 3, 2, 2, 2, 54, 1295, 3, 2, 2, 2, 
	56, 1305, 3, 2, 2, 2, 58, 1324, 3, 2, 2, 2, 60, 1329, 3, 2, 2, 2, 62, 1378, 
	3, 2, 2, 2, 64, 1380, 3, 2, 2, 2, 66, 1417, 3, 2, 2, 2, 68, 1432, 3, 2, 
	2, 2, 70, 1455, 3, 2, 2, 2, 72, 1488, 3, 2, 2, 2, 74, 1494, 3, 2, 2, 2, 
	76, 1509, 3, 2, 2, 2, 78, 1601, 3, 2, 2, 2, 80, 1603, 3, 2, 2, 2, 82, 1608, 
	3, 2, 2, 2, 84, 1617, 3, 2, 2, 2, 86, 1773, 3, 2, 2, 2, 88, 1822, 3, 2, 
	2, 2, 90, 1824, 3, 2, 2, 2, 92, 1858, 3, 2, 2, 2, 94, 1860, 3, 2, 2, 2, 
	96, 1862, 3, 2, 2, 2, 98, 1866, 3, 2, 2, 2, 100, 1876, 3, 2, 2, 2, 102, 
	1880, 3, 2, 2, 2, 104, 1939, 3, 2, 2, 2, 106, 1941, 3, 2, 2, 2, 108, 1965, 
	3, 2, 2, 2, 110, 1995, 3, 2, 2, 2, 112, 1997, 3, 2, 2, 2, 114, 2016, 3, 
	2, 2, 2, 116, 2079, 3, 2, 2, 2, 118, 2083, 3, 2, 2, 2, 120, 2105, 3, 2, 
	2, 2, 122, 2140, 3, 2, 2, 2, 124, 2163, 3, 2, 2, 2, 126, 2190, 3, 2, 2, 
	2, 128, 2234, 3, 2, 2, 2, 130, 2236, 3, 2, 2, 2, 132, 2248, 3, 2, 2, 2, 
	134, 2250, 3, 2, 2, 2, 136, 2300, 3, 2, 2, 2, 138, 2325, 3, 2, 2, 2, 140, 
	2338, 3, 2, 2, 2, 142, 2340, 3, 2, 2, 2, 144, 2390, 3, 2, 2, 2, 146, 2426, 
	3, 2, 2, 2, 148, 2434, 3, 2, 2, 2, 150, 2436, 3, 2, 2, 2, 152, 2440, 3, 
	2, 2, 2, 154, 2444, 3, 2, 2, 2, 156, 2465, 3, 2, 2, 2, 158, 2480, 3, 2, 
	2, 2, 160, 2491, 3, 2, 2, 2, 162, 2514, 3, 2, 2, 2, 164, 2526, 3, 2, 2, 
	2, 166, 2529, 3, 2, 2, 2, 168, 2560, 3, 2, 2, 2, 170, 2582, 3, 2, 2, 2, 
	172, 2613, 3, 2, 2, 2, 174, 2764, 3, 2, 2, 2, 176, 2779, 3, 2, 2, 2, 178, 
	2799, 3, 2, 2, 2, 180, 2816, 3, 2, 2, 2, 182, 2820, 3, 2, 2, 2, 184, 2835, 
	3, 2, 2, 2, 186, 2858, 3, 2, 2, 2, 188, 2893, 3, 2, 2, 2, 190, 2914, 3, 
	2, 2, 2, 192, 2932, 3, 2, 2, 2, 194, 2934, 3, 2, 2, 2, 196, 2949, 3, 2, 
	2, 2, 198, 2961, 3, 2, 2, 2, 200, 2979, 3, 2, 2, 2, 202, 3017, 3, 2, 2, 
	2, 204, 3019, 3, 2, 2, 2, 206, 3030, 3, 2, 2, 2, 208, 3032, 3, 2, 2, 2, 
	210, 3065, 3, 2, 2, 2, 212, 3088, 3, 2, 2, 2, 214, 3090, 3, 2, 2, 2, 216, 
	3098, 3, 2, 2, 2, 218, 3102, 3, 2, 2, 2, 220, 3125, 3, 2, 2, 2, 222, 3127, 
	3, 2, 2, 2, 224, 3144, 3, 2, 2, 2, 226, 3146, 3, 2, 2, 2, 228, 3150, 3, 
	2, 2, 2, 230, 3163, 3, 2, 2, 2, 232, 3176, 3, 2, 2, 2, 234, 3191, 3, 2, 
	2, 2, 236, 3206, 3, 2, 2, 2, 238, 3221, 3, 2, 2, 2, 240, 3242, 3, 2, 2, 
	2, 242, 3250, 3, 2, 2, 2, 244, 3267, 3, 2, 2, 2, 246, 3271, 3, 2, 2, 2, 
	248, 3294, 3, 2, 2, 2, 250, 3303, 3, 2, 2, 2, 252, 3317, 3, 2, 2, 2, 254, 
	3319, 3, 2, 2, 2, 256, 3333, 3, 2, 2, 2, 258, 3335, 3, 2, 2, 2, 260, 3357, 
	3, 2, 2, 2, 262, 3375, 3, 2, 2, 2, 264, 3405, 3, 2, 2, 2, 266, 3408, 3, 
	2, 2, 2, 268, 3424, 3, 2, 2, 2, 270, 3445, 3, 2, 2, 2, 272, 3449, 3, 2, 
	2, 2, 274, 3531, 3, 2, 2, 2, 276, 3533, 3, 2, 2, 2, 278, 3573, 3, 2, 2, 
	2, 280, 3604, 3, 2, 2, 2, 282, 3615, 3, 2, 2, 2, 284, 3619, 3, 2, 2, 2, 
	286, 3660, 3, 2, 2, 2, 288, 3663, 3, 2, 2, 2, 290, 3725, 3, 2, 2, 2, 292, 
	3732, 3, 2, 2, 2, 294, 3759, 3, 2, 2, 2, 296, 3810, 3, 2, 2, 2, 298, 3812, 
	3, 2, 2, 2, 300, 3820, 3, 2, 2, 2, 302, 3825, 3, 2, 2, 2, 304, 3849, 3, 
	2, 2, 2, 306, 3872, 3, 2, 2, 2, 308, 3874, 3, 2, 2, 2, 310, 3881, 3, 2, 
	2, 2, 312, 3886, 3, 2, 2, 2, 314, 3895, 3, 2, 2, 2, 316, 3899, 3, 2, 2, 
	2, 318, 3907, 3, 2, 2, 2, 320, 4047, 3, 2, 2, 2, 322, 4094, 3, 2, 2, 2, 
	324, 4098, 3, 2, 2, 2, 326, 4112, 3, 2, 2, 2, 328, 4119, 3, 2, 2, 2, 330, 
	4123, 3, 2, 2, 2, 332, 4135, 3, 2, 2, 2, 334, 4138, 3, 2, 2, 2, 336, 4141, 
	3, 2, 2, 2, 338, 4160, 3, 2, 2, 2, 340, 4179, 3, 2, 2, 2, 342, 4182, 3, 
	2, 2, 2, 344, 4192, 3, 2, 2, 2, 346, 4195, 3, 2, 2, 2, 348, 4244, 3, 2, 
	2, 2, 350, 4247, 3, 2, 2, 2, 352, 4252, 3, 2, 2, 2, 354, 4256, 3, 2, 2, 
	2, 356, 4258, 3, 2, 2, 2, 358, 4269, 3, 2, 2, 2, 360, 4331, 3, 2, 2, 2, 
	362, 4333, 3, 2, 2, 2, 364, 4343, 3, 2, 2, 2, 366, 4352, 3, 2, 2, 2, 368, 
	4375, 3, 2, 2, 2, 370, 4377, 3, 2, 2, 2, 372, 4400, 3, 2, 2, 2, 374, 4412, 
	3, 2, 2, 2, 376, 4418, 3, 2, 2, 2, 378, 4446, 3, 2, 2, 2, 380, 4478, 3, 
	2, 2, 2, 382, 4480, 3, 2, 2, 2, 384, 4496, 3, 2, 2, 2, 386, 4507, 3, 2, 
	2, 2, 388, 4576, 3, 2, 2, 2, 390, 4578, 3, 2, 2, 2, 392, 4588, 3, 2, 2, 
	2, 394, 4600, 3, 2, 2, 2, 396, 4611, 3, 2, 2, 2, 398, 4618, 3, 2, 2, 2, 
	400, 4638, 3, 2, 2, 2, 402, 4656, 3, 2, 2, 2, 404, 4659, 3, 2, 2, 2, 406, 
	4665, 3, 2, 2, 2, 408, 4679, 3, 2, 2, 2, 410, 4687, 3, 2, 2, 2, 412, 4689, 
	3, 2, 2, 2, 414, 4715, 3, 2, 2, 2, 416, 4743, 3, 2, 2, 2, 418, 4813, 3, 
	2, 2, 2, 420, 4817, 3, 2, 2, 2, 422, 4859, 3, 2, 2, 2, 424, 4862, 3, 2, 
	2, 2, 426, 4866, 3, 2, 2, 2, 428, 4877, 3, 2, 2, 2, 430, 4884, 3, 2, 2, 
	2, 432, 4906, 3, 2, 2, 2, 434, 4908, 3, 2, 2, 2, 436, 4937, 3, 2, 2, 2, 
	438, 4956, 3, 2, 2, 2, 440, 4963, 3, 2, 2, 2, 442, 4992, 3, 2, 2, 2, 444, 
	5028, 3, 2, 2, 2, 446, 5043, 3, 2, 2, 2, 448, 5045, 3, 2, 2, 2, 450, 5057, 
	3, 2, 2, 2, 452, 5084, 3, 2, 2, 2, 454, 5086, 3, 2, 2, 2, 456, 5097, 3, 
	2, 2, 2, 458, 5113, 3, 2, 2, 2, 460, 5118, 3, 2, 2, 2, 462, 5122, 3, 2, 
	2, 2, 464, 5134, 3, 2, 2, 2, 466, 5138, 3, 2, 2, 2, 468, 5143, 3, 2, 2, 
	2, 470, 5156, 3, 2, 2, 2, 472, 5164, 3, 2, 2, 2, 474, 5166, 3, 2, 2, 2, 
	476, 5187, 3, 2, 2, 2, 478, 5201, 3, 2, 2, 2, 480, 5203, 3, 2, 2, 2, 482, 
	5217, 3, 2, 2, 2, 484, 5222, 3, 2, 2, 2, 486, 5308, 3, 2, 2, 2, 488, 5323, 
	3, 2, 2, 2, 490, 5338, 3, 2, 2, 2, 492, 5340, 3, 2, 2, 2, 494, 5343, 3, 
	2, 2, 2, 496, 5356, 3, 2, 2, 2, 498, 5360, 3, 2, 2, 2, 500, 5368, 3, 2, 
	2, 2, 502, 5379, 3, 2, 2, 2, 504, 5384, 3, 2, 2, 2, 506, 5389, 3, 2, 2, 
	2, 508, 5397, 3, 2, 2, 2, 510, 5399, 3, 2, 2, 2, 512, 5408, 3, 2, 2, 2, 
	514, 5411, 3, 2, 2, 2, 516, 5422, 3, 2, 2, 2, 518, 5424, 3, 2, 2, 2, 520, 
	5431, 3, 2, 2, 2, 522, 5435, 3, 2, 2, 2, 524, 5450, 3, 2, 2, 2, 526, 5452, 
	3, 2, 2, 2, 528, 5454, 3, 2, 2, 2, 530, 5464, 3, 2, 2, 2, 532, 5466, 3, 
	2, 2, 2, 534, 5471, 3, 2, 2, 2, 536, 5476, 3, 2, 2, 2, 538, 5491, 3, 2, 
	2, 2, 540, 5508, 3, 2, 2, 2, 542, 5510, 3, 2, 2, 2, 544, 5523, 3, 2, 2, 
	2, 546, 5534, 3, 2, 2, 2, 548, 5544, 3, 2, 2, 2, 550, 5595, 3, 2, 2, 2, 
	552, 5600, 3, 2, 2, 2, 554, 5609, 3, 2, 2, 2, 556, 5614, 3, 2, 2, 2, 558, 
	5619, 3, 2, 2, 2, 560, 5626, 3, 2, 2, 2, 562, 5628, 3, 2, 2, 2, 564, 5630, 
	3, 2, 2, 2, 566, 5632, 3, 2, 2, 2, 568, 5634, 3, 2, 2, 2, 570, 5636, 3, 
	2, 2, 2, 572, 5643, 3, 2, 2, 2, 574, 5645, 3, 2, 2, 2, 576, 5654, 3, 2, 
	2, 2, 578, 5668, 3, 2, 2, 2, 580, 5765, 3, 2, 2, 2, 582, 5794, 3, 2, 2, 
	2, 584, 5796, 3, 2, 2, 2, 586, 5800, 3, 2, 2, 2, 588, 5833, 3, 2, 2, 2, 
	590, 5996, 3, 2, 2, 2, 592, 6062, 3, 2, 2, 2, 594, 6072, 3, 2, 2, 2, 596, 
	6074, 3, 2, 2, 2, 598, 6104, 3, 2, 2, 2, 600, 6109, 3, 2, 2, 2, 602, 6111, 
	3, 2, 2, 2, 604, 6113, 3, 2, 2, 2, 606, 6115, 3, 2, 2, 2, 608, 6134, 3, 
	2, 2, 2, 610, 6184, 3, 2, 2, 2, 612, 6187, 3, 2, 2, 2, 614, 6196, 3, 2, 
	2, 2, 616, 6223, 3, 2, 2, 2, 618, 6225, 3, 2, 2, 2, 620, 6241, 3, 2, 2, 
	2, 622, 6260, 3, 2, 2, 2, 624, 6329, 3, 2, 2, 2, 626, 6492, 3, 2, 2, 2, 
	628, 6494, 3, 2, 2, 2, 630, 6514, 3, 2, 2, 2, 632, 6522, 3, 2, 2, 2, 634, 
	6528, 3, 2, 2, 2, 636, 6543, 3, 2, 2, 2, 638, 6568, 3, 2, 2, 2, 640, 6570, 
	3, 2, 2, 2, 642, 6575, 3, 2, 2, 2, 644, 6603, 3, 2, 2, 2, 646, 6605, 3, 
	2, 2, 2, 648, 6614, 3, 2, 2, 2, 650, 6616, 3, 2, 2, 2, 652, 6621, 3, 2, 
	2, 2, 654, 6678, 3, 2, 2, 2, 656, 6681, 3, 2, 2, 2, 658, 6690, 3, 2, 2, 
	2, 660, 6702, 3, 2, 2, 2, 662, 6733, 3, 2, 2, 2, 664, 6759, 3, 2, 2, 2, 
	666, 6832, 3, 2, 2, 2, 668, 6834, 3, 2, 2, 2, 670, 6842, 3, 2, 2, 2, 672, 
	6848, 3, 2, 2, 2, 674, 6865, 3, 2, 2, 2, 676, 7023, 3, 2, 2, 2, 678, 7026, 
	3, 2, 2, 2, 680, 7042, 3, 2, 2, 2, 682, 7056, 3, 2, 2, 2, 684, 7060, 3, 
	2, 2, 2, 686, 7081, 3, 2, 2, 2, 688, 7083, 3, 2, 2, 2, 690, 7092, 3, 2, 
	2, 2, 692, 7109, 3, 2, 2, 2, 694, 7119, 3, 2, 2, 2, 696, 7130, 3, 2, 2, 
	2, 698, 7132, 3, 2, 2, 2, 700, 7136, 3, 2, 2, 2, 702, 7170, 3, 2, 2, 2, 
	704, 7181, 3, 2, 2, 2, 706, 7192, 3, 2, 2, 2, 708, 7211, 3, 2, 2, 2, 710, 
	7214, 3, 2, 2, 2, 712, 7256, 3, 2, 2, 2, 714, 7344, 3, 2, 2, 2, 716, 7346, 
	3, 2, 2, 2, 718, 7352, 3, 2, 2, 2, 720, 7371, 3, 2, 2, 2, 722, 7395, 3, 
	2, 2, 2, 724, 7397, 3, 2, 2, 2, 726, 7404, 3, 2, 2, 2, 728, 7418, 3, 2, 
	2, 2, 730, 7422, 3, 2, 2, 2, 732, 7432, 3, 2, 2, 2, 734, 7475, 3, 2, 2, 
	2, 736, 7477, 3, 2, 2, 2, 738, 7497, 3, 2, 2, 2, 740, 7499, 3, 2, 2, 2, 
	742, 7514, 3, 2, 2, 2, 744, 7526, 3, 2, 2, 2, 746, 7545, 3, 2, 2, 2, 748, 
	7549, 3, 2, 2, 2, 750, 7560, 3, 2, 2, 2, 752, 7579, 3, 2, 2, 2, 754, 7633, 
	3, 2, 2, 2, 756, 7639, 3, 2, 2, 2, 758, 7650, 3, 2, 2, 2, 760, 7696, 3, 
	2, 2, 2, 762, 7701, 3, 2, 2, 2, 764, 7714, 3, 2, 2, 2, 766, 7756, 3, 2, 
	2, 2, 768, 7758, 3, 2, 2, 2, 770, 7760, 3, 2, 2, 2, 772, 7774, 3, 2, 2, 
	2, 774, 7786, 3, 2, 2, 2, 776, 7809, 3, 2, 2, 2, 778, 7858, 3, 2, 2, 2, 
	780, 7860, 3, 2, 2, 2, 782, 7869, 3, 2, 2, 2, 784, 7890, 3, 2, 2, 2, 786, 
	7921, 3, 2, 2, 2, 788, 790, 7, 631, 2, 2, 789, 788, 3, 2, 2, 2, 789, 790, 
	3, 2, 2, 2, 790, 794, 3, 2, 2, 2, 791, 793, 7, 590, 2, 2, 792, 791, 3, 
	2, 2, 2, 793, 796, 3, 2, 2, 2, 794, 792, 3, 2, 2, 2, 794, 795, 3, 2, 2, 
	2, 795, 808, 3, 2, 2, 2, 796, 794, 3, 2, 2, 2, 797, 804, 5, 14, 8, 2, 798, 
	800, 7, 590, 2, 2, 799, 798, 3, 2, 2, 2, 800, 801, 3, 2, 2, 2, 801, 799, 
	3, 2, 2, 2, 801, 802, 3, 2, 2, 2, 802, 805, 3, 2, 2, 2, 803, 805, 7, 2, 
	2, 3, 804, 799, 3, 2, 2, 2, 804, 803, 3, 2, 2, 2, 805, 807, 3, 2, 2, 2, 
	806, 797, 3, 2, 2, 2, 807, 810, 3, 2, 2, 2, 808, 806, 3, 2, 2, 2, 808, 
	809, 3, 2, 2, 2, 809, 811, 3, 2, 2, 2, 810, 808, 3, 2, 2, 2, 811, 812, 
	7, 2, 2, 3, 812, 3, 3, 2, 2, 2, 813, 814, 5, 646, 324, 2, 814, 815, 7, 
	2, 2, 3, 815, 5, 3, 2, 2, 2, 816, 818, 5, 646, 324, 2, 817, 816, 3, 2, 
	2, 2, 817, 818, 3, 2, 2, 2, 818, 819, 3, 2, 2, 2, 819, 820, 5, 336, 169, 
	2, 820, 821, 7, 2, 2, 3, 821, 7, 3, 2, 2, 2, 822, 827, 5, 588, 295, 2, 
	823, 824, 7, 591, 2, 2, 824, 826, 5, 588, 295, 2, 825, 823, 3, 2, 2, 2, 
	826, 829, 3, 2, 2, 2, 827, 825, 3, 2, 2, 2, 827, 828, 3, 2, 2, 2, 828, 
	830, 3, 2, 2, 2, 829, 827, 3, 2, 2, 2, 830, 831, 7, 2, 2, 3, 831, 9, 3, 
	2, 2, 2, 832, 834, 5, 724, 363, 2, 833, 832, 3, 2, 2, 2, 833, 834, 3, 2, 
	2, 2, 834, 835, 3, 2, 2, 2, 835, 837, 5, 726, 364, 2, 836, 838, 7, 590, 
	2, 2, 837, 836, 3, 2, 2, 2, 837, 838, 3, 2, 2, 2, 838, 839, 3, 2, 2, 2, 
	839, 840, 7, 2, 2, 3, 840, 11, 3, 2, 2, 2, 841, 843, 5, 724, 363, 2, 842, 
	841, 3, 2, 2, 2, 842, 843, 3, 2, 2, 2, 843, 844, 3, 2, 2, 2, 844, 845, 
	5, 726, 364, 2, 845, 846, 7, 590, 2, 2, 846, 848, 3, 2, 2, 2, 847, 842, 
	3, 2, 2, 2, 848, 851, 3, 2, 2, 2, 849, 847, 3, 2, 2, 2, 849, 850, 3, 2, 
	2, 2, 850, 852, 3, 2, 2, 2, 851, 849, 3, 2, 2, 2, 852, 853, 7, 2, 2, 3, 
	853, 13, 3, 2, 2, 2, 854, 858, 5, 16, 9, 2, 855, 858, 5, 60, 31, 2, 856, 
	858, 5, 18, 10, 2, 857, 854, 3, 2, 2, 2, 857, 855, 3, 2, 2, 2, 857, 856, 
	3, 2, 2, 2, 858, 15, 3, 2, 2, 2, 859, 864, 5, 652, 327, 2, 860, 864, 5, 
	700, 351, 2, 861, 864, 5, 712, 357, 2, 862, 864, 5, 710, 356, 2, 863, 859, 
	3, 2, 2, 2, 863, 860, 3, 2, 2, 2, 863, 861, 3, 2, 2, 2, 863, 862, 3, 2, 
	2, 2, 864, 17, 3, 2, 2, 2, 865, 868, 5, 20, 11, 2, 866, 868, 5, 28, 15, 
	2, 867, 865, 3, 2, 2, 2, 867, 866, 3, 2, 2, 2, 868, 19, 3, 2, 2, 2, 869, 
	870, 7, 246, 2, 2, 870, 876, 7, 266, 2, 2, 871, 873, 7, 21, 2, 2, 872, 
	874, 9, 2, 2, 2, 873, 872, 3, 2, 2, 2, 873, 874, 3, 2, 2, 2, 874, 876, 
	3, 2, 2, 2, 875, 869, 3, 2, 2, 2, 875, 871, 3, 2, 2, 2, 876, 885, 3, 2, 
	2, 2, 877, 882, 5, 22, 12, 2, 878, 879, 7, 591, 2, 2, 879, 881, 5, 22, 
	12, 2, 880, 878, 3, 2, 2, 2, 881, 884, 3, 2, 2, 2, 882, 880, 3, 2, 2, 2, 
	882, 883, 3, 2, 2, 2, 883, 886, 3, 2, 2, 2, 884, 882, 3, 2, 2, 2, 885, 
	877, 3, 2, 2, 2, 885, 886, 3, 2, 2, 2, 886, 927, 3, 2, 2, 2, 887, 889, 
	9, 3, 2, 2, 888, 890, 9, 2, 2, 2, 889, 888, 3, 2, 2, 2, 889, 890, 3, 2, 
	2, 2, 890, 896, 3, 2, 2, 2, 891, 893, 7, 378, 2, 2, 892, 894, 7, 157, 2, 
	2, 893, 892, 3, 2, 2, 2, 893, 894, 3, 2, 2, 2, 894, 895, 3, 2, 2, 2, 895, 
	897, 7, 29, 2, 2, 896, 891, 3, 2, 2, 2, 896, 897, 3, 2, 2, 2, 897, 927, 
	3, 2, 2, 2, 898, 899, 7, 38, 2, 2, 899, 903, 7, 187, 2, 2, 900, 901, 7, 
	186, 2, 2, 901, 903, 7, 266, 2, 2, 902, 898, 3, 2, 2, 2, 902, 900, 3, 2, 
	2, 2, 903, 904, 3, 2, 2, 2, 904, 927, 7, 625, 2, 2, 905, 911, 7, 224, 2, 
	2, 906, 908, 7, 207, 2, 2, 907, 909, 7, 224, 2, 2, 908, 907, 3, 2, 2, 2, 
	908, 909, 3, 2, 2, 2, 909, 911, 3, 2, 2, 2, 910, 905, 3, 2, 2, 2, 910, 
	906, 3, 2, 2, 2, 911, 912, 3, 2, 2, 2, 912, 927, 5, 556, 279, 2, 913, 914, 
	7, 218, 2, 2, 914, 915, 7, 187, 2, 2, 915, 927, 7, 625, 2, 2, 916, 918, 
	7, 218, 2, 2, 917, 919, 9, 2, 2, 2, 918, 917, 3, 2, 2, 2, 918, 919, 3, 
	2, 2, 2, 919, 920, 3, 2, 2, 2, 920, 922, 7, 440, 2, 2, 921, 923, 7, 224, 
	2, 2, 922, 921, 3, 2, 2, 2, 922, 923, 3, 2, 2, 2, 923, 924, 3, 2, 2, 2, 
	924, 927, 5, 556, 279, 2, 925, 927, 5, 24, 13, 2, 926, 875, 3, 2, 2, 2, 
	926, 887, 3, 2, 2, 2, 926, 902, 3, 2, 2, 2, 926, 910, 3, 2, 2, 2, 926, 
	913, 3, 2, 2, 2, 926, 916, 3, 2, 2, 2, 926, 925, 3, 2, 2, 2, 927, 21, 3, 
	2, 2, 2, 928, 929, 7, 124, 2, 2, 929, 937, 7, 131, 2, 2, 930, 938, 7, 233, 
	2, 2, 931, 932, 7, 209, 2, 2, 932, 938, 7, 198, 2, 2, 933, 934, 7, 198, 
	2, 2, 934, 938, 7, 39, 2, 2, 935, 936, 7, 198, 2, 2, 936, 938, 7, 275, 
	2, 2, 937, 930, 3, 2, 2, 2, 937, 931, 3, 2, 2, 2, 937, 933, 3, 2, 2, 2, 
	937, 935, 3, 2, 2, 2, 938, 948, 3, 2, 2, 2, 939, 940, 7, 198, 2, 2, 940, 
	948, 7, 297, 2, 2, 941, 942, 7, 198, 2, 2, 942, 948, 7, 427, 2, 2, 943, 
	945, 7, 423, 2, 2, 944, 943, 3, 2, 2, 2, 944, 945, 3, 2, 2, 2, 945, 946, 
	3, 2, 2, 2, 946, 948, 7, 399, 2, 2, 947, 928, 3, 2, 2, 2, 947, 939, 3, 
	2, 2, 2, 947, 941, 3, 2, 2, 2, 947, 944, 3, 2, 2, 2, 948, 23, 3, 2, 2, 
	2, 949, 951, 7, 136, 2, 2, 950, 952, 7, 438, 2, 2, 951, 950, 3, 2, 2, 2, 
	951, 952, 3, 2, 2, 2, 952, 953, 3, 2, 2, 2, 953, 958, 5, 404, 203, 2, 954, 
	955, 7, 591, 2, 2, 955, 957, 5, 404, 203, 2, 956, 954, 3, 2, 2, 2, 957, 
	960, 3, 2, 2, 2, 958, 956, 3, 2, 2, 2, 958, 959, 3, 2, 2, 2, 959, 965, 
	3, 2, 2, 2, 960, 958, 3, 2, 2, 2, 961, 962, 7, 414, 2, 2, 962, 963, 5, 
	26, 14, 2, 963, 964, 7, 146, 2, 2, 964, 966, 3, 2, 2, 2, 965, 961, 3, 2, 
	2, 2, 965, 966, 3, 2, 2, 2, 966, 968, 3, 2, 2, 2, 967, 969, 7, 161, 2, 
	2, 968, 967, 3, 2, 2, 2, 968, 969, 3, 2, 2, 2, 969, 25, 3, 2, 2, 2, 970, 
	971, 9, 4, 2, 2, 971, 983, 7, 238, 2, 2, 972, 973, 7, 332, 2, 2, 973, 983, 
	7, 83, 2, 2, 974, 975, 7, 238, 2, 2, 975, 976, 9, 5, 2, 2, 976, 983, 7, 
	83, 2, 2, 977, 983, 7, 238, 2, 2, 978, 980, 7, 5, 2, 2, 979, 978, 3, 2, 
	2, 2, 979, 980, 3, 2, 2, 2, 980, 981, 3, 2, 2, 2, 981, 983, 7, 83, 2, 2, 
	982, 970, 3, 2, 2, 2, 982, 972, 3, 2, 2, 2, 982, 974, 3, 2, 2, 2, 982, 
	977, 3, 2, 2, 2, 982, 979, 3, 2, 2, 2, 983, 27, 3, 2, 2, 2, 984, 1012, 
	5, 30, 16, 2, 985, 986, 7, 282, 2, 2, 986, 988, 5, 50, 26, 2, 987, 989, 
	5, 46, 24, 2, 988, 987, 3, 2, 2, 2, 988, 989, 3, 2, 2, 2, 989, 1012, 3, 
	2, 2, 2, 990, 992, 9, 6, 2, 2, 991, 993, 5, 58, 30, 2, 992, 991, 3, 2, 
	2, 2, 992, 993, 3, 2, 2, 2, 993, 995, 3, 2, 2, 2, 994, 996, 9, 7, 2, 2, 
	995, 994, 3, 2, 2, 2, 995, 996, 3, 2, 2, 2, 996, 997, 3, 2, 2, 2, 997, 
	1012, 5, 556, 279, 2, 998, 1001, 7, 33, 2, 2, 999, 1002, 5, 556, 279, 2, 
	1000, 1002, 7, 376, 2, 2, 1001, 999, 3, 2, 2, 2, 1001, 1000, 3, 2, 2, 2, 
	1002, 1012, 3, 2, 2, 2, 1003, 1004, 7, 24, 2, 2, 1004, 1012, 5, 610, 306, 
	2, 1005, 1006, 7, 69, 2, 2, 1006, 1012, 9, 8, 2, 2, 1007, 1012, 5, 38, 
	20, 2, 1008, 1012, 5, 36, 19, 2, 1009, 1012, 5, 32, 17, 2, 1010, 1012, 
	5, 40, 21, 2, 1011, 984, 3, 2, 2, 2, 1011, 985, 3, 2, 2, 2, 1011, 990, 
	3, 2, 2, 2, 1011, 998, 3, 2, 2, 2, 1011, 1003, 3, 2, 2, 2, 1011, 1005, 
	3, 2, 2, 2, 1011, 1007, 3, 2, 2, 2, 1011, 1008, 3, 2, 2, 2, 1011, 1009, 
	3, 2, 2, 2, 1011, 1010, 3, 2, 2, 2, 1012, 29, 3, 2, 2, 2, 1013, 1140, 5, 
	722, 362, 2, 1014, 1015, 7, 132, 2, 2, 1015, 1140, 5, 556, 279, 2, 1016, 
	1019, 7, 278, 2, 2, 1017, 1020, 5, 556, 279, 2, 1018, 1020, 7, 601, 2, 
	2, 1019, 1017, 3, 2, 2, 2, 1019, 1018, 3, 2, 2, 2, 1020, 1140, 3, 2, 2, 
	2, 1021, 1034, 7, 377, 2, 2, 1022, 1023, 7, 597, 2, 2, 1023, 1028, 5, 54, 
	28, 2, 1024, 1025, 7, 591, 2, 2, 1025, 1027, 5, 54, 28, 2, 1026, 1024, 
	3, 2, 2, 2, 1027, 1030, 3, 2, 2, 2, 1028, 1026, 3, 2, 2, 2, 1028, 1029, 
	3, 2, 2, 2, 1029, 1031, 3, 2, 2, 2, 1030, 1028, 3, 2, 2, 2, 1031, 1032, 
	7, 598, 2, 2, 1032, 1035, 3, 2, 2, 2, 1033, 1035, 7, 375, 2, 2, 1034, 1022, 
	3, 2, 2, 2, 1034, 1033, 3, 2, 2, 2, 1034, 1035, 3, 2, 2, 2, 1035, 1037, 
	3, 2, 2, 2, 1036, 1038, 5, 46, 24, 2, 1037, 1036, 3, 2, 2, 2, 1037, 1038, 
	3, 2, 2, 2, 1038, 1140, 3, 2, 2, 2, 1039, 1041, 7, 34, 2, 2, 1040, 1042, 
	7, 375, 2, 2, 1041, 1040, 3, 2, 2, 2, 1041, 1042, 3, 2, 2, 2, 1042, 1052, 
	3, 2, 2, 2, 1043, 1044, 5, 556, 279, 2, 1044, 1045, 7, 426, 2, 2, 1045, 
	1046, 5, 646, 324, 2, 1046, 1053, 3, 2, 2, 2, 1047, 1050, 5, 646, 324, 
	2, 1048, 1049, 7, 446, 2, 2, 1049, 1051, 5, 556, 279, 2, 1050, 1048, 3, 
	2, 2, 2, 1050, 1051, 3, 2, 2, 2, 1051, 1053, 3, 2, 2, 2, 1052, 1043, 3, 
	2, 2, 2, 1052, 1047, 3, 2, 2, 2, 1052, 1053, 3, 2, 2, 2, 1053, 1140, 3, 
	2, 2, 2, 1054, 1140, 7, 31, 2, 2, 1055, 1056, 7, 133, 2, 2, 1056, 1140, 
	7, 625, 2, 2, 1057, 1059, 7, 57, 2, 2, 1058, 1060, 7, 186, 2, 2, 1059, 
	1058, 3, 2, 2, 2, 1059, 1060, 3, 2, 2, 2, 1060, 1063, 3, 2, 2, 2, 1061, 
	1064, 5, 556, 279, 2, 1062, 1064, 7, 376, 2, 2, 1063, 1061, 3, 2, 2, 2, 
	1063, 1062, 3, 2, 2, 2, 1064, 1140, 3, 2, 2, 2, 1065, 1069, 7, 205, 2, 
	2, 1066, 1067, 7, 597, 2, 2, 1067, 1068, 7, 375, 2, 2, 1068, 1070, 7, 598, 
	2, 2, 1069, 1066, 3, 2, 2, 2, 1069, 1070, 3, 2, 2, 2, 1070, 1071, 3, 2, 
	2, 2, 1071, 1073, 9, 9, 2, 2, 1072, 1074, 7, 356, 2, 2, 1073, 1072, 3, 
	2, 2, 2, 1073, 1074, 3, 2, 2, 2, 1074, 1075, 3, 2, 2, 2, 1075, 1140, 5, 
	646, 324, 2, 1076, 1088, 7, 212, 2, 2, 1077, 1078, 5, 556, 279, 2, 1078, 
	1079, 7, 605, 2, 2, 1079, 1081, 3, 2, 2, 2, 1080, 1077, 3, 2, 2, 2, 1080, 
	1081, 3, 2, 2, 2, 1081, 1082, 3, 2, 2, 2, 1082, 1089, 5, 556, 279, 2, 1083, 
	1084, 7, 336, 2, 2, 1084, 1089, 7, 301, 2, 2, 1085, 1086, 7, 235, 2, 2, 
	1086, 1089, 7, 353, 2, 2, 1087, 1089, 7, 376, 2, 2, 1088, 1080, 3, 2, 2, 
	2, 1088, 1083, 3, 2, 2, 2, 1088, 1085, 3, 2, 2, 2, 1088, 1087, 3, 2, 2, 
	2, 1089, 1140, 3, 2, 2, 2, 1090, 1091, 7, 204, 2, 2, 1091, 1092, 7, 141, 
	2, 2, 1092, 1094, 7, 289, 2, 2, 1093, 1095, 7, 356, 2, 2, 1094, 1093, 3, 
	2, 2, 2, 1094, 1095, 3, 2, 2, 2, 1095, 1096, 3, 2, 2, 2, 1096, 1102, 5, 
	646, 324, 2, 1097, 1099, 7, 451, 2, 2, 1098, 1100, 7, 157, 2, 2, 1099, 
	1098, 3, 2, 2, 2, 1099, 1100, 3, 2, 2, 2, 1100, 1101, 3, 2, 2, 2, 1101, 
	1103, 7, 54, 2, 2, 1102, 1097, 3, 2, 2, 2, 1102, 1103, 3, 2, 2, 2, 1103, 
	1140, 3, 2, 2, 2, 1104, 1105, 7, 186, 2, 2, 1105, 1117, 5, 556, 279, 2, 
	1106, 1107, 7, 597, 2, 2, 1107, 1112, 5, 576, 289, 2, 1108, 1109, 7, 591, 
	2, 2, 1109, 1111, 5, 576, 289, 2, 1110, 1108, 3, 2, 2, 2, 1111, 1114, 3, 
	2, 2, 2, 1112, 1110, 3, 2, 2, 2, 1112, 1113, 3, 2, 2, 2, 1113, 1115, 3, 
	2, 2, 2, 1114, 1112, 3, 2, 2, 2, 1115, 1116, 7, 598, 2, 2, 1116, 1118, 
	3, 2, 2, 2, 1117, 1106, 3, 2, 2, 2, 1117, 1118, 3, 2, 2, 2, 1118, 1119, 
	3, 2, 2, 2, 1119, 1120, 7, 381, 2, 2, 1120, 1121, 5, 16, 9, 2, 1121, 1140, 
	3, 2, 2, 2, 1122, 1123, 7, 199, 2, 2, 1123, 1124, 7, 175, 2, 2, 1124, 1125, 
	7, 22, 2, 2, 1125, 1130, 5, 44, 23, 2, 1126, 1127, 7, 591, 2, 2, 1127, 
	1129, 5, 44, 23, 2, 1128, 1126, 3, 2, 2, 2, 1129, 1132, 3, 2, 2, 2, 1130, 
	1128, 3, 2, 2, 2, 1130, 1131, 3, 2, 2, 2, 1131, 1133, 3, 2, 2, 2, 1132, 
	1130, 3, 2, 2, 2, 1133, 1134, 7, 440, 2, 2, 1134, 1135, 5, 44, 23, 2, 1135, 
	1140, 3, 2, 2, 2, 1136, 1140, 5, 410, 206, 2, 1137, 1140, 5, 718, 360, 
	2, 1138, 1140, 5, 716, 359, 2, 1139, 1013, 3, 2, 2, 2, 1139, 1014, 3, 2, 
	2, 2, 1139, 1016, 3, 2, 2, 2, 1139, 1021, 3, 2, 2, 2, 1139, 1039, 3, 2, 
	2, 2, 1139, 1054, 3, 2, 2, 2, 1139, 1055, 3, 2, 2, 2, 1139, 1057, 3, 2, 
	2, 2, 1139, 1065, 3, 2, 2, 2, 1139, 1076, 3, 2, 2, 2, 1139, 1090, 3, 2, 
	2, 2, 1139, 1104, 3, 2, 2, 2, 1139, 1122, 3, 2, 2, 2, 1139, 1136, 3, 2, 
	2, 2, 1139, 1137, 3, 2, 2, 2, 1139, 1138, 3, 2, 2, 2, 1140, 31, 3, 2, 2, 
	2, 1141, 1159, 7, 85, 2, 2, 1142, 1144, 7, 377, 2, 2, 1143, 1142, 3, 2, 
	2, 2, 1143, 1144, 3, 2, 2, 2, 1144, 1146, 3, 2, 2, 2, 1145, 1147, 7, 375, 
	2, 2, 1146, 1145, 3, 2, 2, 2, 1146, 1147, 3, 2, 2, 2, 1147, 1160, 3, 2, 
	2, 2, 1148, 1149, 7, 597, 2, 2, 1149, 1154, 5, 42, 22, 2, 1150, 1151, 7, 
	591, 2, 2, 1151, 1153, 5, 42, 22, 2, 1152, 1150, 3, 2, 2, 2, 1153, 1156, 
	3, 2, 2, 2, 1154, 1152, 3, 2, 2, 2, 1154, 1155, 3, 2, 2, 2, 1155, 1157, 
	3, 2, 2, 2, 1156, 1154, 3, 2, 2, 2, 1157, 1158, 7, 598, 2, 2, 1158, 1160, 
	3, 2, 2, 2, 1159, 1143, 3, 2, 2, 2, 1159, 1148, 3, 2, 2, 2, 1160, 1161, 
	3, 2, 2, 2, 1161, 1162, 5, 34, 18, 2, 1162, 33, 3, 2, 2, 2, 1163, 1172, 
	5, 16, 9, 2, 1164, 1172, 5, 36, 19, 2, 1165, 1172, 5, 38, 20, 2, 1166, 
	1169, 7, 391, 2, 2, 1167, 1170, 5, 442, 222, 2, 1168, 1170, 5, 420, 211, 
	2, 1169, 1167, 3, 2, 2, 2, 1169, 1168, 3, 2, 2, 2, 1170, 1172, 3, 2, 2, 
	2, 1171, 1163, 3, 2, 2, 2, 1171, 1164, 3, 2, 2, 2, 1171, 1165, 3, 2, 2, 
	2, 1171, 1166, 3, 2, 2, 2, 1172, 35, 3, 2, 2, 2, 1173, 1174, 7, 84, 2, 
	2, 1174, 1186, 5, 556, 279, 2, 1175, 1176, 7, 597, 2, 2, 1176, 1181, 5, 
	588, 295, 2, 1177, 1178, 7, 591, 2, 2, 1178, 1180, 5, 588, 295, 2, 1179, 
	1177, 3, 2, 2, 2, 1180, 1183, 3, 2, 2, 2, 1181, 1179, 3, 2, 2, 2, 1181, 
	1182, 3, 2, 2, 2, 1182, 1184, 3, 2, 2, 2, 1183, 1181, 3, 2, 2, 2, 1184, 
	1185, 7, 598, 2, 2, 1185, 1187, 3, 2, 2, 2, 1186, 1175, 3, 2, 2, 2, 1186, 
	1187, 3, 2, 2, 2, 1187, 37, 3, 2, 2, 2, 1188, 1189, 7, 58, 2, 2, 1189, 
	1191, 5, 556, 279, 2, 1190, 1192, 7, 354, 2, 2, 1191, 1190, 3, 2, 2, 2, 
	1191, 1192, 3, 2, 2, 2, 1192, 1194, 3, 2, 2, 2, 1193, 1195, 7, 120, 2, 
	2, 1194, 1193, 3, 2, 2, 2, 1194, 1195, 3, 2, 2, 2, 1195, 1200, 3, 2, 2, 
	2, 1196, 1198, 7, 157, 2, 2, 1197, 1196, 3, 2, 2, 2, 1197, 1198, 3, 2, 
	2, 2, 1198, 1199, 3, 2, 2, 2, 1199, 1201, 7, 227, 2, 2, 1200, 1197, 3, 
	2, 2, 2, 1200, 1201, 3, 2, 2, 2, 1201, 1202, 3, 2, 2, 2, 1202, 1205, 7, 
	52, 2, 2, 1203, 1204, 9, 10, 2, 2, 1204, 1206, 7, 103, 2, 2, 1205, 1203, 
	3, 2, 2, 2, 1205, 1206, 3, 2, 2, 2, 1206, 1207, 3, 2, 2, 2, 1207, 1208, 
	7, 408, 2, 2, 1208, 1209, 5, 652, 327, 2, 1209, 39, 3, 2, 2, 2, 1210, 1225, 
	7, 239, 2, 2, 1211, 1212, 5, 556, 279, 2, 1212, 1213, 7, 605, 2, 2, 1213, 
	1215, 3, 2, 2, 2, 1214, 1211, 3, 2, 2, 2, 1214, 1215, 3, 2, 2, 2, 1215, 
	1216, 3, 2, 2, 2, 1216, 1226, 5, 556, 279, 2, 1217, 1226, 7, 376, 2, 2, 
	1218, 1219, 7, 336, 2, 2, 1219, 1226, 7, 301, 2, 2, 1220, 1221, 7, 266, 
	2, 2, 1221, 1222, 7, 124, 2, 2, 1222, 1226, 7, 131, 2, 2, 1223, 1224, 7, 
	235, 2, 2, 1224, 1226, 7, 353, 2, 2, 1225, 1214, 3, 2, 2, 2, 1225, 1217, 
	3, 2, 2, 2, 1225, 1218, 3, 2, 2, 2, 1225, 1220, 3, 2, 2, 2, 1225, 1223, 
	3, 2, 2, 2, 1226, 41, 3, 2, 2, 2, 1227, 1229, 9, 11, 2, 2, 1228, 1230, 
	5, 56, 29, 2, 1229, 1228, 3, 2, 2, 2, 1229, 1230, 3, 2, 2, 2, 1230, 1234, 
	3, 2, 2, 2, 1231, 1232, 7, 477, 2, 2, 1232, 1234, 9, 12, 2, 2, 1233, 1227, 
	3, 2, 2, 2, 1233, 1231, 3, 2, 2, 2, 1234, 43, 3, 2, 2, 2, 1235, 1239, 5, 
	556, 279, 2, 1236, 1239, 7, 397, 2, 2, 1237, 1239, 7, 435, 2, 2, 1238, 
	1235, 3, 2, 2, 2, 1238, 1236, 3, 2, 2, 2, 1238, 1237, 3, 2, 2, 2, 1239, 
	45, 3, 2, 2, 2, 1240, 1245, 5, 48, 25, 2, 1241, 1242, 7, 591, 2, 2, 1242, 
	1244, 5, 48, 25, 2, 1243, 1241, 3, 2, 2, 2, 1244, 1247, 3, 2, 2, 2, 1245, 
	1243, 3, 2, 2, 2, 1245, 1246, 3, 2, 2, 2, 1246, 47, 3, 2, 2, 2, 1247, 1245, 
	3, 2, 2, 2, 1248, 1260, 5, 646, 324, 2, 1249, 1250, 7, 597, 2, 2, 1250, 
	1255, 5, 556, 279, 2, 1251, 1252, 7, 591, 2, 2, 1252, 1254, 5, 556, 279, 
	2, 1253, 1251, 3, 2, 2, 2, 1254, 1257, 3, 2, 2, 2, 1255, 1253, 3, 2, 2, 
	2, 1255, 1256, 3, 2, 2, 2, 1256, 1258, 3, 2, 2, 2, 1257, 1255, 3, 2, 2, 
	2, 1258, 1259, 7, 598, 2, 2, 1259, 1261, 3, 2, 2, 2, 1260, 1249, 3, 2, 
	2, 2, 1260, 1261, 3, 2, 2, 2, 1261, 49, 3, 2, 2, 2, 1262, 1263, 7, 597, 
	2, 2, 1263, 1268, 5, 52, 27, 2, 1264, 1265, 7, 591, 2, 2, 1265, 1267, 5, 
	52, 27, 2, 1266, 1264, 3, 2, 2, 2, 1267, 1270, 3, 2, 2, 2, 1268, 1266, 
	3, 2, 2, 2, 1268, 1269, 3, 2, 2, 2, 1269, 1271, 3, 2, 2, 2, 1270, 1268, 
	3, 2, 2, 2, 1271, 1272, 7, 598, 2, 2, 1272, 1286, 3, 2, 2, 2, 1273, 1275, 
	7, 360, 2, 2, 1274, 1273, 3, 2, 2, 2, 1274, 1275, 3, 2, 2, 2, 1275, 1277, 
	3, 2, 2, 2, 1276, 1278, 7, 359, 2, 2, 1277, 1276, 3, 2, 2, 2, 1277, 1278, 
	3, 2, 2, 2, 1278, 1280, 3, 2, 2, 2, 1279, 1281, 7, 375, 2, 2, 1280, 1279, 
	3, 2, 2, 2, 1280, 1281, 3, 2, 2, 2, 1281, 1283, 3, 2, 2, 2, 1282, 1284, 
	7, 377, 2, 2, 1283, 1282, 3, 2, 2, 2, 1283, 1284, 3, 2, 2, 2, 1284, 1286, 
	3, 2, 2, 2, 1285, 1262, 3, 2, 2, 2, 1285, 1274, 3, 2, 2, 2, 1286, 51, 3, 
	2, 2, 2, 1287, 1289, 9, 13, 2, 2, 1288, 1290, 5, 56, 29, 2, 1289, 1288, 
	3, 2, 2, 2, 1289, 1290, 3, 2, 2, 2, 1290, 1294, 3, 2, 2, 2, 1291, 1292, 
	7, 177, 2, 2, 1292, 1294, 7, 620, 2, 2, 1293, 1287, 3, 2, 2, 2, 1293, 1291, 
	3, 2, 2, 2, 1294, 53, 3, 2, 2, 2, 1295, 1297, 9, 14, 2, 2, 1296, 1298, 
	5, 56, 29, 2, 1297, 1296, 3, 2, 2, 2, 1297, 1298, 3, 2, 2, 2, 1298, 55, 
	3, 2, 2, 2, 1299, 1306, 7, 442, 2, 2, 1300, 1306, 7, 406, 2, 2, 1301, 1306, 
	7, 165, 2, 2, 1302, 1306, 7, 426, 2, 2, 1303, 1306, 7, 620, 2, 2, 1304, 
	1306, 5, 340, 171, 2, 1305, 1299, 3, 2, 2, 2, 1305, 1300, 3, 2, 2, 2, 1305, 
	1301, 3, 2, 2, 2, 1305, 1302, 3, 2, 2, 2, 1305, 1303, 3, 2, 2, 2, 1305, 
	1304, 3, 2, 2, 2, 1306, 57, 3, 2, 2, 2, 1307, 1325, 7, 152, 2, 2, 1308, 
	1325, 7, 189, 2, 2, 1309, 1325, 7, 91, 2, 2, 1310, 1325, 7, 129, 2, 2, 
	1311, 1313, 9, 15, 2, 2, 1312, 1311, 3, 2, 2, 2, 1312, 1313, 3, 2, 2, 2, 
	1313, 1314, 3, 2, 2, 2, 1314, 1325, 5, 350, 176, 2, 1315, 1325, 7, 376, 
	2, 2, 1316, 1318, 7, 94, 2, 2, 1317, 1319, 9, 16, 2, 2, 1318, 1317, 3, 
	2, 2, 2, 1318, 1319, 3, 2, 2, 2, 1319, 1325, 3, 2, 2, 2, 1320, 1322, 7, 
	19, 2, 2, 1321, 1323, 9, 16, 2, 2, 1322, 1321, 3, 2, 2, 2, 1322, 1323, 
	3, 2, 2, 2, 1323, 1325, 3, 2, 2, 2, 1324, 1307, 3, 2, 2, 2, 1324, 1308, 
	3, 2, 2, 2, 1324, 1309, 3, 2, 2, 2, 1324, 1310, 3, 2, 2, 2, 1324, 1312, 
	3, 2, 2, 2, 1324, 1315, 3, 2, 2, 2, 1324, 1316, 3, 2, 2, 2, 1324, 1320, 
	3, 2, 2, 2, 1325, 59, 3, 2, 2, 2, 1326, 1330, 5, 62, 32, 2, 1327, 1330, 
	5, 64, 33, 2, 1328, 1330, 5, 66, 34, 2, 1329, 1326, 3, 2, 2, 2, 1329, 1327, 
	3, 2, 2, 2, 1329, 1328, 3, 2, 2, 2, 1330, 61, 3, 2, 2, 2, 1331, 1371, 7, 
	391, 2, 2, 1332, 1372, 5, 240, 121, 2, 1333, 1372, 5, 272, 137, 2, 1334, 
	1372, 5, 370, 186, 2, 1335, 1372, 5, 188, 95, 2, 1336, 1372, 5, 394, 198, 
	2, 1337, 1372, 5, 430, 216, 2, 1338, 1372, 5, 174, 88, 2, 1339, 1372, 5, 
	170, 86, 2, 1340, 1372, 5, 166, 84, 2, 1341, 1372, 5, 262, 132, 2, 1342, 
	1372, 5, 444, 223, 2, 1343, 1372, 5, 182, 92, 2, 1344, 1372, 5, 178, 90, 
	2, 1345, 1372, 5, 186, 94, 2, 1346, 1372, 5, 184, 93, 2, 1347, 1372, 5, 
	324, 163, 2, 1348, 1372, 5, 254, 128, 2, 1349, 1372, 5, 154, 78, 2, 1350, 
	1372, 5, 168, 85, 2, 1351, 1372, 5, 386, 194, 2, 1352, 1372, 5, 374, 188, 
	2, 1353, 1372, 5, 266, 134, 2, 1354, 1372, 5, 358, 180, 2, 1355, 1372, 
	5, 398, 200, 2, 1356, 1372, 5, 284, 143, 2, 1357, 1372, 5, 356, 179, 2, 
	1358, 1372, 5, 346, 174, 2, 1359, 1372, 5, 176, 89, 2, 1360, 1372, 5, 260, 
	131, 2, 1361, 1372, 5, 364, 183, 2, 1362, 1372, 5, 442, 222, 2, 1363, 1372, 
	5, 440, 221, 2, 1364, 1372, 5, 258, 130, 2, 1365, 1372, 5, 238, 120, 2, 
	1366, 1372, 5, 288, 145, 2, 1367, 1372, 5, 172, 87, 2, 1368, 1372, 5, 194, 
	98, 2, 1369, 1372, 5, 242, 122, 2, 1370, 1372, 5, 420, 211, 2, 1371, 1332, 
	3, 2, 2, 2, 1371, 1333, 3, 2, 2, 2, 1371, 1334, 3, 2, 2, 2, 1371, 1335, 
	3, 2, 2, 2, 1371, 1336, 3, 2, 2, 2, 1371, 1337, 3, 2, 2, 2, 1371, 1338, 
	3, 2, 2, 2, 1371, 1339, 3, 2, 2, 2, 1371, 1340, 3, 2, 2, 2, 1371, 1341, 
	3, 2, 2, 2, 1371, 1342, 3, 2, 2, 2, 1371, 1343, 3, 2, 2, 2, 1371, 1344, 
	3, 2, 2, 2, 1371, 1345, 3, 2, 2, 2, 1371, 1346, 3, 2, 2, 2, 1371, 1347, 
	3, 2, 2, 2, 1371, 1348, 3, 2, 2, 2, 1371, 1349, 3, 2, 2, 2, 1371, 1350, 
	3, 2, 2, 2, 1371, 1351, 3, 2, 2, 2, 1371, 1352, 3, 2, 2, 2, 1371, 1353, 
	3, 2, 2, 2, 1371, 1354, 3, 2, 2, 2, 1371, 1355, 3, 2, 2, 2, 1371, 1356, 
	3, 2, 2, 2, 1371, 1357, 3, 2, 2, 2, 1371, 1358, 3, 2, 2, 2, 1371, 1359, 
	3, 2, 2, 2, 1371, 1360, 3, 2, 2, 2, 1371, 1361, 3, 2, 2, 2, 1371, 1362, 
	3, 2, 2, 2, 1371, 1363, 3, 2, 2, 2, 1371, 1364, 3, 2, 2, 2, 1371, 1365, 
	3, 2, 2, 2, 1371, 1366, 3, 2, 2, 2, 1371, 1367, 3, 2, 2, 2, 1371, 1368, 
	3, 2, 2, 2, 1371, 1369, 3, 2, 2, 2, 1371, 1370, 3, 2, 2, 2, 1372, 1379, 
	3, 2, 2, 2, 1373, 1379, 5, 316, 159, 2, 1374, 1379, 5, 294, 148, 2, 1375, 
	1379, 5, 68, 35, 2, 1376, 1379, 5, 318, 160, 2, 1377, 1379, 5, 276, 139, 
	2, 1378, 1331, 3, 2, 2, 2, 1378, 1373, 3, 2, 2, 2, 1378, 1374, 3, 2, 2, 
	2, 1378, 1375, 3, 2, 2, 2, 1378, 1376, 3, 2, 2, 2, 1378, 1377, 3, 2, 2, 
	2, 1379, 63, 3, 2, 2, 2, 1380, 1415, 7, 12, 2, 2, 1381, 1416, 5, 72, 37, 
	2, 1382, 1416, 5, 190, 96, 2, 1383, 1416, 5, 396, 199, 2, 1384, 1416, 5, 
	112, 57, 2, 1385, 1416, 5, 434, 218, 2, 1386, 1416, 5, 136, 69, 2, 1387, 
	1416, 5, 130, 66, 2, 1388, 1416, 5, 74, 38, 2, 1389, 1416, 5, 218, 110, 
	2, 1390, 1416, 5, 142, 72, 2, 1391, 1416, 5, 70, 36, 2, 1392, 1416, 5, 
	204, 103, 2, 1393, 1416, 5, 108, 55, 2, 1394, 1416, 5, 82, 42, 2, 1395, 
	1416, 5, 124, 63, 2, 1396, 1416, 5, 390, 196, 2, 1397, 1416, 5, 376, 189, 
	2, 1398, 1416, 5, 222, 112, 2, 1399, 1416, 5, 210, 106, 2, 1400, 1416, 
	5, 360, 181, 2, 1401, 1416, 5, 400, 201, 2, 1402, 1416, 5, 408, 205, 2, 
	1403, 1416, 5, 80, 41, 2, 1404, 1416, 5, 118, 60, 2, 1405, 1416, 5, 138, 
	70, 2, 1406, 1416, 5, 214, 108, 2, 1407, 1416, 5, 366, 184, 2, 1408, 1416, 
	5, 84, 43, 2, 1409, 1416, 5, 208, 105, 2, 1410, 1416, 5, 406, 204, 2, 1411, 
	1416, 5, 134, 68, 2, 1412, 1416, 5, 196, 99, 2, 1413, 1416, 5, 198, 100, 
	2, 1414, 1416, 5, 120, 61, 2, 1415, 1381, 3, 2, 2, 2, 1415, 1382, 3, 2, 
	2, 2, 1415, 1383, 3, 2, 2, 2, 1415, 1384, 3, 2, 2, 2, 1415, 1385, 3, 2, 
	2, 2, 1415, 1386, 3, 2, 2, 2, 1415, 1387, 3, 2, 2, 2, 1415, 1388, 3, 2, 
	2, 2, 1415, 1389, 3, 2, 2, 2, 1415, 1390, 3, 2, 2, 2, 1415, 1391, 3, 2, 
	2, 2, 1415, 1392, 3, 2, 2, 2, 1415, 1393, 3, 2, 2, 2, 1415, 1394, 3, 2, 
	2, 2, 1415, 1395, 3, 2, 2, 2, 1415, 1396, 3, 2, 2, 2, 1415, 1397, 3, 2, 
	2, 2, 1415, 1398, 3, 2, 2, 2, 1415, 1399, 3, 2, 2, 2, 1415, 1400, 3, 2, 
	2, 2, 1415, 1401, 3, 2, 2, 2, 1415, 1402, 3, 2, 2, 2, 1415, 1403, 3, 2, 
	2, 2, 1415, 1404, 3, 2, 2, 2, 1415, 1405, 3, 2, 2, 2, 1415, 1406, 3, 2, 
	2, 2, 1415, 1407, 3, 2, 2, 2, 1415, 1408, 3, 2, 2, 2, 1415, 1409, 3, 2, 
	2, 2, 1415, 1410, 3, 2, 2, 2, 1415, 1411, 3, 2, 2, 2, 1415, 1412, 3, 2, 
	2, 2, 1415, 1413, 3, 2, 2, 2, 1415, 1414, 3, 2, 2, 2, 1416, 65, 3, 2, 2, 
	2, 1417, 1430, 7, 73, 2, 2, 1418, 1431, 5, 372, 187, 2, 1419, 1431, 5, 
	542, 272, 2, 1420, 1431, 5, 544, 273, 2, 1421, 1431, 5, 392, 197, 2, 1422, 
	1431, 5, 384, 193, 2, 1423, 1431, 5, 232, 117, 2, 1424, 1431, 5, 230, 116, 
	2, 1425, 1431, 5, 362, 182, 2, 1426, 1431, 5, 548, 275, 2, 1427, 1431, 
	5, 550, 276, 2, 1428, 1431, 5, 546, 274, 2, 1429, 1431, 5, 228, 115, 2, 
	1430, 1418, 3, 2, 2, 2, 1430, 1419, 3, 2, 2, 2, 1430, 1420, 3, 2, 2, 2, 
	1430, 1421, 3, 2, 2, 2, 1430, 1422, 3, 2, 2, 2, 1430, 1423, 3, 2, 2, 2, 
	1430, 1424, 3, 2, 2, 2, 1430, 1425, 3, 2, 2, 2, 1430, 1426, 3, 2, 2, 2, 
	1430, 1427, 3, 2, 2, 2, 1430, 1428, 3, 2, 2, 2, 1430, 1429, 3, 2, 2, 2, 
	1431, 67, 3, 2, 2, 2, 1432, 1433, 7, 110, 2, 2, 1433, 1434, 7, 409, 2, 
	2, 1434, 1435, 7, 225, 2, 2, 1435, 1445, 5, 556, 279, 2, 1436, 1437, 7, 
	420, 2, 2, 1437, 1440, 7, 440, 2, 2, 1438, 1440, 7, 405, 2, 2, 1439, 1436, 
	3, 2, 2, 2, 1439, 1438, 3, 2, 2, 2, 1440, 1441, 3, 2, 2, 2, 1441, 1442, 
	7, 597, 2, 2, 1442, 1443, 5, 720, 361, 2, 1443, 1444, 7, 598, 2, 2, 1444, 
	1446, 3, 2, 2, 2, 1445, 1439, 3, 2, 2, 2, 1445, 1446, 3, 2, 2, 2, 1446, 
	1447, 3, 2, 2, 2, 1447, 1448, 7, 410, 2, 2, 1448, 1449, 7, 234, 2, 2, 1449, 
	1450, 5, 556, 279, 2, 1450, 1451, 7, 417, 2, 2, 1451, 1453, 5, 556, 279, 
	2, 1452, 1454, 5, 468, 235, 2, 1453, 1452, 3, 2, 2, 2, 1453, 1454, 3, 2, 
	2, 2, 1454, 69, 3, 2, 2, 2, 1455, 1457, 9, 17, 2, 2, 1456, 1458, 5, 334, 
	168, 2, 1457, 1456, 3, 2, 2, 2, 1457, 1458, 3, 2, 2, 2, 1458, 1486, 3, 
	2, 2, 2, 1459, 1471, 5, 104, 53, 2, 1460, 1468, 7, 212, 2, 2, 1461, 1462, 
	5, 556, 279, 2, 1462, 1463, 7, 605, 2, 2, 1463, 1465, 3, 2, 2, 2, 1464, 
	1461, 3, 2, 2, 2, 1464, 1465, 3, 2, 2, 2, 1465, 1466, 3, 2, 2, 2, 1466, 
	1469, 5, 556, 279, 2, 1467, 1469, 7, 376, 2, 2, 1468, 1464, 3, 2, 2, 2, 
	1468, 1467, 3, 2, 2, 2, 1469, 1471, 3, 2, 2, 2, 1470, 1459, 3, 2, 2, 2, 
	1470, 1460, 3, 2, 2, 2, 1471, 1472, 3, 2, 2, 2, 1472, 1470, 3, 2, 2, 2, 
	1472, 1473, 3, 2, 2, 2, 1473, 1475, 3, 2, 2, 2, 1474, 1476, 7, 214, 2, 
	2, 1475, 1474, 3, 2, 2, 2, 1475, 1476, 3, 2, 2, 2, 1476, 1487, 3, 2, 2, 
	2, 1477, 1487, 5, 520, 261, 2, 1478, 1487, 5, 522, 262, 2, 1479, 1481, 
	7, 157, 2, 2, 1480, 1479, 3, 2, 2, 2, 1480, 1481, 3, 2, 2, 2, 1481, 1482, 
	3, 2, 2, 2, 1482, 1483, 7, 65, 2, 2, 1483, 1484, 7, 426, 2, 2, 1484, 1485, 
	7, 87, 2, 2, 1485, 1487, 5, 556, 279, 2, 1486, 1470, 3, 2, 2, 2, 1486, 
	1477, 3, 2, 2, 2, 1486, 1478, 3, 2, 2, 2, 1486, 1480, 3, 2, 2, 2, 1487, 
	71, 3, 2, 2, 2, 1488, 1489, 7, 10, 2, 2, 1489, 1492, 5, 334, 168, 2, 1490, 
	1493, 5, 520, 261, 2, 1491, 1493, 5, 522, 262, 2, 1492, 1490, 3, 2, 2, 
	2, 1492, 1491, 3, 2, 2, 2, 1493, 73, 3, 2, 2, 2, 1494, 1495, 7, 87, 2, 
	2, 1495, 1496, 5, 556, 279, 2, 1496, 1497, 5, 76, 39, 2, 1497, 75, 3, 2, 
	2, 2, 1498, 1510, 5, 522, 262, 2, 1499, 1505, 7, 281, 2, 2, 1500, 1503, 
	7, 440, 2, 2, 1501, 1504, 5, 556, 279, 2, 1502, 1504, 5, 340, 171, 2, 1503, 
	1501, 3, 2, 2, 2, 1503, 1502, 3, 2, 2, 2, 1504, 1506, 3, 2, 2, 2, 1505, 
	1500, 3, 2, 2, 2, 1505, 1506, 3, 2, 2, 2, 1506, 1510, 3, 2, 2, 2, 1507, 
	1508, 9, 18, 2, 2, 1508, 1510, 5, 78, 40, 2, 1509, 1498, 3, 2, 2, 2, 1509, 
	1499, 3, 2, 2, 2, 1509, 1507, 3, 2, 2, 2, 1510, 77, 3, 2, 2, 2, 1511, 1512, 
	7, 5, 2, 2, 1512, 1513, 7, 143, 2, 2, 1513, 1602, 5, 646, 324, 2, 1514, 
	1515, 7, 10, 2, 2, 1515, 1602, 5, 334, 168, 2, 1516, 1517, 7, 386, 2, 2, 
	1517, 1518, 7, 597, 2, 2, 1518, 1519, 5, 646, 324, 2, 1519, 1520, 7, 381, 
	2, 2, 1520, 1521, 5, 646, 324, 2, 1521, 1522, 7, 598, 2, 2, 1522, 1602, 
	3, 2, 2, 2, 1523, 1524, 7, 355, 2, 2, 1524, 1602, 5, 556, 279, 2, 1525, 
	1526, 7, 46, 2, 2, 1526, 1602, 5, 556, 279, 2, 1527, 1528, 7, 71, 2, 2, 
	1528, 1602, 5, 646, 324, 2, 1529, 1530, 7, 80, 2, 2, 1530, 1531, 7, 268, 
	2, 2, 1531, 1602, 5, 556, 279, 2, 1532, 1533, 7, 409, 2, 2, 1533, 1534, 
	7, 54, 2, 2, 1534, 1535, 7, 296, 2, 2, 1535, 1602, 5, 556, 279, 2, 1536, 
	1537, 7, 409, 2, 2, 1537, 1538, 7, 438, 2, 2, 1538, 1602, 5, 646, 324, 
	2, 1539, 1540, 7, 95, 2, 2, 1540, 1602, 5, 334, 168, 2, 1541, 1543, 7, 
	141, 2, 2, 1542, 1541, 3, 2, 2, 2, 1542, 1543, 3, 2, 2, 2, 1543, 1544, 
	3, 2, 2, 2, 1544, 1545, 7, 289, 2, 2, 1545, 1602, 5, 646, 324, 2, 1546, 
	1547, 7, 168, 2, 2, 1547, 1602, 5, 268, 135, 2, 1548, 1549, 7, 168, 2, 
	2, 1549, 1550, 7, 32, 2, 2, 1550, 1551, 5, 646, 324, 2, 1551, 1552, 7, 
	446, 2, 2, 1552, 1553, 5, 556, 279, 2, 1553, 1602, 3, 2, 2, 2, 1554, 1555, 
	7, 168, 2, 2, 1555, 1556, 7, 89, 2, 2, 1556, 1557, 5, 646, 324, 2, 1557, 
	1558, 7, 446, 2, 2, 1558, 1559, 5, 556, 279, 2, 1559, 1602, 3, 2, 2, 2, 
	1560, 1562, 7, 191, 2, 2, 1561, 1560, 3, 2, 2, 2, 1561, 1562, 3, 2, 2, 
	2, 1562, 1563, 3, 2, 2, 2, 1563, 1564, 7, 127, 2, 2, 1564, 1602, 5, 556, 
	279, 2, 1565, 1566, 7, 192, 2, 2, 1566, 1602, 5, 334, 168, 2, 1567, 1568, 
	7, 220, 2, 2, 1568, 1602, 5, 334, 168, 2, 1569, 1570, 7, 225, 2, 2, 1570, 
	1602, 5, 556, 279, 2, 1571, 1572, 7, 231, 2, 2, 1572, 1602, 5, 646, 324, 
	2, 1573, 1574, 7, 234, 2, 2, 1574, 1602, 5, 556, 279, 2, 1575, 1576, 7, 
	438, 2, 2, 1576, 1602, 5, 646, 324, 2, 1577, 1578, 7, 264, 2, 2, 1578, 
	1579, 7, 228, 2, 2, 1579, 1580, 7, 40, 2, 2, 1580, 1602, 5, 646, 324, 2, 
	1581, 1582, 7, 264, 2, 2, 1582, 1583, 7, 228, 2, 2, 1583, 1584, 7, 67, 
	2, 2, 1584, 1602, 5, 646, 324, 2, 1585, 1586, 7, 264, 2, 2, 1586, 1587, 
	7, 228, 2, 2, 1587, 1588, 7, 178, 2, 2, 1588, 1602, 5, 646, 324, 2, 1589, 
	1590, 7, 264, 2, 2, 1590, 1591, 7, 228, 2, 2, 1591, 1592, 7, 262, 2, 2, 
	1592, 1602, 5, 646, 324, 2, 1593, 1594, 7, 267, 2, 2, 1594, 1595, 7, 408, 
	2, 2, 1595, 1596, 5, 556, 279, 2, 1596, 1597, 7, 127, 2, 2, 1597, 1598, 
	5, 556, 279, 2, 1598, 1602, 3, 2, 2, 2, 1599, 1600, 7, 271, 2, 2, 1600, 
	1602, 5, 646, 324, 2, 1601, 1511, 3, 2, 2, 2, 1601, 1514, 3, 2, 2, 2, 1601, 
	1516, 3, 2, 2, 2, 1601, 1523, 3, 2, 2, 2, 1601, 1525, 3, 2, 2, 2, 1601, 
	1527, 3, 2, 2, 2, 1601, 1529, 3, 2, 2, 2, 1601, 1532, 3, 2, 2, 2, 1601, 
	1536, 3, 2, 2, 2, 1601, 1539, 3, 2, 2, 2, 1601, 1542, 3, 2, 2, 2, 1601, 
	1546, 3, 2, 2, 2, 1601, 1548, 3, 2, 2, 2, 1601, 1554, 3, 2, 2, 2, 1601, 
	1561, 3, 2, 2, 2, 1601, 1565, 3, 2, 2, 2, 1601, 1567, 3, 2, 2, 2, 1601, 
	1569, 3, 2, 2, 2, 1601, 1571, 3, 2, 2, 2, 1601, 1573, 3, 2, 2, 2, 1601, 
	1575, 3, 2, 2, 2, 1601, 1577, 3, 2, 2, 2, 1601, 1581, 3, 2, 2, 2, 1601, 
	1585, 3, 2, 2, 2, 1601, 1589, 3, 2, 2, 2, 1601, 1593, 3, 2, 2, 2, 1601, 
	1599, 3, 2, 2, 2, 1602, 79, 3, 2, 2, 2, 1603, 1604, 7, 225, 2, 2, 1604, 
	1605, 5, 556, 279, 2, 1605, 1606, 5, 520, 261, 2, 1606, 81, 3, 2, 2, 2, 
	1607, 1609, 7, 191, 2, 2, 1608, 1607, 3, 2, 2, 2, 1608, 1609, 3, 2, 2, 
	2, 1609, 1610, 3, 2, 2, 2, 1610, 1611, 7, 127, 2, 2, 1611, 1614, 5, 556, 
	279, 2, 1612, 1615, 5, 520, 261, 2, 1613, 1615, 5, 518, 260, 2, 1614, 1612, 
	3, 2, 2, 2, 1614, 1613, 3, 2, 2, 2, 1615, 83, 3, 2, 2, 2, 1616, 1618, 7, 
	409, 2, 2, 1617, 1616, 3, 2, 2, 2, 1617, 1618, 3, 2, 2, 2, 1618, 1619, 
	3, 2, 2, 2, 1619, 1621, 7, 438, 2, 2, 1620, 1622, 5, 422, 212, 2, 1621, 
	1620, 3, 2, 2, 2, 1621, 1622, 3, 2, 2, 2, 1622, 1624, 3, 2, 2, 2, 1623, 
	1625, 7, 427, 2, 2, 1624, 1623, 3, 2, 2, 2, 1624, 1625, 3, 2, 2, 2, 1625, 
	1626, 3, 2, 2, 2, 1626, 1628, 5, 646, 324, 2, 1627, 1629, 7, 601, 2, 2, 
	1628, 1627, 3, 2, 2, 2, 1628, 1629, 3, 2, 2, 2, 1629, 1662, 3, 2, 2, 2, 
	1630, 1635, 5, 86, 44, 2, 1631, 1632, 7, 591, 2, 2, 1632, 1634, 5, 86, 
	44, 2, 1633, 1631, 3, 2, 2, 2, 1634, 1637, 3, 2, 2, 2, 1635, 1633, 3, 2, 
	2, 2, 1635, 1636, 3, 2, 2, 2, 1636, 1663, 3, 2, 2, 2, 1637, 1635, 3, 2, 
	2, 2, 1638, 1640, 7, 208, 2, 2, 1639, 1641, 7, 389, 2, 2, 1640, 1639, 3, 
	2, 2, 2, 1640, 1641, 3, 2, 2, 2, 1641, 1642, 3, 2, 2, 2, 1642, 1643, 5, 
	556, 279, 2, 1643, 1644, 7, 440, 2, 2, 1644, 1645, 5, 556, 279, 2, 1645, 
	1663, 3, 2, 2, 2, 1646, 1663, 5, 522, 262, 2, 1647, 1663, 5, 520, 261, 
	2, 1648, 1649, 7, 208, 2, 2, 1649, 1650, 7, 390, 2, 2, 1650, 1651, 5, 556, 
	279, 2, 1651, 1652, 7, 440, 2, 2, 1652, 1653, 5, 556, 279, 2, 1653, 1663, 
	3, 2, 2, 2, 1654, 1655, 7, 17, 2, 2, 1655, 1656, 7, 180, 2, 2, 1656, 1657, 
	5, 646, 324, 2, 1657, 1658, 5, 450, 226, 2, 1658, 1663, 3, 2, 2, 2, 1659, 
	1660, 7, 66, 2, 2, 1660, 1661, 7, 180, 2, 2, 1661, 1663, 5, 646, 324, 2, 
	1662, 1630, 3, 2, 2, 2, 1662, 1638, 3, 2, 2, 2, 1662, 1646, 3, 2, 2, 2, 
	1662, 1647, 3, 2, 2, 2, 1662, 1648, 3, 2, 2, 2, 1662, 1654, 3, 2, 2, 2, 
	1662, 1659, 3, 2, 2, 2, 1663, 85, 3, 2, 2, 2, 1664, 1666, 7, 7, 2, 2, 1665, 
	1667, 7, 389, 2, 2, 1666, 1665, 3, 2, 2, 2, 1666, 1667, 3, 2, 2, 2, 1667, 
	1669, 3, 2, 2, 2, 1668, 1670, 5, 424, 213, 2, 1669, 1668, 3, 2, 2, 2, 1669, 
	1670, 3, 2, 2, 2, 1670, 1671, 3, 2, 2, 2, 1671, 1774, 5, 480, 241, 2, 1672, 
	1674, 7, 73, 2, 2, 1673, 1675, 7, 389, 2, 2, 1674, 1673, 3, 2, 2, 2, 1674, 
	1675, 3, 2, 2, 2, 1675, 1677, 3, 2, 2, 2, 1676, 1678, 5, 422, 212, 2, 1677, 
	1676, 3, 2, 2, 2, 1677, 1678, 3, 2, 2, 2, 1678, 1679, 3, 2, 2, 2, 1679, 
	1681, 5, 556, 279, 2, 1680, 1682, 5, 530, 266, 2, 1681, 1680, 3, 2, 2, 
	2, 1681, 1682, 3, 2, 2, 2, 1682, 1774, 3, 2, 2, 2, 1683, 1685, 7, 12, 2, 
	2, 1684, 1686, 7, 389, 2, 2, 1685, 1684, 3, 2, 2, 2, 1685, 1686, 3, 2, 
	2, 2, 1686, 1687, 3, 2, 2, 2, 1687, 1688, 5, 556, 279, 2, 1688, 1689, 5, 
	88, 45, 2, 1689, 1774, 3, 2, 2, 2, 1690, 1691, 7, 7, 2, 2, 1691, 1694, 
	5, 484, 243, 2, 1692, 1693, 7, 423, 2, 2, 1693, 1695, 7, 283, 2, 2, 1694, 
	1692, 3, 2, 2, 2, 1694, 1695, 3, 2, 2, 2, 1695, 1774, 3, 2, 2, 2, 1696, 
	1774, 5, 96, 49, 2, 1697, 1774, 5, 98, 50, 2, 1698, 1699, 9, 19, 2, 2, 
	1699, 1703, 7, 268, 2, 2, 1700, 1704, 5, 646, 324, 2, 1701, 1704, 7, 376, 
	2, 2, 1702, 1704, 7, 445, 2, 2, 1703, 1700, 3, 2, 2, 2, 1703, 1701, 3, 
	2, 2, 2, 1703, 1702, 3, 2, 2, 2, 1703, 1704, 3, 2, 2, 2, 1704, 1774, 3, 
	2, 2, 2, 1705, 1706, 7, 75, 2, 2, 1706, 1707, 9, 20, 2, 2, 1707, 1708, 
	7, 268, 2, 2, 1708, 1774, 5, 646, 324, 2, 1709, 1710, 9, 19, 2, 2, 1710, 
	1711, 7, 223, 2, 2, 1711, 1774, 5, 646, 324, 2, 1712, 1713, 7, 75, 2, 2, 
	1713, 1714, 9, 20, 2, 2, 1714, 1715, 7, 223, 2, 2, 1715, 1774, 5, 646, 
	324, 2, 1716, 1717, 9, 19, 2, 2, 1717, 1718, 7, 332, 2, 2, 1718, 1719, 
	7, 131, 2, 2, 1719, 1774, 7, 230, 2, 2, 1720, 1722, 7, 157, 2, 2, 1721, 
	1720, 3, 2, 2, 2, 1721, 1722, 3, 2, 2, 2, 1722, 1723, 3, 2, 2, 2, 1723, 
	1724, 7, 93, 2, 2, 1724, 1725, 7, 332, 2, 2, 1725, 1726, 7, 131, 2, 2, 
	1726, 1774, 7, 230, 2, 2, 1727, 1728, 7, 34, 2, 2, 1728, 1729, 7, 426, 
	2, 2, 1729, 1774, 5, 646, 324, 2, 1730, 1731, 7, 236, 2, 2, 1731, 1732, 
	7, 294, 2, 2, 1732, 1774, 9, 21, 2, 2, 1733, 1734, 7, 236, 2, 2, 1734, 
	1735, 7, 451, 2, 2, 1735, 1774, 7, 166, 2, 2, 1736, 1737, 7, 236, 2, 2, 
	1737, 1774, 9, 22, 2, 2, 1738, 1739, 7, 236, 2, 2, 1739, 1774, 5, 500, 
	251, 2, 1740, 1741, 7, 212, 2, 2, 1741, 1774, 5, 496, 249, 2, 1742, 1774, 
	5, 468, 235, 2, 1743, 1744, 7, 116, 2, 2, 1744, 1774, 5, 646, 324, 2, 1745, 
	1746, 7, 157, 2, 2, 1746, 1747, 7, 116, 2, 2, 1747, 1774, 5, 646, 324, 
	2, 1748, 1749, 7, 164, 2, 2, 1749, 1774, 5, 646, 324, 2, 1750, 1751, 7, 
	423, 2, 2, 1751, 1774, 7, 164, 2, 2, 1752, 1774, 5, 518, 260, 2, 1753, 
	1774, 5, 514, 258, 2, 1754, 1755, 7, 211, 2, 2, 1755, 1762, 7, 105, 2, 
	2, 1756, 1763, 7, 398, 2, 2, 1757, 1763, 7, 360, 2, 2, 1758, 1763, 7, 159, 
	2, 2, 1759, 1760, 7, 446, 2, 2, 1760, 1761, 7, 114, 2, 2, 1761, 1763, 5, 
	556, 279, 2, 1762, 1756, 3, 2, 2, 2, 1762, 1757, 3, 2, 2, 2, 1762, 1758, 
	3, 2, 2, 2, 1762, 1759, 3, 2, 2, 2, 1763, 1774, 3, 2, 2, 2, 1764, 1765, 
	7, 12, 2, 2, 1765, 1766, 7, 390, 2, 2, 1766, 1768, 5, 556, 279, 2, 1767, 
	1769, 5, 100, 51, 2, 1768, 1767, 3, 2, 2, 2, 1768, 1769, 3, 2, 2, 2, 1769, 
	1771, 3, 2, 2, 2, 1770, 1772, 5, 102, 52, 2, 1771, 1770, 3, 2, 2, 2, 1771, 
	1772, 3, 2, 2, 2, 1772, 1774, 3, 2, 2, 2, 1773, 1664, 3, 2, 2, 2, 1773, 
	1672, 3, 2, 2, 2, 1773, 1683, 3, 2, 2, 2, 1773, 1690, 3, 2, 2, 2, 1773, 
	1696, 3, 2, 2, 2, 1773, 1697, 3, 2, 2, 2, 1773, 1698, 3, 2, 2, 2, 1773, 
	1705, 3, 2, 2, 2, 1773, 1709, 3, 2, 2, 2, 1773, 1712, 3, 2, 2, 2, 1773, 
	1716, 3, 2, 2, 2, 1773, 1721, 3, 2, 2, 2, 1773, 1727, 3, 2, 2, 2, 1773, 
	1730, 3, 2, 2, 2, 1773, 1733, 3, 2, 2, 2, 1773, 1736, 3, 2, 2, 2, 1773, 
	1738, 3, 2, 2, 2, 1773, 1740, 3, 2, 2, 2, 1773, 1742, 3, 2, 2, 2, 1773, 
	1743, 3, 2, 2, 2, 1773, 1745, 3, 2, 2, 2, 1773, 1748, 3, 2, 2, 2, 1773, 
	1750, 3, 2, 2, 2, 1773, 1752, 3, 2, 2, 2, 1773, 1753, 3, 2, 2, 2, 1773, 
	1754, 3, 2, 2, 2, 1773, 1764, 3, 2, 2, 2, 1774, 87, 3, 2, 2, 2, 1775, 1776, 
	7, 236, 2, 2, 1776, 1778, 7, 54, 2, 2, 1777, 1775, 3, 2, 2, 2, 1777, 1778, 
	3, 2, 2, 2, 1778, 1779, 3, 2, 2, 2, 1779, 1780, 7, 271, 2, 2, 1780, 1782, 
	5, 576, 289, 2, 1781, 1783, 5, 532, 267, 2, 1782, 1781, 3, 2, 2, 2, 1782, 
	1783, 3, 2, 2, 2, 1783, 1786, 3, 2, 2, 2, 1784, 1785, 7, 446, 2, 2, 1785, 
	1787, 5, 588, 295, 2, 1786, 1784, 3, 2, 2, 2, 1786, 1787, 3, 2, 2, 2, 1787, 
	1823, 3, 2, 2, 2, 1788, 1789, 7, 7, 2, 2, 1789, 1823, 5, 90, 46, 2, 1790, 
	1823, 5, 150, 76, 2, 1791, 1823, 5, 152, 77, 2, 1792, 1795, 7, 236, 2, 
	2, 1793, 1795, 7, 73, 2, 2, 1794, 1792, 3, 2, 2, 2, 1794, 1793, 3, 2, 2, 
	2, 1795, 1796, 3, 2, 2, 2, 1796, 1797, 7, 423, 2, 2, 1797, 1823, 7, 424, 
	2, 2, 1798, 1799, 7, 73, 2, 2, 1799, 1801, 7, 105, 2, 2, 1800, 1802, 5, 
	422, 212, 2, 1801, 1800, 3, 2, 2, 2, 1801, 1802, 3, 2, 2, 2, 1802, 1823, 
	3, 2, 2, 2, 1803, 1804, 7, 73, 2, 2, 1804, 1806, 7, 86, 2, 2, 1805, 1807, 
	5, 422, 212, 2, 1806, 1805, 3, 2, 2, 2, 1806, 1807, 3, 2, 2, 2, 1807, 1823, 
	3, 2, 2, 2, 1808, 1809, 7, 236, 2, 2, 1809, 1823, 5, 500, 251, 2, 1810, 
	1823, 5, 216, 109, 2, 1811, 1812, 7, 236, 2, 2, 1812, 1813, 7, 251, 2, 
	2, 1813, 1823, 5, 94, 48, 2, 1814, 1815, 7, 212, 2, 2, 1815, 1823, 5, 496, 
	249, 2, 1816, 1823, 5, 468, 235, 2, 1817, 1819, 5, 92, 47, 2, 1818, 1817, 
	3, 2, 2, 2, 1819, 1820, 3, 2, 2, 2, 1820, 1818, 3, 2, 2, 2, 1820, 1821, 
	3, 2, 2, 2, 1821, 1823, 3, 2, 2, 2, 1822, 1777, 3, 2, 2, 2, 1822, 1788, 
	3, 2, 2, 2, 1822, 1790, 3, 2, 2, 2, 1822, 1791, 3, 2, 2, 2, 1822, 1794, 
	3, 2, 2, 2, 1822, 1798, 3, 2, 2, 2, 1822, 1803, 3, 2, 2, 2, 1822, 1808, 
	3, 2, 2, 2, 1822, 1810, 3, 2, 2, 2, 1822, 1811, 3, 2, 2, 2, 1822, 1814, 
	3, 2, 2, 2, 1822, 1816, 3, 2, 2, 2, 1822, 1818, 3, 2, 2, 2, 1823, 89, 3, 
	2, 2, 2, 1824, 1828, 7, 97, 2, 2, 1825, 1829, 7, 13, 2, 2, 1826, 1827, 
	7, 22, 2, 2, 1827, 1829, 7, 398, 2, 2, 1828, 1825, 3, 2, 2, 2, 1828, 1826, 
	3, 2, 2, 2, 1829, 1830, 3, 2, 2, 2, 1830, 1831, 7, 381, 2, 2, 1831, 1840, 
	7, 105, 2, 2, 1832, 1834, 7, 597, 2, 2, 1833, 1835, 5, 348, 175, 2, 1834, 
	1833, 3, 2, 2, 2, 1835, 1836, 3, 2, 2, 2, 1836, 1834, 3, 2, 2, 2, 1836, 
	1837, 3, 2, 2, 2, 1837, 1838, 3, 2, 2, 2, 1838, 1839, 7, 598, 2, 2, 1839, 
	1841, 3, 2, 2, 2, 1840, 1832, 3, 2, 2, 2, 1840, 1841, 3, 2, 2, 2, 1841, 
	91, 3, 2, 2, 2, 1842, 1843, 7, 236, 2, 2, 1843, 1847, 7, 97, 2, 2, 1844, 
	1848, 7, 13, 2, 2, 1845, 1846, 7, 22, 2, 2, 1846, 1848, 7, 398, 2, 2, 1847, 
	1844, 3, 2, 2, 2, 1847, 1845, 3, 2, 2, 2, 1848, 1859, 3, 2, 2, 2, 1849, 
	1850, 7, 236, 2, 2, 1850, 1859, 5, 348, 175, 2, 1851, 1856, 7, 213, 2, 
	2, 1852, 1854, 7, 451, 2, 2, 1853, 1852, 3, 2, 2, 2, 1853, 1854, 3, 2, 
	2, 2, 1854, 1855, 3, 2, 2, 2, 1855, 1857, 7, 620, 2, 2, 1856, 1853, 3, 
	2, 2, 2, 1856, 1857, 3, 2, 2, 2, 1857, 1859, 3, 2, 2, 2, 1858, 1842, 3, 
	2, 2, 2, 1858, 1849, 3, 2, 2, 2, 1858, 1851, 3, 2, 2, 2, 1859, 93, 3, 2, 
	2, 2, 1860, 1861, 9, 23, 2, 2, 1861, 95, 3, 2, 2, 2, 1862, 1863, 7, 284, 
	2, 2, 1863, 1864, 7, 390, 2, 2, 1864, 1865, 5, 646, 324, 2, 1865, 97, 3, 
	2, 2, 2, 1866, 1867, 7, 73, 2, 2, 1867, 1869, 7, 390, 2, 2, 1868, 1870, 
	5, 422, 212, 2, 1869, 1868, 3, 2, 2, 2, 1869, 1870, 3, 2, 2, 2, 1870, 1871, 
	3, 2, 2, 2, 1871, 1873, 5, 556, 279, 2, 1872, 1874, 5, 530, 266, 2, 1873, 
	1872, 3, 2, 2, 2, 1873, 1874, 3, 2, 2, 2, 1874, 99, 3, 2, 2, 2, 1875, 1877, 
	7, 423, 2, 2, 1876, 1875, 3, 2, 2, 2, 1876, 1877, 3, 2, 2, 2, 1877, 1878, 
	3, 2, 2, 2, 1878, 1879, 7, 399, 2, 2, 1879, 101, 3, 2, 2, 2, 1880, 1881, 
	7, 415, 2, 2, 1881, 1882, 9, 24, 2, 2, 1882, 103, 3, 2, 2, 2, 1883, 1887, 
	7, 25, 2, 2, 1884, 1885, 7, 215, 2, 2, 1885, 1887, 7, 424, 2, 2, 1886, 
	1883, 3, 2, 2, 2, 1886, 1884, 3, 2, 2, 2, 1887, 1888, 3, 2, 2, 2, 1888, 
	1889, 7, 426, 2, 2, 1889, 1890, 7, 424, 2, 2, 1890, 1940, 7, 119, 2, 2, 
	1891, 1892, 7, 267, 2, 2, 1892, 1897, 5, 328, 165, 2, 1893, 1894, 7, 591, 
	2, 2, 1894, 1896, 5, 328, 165, 2, 1895, 1893, 3, 2, 2, 2, 1896, 1899, 3, 
	2, 2, 2, 1897, 1895, 3, 2, 2, 2, 1897, 1898, 3, 2, 2, 2, 1898, 1940, 3, 
	2, 2, 2, 1899, 1897, 3, 2, 2, 2, 1900, 1940, 7, 253, 2, 2, 1901, 1940, 
	7, 108, 2, 2, 1902, 1940, 7, 291, 2, 2, 1903, 1940, 7, 244, 2, 2, 1904, 
	1906, 7, 423, 2, 2, 1905, 1904, 3, 2, 2, 2, 1905, 1906, 3, 2, 2, 2, 1906, 
	1907, 3, 2, 2, 2, 1907, 1940, 7, 130, 2, 2, 1908, 1910, 7, 88, 2, 2, 1909, 
	1908, 3, 2, 2, 2, 1909, 1910, 3, 2, 2, 2, 1910, 1911, 3, 2, 2, 2, 1911, 
	1912, 7, 230, 2, 2, 1912, 1940, 9, 25, 2, 2, 1913, 1914, 7, 177, 2, 2, 
	1914, 1940, 9, 26, 2, 2, 1915, 1916, 7, 48, 2, 2, 1916, 1940, 5, 602, 302, 
	2, 1917, 1918, 7, 222, 2, 2, 1918, 1940, 5, 602, 302, 2, 1919, 1920, 7, 
	256, 2, 2, 1920, 1940, 5, 646, 324, 2, 1921, 1925, 7, 236, 2, 2, 1922, 
	1923, 5, 556, 279, 2, 1923, 1924, 7, 605, 2, 2, 1924, 1926, 3, 2, 2, 2, 
	1925, 1922, 3, 2, 2, 2, 1925, 1926, 3, 2, 2, 2, 1926, 1927, 3, 2, 2, 2, 
	1927, 1932, 5, 556, 279, 2, 1928, 1929, 9, 27, 2, 2, 1929, 1933, 5, 282, 
	142, 2, 1930, 1931, 7, 410, 2, 2, 1931, 1933, 7, 51, 2, 2, 1932, 1928, 
	3, 2, 2, 2, 1932, 1930, 3, 2, 2, 2, 1933, 1940, 3, 2, 2, 2, 1934, 1935, 
	7, 127, 2, 2, 1935, 1940, 5, 556, 279, 2, 1936, 1940, 7, 450, 2, 2, 1937, 
	1938, 7, 381, 2, 2, 1938, 1940, 5, 106, 54, 2, 1939, 1886, 3, 2, 2, 2, 
	1939, 1891, 3, 2, 2, 2, 1939, 1900, 3, 2, 2, 2, 1939, 1901, 3, 2, 2, 2, 
	1939, 1902, 3, 2, 2, 2, 1939, 1903, 3, 2, 2, 2, 1939, 1905, 3, 2, 2, 2, 
	1939, 1909, 3, 2, 2, 2, 1939, 1913, 3, 2, 2, 2, 1939, 1915, 3, 2, 2, 2, 
	1939, 1917, 3, 2, 2, 2, 1939, 1919, 3, 2, 2, 2, 1939, 1921, 3, 2, 2, 2, 
	1939, 1934, 3, 2, 2, 2, 1939, 1936, 3, 2, 2, 2, 1939, 1937, 3, 2, 2, 2, 
	1940, 105, 3, 2, 2, 2, 1941, 1944, 5, 340, 171, 2, 1942, 1943, 7, 591, 
	2, 2, 1943, 1945, 5, 340, 171, 2, 1944, 1942, 3, 2, 2, 2, 1944, 1945, 3, 
	2, 2, 2, 1945, 107, 3, 2, 2, 2, 1946, 1948, 7, 114, 2, 2, 1947, 1949, 5, 
	422, 212, 2, 1948, 1947, 3, 2, 2, 2, 1948, 1949, 3, 2, 2, 2, 1949, 1950, 
	3, 2, 2, 2, 1950, 1951, 5, 646, 324, 2, 1951, 1952, 5, 110, 56, 2, 1952, 
	1966, 3, 2, 2, 2, 1953, 1954, 7, 114, 2, 2, 1954, 1955, 7, 376, 2, 2, 1955, 
	1956, 7, 414, 2, 2, 1956, 1957, 7, 260, 2, 2, 1957, 1961, 5, 556, 279, 
	2, 1958, 1959, 7, 175, 2, 2, 1959, 1960, 7, 22, 2, 2, 1960, 1962, 5, 720, 
	361, 2, 1961, 1958, 3, 2, 2, 2, 1961, 1962, 3, 2, 2, 2, 1962, 1963, 3, 
	2, 2, 2, 1963, 1964, 5, 514, 258, 2, 1964, 1966, 3, 2, 2, 2, 1965, 1946, 
	3, 2, 2, 2, 1965, 1953, 3, 2, 2, 2, 1966, 109, 3, 2, 2, 2, 1967, 1996, 
	5, 520, 261, 2, 1968, 1969, 7, 17, 2, 2, 1969, 1970, 7, 180, 2, 2, 1970, 
	1996, 5, 646, 324, 2, 1971, 1973, 7, 157, 2, 2, 1972, 1971, 3, 2, 2, 2, 
	1972, 1973, 3, 2, 2, 2, 1973, 1974, 3, 2, 2, 2, 1974, 1975, 7, 65, 2, 2, 
	1975, 1976, 7, 426, 2, 2, 1976, 1977, 7, 87, 2, 2, 1977, 1996, 5, 646, 
	324, 2, 1978, 1980, 7, 12, 2, 2, 1979, 1981, 7, 389, 2, 2, 1980, 1979, 
	3, 2, 2, 2, 1980, 1981, 3, 2, 2, 2, 1981, 1984, 3, 2, 2, 2, 1982, 1985, 
	7, 620, 2, 2, 1983, 1985, 5, 556, 279, 2, 1984, 1982, 3, 2, 2, 2, 1984, 
	1983, 3, 2, 2, 2, 1985, 1986, 3, 2, 2, 2, 1986, 1996, 5, 216, 109, 2, 1987, 
	1988, 7, 212, 2, 2, 1988, 1989, 7, 597, 2, 2, 1989, 1990, 5, 720, 361, 
	2, 1990, 1991, 7, 598, 2, 2, 1991, 1996, 3, 2, 2, 2, 1992, 1996, 5, 514, 
	258, 2, 1993, 1994, 7, 236, 2, 2, 1994, 1996, 5, 500, 251, 2, 1995, 1967, 
	3, 2, 2, 2, 1995, 1968, 3, 2, 2, 2, 1995, 1972, 3, 2, 2, 2, 1995, 1978, 
	3, 2, 2, 2, 1995, 1987, 3, 2, 2, 2, 1995, 1992, 3, 2, 2, 2, 1995, 1993, 
	3, 2, 2, 2, 1996, 111, 3, 2, 2, 2, 1997, 1998, 7, 398, 2, 2, 1998, 2002, 
	7, 190, 2, 2, 1999, 2000, 7, 408, 2, 2, 2000, 2001, 9, 28, 2, 2, 2001, 
	2003, 5, 720, 361, 2, 2002, 1999, 3, 2, 2, 2, 2002, 2003, 3, 2, 2, 2, 2003, 
	2007, 3, 2, 2, 2, 2004, 2005, 7, 414, 2, 2, 2005, 2006, 7, 225, 2, 2, 2006, 
	2008, 5, 720, 361, 2, 2007, 2004, 3, 2, 2, 2, 2007, 2008, 3, 2, 2, 2, 2008, 
	2009, 3, 2, 2, 2, 2009, 2010, 5, 114, 58, 2, 2010, 113, 3, 2, 2, 2, 2011, 
	2017, 7, 411, 2, 2, 2012, 2014, 7, 216, 2, 2, 2013, 2015, 5, 116, 59, 2, 
	2014, 2013, 3, 2, 2, 2, 2014, 2015, 3, 2, 2, 2, 2015, 2017, 3, 2, 2, 2, 
	2016, 2011, 3, 2, 2, 2, 2016, 2012, 3, 2, 2, 2, 2017, 2073, 3, 2, 2, 2, 
	2018, 2023, 5, 524, 263, 2, 2019, 2020, 7, 591, 2, 2, 2020, 2022, 5, 524, 
	263, 2, 2021, 2019, 3, 2, 2, 2, 2022, 2025, 3, 2, 2, 2, 2023, 2021, 3, 
	2, 2, 2, 2023, 2024, 3, 2, 2, 2, 2024, 2026, 3, 2, 2, 2, 2025, 2023, 3, 
	2, 2, 2, 2026, 2027, 7, 426, 2, 2, 2027, 2028, 7, 259, 2, 2, 2028, 2074, 
	3, 2, 2, 2, 2029, 2034, 5, 526, 264, 2, 2030, 2031, 7, 591, 2, 2, 2031, 
	2033, 5, 526, 264, 2, 2032, 2030, 3, 2, 2, 2, 2033, 2036, 3, 2, 2, 2, 2034, 
	2032, 3, 2, 2, 2, 2034, 2035, 3, 2, 2, 2, 2035, 2042, 3, 2, 2, 2, 2036, 
	2034, 3, 2, 2, 2, 2037, 2039, 7, 376, 2, 2, 2038, 2040, 7, 190, 2, 2, 2039, 
	2038, 3, 2, 2, 2, 2039, 2040, 3, 2, 2, 2, 2040, 2042, 3, 2, 2, 2, 2041, 
	2029, 3, 2, 2, 2, 2041, 2037, 3, 2, 2, 2, 2042, 2043, 3, 2, 2, 2, 2043, 
	2044, 7, 426, 2, 2, 2044, 2074, 7, 232, 2, 2, 2045, 2051, 7, 84, 2, 2, 
	2046, 2048, 7, 376, 2, 2, 2047, 2049, 7, 190, 2, 2, 2048, 2047, 3, 2, 2, 
	2, 2048, 2049, 3, 2, 2, 2, 2049, 2051, 3, 2, 2, 2, 2050, 2045, 3, 2, 2, 
	2, 2050, 2046, 3, 2, 2, 2, 2051, 2052, 3, 2, 2, 2, 2052, 2053, 7, 426, 
	2, 2, 2053, 2074, 7, 96, 2, 2, 2054, 2061, 7, 550, 2, 2, 2055, 2061, 7, 
	391, 2, 2, 2056, 2058, 7, 376, 2, 2, 2057, 2059, 7, 190, 2, 2, 2058, 2057, 
	3, 2, 2, 2, 2058, 2059, 3, 2, 2, 2, 2059, 2061, 3, 2, 2, 2, 2060, 2054, 
	3, 2, 2, 2, 2060, 2055, 3, 2, 2, 2, 2060, 2056, 3, 2, 2, 2, 2061, 2062, 
	3, 2, 2, 2, 2062, 2063, 7, 426, 2, 2, 2063, 2074, 7, 226, 2, 2, 2064, 2070, 
	7, 550, 2, 2, 2065, 2067, 7, 376, 2, 2, 2066, 2068, 7, 190, 2, 2, 2067, 
	2066, 3, 2, 2, 2, 2067, 2068, 3, 2, 2, 2, 2068, 2070, 3, 2, 2, 2, 2069, 
	2064, 3, 2, 2, 2, 2069, 2065, 3, 2, 2, 2, 2070, 2071, 3, 2, 2, 2, 2071, 
	2072, 7, 426, 2, 2, 2072, 2074, 7, 272, 2, 2, 2073, 2018, 3, 2, 2, 2, 2073, 
	2041, 3, 2, 2, 2, 2073, 2050, 3, 2, 2, 2, 2073, 2060, 3, 2, 2, 2, 2073, 
	2069, 3, 2, 2, 2, 2074, 2077, 3, 2, 2, 2, 2075, 2078, 5, 308, 155, 2, 2076, 
	2078, 5, 310, 156, 2, 2077, 2075, 3, 2, 2, 2, 2077, 2076, 3, 2, 2, 2, 2078, 
	115, 3, 2, 2, 2, 2079, 2080, 7, 411, 2, 2, 2080, 2081, 7, 169, 2, 2, 2081, 
	2082, 7, 408, 2, 2, 2082, 117, 3, 2, 2, 2, 2083, 2085, 7, 231, 2, 2, 2084, 
	2086, 5, 422, 212, 2, 2085, 2084, 3, 2, 2, 2, 2085, 2086, 3, 2, 2, 2, 2086, 
	2087, 3, 2, 2, 2, 2087, 2103, 5, 646, 324, 2, 2088, 2097, 5, 348, 175, 
	2, 2089, 2094, 7, 213, 2, 2, 2090, 2092, 7, 451, 2, 2, 2091, 2090, 3, 2, 
	2, 2, 2091, 2092, 3, 2, 2, 2, 2092, 2093, 3, 2, 2, 2, 2093, 2095, 5, 350, 
	176, 2, 2094, 2091, 3, 2, 2, 2, 2094, 2095, 3, 2, 2, 2, 2095, 2097, 3, 
	2, 2, 2, 2096, 2088, 3, 2, 2, 2, 2096, 2089, 3, 2, 2, 2, 2097, 2100, 3, 
	2, 2, 2, 2098, 2096, 3, 2, 2, 2, 2098, 2099, 3, 2, 2, 2, 2099, 2104, 3, 
	2, 2, 2, 2100, 2098, 3, 2, 2, 2, 2101, 2104, 5, 522, 262, 2, 2102, 2104, 
	5, 520, 261, 2, 2103, 2098, 3, 2, 2, 2, 2103, 2101, 3, 2, 2, 2, 2103, 2102, 
	3, 2, 2, 2, 2104, 119, 3, 2, 2, 2, 2105, 2107, 7, 289, 2, 2, 2106, 2108, 
	5, 422, 212, 2, 2107, 2106, 3, 2, 2, 2, 2107, 2108, 3, 2, 2, 2, 2108, 2109, 
	3, 2, 2, 2, 2109, 2110, 5, 646, 324, 2, 2110, 2111, 5, 122, 62, 2, 2111, 
	121, 3, 2, 2, 2, 2112, 2114, 7, 12, 2, 2, 2113, 2115, 7, 389, 2, 2, 2114, 
	2113, 3, 2, 2, 2, 2114, 2115, 3, 2, 2, 2, 2115, 2116, 3, 2, 2, 2, 2116, 
	2117, 5, 556, 279, 2, 2117, 2118, 5, 150, 76, 2, 2118, 2141, 3, 2, 2, 2, 
	2119, 2121, 7, 12, 2, 2, 2120, 2122, 7, 389, 2, 2, 2121, 2120, 3, 2, 2, 
	2, 2121, 2122, 3, 2, 2, 2, 2122, 2123, 3, 2, 2, 2, 2123, 2124, 5, 556, 
	279, 2, 2124, 2125, 5, 152, 77, 2, 2125, 2141, 3, 2, 2, 2, 2126, 2128, 
	7, 208, 2, 2, 2127, 2129, 7, 389, 2, 2, 2128, 2127, 3, 2, 2, 2, 2128, 2129, 
	3, 2, 2, 2, 2129, 2130, 3, 2, 2, 2, 2130, 2131, 5, 556, 279, 2, 2131, 2132, 
	7, 440, 2, 2, 2132, 2133, 5, 556, 279, 2, 2133, 2141, 3, 2, 2, 2, 2134, 
	2141, 5, 520, 261, 2, 2135, 2141, 5, 522, 262, 2, 2136, 2137, 7, 236, 2, 
	2, 2137, 2141, 5, 500, 251, 2, 2138, 2139, 7, 212, 2, 2, 2139, 2141, 5, 
	496, 249, 2, 2140, 2112, 3, 2, 2, 2, 2140, 2119, 3, 2, 2, 2, 2140, 2126, 
	3, 2, 2, 2, 2140, 2134, 3, 2, 2, 2, 2140, 2135, 3, 2, 2, 2, 2140, 2136, 
	3, 2, 2, 2, 2140, 2138, 3, 2, 2, 2, 2141, 123, 3, 2, 2, 2, 2142, 2143, 
	7, 141, 2, 2, 2143, 2145, 7, 289, 2, 2, 2144, 2146, 5, 422, 212, 2, 2145, 
	2144, 3, 2, 2, 2, 2145, 2146, 3, 2, 2, 2, 2146, 2147, 3, 2, 2, 2, 2147, 
	2148, 5, 646, 324, 2, 2148, 2149, 5, 126, 64, 2, 2149, 2164, 3, 2, 2, 2, 
	2150, 2151, 7, 141, 2, 2, 2151, 2152, 7, 289, 2, 2, 2152, 2153, 7, 376, 
	2, 2, 2153, 2154, 7, 414, 2, 2, 2154, 2155, 7, 260, 2, 2, 2155, 2159, 5, 
	556, 279, 2, 2156, 2157, 7, 175, 2, 2, 2157, 2158, 7, 22, 2, 2, 2158, 2160, 
	5, 720, 361, 2, 2159, 2156, 3, 2, 2, 2, 2159, 2160, 3, 2, 2, 2, 2160, 2161, 
	3, 2, 2, 2, 2161, 2162, 5, 514, 258, 2, 2162, 2164, 3, 2, 2, 2, 2163, 2142, 
	3, 2, 2, 2, 2163, 2150, 3, 2, 2, 2, 2164, 125, 3, 2, 2, 2, 2165, 2191, 
	5, 520, 261, 2, 2166, 2191, 5, 522, 262, 2, 2167, 2169, 7, 208, 2, 2, 2168, 
	2170, 7, 389, 2, 2, 2169, 2168, 3, 2, 2, 2, 2169, 2170, 3, 2, 2, 2, 2170, 
	2171, 3, 2, 2, 2, 2171, 2172, 5, 556, 279, 2, 2172, 2173, 7, 440, 2, 2, 
	2173, 2174, 5, 556, 279, 2, 2174, 2191, 3, 2, 2, 2, 2175, 2177, 7, 157, 
	2, 2, 2176, 2175, 3, 2, 2, 2, 2176, 2177, 3, 2, 2, 2, 2177, 2178, 3, 2, 
	2, 2, 2178, 2179, 7, 65, 2, 2, 2179, 2180, 7, 426, 2, 2, 2180, 2181, 7, 
	87, 2, 2, 2181, 2191, 5, 556, 279, 2, 2182, 2187, 5, 128, 65, 2, 2183, 
	2184, 7, 591, 2, 2, 2184, 2186, 5, 128, 65, 2, 2185, 2183, 3, 2, 2, 2, 
	2186, 2189, 3, 2, 2, 2, 2187, 2185, 3, 2, 2, 2, 2187, 2188, 3, 2, 2, 2, 
	2188, 2191, 3, 2, 2, 2, 2189, 2187, 3, 2, 2, 2, 2190, 2165, 3, 2, 2, 2, 
	2190, 2166, 3, 2, 2, 2, 2190, 2167, 3, 2, 2, 2, 2190, 2176, 3, 2, 2, 2, 
	2190, 2182, 3, 2, 2, 2, 2191, 127, 3, 2, 2, 2, 2192, 2194, 7, 12, 2, 2, 
	2193, 2195, 7, 389, 2, 2, 2194, 2193, 3, 2, 2, 2, 2194, 2195, 3, 2, 2, 
	2, 2195, 2196, 3, 2, 2, 2, 2196, 2197, 5, 556, 279, 2, 2197, 2198, 5, 216, 
	109, 2, 2198, 2235, 3, 2, 2, 2, 2199, 2201, 7, 12, 2, 2, 2200, 2202, 7, 
	389, 2, 2, 2201, 2200, 3, 2, 2, 2, 2201, 2202, 3, 2, 2, 2, 2202, 2203, 
	3, 2, 2, 2, 2203, 2204, 5, 556, 279, 2, 2204, 2205, 7, 236, 2, 2, 2205, 
	2206, 5, 500, 251, 2, 2206, 2235, 3, 2, 2, 2, 2207, 2209, 7, 12, 2, 2, 
	2208, 2210, 7, 389, 2, 2, 2209, 2208, 3, 2, 2, 2, 2209, 2210, 3, 2, 2, 
	2, 2210, 2211, 3, 2, 2, 2, 2211, 2212, 5, 556, 279, 2, 2212, 2213, 7, 212, 
	2, 2, 2213, 2214, 5, 496, 249, 2, 2214, 2235, 3, 2, 2, 2, 2215, 2217, 7, 
	12, 2, 2, 2216, 2218, 7, 389, 2, 2, 2217, 2216, 3, 2, 2, 2, 2217, 2218, 
	3, 2, 2, 2, 2218, 2219, 3, 2, 2, 2, 2219, 2220, 5, 556, 279, 2, 2220, 2221, 
	7, 236, 2, 2, 2221, 2222, 7, 251, 2, 2, 2222, 2223, 5, 94, 48, 2, 2223, 
	2235, 3, 2, 2, 2, 2224, 2225, 7, 34, 2, 2, 2225, 2226, 7, 426, 2, 2, 2226, 
	2235, 5, 646, 324, 2, 2227, 2228, 7, 236, 2, 2, 2228, 2229, 7, 294, 2, 
	2, 2229, 2235, 7, 34, 2, 2, 2230, 2231, 7, 236, 2, 2, 2231, 2235, 5, 500, 
	251, 2, 2232, 2233, 7, 212, 2, 2, 2233, 2235, 5, 496, 249, 2, 2234, 2192, 
	3, 2, 2, 2, 2234, 2199, 3, 2, 2, 2, 2234, 2207, 3, 2, 2, 2, 2234, 2215, 
	3, 2, 2, 2, 2234, 2224, 3, 2, 2, 2, 2234, 2227, 3, 2, 2, 2, 2234, 2230, 
	3, 2, 2, 2, 2234, 2232, 3, 2, 2, 2, 2235, 129, 3, 2, 2, 2, 2236, 2237, 
	7, 80, 2, 2, 2237, 2238, 7, 268, 2, 2, 2238, 2239, 5, 556, 279, 2, 2239, 
	2240, 5, 132, 67, 2, 2240, 131, 3, 2, 2, 2, 2241, 2249, 7, 68, 2, 2, 2242, 
	2244, 7, 75, 2, 2, 2243, 2245, 9, 20, 2, 2, 2244, 2243, 3, 2, 2, 2, 2244, 
	2245, 3, 2, 2, 2, 2245, 2249, 3, 2, 2, 2, 2246, 2249, 5, 518, 260, 2, 2247, 
	2249, 5, 520, 261, 2, 2248, 2241, 3, 2, 2, 2, 2248, 2242, 3, 2, 2, 2, 2248, 
	2246, 3, 2, 2, 2, 2248, 2247, 3, 2, 2, 2, 2249, 133, 3, 2, 2, 2, 2250, 
	2251, 7, 271, 2, 2, 2251, 2298, 5, 646, 324, 2, 2252, 2299, 5, 522, 262, 
	2, 2253, 2299, 5, 520, 261, 2, 2254, 2255, 7, 7, 2, 2, 2255, 2257, 7, 286, 
	2, 2, 2256, 2258, 5, 424, 213, 2, 2257, 2256, 3, 2, 2, 2, 2257, 2258, 3, 
	2, 2, 2, 2258, 2259, 3, 2, 2, 2, 2259, 2262, 5, 340, 171, 2, 2260, 2261, 
	9, 29, 2, 2, 2261, 2263, 5, 340, 171, 2, 2262, 2260, 3, 2, 2, 2, 2262, 
	2263, 3, 2, 2, 2, 2263, 2299, 3, 2, 2, 2, 2264, 2265, 7, 208, 2, 2, 2265, 
	2266, 7, 18, 2, 2, 2266, 2267, 5, 556, 279, 2, 2267, 2268, 7, 440, 2, 2, 
	2268, 2270, 5, 556, 279, 2, 2269, 2271, 5, 530, 266, 2, 2270, 2269, 3, 
	2, 2, 2, 2270, 2271, 3, 2, 2, 2, 2271, 2299, 3, 2, 2, 2, 2272, 2273, 7, 
	208, 2, 2, 2273, 2274, 7, 286, 2, 2, 2274, 2275, 5, 340, 171, 2, 2275, 
	2276, 7, 440, 2, 2, 2276, 2277, 5, 340, 171, 2, 2277, 2299, 3, 2, 2, 2, 
	2278, 2283, 5, 146, 74, 2, 2279, 2280, 7, 591, 2, 2, 2280, 2282, 5, 146, 
	74, 2, 2281, 2279, 3, 2, 2, 2, 2282, 2285, 3, 2, 2, 2, 2283, 2281, 3, 2, 
	2, 2, 2283, 2284, 3, 2, 2, 2, 2284, 2299, 3, 2, 2, 2, 2285, 2283, 3, 2, 
	2, 2, 2286, 2287, 7, 236, 2, 2, 2287, 2288, 7, 597, 2, 2, 2288, 2293, 5, 
	148, 75, 2, 2289, 2290, 7, 591, 2, 2, 2290, 2292, 5, 148, 75, 2, 2291, 
	2289, 3, 2, 2, 2, 2292, 2295, 3, 2, 2, 2, 2293, 2291, 3, 2, 2, 2, 2293, 
	2294, 3, 2, 2, 2, 2294, 2296, 3, 2, 2, 2, 2295, 2293, 3, 2, 2, 2, 2296, 
	2297, 7, 598, 2, 2, 2297, 2299, 3, 2, 2, 2, 2298, 2252, 3, 2, 2, 2, 2298, 
	2253, 3, 2, 2, 2, 2298, 2254, 3, 2, 2, 2, 2298, 2264, 3, 2, 2, 2, 2298, 
	2272, 3, 2, 2, 2, 2298, 2278, 3, 2, 2, 2, 2298, 2286, 3, 2, 2, 2, 2299, 
	135, 3, 2, 2, 2, 2300, 2301, 7, 71, 2, 2, 2301, 2323, 5, 646, 324, 2, 2302, 
	2324, 5, 150, 76, 2, 2303, 2324, 5, 152, 77, 2, 2304, 2305, 9, 30, 2, 2, 
	2305, 2306, 7, 423, 2, 2, 2306, 2324, 7, 424, 2, 2, 2307, 2308, 7, 7, 2, 
	2, 2308, 2311, 5, 236, 119, 2, 2309, 2310, 7, 423, 2, 2, 2310, 2312, 7, 
	283, 2, 2, 2311, 2309, 3, 2, 2, 2, 2311, 2312, 3, 2, 2, 2, 2312, 2324, 
	3, 2, 2, 2, 2313, 2324, 5, 98, 50, 2, 2314, 2315, 7, 208, 2, 2, 2315, 2316, 
	7, 390, 2, 2, 2316, 2317, 5, 646, 324, 2, 2317, 2318, 7, 440, 2, 2, 2318, 
	2319, 5, 646, 324, 2, 2319, 2324, 3, 2, 2, 2, 2320, 2324, 5, 96, 49, 2, 
	2321, 2324, 5, 520, 261, 2, 2322, 2324, 5, 522, 262, 2, 2323, 2302, 3, 
	2, 2, 2, 2323, 2303, 3, 2, 2, 2, 2323, 2304, 3, 2, 2, 2, 2323, 2307, 3, 
	2, 2, 2, 2323, 2313, 3, 2, 2, 2, 2323, 2314, 3, 2, 2, 2, 2323, 2320, 3, 
	2, 2, 2, 2323, 2321, 3, 2, 2, 2, 2323, 2322, 3, 2, 2, 2, 2324, 137, 3, 
	2, 2, 2, 2325, 2326, 7, 234, 2, 2, 2326, 2327, 5, 556, 279, 2, 2327, 2328, 
	5, 140, 71, 2, 2328, 139, 3, 2, 2, 2, 2329, 2330, 7, 288, 2, 2, 2330, 2332, 
	5, 340, 171, 2, 2331, 2329, 3, 2, 2, 2, 2331, 2332, 3, 2, 2, 2, 2332, 2333, 
	3, 2, 2, 2, 2333, 2339, 5, 468, 235, 2, 2334, 2335, 7, 288, 2, 2, 2335, 
	2339, 5, 340, 171, 2, 2336, 2339, 5, 518, 260, 2, 2337, 2339, 5, 520, 261, 
	2, 2338, 2331, 3, 2, 2, 2, 2338, 2334, 3, 2, 2, 2, 2338, 2336, 3, 2, 2, 
	2, 2338, 2337, 3, 2, 2, 2, 2339, 141, 3, 2, 2, 2, 2340, 2341, 7, 264, 2, 
	2, 2341, 2356, 7, 228, 2, 2, 2342, 2343, 9, 31, 2, 2, 2343, 2346, 5, 646, 
	324, 2, 2344, 2347, 5, 520, 261, 2, 2345, 2347, 5, 522, 262, 2, 2346, 2344, 
	3, 2, 2, 2, 2346, 2345, 3, 2, 2, 2, 2347, 2357, 3, 2, 2, 2, 2348, 2349, 
	7, 67, 2, 2, 2349, 2350, 5, 646, 324, 2, 2350, 2351, 5, 500, 251, 2, 2351, 
	2357, 3, 2, 2, 2, 2352, 2353, 7, 40, 2, 2, 2353, 2354, 5, 646, 324, 2, 
	2354, 2355, 5, 144, 73, 2, 2355, 2357, 3, 2, 2, 2, 2356, 2342, 3, 2, 2, 
	2, 2356, 2348, 3, 2, 2, 2, 2356, 2352, 3, 2, 2, 2, 2357, 143, 3, 2, 2, 
	2, 2358, 2359, 9, 32, 2, 2, 2359, 2360, 7, 139, 2, 2, 2360, 2361, 7, 408, 
	2, 2, 2361, 2362, 5, 720, 361, 2, 2362, 2363, 7, 451, 2, 2, 2363, 2368, 
	5, 646, 324, 2, 2364, 2365, 7, 591, 2, 2, 2365, 2367, 5, 646, 324, 2, 2366, 
	2364, 3, 2, 2, 2, 2367, 2370, 3, 2, 2, 2, 2368, 2366, 3, 2, 2, 2, 2368, 
	2369, 3, 2, 2, 2, 2369, 2391, 3, 2, 2, 2, 2370, 2368, 3, 2, 2, 2, 2371, 
	2372, 7, 12, 2, 2, 2372, 2375, 7, 139, 2, 2, 2373, 2374, 7, 408, 2, 2, 
	2374, 2376, 5, 720, 361, 2, 2375, 2373, 3, 2, 2, 2, 2375, 2376, 3, 2, 2, 
	2, 2376, 2377, 3, 2, 2, 2, 2377, 2378, 7, 210, 2, 2, 2378, 2379, 5, 646, 
	324, 2, 2379, 2380, 7, 451, 2, 2, 2380, 2381, 5, 646, 324, 2, 2381, 2391, 
	3, 2, 2, 2, 2382, 2383, 7, 73, 2, 2, 2383, 2386, 7, 139, 2, 2, 2384, 2385, 
	7, 106, 2, 2, 2385, 2387, 7, 311, 2, 2, 2386, 2384, 3, 2, 2, 2, 2386, 2387, 
	3, 2, 2, 2, 2387, 2388, 3, 2, 2, 2, 2388, 2389, 7, 408, 2, 2, 2389, 2391, 
	5, 720, 361, 2, 2390, 2358, 3, 2, 2, 2, 2390, 2371, 3, 2, 2, 2, 2390, 2382, 
	3, 2, 2, 2, 2391, 145, 3, 2, 2, 2, 2392, 2393, 7, 7, 2, 2, 2393, 2394, 
	7, 18, 2, 2, 2394, 2395, 5, 556, 279, 2, 2395, 2397, 5, 576, 289, 2, 2396, 
	2398, 5, 532, 267, 2, 2397, 2396, 3, 2, 2, 2, 2397, 2398, 3, 2, 2, 2, 2398, 
	2400, 3, 2, 2, 2, 2399, 2401, 5, 530, 266, 2, 2400, 2399, 3, 2, 2, 2, 2400, 
	2401, 3, 2, 2, 2, 2401, 2427, 3, 2, 2, 2, 2402, 2403, 7, 73, 2, 2, 2403, 
	2405, 7, 18, 2, 2, 2404, 2406, 5, 422, 212, 2, 2405, 2404, 3, 2, 2, 2, 
	2405, 2406, 3, 2, 2, 2, 2406, 2407, 3, 2, 2, 2, 2407, 2409, 5, 556, 279, 
	2, 2408, 2410, 5, 530, 266, 2, 2409, 2408, 3, 2, 2, 2, 2409, 2410, 3, 2, 
	2, 2, 2410, 2427, 3, 2, 2, 2, 2411, 2412, 7, 12, 2, 2, 2412, 2413, 7, 18, 
	2, 2, 2413, 2416, 5, 556, 279, 2, 2414, 2415, 7, 236, 2, 2, 2415, 2417, 
	7, 54, 2, 2, 2416, 2414, 3, 2, 2, 2, 2416, 2417, 3, 2, 2, 2, 2417, 2418, 
	3, 2, 2, 2, 2418, 2419, 7, 271, 2, 2, 2419, 2421, 5, 576, 289, 2, 2420, 
	2422, 5, 532, 267, 2, 2421, 2420, 3, 2, 2, 2, 2421, 2422, 3, 2, 2, 2, 2422, 
	2424, 3, 2, 2, 2, 2423, 2425, 5, 530, 266, 2, 2424, 2423, 3, 2, 2, 2, 2424, 
	2425, 3, 2, 2, 2, 2425, 2427, 3, 2, 2, 2, 2426, 2392, 3, 2, 2, 2, 2426, 
	2402, 3, 2, 2, 2, 2426, 2411, 3, 2, 2, 2, 2427, 147, 3, 2, 2, 2, 2428, 
	2429, 9, 33, 2, 2, 2429, 2430, 7, 588, 2, 2, 2430, 2435, 5, 646, 324, 2, 
	2431, 2432, 7, 251, 2, 2, 2432, 2433, 7, 588, 2, 2, 2433, 2435, 5, 94, 
	48, 2, 2434, 2428, 3, 2, 2, 2, 2434, 2431, 3, 2, 2, 2, 2435, 149, 3, 2, 
	2, 2, 2436, 2437, 7, 236, 2, 2, 2437, 2438, 7, 398, 2, 2, 2438, 2439, 5, 
	588, 295, 2, 2439, 151, 3, 2, 2, 2, 2440, 2441, 7, 73, 2, 2, 2441, 2442, 
	7, 398, 2, 2, 2442, 153, 3, 2, 2, 2, 2443, 2445, 7, 444, 2, 2, 2444, 2443, 
	3, 2, 2, 2, 2444, 2445, 3, 2, 2, 2, 2445, 2446, 3, 2, 2, 2, 2446, 2448, 
	7, 114, 2, 2, 2447, 2449, 7, 356, 2, 2, 2448, 2447, 3, 2, 2, 2, 2448, 2449, 
	3, 2, 2, 2, 2449, 2451, 3, 2, 2, 2, 2450, 2452, 5, 424, 213, 2, 2451, 2450, 
	3, 2, 2, 2, 2451, 2452, 3, 2, 2, 2, 2452, 2454, 3, 2, 2, 2, 2453, 2455, 
	5, 556, 279, 2, 2454, 2453, 3, 2, 2, 2, 2454, 2455, 3, 2, 2, 2, 2455, 2456, 
	3, 2, 2, 2, 2456, 2458, 7, 426, 2, 2, 2457, 2459, 7, 427, 2, 2, 2458, 2457, 
	3, 2, 2, 2, 2458, 2459, 3, 2, 2, 2, 2459, 2460, 3, 2, 2, 2, 2460, 2461, 
	5, 646, 324, 2, 2461, 2462, 5, 156, 79, 2, 2462, 155, 3, 2, 2, 2, 2463, 
	2464, 7, 446, 2, 2, 2464, 2466, 5, 556, 279, 2, 2465, 2463, 3, 2, 2, 2, 
	2465, 2466, 3, 2, 2, 2, 2466, 2467, 3, 2, 2, 2, 2467, 2469, 5, 158, 80, 
	2, 2468, 2470, 5, 162, 82, 2, 2469, 2468, 3, 2, 2, 2, 2469, 2470, 3, 2, 
	2, 2, 2470, 2472, 3, 2, 2, 2, 2471, 2473, 5, 506, 254, 2, 2472, 2471, 3, 
	2, 2, 2, 2472, 2473, 3, 2, 2, 2, 2473, 2475, 3, 2, 2, 2, 2474, 2476, 5, 
	512, 257, 2, 2475, 2474, 3, 2, 2, 2, 2475, 2476, 3, 2, 2, 2, 2476, 2478, 
	3, 2, 2, 2, 2477, 2479, 5, 164, 83, 2, 2478, 2477, 3, 2, 2, 2, 2478, 2479, 
	3, 2, 2, 2, 2479, 157, 3, 2, 2, 2, 2480, 2481, 7, 597, 2, 2, 2481, 2486, 
	5, 160, 81, 2, 2482, 2483, 7, 591, 2, 2, 2483, 2485, 5, 160, 81, 2, 2484, 
	2482, 3, 2, 2, 2, 2485, 2488, 3, 2, 2, 2, 2486, 2484, 3, 2, 2, 2, 2486, 
	2487, 3, 2, 2, 2, 2487, 2489, 3, 2, 2, 2, 2488, 2486, 3, 2, 2, 2, 2489, 
	2490, 7, 598, 2, 2, 2490, 159, 3, 2, 2, 2, 2491, 2493, 5, 588, 295, 2, 
	2492, 2494, 5, 646, 324, 2, 2493, 2492, 3, 2, 2, 2, 2493, 2494, 3, 2, 2, 
	2, 2494, 2506, 3, 2, 2, 2, 2495, 2496, 7, 597, 2, 2, 2496, 2501, 5, 180, 
	91, 2, 2497, 2498, 7, 591, 2, 2, 2498, 2500, 5, 180, 91, 2, 2499, 2497, 
	3, 2, 2, 2, 2500, 2503, 3, 2, 2, 2, 2501, 2499, 3, 2, 2, 2, 2501, 2502, 
	3, 2, 2, 2, 2502, 2504, 3, 2, 2, 2, 2503, 2501, 3, 2, 2, 2, 2504, 2505, 
	7, 598, 2, 2, 2505, 2507, 3, 2, 2, 2, 2506, 2495, 3, 2, 2, 2, 2506, 2507, 
	3, 2, 2, 2, 2507, 2509, 3, 2, 2, 2, 2508, 2510, 5, 696, 349, 2, 2509, 2508, 
	3, 2, 2, 2, 2509, 2510, 3, 2, 2, 2, 2510, 2512, 3, 2, 2, 2, 2511, 2513, 
	5, 698, 350, 2, 2512, 2511, 3, 2, 2, 2, 2512, 2513, 3, 2, 2, 2, 2513, 161, 
	3, 2, 2, 2, 2514, 2515, 7, 111, 2, 2, 2515, 2516, 7, 597, 2, 2, 2516, 2521, 
	5, 556, 279, 2, 2517, 2518, 7, 591, 2, 2, 2518, 2520, 5, 556, 279, 2, 2519, 
	2517, 3, 2, 2, 2, 2520, 2523, 3, 2, 2, 2, 2521, 2519, 3, 2, 2, 2, 2521, 
	2522, 3, 2, 2, 2, 2522, 2524, 3, 2, 2, 2, 2523, 2521, 3, 2, 2, 2, 2524, 
	2525, 7, 598, 2, 2, 2525, 163, 3, 2, 2, 2, 2526, 2527, 7, 449, 2, 2, 2527, 
	2528, 5, 588, 295, 2, 2528, 165, 3, 2, 2, 2, 2529, 2531, 7, 87, 2, 2, 2530, 
	2532, 5, 424, 213, 2, 2531, 2530, 3, 2, 2, 2, 2531, 2532, 3, 2, 2, 2, 2532, 
	2533, 3, 2, 2, 2, 2533, 2535, 5, 556, 279, 2, 2534, 2536, 7, 451, 2, 2, 
	2535, 2534, 3, 2, 2, 2, 2535, 2536, 3, 2, 2, 2, 2536, 2539, 3, 2, 2, 2, 
	2537, 2538, 7, 225, 2, 2, 2538, 2540, 5, 556, 279, 2, 2539, 2537, 3, 2, 
	2, 2, 2539, 2540, 3, 2, 2, 2, 2540, 2546, 3, 2, 2, 2, 2541, 2544, 7, 288, 
	2, 2, 2542, 2545, 5, 556, 279, 2, 2543, 2545, 5, 340, 171, 2, 2544, 2542, 
	3, 2, 2, 2, 2544, 2543, 3, 2, 2, 2, 2545, 2547, 3, 2, 2, 2, 2546, 2541, 
	3, 2, 2, 2, 2546, 2547, 3, 2, 2, 2, 2547, 2553, 3, 2, 2, 2, 2548, 2551, 
	7, 410, 2, 2, 2549, 2552, 5, 556, 279, 2, 2550, 2552, 5, 340, 171, 2, 2551, 
	2549, 3, 2, 2, 2, 2551, 2550, 3, 2, 2, 2, 2552, 2554, 3, 2, 2, 2, 2553, 
	2548, 3, 2, 2, 2, 2553, 2554, 3, 2, 2, 2, 2554, 2556, 3, 2, 2, 2, 2555, 
	2557, 7, 26, 2, 2, 2556, 2555, 3, 2, 2, 2, 2556, 2557, 3, 2, 2, 2, 2557, 
	167, 3, 2, 2, 2, 2558, 2559, 7, 428, 2, 2, 2559, 2561, 7, 210, 2, 2, 2560, 
	2558, 3, 2, 2, 2, 2560, 2561, 3, 2, 2, 2, 2561, 2563, 3, 2, 2, 2, 2562, 
	2564, 7, 270, 2, 2, 2563, 2562, 3, 2, 2, 2, 2563, 2564, 3, 2, 2, 2, 2564, 
	2566, 3, 2, 2, 2, 2565, 2567, 7, 191, 2, 2, 2566, 2565, 3, 2, 2, 2, 2566, 
	2567, 3, 2, 2, 2, 2567, 2568, 3, 2, 2, 2, 2568, 2569, 7, 127, 2, 2, 2569, 
	2580, 5, 556, 279, 2, 2570, 2571, 7, 101, 2, 2, 2571, 2574, 5, 646, 324, 
	2, 2572, 2573, 7, 118, 2, 2, 2573, 2575, 5, 646, 324, 2, 2574, 2572, 3, 
	2, 2, 2, 2574, 2575, 3, 2, 2, 2, 2575, 2578, 3, 2, 2, 2, 2576, 2577, 7, 
	285, 2, 2, 2577, 2579, 5, 646, 324, 2, 2578, 2576, 3, 2, 2, 2, 2578, 2579, 
	3, 2, 2, 2, 2579, 2581, 3, 2, 2, 2, 2580, 2570, 3, 2, 2, 2, 2580, 2581, 
	3, 2, 2, 2, 2581, 169, 3, 2, 2, 2, 2582, 2583, 7, 80, 2, 2, 2583, 2584, 
	7, 268, 2, 2, 2584, 2585, 5, 556, 279, 2, 2585, 2586, 7, 426, 2, 2, 2586, 
	2607, 5, 556, 279, 2, 2587, 2603, 7, 448, 2, 2, 2588, 2589, 5, 646, 324, 
	2, 2589, 2590, 7, 414, 2, 2, 2590, 2591, 7, 597, 2, 2, 2591, 2596, 5, 340, 
	171, 2, 2592, 2593, 7, 591, 2, 2, 2593, 2595, 5, 340, 171, 2, 2594, 2592, 
	3, 2, 2, 2, 2595, 2598, 3, 2, 2, 2, 2596, 2594, 3, 2, 2, 2, 2596, 2597, 
	3, 2, 2, 2, 2597, 2599, 3, 2, 2, 2, 2598, 2596, 3, 2, 2, 2, 2599, 2601, 
	7, 598, 2, 2, 2600, 2602, 7, 378, 2, 2, 2601, 2600, 3, 2, 2, 2, 2601, 2602, 
	3, 2, 2, 2, 2602, 2604, 3, 2, 2, 2, 2603, 2588, 3, 2, 2, 2, 2604, 2605, 
	3, 2, 2, 2, 2605, 2603, 3, 2, 2, 2, 2605, 2606, 3, 2, 2, 2, 2606, 2608, 
	3, 2, 2, 2, 2607, 2587, 3, 2, 2, 2, 2607, 2608, 3, 2, 2, 2, 2608, 2609, 
	3, 2, 2, 2, 2609, 2610, 7, 84, 2, 2, 2610, 2611, 9, 17, 2, 2, 2611, 2612, 
	5, 588, 295, 2, 2612, 171, 3, 2, 2, 2, 2613, 2614, 7, 271, 2, 2, 2614, 
	2762, 5, 646, 324, 2, 2615, 2684, 7, 381, 2, 2, 2616, 2625, 7, 597, 2, 
	2, 2617, 2622, 5, 480, 241, 2, 2618, 2619, 7, 591, 2, 2, 2619, 2621, 5, 
	480, 241, 2, 2620, 2618, 3, 2, 2, 2, 2621, 2624, 3, 2, 2, 2, 2622, 2620, 
	3, 2, 2, 2, 2622, 2623, 3, 2, 2, 2, 2623, 2626, 3, 2, 2, 2, 2624, 2622, 
	3, 2, 2, 2, 2625, 2617, 3, 2, 2, 2, 2625, 2626, 3, 2, 2, 2, 2626, 2627, 
	3, 2, 2, 2, 2627, 2685, 7, 598, 2, 2, 2628, 2629, 7, 78, 2, 2, 2629, 2638, 
	7, 597, 2, 2, 2630, 2635, 5, 340, 171, 2, 2631, 2632, 7, 591, 2, 2, 2632, 
	2634, 5, 340, 171, 2, 2633, 2631, 3, 2, 2, 2, 2634, 2637, 3, 2, 2, 2, 2635, 
	2633, 3, 2, 2, 2, 2635, 2636, 3, 2, 2, 2, 2636, 2639, 3, 2, 2, 2, 2637, 
	2635, 3, 2, 2, 2, 2638, 2630, 3, 2, 2, 2, 2638, 2639, 3, 2, 2, 2, 2639, 
	2640, 3, 2, 2, 2, 2640, 2685, 7, 598, 2, 2, 2641, 2642, 7, 197, 2, 2, 2642, 
	2658, 7, 597, 2, 2, 2643, 2644, 7, 543, 2, 2, 2644, 2645, 7, 588, 2, 2, 
	2645, 2659, 5, 576, 289, 2, 2646, 2647, 7, 542, 2, 2, 2647, 2648, 7, 588, 
	2, 2, 2648, 2659, 5, 556, 279, 2, 2649, 2650, 7, 355, 2, 2, 2650, 2651, 
	7, 588, 2, 2, 2651, 2659, 5, 646, 324, 2, 2652, 2653, 7, 457, 2, 2, 2653, 
	2654, 7, 588, 2, 2, 2654, 2659, 5, 646, 324, 2, 2655, 2656, 7, 541, 2, 
	2, 2656, 2657, 7, 588, 2, 2, 2657, 2659, 5, 646, 324, 2, 2658, 2643, 3, 
	2, 2, 2, 2658, 2646, 3, 2, 2, 2, 2658, 2649, 3, 2, 2, 2, 2658, 2652, 3, 
	2, 2, 2, 2658, 2655, 3, 2, 2, 2, 2658, 2659, 3, 2, 2, 2, 2659, 2680, 3, 
	2, 2, 2, 2660, 2676, 7, 591, 2, 2, 2661, 2662, 7, 543, 2, 2, 2662, 2663, 
	7, 588, 2, 2, 2663, 2677, 5, 576, 289, 2, 2664, 2665, 7, 542, 2, 2, 2665, 
	2666, 7, 588, 2, 2, 2666, 2677, 5, 556, 279, 2, 2667, 2668, 7, 355, 2, 
	2, 2668, 2669, 7, 588, 2, 2, 2669, 2677, 5, 646, 324, 2, 2670, 2671, 7, 
	457, 2, 2, 2671, 2672, 7, 588, 2, 2, 2672, 2677, 5, 646, 324, 2, 2673, 
	2674, 7, 541, 2, 2, 2674, 2675, 7, 588, 2, 2, 2675, 2677, 5, 646, 324, 
	2, 2676, 2661, 3, 2, 2, 2, 2676, 2664, 3, 2, 2, 2, 2676, 2667, 3, 2, 2, 
	2, 2676, 2670, 3, 2, 2, 2, 2676, 2673, 3, 2, 2, 2, 2677, 2679, 3, 2, 2, 
	2, 2678, 2660, 3, 2, 2, 2, 2679, 2682, 3, 2, 2, 2, 2680, 2678, 3, 2, 2, 
	2, 2680, 2681, 3, 2, 2, 2, 2681, 2683, 3, 2, 2, 2, 2682, 2680, 3, 2, 2, 
	2, 2683, 2685, 7, 598, 2, 2, 2684, 2616, 3, 2, 2, 2, 2684, 2628, 3, 2, 
	2, 2, 2684, 2641, 3, 2, 2, 2, 2685, 2763, 3, 2, 2, 2, 2686, 2694, 7, 597, 
	2, 2, 2687, 2688, 7, 486, 2, 2, 2688, 2691, 7, 588, 2, 2, 2689, 2692, 5, 
	352, 177, 2, 2690, 2692, 7, 551, 2, 2, 2691, 2689, 3, 2, 2, 2, 2691, 2690, 
	3, 2, 2, 2, 2692, 2693, 3, 2, 2, 2, 2693, 2695, 7, 591, 2, 2, 2694, 2687, 
	3, 2, 2, 2, 2694, 2695, 3, 2, 2, 2, 2695, 2696, 3, 2, 2, 2, 2696, 2697, 
	7, 119, 2, 2, 2697, 2698, 7, 588, 2, 2, 2698, 2699, 5, 646, 324, 2, 2699, 
	2700, 7, 591, 2, 2, 2700, 2701, 7, 516, 2, 2, 2701, 2702, 7, 588, 2, 2, 
	2702, 2757, 5, 646, 324, 2, 2703, 2753, 7, 591, 2, 2, 2704, 2705, 7, 525, 
	2, 2, 2705, 2706, 7, 588, 2, 2, 2706, 2754, 5, 646, 324, 2, 2707, 2708, 
	7, 532, 2, 2, 2708, 2709, 7, 588, 2, 2, 2709, 2754, 5, 646, 324, 2, 2710, 
	2711, 7, 547, 2, 2, 2711, 2712, 7, 588, 2, 2, 2712, 2754, 5, 646, 324, 
	2, 2713, 2714, 7, 548, 2, 2, 2714, 2715, 7, 588, 2, 2, 2715, 2754, 5, 646, 
	324, 2, 2716, 2717, 7, 377, 2, 2, 2717, 2718, 7, 588, 2, 2, 2718, 2754, 
	5, 646, 324, 2, 2719, 2720, 7, 486, 2, 2, 2720, 2723, 7, 588, 2, 2, 2721, 
	2724, 5, 352, 177, 2, 2722, 2724, 7, 551, 2, 2, 2723, 2721, 3, 2, 2, 2, 
	2723, 2722, 3, 2, 2, 2, 2724, 2754, 3, 2, 2, 2, 2725, 2754, 7, 517, 2, 
	2, 2726, 2727, 7, 452, 2, 2, 2727, 2728, 7, 588, 2, 2, 2728, 2754, 5, 576, 
	289, 2, 2729, 2730, 7, 251, 2, 2, 2730, 2731, 7, 588, 2, 2, 2731, 2754, 
	5, 94, 48, 2, 2732, 2733, 7, 367, 2, 2, 2733, 2734, 7, 588, 2, 2, 2734, 
	2754, 5, 576, 289, 2, 2735, 2736, 7, 458, 2, 2, 2736, 2737, 7, 588, 2, 
	2, 2737, 2754, 5, 340, 171, 2, 2738, 2739, 7, 521, 2, 2, 2739, 2740, 7, 
	588, 2, 2, 2740, 2754, 5, 604, 303, 2, 2741, 2742, 7, 398, 2, 2, 2742, 
	2743, 7, 588, 2, 2, 2743, 2754, 5, 588, 295, 2, 2744, 2745, 7, 469, 2, 
	2, 2745, 2746, 7, 588, 2, 2, 2746, 2754, 5, 576, 289, 2, 2747, 2748, 7, 
	63, 2, 2, 2748, 2749, 7, 588, 2, 2, 2749, 2754, 5, 340, 171, 2, 2750, 2751, 
	7, 459, 2, 2, 2751, 2752, 7, 588, 2, 2, 2752, 2754, 5, 604, 303, 2, 2753, 
	2704, 3, 2, 2, 2, 2753, 2707, 3, 2, 2, 2, 2753, 2710, 3, 2, 2, 2, 2753, 
	2713, 3, 2, 2, 2, 2753, 2716, 3, 2, 2, 2, 2753, 2719, 3, 2, 2, 2, 2753, 
	2725, 3, 2, 2, 2, 2753, 2726, 3, 2, 2, 2, 2753, 2729, 3, 2, 2, 2, 2753, 
	2732, 3, 2, 2, 2, 2753, 2735, 3, 2, 2, 2, 2753, 2738, 3, 2, 2, 2, 2753, 
	2741, 3, 2, 2, 2, 2753, 2744, 3, 2, 2, 2, 2753, 2747, 3, 2, 2, 2, 2753, 
	2750, 3, 2, 2, 2, 2754, 2756, 3, 2, 2, 2, 2755, 2703, 3, 2, 2, 2, 2756, 
	2759, 3, 2, 2, 2, 2757, 2755, 3, 2, 2, 2, 2757, 2758, 3, 2, 2, 2, 2758, 
	2760, 3, 2, 2, 2, 2759, 2757, 3, 2, 2, 2, 2760, 2761, 7, 598, 2, 2, 2761, 
	2763, 3, 2, 2, 2, 2762, 2615, 3, 2, 2, 2, 2762, 2686, 3, 2, 2, 2, 2762, 
	2763, 3, 2, 2, 2, 2763, 173, 3, 2, 2, 2, 2764, 2765, 7, 71, 2, 2, 2765, 
	2767, 5, 646, 324, 2, 2766, 2768, 7, 381, 2, 2, 2767, 2766, 3, 2, 2, 2, 
	2767, 2768, 3, 2, 2, 2, 2768, 2769, 3, 2, 2, 2, 2769, 2776, 5, 576, 289, 
	2, 2770, 2775, 5, 532, 267, 2, 2771, 2772, 7, 398, 2, 2, 2772, 2775, 5, 
	588, 295, 2, 2773, 2775, 5, 236, 119, 2, 2774, 2770, 3, 2, 2, 2, 2774, 
	2771, 3, 2, 2, 2, 2774, 2773, 3, 2, 2, 2, 2775, 2778, 3, 2, 2, 2, 2776, 
	2774, 3, 2, 2, 2, 2776, 2777, 3, 2, 2, 2, 2777, 175, 3, 2, 2, 2, 2778, 
	2776, 3, 2, 2, 2, 2779, 2781, 7, 234, 2, 2, 2780, 2782, 5, 424, 213, 2, 
	2781, 2780, 3, 2, 2, 2, 2781, 2782, 3, 2, 2, 2, 2782, 2783, 3, 2, 2, 2, 
	2783, 2786, 5, 556, 279, 2, 2784, 2785, 7, 271, 2, 2, 2785, 2787, 5, 340, 
	171, 2, 2786, 2784, 3, 2, 2, 2, 2786, 2787, 3, 2, 2, 2, 2787, 2790, 3, 
	2, 2, 2, 2788, 2789, 7, 288, 2, 2, 2789, 2791, 5, 340, 171, 2, 2790, 2788, 
	3, 2, 2, 2, 2790, 2791, 3, 2, 2, 2, 2791, 2792, 3, 2, 2, 2, 2792, 2793, 
	7, 409, 2, 2, 2793, 2794, 7, 54, 2, 2, 2794, 2795, 7, 296, 2, 2, 2795, 
	2797, 5, 556, 279, 2, 2796, 2798, 5, 468, 235, 2, 2797, 2796, 3, 2, 2, 
	2, 2797, 2798, 3, 2, 2, 2, 2798, 177, 3, 2, 2, 2, 2799, 2800, 7, 264, 2, 
	2, 2800, 2801, 7, 228, 2, 2, 2801, 2802, 7, 67, 2, 2, 2802, 2803, 5, 646, 
	324, 2, 2803, 2804, 7, 597, 2, 2, 2804, 2805, 7, 262, 2, 2, 2805, 2806, 
	7, 588, 2, 2, 2806, 2811, 5, 646, 324, 2, 2807, 2808, 7, 591, 2, 2, 2808, 
	2810, 5, 180, 91, 2, 2809, 2807, 3, 2, 2, 2, 2810, 2813, 3, 2, 2, 2, 2811, 
	2809, 3, 2, 2, 2, 2811, 2812, 3, 2, 2, 2, 2812, 2814, 3, 2, 2, 2, 2813, 
	2811, 3, 2, 2, 2, 2814, 2815, 7, 598, 2, 2, 2815, 179, 3, 2, 2, 2, 2816, 
	2817, 5, 556, 279, 2, 2817, 2818, 7, 588, 2, 2, 2818, 2819, 5, 588, 295, 
	2, 2819, 181, 3, 2, 2, 2, 2820, 2821, 7, 264, 2, 2, 2821, 2822, 7, 228, 
	2, 2, 2822, 2823, 7, 40, 2, 2, 2823, 2824, 5, 646, 324, 2, 2824, 2831, 
	7, 597, 2, 2, 2825, 2826, 7, 178, 2, 2, 2826, 2827, 7, 588, 2, 2, 2827, 
	2832, 5, 646, 324, 2, 2828, 2829, 7, 47, 2, 2, 2829, 2830, 7, 588, 2, 2, 
	2830, 2832, 5, 646, 324, 2, 2831, 2825, 3, 2, 2, 2, 2831, 2828, 3, 2, 2, 
	2, 2832, 2833, 3, 2, 2, 2, 2833, 2834, 7, 598, 2, 2, 2834, 183, 3, 2, 2, 
	2, 2835, 2836, 7, 264, 2, 2, 2836, 2837, 7, 228, 2, 2, 2837, 2838, 7, 262, 
	2, 2, 2838, 2839, 5, 646, 324, 2, 2839, 2845, 7, 597, 2, 2, 2840, 2841, 
	7, 484, 2, 2, 2841, 2842, 7, 588, 2, 2, 2842, 2843, 5, 646, 324, 2, 2843, 
	2844, 7, 591, 2, 2, 2844, 2846, 3, 2, 2, 2, 2845, 2840, 3, 2, 2, 2, 2845, 
	2846, 3, 2, 2, 2, 2846, 2847, 3, 2, 2, 2, 2847, 2848, 7, 492, 2, 2, 2848, 
	2849, 7, 588, 2, 2, 2849, 2854, 5, 646, 324, 2, 2850, 2851, 7, 591, 2, 
	2, 2851, 2852, 7, 484, 2, 2, 2852, 2853, 7, 588, 2, 2, 2853, 2855, 5, 646, 
	324, 2, 2854, 2850, 3, 2, 2, 2, 2854, 2855, 3, 2, 2, 2, 2855, 2856, 3, 
	2, 2, 2, 2856, 2857, 7, 598, 2, 2, 2857, 185, 3, 2, 2, 2, 2858, 2859, 7, 
	264, 2, 2, 2859, 2860, 7, 228, 2, 2, 2860, 2861, 7, 178, 2, 2, 2861, 2862, 
	5, 646, 324, 2, 2862, 2863, 7, 597, 2, 2, 2863, 2864, 7, 246, 2, 2, 2864, 
	2865, 7, 588, 2, 2, 2865, 2866, 5, 646, 324, 2, 2866, 2867, 7, 591, 2, 
	2, 2867, 2868, 7, 478, 2, 2, 2868, 2869, 7, 588, 2, 2, 2869, 2870, 5, 646, 
	324, 2, 2870, 2871, 7, 591, 2, 2, 2871, 2872, 7, 404, 2, 2, 2872, 2873, 
	7, 588, 2, 2, 2873, 2874, 5, 646, 324, 2, 2874, 2880, 7, 591, 2, 2, 2875, 
	2876, 7, 481, 2, 2, 2876, 2877, 7, 588, 2, 2, 2877, 2878, 5, 646, 324, 
	2, 2878, 2879, 7, 591, 2, 2, 2879, 2881, 3, 2, 2, 2, 2880, 2875, 3, 2, 
	2, 2, 2880, 2881, 3, 2, 2, 2, 2881, 2882, 3, 2, 2, 2, 2882, 2883, 7, 493, 
	2, 2, 2883, 2884, 7, 588, 2, 2, 2884, 2889, 5, 646, 324, 2, 2885, 2886, 
	7, 591, 2, 2, 2886, 2887, 7, 481, 2, 2, 2887, 2888, 7, 588, 2, 2, 2888, 
	2890, 5, 646, 324, 2, 2889, 2885, 3, 2, 2, 2, 2889, 2890, 3, 2, 2, 2, 2890, 
	2891, 3, 2, 2, 2, 2891, 2892, 7, 598, 2, 2, 2892, 187, 3, 2, 2, 2, 2893, 
	2895, 7, 355, 2, 2, 2894, 2896, 5, 424, 213, 2, 2895, 2894, 3, 2, 2, 2, 
	2895, 2896, 3, 2, 2, 2, 2896, 2897, 3, 2, 2, 2, 2897, 2912, 5, 646, 324, 
	2, 2898, 2899, 7, 410, 2, 2, 2899, 2913, 5, 646, 324, 2, 2900, 2909, 7, 
	597, 2, 2, 2901, 2906, 5, 192, 97, 2, 2902, 2903, 7, 591, 2, 2, 2903, 2905, 
	5, 192, 97, 2, 2904, 2902, 3, 2, 2, 2, 2905, 2908, 3, 2, 2, 2, 2906, 2904, 
	3, 2, 2, 2, 2906, 2907, 3, 2, 2, 2, 2907, 2910, 3, 2, 2, 2, 2908, 2906, 
	3, 2, 2, 2, 2909, 2901, 3, 2, 2, 2, 2909, 2910, 3, 2, 2, 2, 2910, 2911, 
	3, 2, 2, 2, 2911, 2913, 7, 598, 2, 2, 2912, 2898, 3, 2, 2, 2, 2912, 2900, 
	3, 2, 2, 2, 2913, 189, 3, 2, 2, 2, 2914, 2915, 7, 355, 2, 2, 2915, 2921, 
	5, 646, 324, 2, 2916, 2917, 7, 204, 2, 2, 2917, 2922, 7, 288, 2, 2, 2918, 
	2922, 5, 520, 261, 2, 2919, 2922, 5, 518, 260, 2, 2920, 2922, 5, 522, 262, 
	2, 2921, 2916, 3, 2, 2, 2, 2921, 2918, 3, 2, 2, 2, 2921, 2919, 3, 2, 2, 
	2, 2921, 2920, 3, 2, 2, 2, 2922, 191, 3, 2, 2, 2, 2923, 2924, 9, 34, 2, 
	2, 2924, 2927, 7, 588, 2, 2, 2925, 2928, 5, 340, 171, 2, 2926, 2928, 5, 
	556, 279, 2, 2927, 2925, 3, 2, 2, 2, 2927, 2926, 3, 2, 2, 2, 2928, 2933, 
	3, 2, 2, 2, 2929, 2930, 7, 467, 2, 2, 2930, 2931, 7, 588, 2, 2, 2931, 2933, 
	5, 56, 29, 2, 2932, 2923, 3, 2, 2, 2, 2932, 2929, 3, 2, 2, 2, 2933, 193, 
	3, 2, 2, 2, 2934, 2935, 7, 445, 2, 2, 2935, 2937, 7, 139, 2, 2, 2936, 2938, 
	5, 424, 213, 2, 2937, 2936, 3, 2, 2, 2, 2937, 2938, 3, 2, 2, 2, 2938, 2939, 
	3, 2, 2, 2, 2939, 2942, 7, 408, 2, 2, 2940, 2943, 5, 44, 23, 2, 2941, 2943, 
	7, 445, 2, 2, 2942, 2940, 3, 2, 2, 2, 2942, 2941, 3, 2, 2, 2, 2943, 2944, 
	3, 2, 2, 2, 2944, 2945, 7, 234, 2, 2, 2945, 2947, 5, 556, 279, 2, 2946, 
	2948, 5, 468, 235, 2, 2947, 2946, 3, 2, 2, 2, 2947, 2948, 3, 2, 2, 2, 2948, 
	195, 3, 2, 2, 2, 2949, 2950, 7, 445, 2, 2, 2950, 2951, 7, 139, 2, 2, 2951, 
	2954, 7, 408, 2, 2, 2952, 2955, 5, 44, 23, 2, 2953, 2955, 7, 445, 2, 2, 
	2954, 2952, 3, 2, 2, 2, 2954, 2953, 3, 2, 2, 2, 2955, 2956, 3, 2, 2, 2, 
	2956, 2957, 7, 234, 2, 2, 2957, 2959, 5, 556, 279, 2, 2958, 2960, 5, 468, 
	235, 2, 2959, 2958, 3, 2, 2, 2, 2959, 2960, 3, 2, 2, 2, 2960, 197, 3, 2, 
	2, 2, 2961, 2975, 9, 28, 2, 2, 2962, 2976, 5, 200, 101, 2, 2963, 2964, 
	5, 556, 279, 2, 2964, 2965, 5, 520, 261, 2, 2965, 2976, 3, 2, 2, 2, 2966, 
	2968, 5, 44, 23, 2, 2967, 2969, 7, 451, 2, 2, 2968, 2967, 3, 2, 2, 2, 2968, 
	2969, 3, 2, 2, 2, 2969, 2971, 3, 2, 2, 2, 2970, 2972, 5, 246, 124, 2, 2971, 
	2970, 3, 2, 2, 2, 2972, 2973, 3, 2, 2, 2, 2973, 2971, 3, 2, 2, 2, 2973, 
	2974, 3, 2, 2, 2, 2974, 2976, 3, 2, 2, 2, 2975, 2962, 3, 2, 2, 2, 2975, 
	2963, 3, 2, 2, 2, 2975, 2966, 3, 2, 2, 2, 2976, 199, 3, 2, 2, 2, 2977, 
	2980, 5, 44, 23, 2, 2978, 2980, 7, 376, 2, 2, 2979, 2977, 3, 2, 2, 2, 2979, 
	2978, 3, 2, 2, 2, 2980, 2984, 3, 2, 2, 2, 2981, 2982, 7, 414, 2, 2, 2982, 
	2983, 7, 55, 2, 2, 2983, 2985, 5, 556, 279, 2, 2984, 2981, 3, 2, 2, 2, 
	2984, 2985, 3, 2, 2, 2, 2985, 2986, 3, 2, 2, 2, 2986, 2987, 5, 202, 102, 
	2, 2987, 201, 3, 2, 2, 2, 2988, 2992, 7, 236, 2, 2, 2989, 2990, 5, 556, 
	279, 2, 2990, 2991, 7, 605, 2, 2, 2991, 2993, 3, 2, 2, 2, 2992, 2989, 3, 
	2, 2, 2, 2992, 2993, 3, 2, 2, 2, 2993, 2994, 3, 2, 2, 2, 2994, 2995, 5, 
	556, 279, 2, 2995, 2996, 9, 27, 2, 2, 2996, 2997, 5, 282, 142, 2, 2997, 
	3018, 3, 2, 2, 2, 2998, 3002, 7, 236, 2, 2, 2999, 3000, 5, 556, 279, 2, 
	3000, 3001, 7, 605, 2, 2, 3001, 3003, 3, 2, 2, 2, 3002, 2999, 3, 2, 2, 
	2, 3002, 3003, 3, 2, 2, 2, 3003, 3004, 3, 2, 2, 2, 3004, 3005, 5, 556, 
	279, 2, 3005, 3006, 7, 410, 2, 2, 3006, 3007, 7, 51, 2, 2, 3007, 3018, 
	3, 2, 2, 2, 3008, 3012, 7, 212, 2, 2, 3009, 3010, 5, 556, 279, 2, 3010, 
	3011, 7, 605, 2, 2, 3011, 3013, 3, 2, 2, 2, 3012, 3009, 3, 2, 2, 2, 3012, 
	3013, 3, 2, 2, 2, 3013, 3014, 3, 2, 2, 2, 3014, 3018, 5, 556, 279, 2, 3015, 
	3016, 7, 212, 2, 2, 3016, 3018, 7, 376, 2, 2, 3017, 2988, 3, 2, 2, 2, 3017, 
	2998, 3, 2, 2, 2, 3017, 3008, 3, 2, 2, 2, 3017, 3015, 3, 2, 2, 2, 3018, 
	203, 3, 2, 2, 2, 3019, 3020, 7, 412, 2, 2, 3020, 3021, 5, 206, 104, 2, 
	3021, 205, 3, 2, 2, 2, 3022, 3023, 5, 556, 279, 2, 3023, 3024, 5, 520, 
	261, 2, 3024, 3031, 3, 2, 2, 2, 3025, 3026, 5, 44, 23, 2, 3026, 3027, 9, 
	18, 2, 2, 3027, 3028, 7, 445, 2, 2, 3028, 3029, 5, 720, 361, 2, 3029, 3031, 
	3, 2, 2, 2, 3030, 3022, 3, 2, 2, 2, 3030, 3025, 3, 2, 2, 2, 3031, 207, 
	3, 2, 2, 2, 3032, 3033, 7, 260, 2, 2, 3033, 3034, 5, 556, 279, 2, 3034, 
	3035, 5, 212, 107, 2, 3035, 209, 3, 2, 2, 2, 3036, 3037, 7, 168, 2, 2, 
	3037, 3066, 5, 234, 118, 2, 3038, 3039, 7, 128, 2, 2, 3039, 3040, 7, 163, 
	2, 2, 3040, 3066, 7, 620, 2, 2, 3041, 3042, 9, 35, 2, 2, 3042, 3043, 5, 
	646, 324, 2, 3043, 3044, 5, 336, 169, 2, 3044, 3066, 3, 2, 2, 2, 3045, 
	3046, 7, 264, 2, 2, 3046, 3047, 7, 228, 2, 2, 3047, 3060, 7, 67, 2, 2, 
	3048, 3049, 7, 264, 2, 2, 3049, 3050, 7, 228, 2, 2, 3050, 3060, 7, 40, 
	2, 2, 3051, 3060, 7, 71, 2, 2, 3052, 3060, 7, 225, 2, 2, 3053, 3060, 7, 
	231, 2, 2, 3054, 3060, 7, 271, 2, 2, 3055, 3057, 7, 141, 2, 2, 3056, 3055, 
	3, 2, 2, 2, 3056, 3057, 3, 2, 2, 2, 3057, 3058, 3, 2, 2, 2, 3058, 3060, 
	7, 289, 2, 2, 3059, 3045, 3, 2, 2, 2, 3059, 3048, 3, 2, 2, 2, 3059, 3051, 
	3, 2, 2, 2, 3059, 3052, 3, 2, 2, 2, 3059, 3053, 3, 2, 2, 2, 3059, 3054, 
	3, 2, 2, 2, 3059, 3056, 3, 2, 2, 2, 3060, 3062, 3, 2, 2, 2, 3061, 3063, 
	5, 422, 212, 2, 3062, 3061, 3, 2, 2, 2, 3062, 3063, 3, 2, 2, 2, 3063, 3064, 
	3, 2, 2, 2, 3064, 3066, 5, 646, 324, 2, 3065, 3036, 3, 2, 2, 2, 3065, 3038, 
	3, 2, 2, 2, 3065, 3041, 3, 2, 2, 2, 3065, 3059, 3, 2, 2, 2, 3066, 3067, 
	3, 2, 2, 2, 3067, 3068, 5, 518, 260, 2, 3068, 211, 3, 2, 2, 2, 3069, 3089, 
	5, 520, 261, 2, 3070, 3089, 5, 518, 260, 2, 3071, 3072, 7, 236, 2, 2, 3072, 
	3073, 7, 597, 2, 2, 3073, 3078, 5, 180, 91, 2, 3074, 3075, 7, 591, 2, 2, 
	3075, 3077, 5, 180, 91, 2, 3076, 3074, 3, 2, 2, 2, 3077, 3080, 3, 2, 2, 
	2, 3078, 3076, 3, 2, 2, 2, 3078, 3079, 3, 2, 2, 2, 3079, 3081, 3, 2, 2, 
	2, 3080, 3078, 3, 2, 2, 2, 3081, 3082, 7, 598, 2, 2, 3082, 3089, 3, 2, 
	2, 2, 3083, 3084, 7, 212, 2, 2, 3084, 3085, 7, 597, 2, 2, 3085, 3086, 5, 
	720, 361, 2, 3086, 3087, 7, 598, 2, 2, 3087, 3089, 3, 2, 2, 2, 3088, 3069, 
	3, 2, 2, 2, 3088, 3070, 3, 2, 2, 2, 3088, 3071, 3, 2, 2, 2, 3088, 3083, 
	3, 2, 2, 2, 3089, 213, 3, 2, 2, 2, 3090, 3091, 7, 248, 2, 2, 3091, 3096, 
	5, 646, 324, 2, 3092, 3097, 5, 520, 261, 2, 3093, 3097, 5, 522, 262, 2, 
	3094, 3097, 5, 518, 260, 2, 3095, 3097, 5, 216, 109, 2, 3096, 3092, 3, 
	2, 2, 2, 3096, 3093, 3, 2, 2, 2, 3096, 3094, 3, 2, 2, 2, 3096, 3095, 3, 
	2, 2, 2, 3097, 215, 3, 2, 2, 2, 3098, 3099, 7, 236, 2, 2, 3099, 3100, 7, 
	248, 2, 2, 3100, 3101, 5, 350, 176, 2, 3101, 217, 3, 2, 2, 2, 3102, 3103, 
	7, 409, 2, 2, 3103, 3104, 7, 54, 2, 2, 3104, 3105, 7, 296, 2, 2, 3105, 
	3106, 5, 556, 279, 2, 3106, 3107, 5, 220, 111, 2, 3107, 219, 3, 2, 2, 2, 
	3108, 3109, 7, 101, 2, 2, 3109, 3113, 5, 572, 287, 2, 3110, 3111, 7, 157, 
	2, 2, 3111, 3113, 7, 101, 2, 2, 3112, 3108, 3, 2, 2, 2, 3112, 3110, 3, 
	2, 2, 2, 3112, 3113, 3, 2, 2, 2, 3113, 3118, 3, 2, 2, 2, 3114, 3115, 7, 
	285, 2, 2, 3115, 3119, 5, 572, 287, 2, 3116, 3117, 7, 157, 2, 2, 3117, 
	3119, 7, 285, 2, 2, 3118, 3114, 3, 2, 2, 2, 3118, 3116, 3, 2, 2, 2, 3118, 
	3119, 3, 2, 2, 2, 3119, 3121, 3, 2, 2, 2, 3120, 3122, 5, 468, 235, 2, 3121, 
	3120, 3, 2, 2, 2, 3121, 3122, 3, 2, 2, 2, 3122, 3126, 3, 2, 2, 2, 3123, 
	3126, 5, 518, 260, 2, 3124, 3126, 5, 520, 261, 2, 3125, 3112, 3, 2, 2, 
	2, 3125, 3123, 3, 2, 2, 2, 3125, 3124, 3, 2, 2, 2, 3126, 221, 3, 2, 2, 
	2, 3127, 3128, 7, 168, 2, 2, 3128, 3129, 5, 234, 118, 2, 3129, 3130, 5, 
	224, 113, 2, 3130, 223, 3, 2, 2, 2, 3131, 3145, 5, 522, 262, 2, 3132, 3133, 
	7, 236, 2, 2, 3133, 3134, 7, 597, 2, 2, 3134, 3139, 5, 226, 114, 2, 3135, 
	3136, 7, 591, 2, 2, 3136, 3138, 5, 226, 114, 2, 3137, 3135, 3, 2, 2, 2, 
	3138, 3141, 3, 2, 2, 2, 3139, 3137, 3, 2, 2, 2, 3139, 3140, 3, 2, 2, 2, 
	3140, 3142, 3, 2, 2, 2, 3141, 3139, 3, 2, 2, 2, 3142, 3143, 7, 598, 2, 
	2, 3143, 3145, 3, 2, 2, 2, 3144, 3131, 3, 2, 2, 2, 3144, 3132, 3, 2, 2, 
	2, 3145, 225, 3, 2, 2, 2, 3146, 3147, 9, 36, 2, 2, 3147, 3148, 7, 588, 
	2, 2, 3148, 3149, 5, 646, 324, 2, 3149, 227, 3, 2, 2, 2, 3150, 3151, 7, 
	445, 2, 2, 3151, 3153, 7, 139, 2, 2, 3152, 3154, 5, 422, 212, 2, 3153, 
	3152, 3, 2, 2, 2, 3153, 3154, 3, 2, 2, 2, 3154, 3155, 3, 2, 2, 2, 3155, 
	3158, 7, 408, 2, 2, 3156, 3159, 5, 44, 23, 2, 3157, 3159, 7, 445, 2, 2, 
	3158, 3156, 3, 2, 2, 2, 3158, 3157, 3, 2, 2, 2, 3159, 3160, 3, 2, 2, 2, 
	3160, 3161, 7, 234, 2, 2, 3161, 3162, 5, 556, 279, 2, 3162, 229, 3, 2, 
	2, 2, 3163, 3164, 7, 175, 2, 2, 3164, 3165, 7, 22, 2, 2, 3165, 3170, 5, 
	44, 23, 2, 3166, 3167, 7, 591, 2, 2, 3167, 3169, 5, 44, 23, 2, 3168, 3166, 
	3, 2, 2, 2, 3169, 3172, 3, 2, 2, 2, 3170, 3168, 3, 2, 2, 2, 3170, 3171, 
	3, 2, 2, 2, 3171, 3174, 3, 2, 2, 2, 3172, 3170, 3, 2, 2, 2, 3173, 3175, 
	5, 530, 266, 2, 3174, 3173, 3, 2, 2, 2, 3174, 3175, 3, 2, 2, 2, 3175, 231, 
	3, 2, 2, 2, 3176, 3178, 7, 168, 2, 2, 3177, 3179, 5, 422, 212, 2, 3178, 
	3177, 3, 2, 2, 2, 3178, 3179, 3, 2, 2, 2, 3179, 3180, 3, 2, 2, 2, 3180, 
	3185, 5, 234, 118, 2, 3181, 3182, 7, 591, 2, 2, 3182, 3184, 5, 234, 118, 
	2, 3183, 3181, 3, 2, 2, 2, 3184, 3187, 3, 2, 2, 2, 3185, 3183, 3, 2, 2, 
	2, 3185, 3186, 3, 2, 2, 2, 3186, 3189, 3, 2, 2, 2, 3187, 3185, 3, 2, 2, 
	2, 3188, 3190, 5, 530, 266, 2, 3189, 3188, 3, 2, 2, 2, 3189, 3190, 3, 2, 
	2, 2, 3190, 233, 3, 2, 2, 2, 3191, 3192, 5, 268, 135, 2, 3192, 3195, 7, 
	597, 2, 2, 3193, 3196, 5, 576, 289, 2, 3194, 3196, 7, 323, 2, 2, 3195, 
	3193, 3, 2, 2, 2, 3195, 3194, 3, 2, 2, 2, 3196, 3197, 3, 2, 2, 2, 3197, 
	3200, 7, 591, 2, 2, 3198, 3201, 5, 576, 289, 2, 3199, 3201, 7, 323, 2, 
	2, 3200, 3198, 3, 2, 2, 2, 3200, 3199, 3, 2, 2, 2, 3201, 3202, 3, 2, 2, 
	2, 3202, 3203, 7, 598, 2, 2, 3203, 235, 3, 2, 2, 2, 3204, 3205, 7, 390, 
	2, 2, 3205, 3207, 5, 556, 279, 2, 3206, 3204, 3, 2, 2, 2, 3206, 3207, 3, 
	2, 2, 2, 3207, 3217, 3, 2, 2, 2, 3208, 3209, 7, 387, 2, 2, 3209, 3210, 
	7, 597, 2, 2, 3210, 3211, 5, 588, 295, 2, 3211, 3212, 7, 598, 2, 2, 3212, 
	3218, 3, 2, 2, 2, 3213, 3215, 7, 423, 2, 2, 3214, 3213, 3, 2, 2, 2, 3214, 
	3215, 3, 2, 2, 2, 3215, 3216, 3, 2, 2, 2, 3216, 3218, 7, 424, 2, 2, 3217, 
	3208, 3, 2, 2, 2, 3217, 3214, 3, 2, 2, 2, 3218, 237, 3, 2, 2, 2, 3219, 
	3220, 7, 428, 2, 2, 3220, 3222, 7, 210, 2, 2, 3221, 3219, 3, 2, 2, 2, 3221, 
	3222, 3, 2, 2, 2, 3222, 3223, 3, 2, 2, 2, 3223, 3224, 7, 267, 2, 2, 3224, 
	3225, 7, 408, 2, 2, 3225, 3226, 5, 576, 289, 2, 3226, 3227, 7, 127, 2, 
	2, 3227, 3228, 5, 556, 279, 2, 3228, 3229, 7, 597, 2, 2, 3229, 3230, 7, 
	410, 2, 2, 3230, 3231, 7, 243, 2, 2, 3231, 3232, 7, 451, 2, 2, 3232, 3233, 
	7, 95, 2, 2, 3233, 3234, 5, 334, 168, 2, 3234, 3235, 7, 591, 2, 2, 3235, 
	3236, 7, 440, 2, 2, 3236, 3237, 7, 243, 2, 2, 3237, 3238, 7, 451, 2, 2, 
	3238, 3239, 7, 95, 2, 2, 3239, 3240, 5, 334, 168, 2, 3240, 3241, 7, 598, 
	2, 2, 3241, 239, 3, 2, 2, 2, 3242, 3243, 7, 5, 2, 2, 3243, 3244, 7, 143, 
	2, 2, 3244, 3245, 5, 556, 279, 2, 3245, 3246, 7, 271, 2, 2, 3246, 3247, 
	9, 37, 2, 2, 3247, 3248, 7, 101, 2, 2, 3248, 3249, 5, 646, 324, 2, 3249, 
	241, 3, 2, 2, 2, 3250, 3251, 9, 28, 2, 2, 3251, 3262, 5, 556, 279, 2, 3252, 
	3254, 7, 451, 2, 2, 3253, 3252, 3, 2, 2, 2, 3253, 3254, 3, 2, 2, 2, 3254, 
	3255, 3, 2, 2, 2, 3255, 3259, 5, 244, 123, 2, 3256, 3258, 5, 244, 123, 
	2, 3257, 3256, 3, 2, 2, 2, 3258, 3261, 3, 2, 2, 2, 3259, 3257, 3, 2, 2, 
	2, 3259, 3260, 3, 2, 2, 2, 3260, 3263, 3, 2, 2, 2, 3261, 3259, 3, 2, 2, 
	2, 3262, 3253, 3, 2, 2, 2, 3262, 3263, 3, 2, 2, 2, 3263, 243, 3, 2, 2, 
	2, 3264, 3268, 5, 248, 125, 2, 3265, 3268, 5, 250, 126, 2, 3266, 3268, 
	5, 252, 127, 2, 3267, 3264, 3, 2, 2, 2, 3267, 3265, 3, 2, 2, 2, 3267, 3266, 
	3, 2, 2, 2, 3268, 245, 3, 2, 2, 2, 3269, 3272, 5, 248, 125, 2, 3270, 3272, 
	5, 250, 126, 2, 3271, 3269, 3, 2, 2, 2, 3271, 3270, 3, 2, 2, 2, 3272, 247, 
	3, 2, 2, 2, 3273, 3295, 7, 545, 2, 2, 3274, 3295, 7, 515, 2, 2, 3275, 3295, 
	7, 464, 2, 2, 3276, 3295, 7, 510, 2, 2, 3277, 3295, 7, 465, 2, 2, 3278, 
	3295, 7, 511, 2, 2, 3279, 3295, 7, 116, 2, 2, 3280, 3295, 7, 512, 2, 2, 
	3281, 3295, 7, 496, 2, 2, 3282, 3295, 7, 513, 2, 2, 3283, 3285, 7, 77, 
	2, 2, 3284, 3283, 3, 2, 2, 2, 3284, 3285, 3, 2, 2, 2, 3285, 3286, 3, 2, 
	2, 2, 3286, 3289, 7, 182, 2, 2, 3287, 3290, 7, 625, 2, 2, 3288, 3290, 7, 
	424, 2, 2, 3289, 3287, 3, 2, 2, 2, 3289, 3288, 3, 2, 2, 2, 3290, 3295, 
	3, 2, 2, 2, 3291, 3292, 7, 283, 2, 2, 3292, 3293, 7, 280, 2, 2, 3293, 3295, 
	7, 625, 2, 2, 3294, 3273, 3, 2, 2, 2, 3294, 3274, 3, 2, 2, 2, 3294, 3275, 
	3, 2, 2, 2, 3294, 3276, 3, 2, 2, 2, 3294, 3277, 3, 2, 2, 2, 3294, 3278, 
	3, 2, 2, 2, 3294, 3279, 3, 2, 2, 2, 3294, 3280, 3, 2, 2, 2, 3294, 3281, 
	3, 2, 2, 2, 3294, 3282, 3, 2, 2, 2, 3294, 3284, 3, 2, 2, 2, 3294, 3291, 
	3, 2, 2, 2, 3295, 249, 3, 2, 2, 2, 3296, 3304, 7, 527, 2, 2, 3297, 3304, 
	7, 514, 2, 2, 3298, 3304, 7, 456, 2, 2, 3299, 3304, 7, 509, 2, 2, 3300, 
	3301, 7, 42, 2, 2, 3301, 3302, 7, 420, 2, 2, 3302, 3304, 5, 350, 176, 2, 
	3303, 3296, 3, 2, 2, 2, 3303, 3297, 3, 2, 2, 2, 3303, 3298, 3, 2, 2, 2, 
	3303, 3299, 3, 2, 2, 2, 3303, 3300, 3, 2, 2, 2, 3304, 251, 3, 2, 2, 2, 
	3305, 3306, 7, 257, 2, 2, 3306, 3318, 5, 588, 295, 2, 3307, 3308, 7, 414, 
	2, 2, 3308, 3315, 7, 217, 2, 2, 3309, 3310, 7, 414, 2, 2, 3310, 3315, 7, 
	412, 2, 2, 3311, 3315, 7, 217, 2, 2, 3312, 3315, 7, 8, 2, 2, 3313, 3315, 
	7, 445, 2, 2, 3314, 3307, 3, 2, 2, 2, 3314, 3309, 3, 2, 2, 2, 3314, 3311, 
	3, 2, 2, 2, 3314, 3312, 3, 2, 2, 2, 3314, 3313, 3, 2, 2, 2, 3315, 3316, 
	3, 2, 2, 2, 3316, 3318, 5, 720, 361, 2, 3317, 3305, 3, 2, 2, 2, 3317, 3314, 
	3, 2, 2, 2, 3318, 253, 3, 2, 2, 2, 3319, 3320, 7, 412, 2, 2, 3320, 3329, 
	5, 556, 279, 2, 3321, 3323, 7, 451, 2, 2, 3322, 3321, 3, 2, 2, 2, 3322, 
	3323, 3, 2, 2, 2, 3323, 3325, 3, 2, 2, 2, 3324, 3326, 5, 256, 129, 2, 3325, 
	3324, 3, 2, 2, 2, 3326, 3327, 3, 2, 2, 2, 3327, 3325, 3, 2, 2, 2, 3327, 
	3328, 3, 2, 2, 2, 3328, 3330, 3, 2, 2, 2, 3329, 3322, 3, 2, 2, 2, 3329, 
	3330, 3, 2, 2, 2, 3330, 255, 3, 2, 2, 2, 3331, 3334, 5, 248, 125, 2, 3332, 
	3334, 5, 252, 127, 2, 3333, 3331, 3, 2, 2, 2, 3333, 3332, 3, 2, 2, 2, 3334, 
	257, 3, 2, 2, 2, 3335, 3336, 7, 260, 2, 2, 3336, 3339, 5, 556, 279, 2, 
	3337, 3338, 7, 176, 2, 2, 3338, 3340, 5, 44, 23, 2, 3339, 3337, 3, 2, 2, 
	2, 3339, 3340, 3, 2, 2, 2, 3340, 3341, 3, 2, 2, 2, 3341, 3342, 7, 135, 
	2, 2, 3342, 3355, 7, 625, 2, 2, 3343, 3344, 7, 451, 2, 2, 3344, 3345, 7, 
	597, 2, 2, 3345, 3350, 5, 180, 91, 2, 3346, 3347, 7, 591, 2, 2, 3347, 3349, 
	5, 180, 91, 2, 3348, 3346, 3, 2, 2, 2, 3349, 3352, 3, 2, 2, 2, 3350, 3348, 
	3, 2, 2, 2, 3350, 3351, 3, 2, 2, 2, 3351, 3353, 3, 2, 2, 2, 3352, 3350, 
	3, 2, 2, 2, 3353, 3354, 7, 598, 2, 2, 3354, 3356, 3, 2, 2, 2, 3355, 3343, 
	3, 2, 2, 2, 3355, 3356, 3, 2, 2, 2, 3356, 259, 3, 2, 2, 2, 3357, 3359, 
	7, 248, 2, 2, 3358, 3360, 5, 424, 213, 2, 3359, 3358, 3, 2, 2, 2, 3359, 
	3360, 3, 2, 2, 2, 3360, 3361, 3, 2, 2, 2, 3361, 3366, 5, 646, 324, 2, 3362, 
	3363, 7, 597, 2, 2, 3363, 3364, 5, 720, 361, 2, 3364, 3365, 7, 598, 2, 
	2, 3365, 3367, 3, 2, 2, 2, 3366, 3362, 3, 2, 2, 2, 3366, 3367, 3, 2, 2, 
	2, 3367, 3368, 3, 2, 2, 2, 3368, 3369, 7, 426, 2, 2, 3369, 3370, 5, 556, 
	279, 2, 3370, 3371, 7, 591, 2, 2, 3371, 3372, 5, 720, 361, 2, 3372, 3373, 
	7, 410, 2, 2, 3373, 3374, 5, 646, 324, 2, 3374, 261, 3, 2, 2, 2, 3375, 
	3376, 7, 409, 2, 2, 3376, 3377, 7, 54, 2, 2, 3377, 3378, 7, 296, 2, 2, 
	3378, 3383, 5, 556, 279, 2, 3379, 3380, 7, 101, 2, 2, 3380, 3384, 5, 572, 
	287, 2, 3381, 3382, 7, 157, 2, 2, 3382, 3384, 7, 101, 2, 2, 3383, 3379, 
	3, 2, 2, 2, 3383, 3381, 3, 2, 2, 2, 3383, 3384, 3, 2, 2, 2, 3384, 3389, 
	3, 2, 2, 2, 3385, 3386, 7, 285, 2, 2, 3386, 3390, 5, 572, 287, 2, 3387, 
	3388, 7, 157, 2, 2, 3388, 3390, 7, 285, 2, 2, 3389, 3385, 3, 2, 2, 2, 3389, 
	3387, 3, 2, 2, 2, 3389, 3390, 3, 2, 2, 2, 3390, 3403, 3, 2, 2, 2, 3391, 
	3392, 7, 170, 2, 2, 3392, 3393, 7, 597, 2, 2, 3393, 3398, 5, 264, 133, 
	2, 3394, 3395, 7, 591, 2, 2, 3395, 3397, 5, 264, 133, 2, 3396, 3394, 3, 
	2, 2, 2, 3397, 3400, 3, 2, 2, 2, 3398, 3396, 3, 2, 2, 2, 3398, 3399, 3, 
	2, 2, 2, 3399, 3401, 3, 2, 2, 2, 3400, 3398, 3, 2, 2, 2, 3401, 3402, 7, 
	598, 2, 2, 3402, 3404, 3, 2, 2, 2, 3403, 3391, 3, 2, 2, 2, 3403, 3404, 
	3, 2, 2, 2, 3404, 263, 3, 2, 2, 2, 3405, 3406, 5, 556, 279, 2, 3406, 3407, 
	7, 625, 2, 2, 3407, 265, 3, 2, 2, 2, 3408, 3409, 7, 168, 2, 2, 3409, 3410, 
	5, 268, 135, 2, 3410, 3411, 7, 597, 2, 2, 3411, 3416, 5, 270, 136, 2, 3412, 
	3413, 7, 591, 2, 2, 3413, 3415, 5, 270, 136, 2, 3414, 3412, 3, 2, 2, 2, 
	3415, 3418, 3, 2, 2, 2, 3416, 3414, 3, 2, 2, 2, 3416, 3417, 3, 2, 2, 2, 
	3417, 3419, 3, 2, 2, 2, 3418, 3416, 3, 2, 2, 2, 3419, 3420, 7, 598, 2, 
	2, 3420, 267, 3, 2, 2, 2, 3421, 3422, 5, 556, 279, 2, 3422, 3423, 7, 605, 
	2, 2, 3423, 3425, 3, 2, 2, 2, 3424, 3421, 3, 2, 2, 2, 3424, 3425, 3, 2, 
	2, 2, 3425, 3426, 3, 2, 2, 2, 3426, 3427, 5, 490, 246, 2, 3427, 269, 3, 
	2, 2, 2, 3428, 3429, 9, 17, 2, 2, 3429, 3430, 7, 588, 2, 2, 3430, 3446, 
	5, 646, 324, 2, 3431, 3432, 7, 214, 2, 2, 3432, 3433, 7, 588, 2, 2, 3433, 
	3446, 5, 646, 324, 2, 3434, 3435, 7, 365, 2, 2, 3435, 3436, 7, 588, 2, 
	2, 3436, 3446, 5, 646, 324, 2, 3437, 3438, 9, 38, 2, 2, 3438, 3439, 7, 
	588, 2, 2, 3439, 3446, 5, 576, 289, 2, 3440, 3441, 9, 39, 2, 2, 3441, 3442, 
	7, 588, 2, 2, 3442, 3446, 5, 594, 298, 2, 3443, 3446, 7, 480, 2, 2, 3444, 
	3446, 7, 498, 2, 2, 3445, 3428, 3, 2, 2, 2, 3445, 3431, 3, 2, 2, 2, 3445, 
	3434, 3, 2, 2, 2, 3445, 3437, 3, 2, 2, 2, 3445, 3440, 3, 2, 2, 2, 3445, 
	3443, 3, 2, 2, 2, 3445, 3444, 3, 2, 2, 2, 3446, 271, 3, 2, 2, 2, 3447, 
	3448, 7, 428, 2, 2, 3448, 3450, 7, 210, 2, 2, 3449, 3447, 3, 2, 2, 2, 3449, 
	3450, 3, 2, 2, 2, 3450, 3451, 3, 2, 2, 2, 3451, 3452, 7, 10, 2, 2, 3452, 
	3454, 5, 646, 324, 2, 3453, 3455, 5, 336, 169, 2, 3454, 3453, 3, 2, 2, 
	2, 3454, 3455, 3, 2, 2, 2, 3455, 3456, 3, 2, 2, 2, 3456, 3462, 7, 597, 
	2, 2, 3457, 3458, 7, 454, 2, 2, 3458, 3459, 7, 588, 2, 2, 3459, 3460, 5, 
	576, 289, 2, 3460, 3461, 7, 591, 2, 2, 3461, 3463, 3, 2, 2, 2, 3462, 3457, 
	3, 2, 2, 2, 3462, 3463, 3, 2, 2, 2, 3463, 3464, 3, 2, 2, 2, 3464, 3465, 
	7, 535, 2, 2, 3465, 3466, 7, 588, 2, 2, 3466, 3467, 5, 646, 324, 2, 3467, 
	3468, 7, 591, 2, 2, 3468, 3469, 7, 540, 2, 2, 3469, 3470, 7, 588, 2, 2, 
	3470, 3475, 5, 576, 289, 2, 3471, 3472, 7, 591, 2, 2, 3472, 3474, 5, 274, 
	138, 2, 3473, 3471, 3, 2, 2, 2, 3474, 3477, 3, 2, 2, 2, 3475, 3473, 3, 
	2, 2, 2, 3475, 3476, 3, 2, 2, 2, 3476, 3478, 3, 2, 2, 2, 3477, 3475, 3, 
	2, 2, 2, 3478, 3479, 7, 598, 2, 2, 3479, 273, 3, 2, 2, 2, 3480, 3481, 7, 
	539, 2, 2, 3481, 3482, 7, 588, 2, 2, 3482, 3532, 7, 620, 2, 2, 3483, 3484, 
	7, 471, 2, 2, 3484, 3485, 7, 588, 2, 2, 3485, 3532, 5, 646, 324, 2, 3486, 
	3532, 7, 472, 2, 2, 3487, 3488, 7, 473, 2, 2, 3488, 3489, 7, 588, 2, 2, 
	3489, 3532, 9, 40, 2, 2, 3490, 3491, 7, 460, 2, 2, 3491, 3492, 7, 588, 
	2, 2, 3492, 3532, 5, 646, 324, 2, 3493, 3494, 7, 533, 2, 2, 3494, 3495, 
	7, 588, 2, 2, 3495, 3532, 5, 646, 324, 2, 3496, 3497, 7, 466, 2, 2, 3497, 
	3498, 7, 588, 2, 2, 3498, 3532, 5, 646, 324, 2, 3499, 3500, 7, 485, 2, 
	2, 3500, 3501, 7, 588, 2, 2, 3501, 3532, 5, 588, 295, 2, 3502, 3503, 7, 
	505, 2, 2, 3503, 3504, 7, 588, 2, 2, 3504, 3532, 5, 646, 324, 2, 3505, 
	3506, 7, 503, 2, 2, 3506, 3507, 7, 588, 2, 2, 3507, 3532, 5, 646, 324, 
	2, 3508, 3509, 7, 507, 2, 2, 3509, 3510, 7, 588, 2, 2, 3510, 3532, 5, 576, 
	289, 2, 3511, 3512, 7, 506, 2, 2, 3512, 3513, 7, 588, 2, 2, 3513, 3532, 
	7, 620, 2, 2, 3514, 3515, 7, 499, 2, 2, 3515, 3516, 7, 588, 2, 2, 3516, 
	3532, 5, 646, 324, 2, 3517, 3532, 7, 500, 2, 2, 3518, 3519, 7, 501, 2, 
	2, 3519, 3520, 7, 588, 2, 2, 3520, 3532, 9, 40, 2, 2, 3521, 3522, 7, 502, 
	2, 2, 3522, 3523, 7, 588, 2, 2, 3523, 3532, 5, 588, 295, 2, 3524, 3525, 
	7, 538, 2, 2, 3525, 3526, 7, 588, 2, 2, 3526, 3532, 5, 594, 298, 2, 3527, 
	3528, 7, 177, 2, 2, 3528, 3529, 7, 588, 2, 2, 3529, 3532, 9, 26, 2, 2, 
	3530, 3532, 7, 482, 2, 2, 3531, 3480, 3, 2, 2, 2, 3531, 3483, 3, 2, 2, 
	2, 3531, 3486, 3, 2, 2, 2, 3531, 3487, 3, 2, 2, 2, 3531, 3490, 3, 2, 2, 
	2, 3531, 3493, 3, 2, 2, 2, 3531, 3496, 3, 2, 2, 2, 3531, 3499, 3, 2, 2, 
	2, 3531, 3502, 3, 2, 2, 2, 3531, 3505, 3, 2, 2, 2, 3531, 3508, 3, 2, 2, 
	2, 3531, 3511, 3, 2, 2, 2, 3531, 3514, 3, 2, 2, 2, 3531, 3517, 3, 2, 2, 
	2, 3531, 3518, 3, 2, 2, 2, 3531, 3521, 3, 2, 2, 2, 3531, 3524, 3, 2, 2, 
	2, 3531, 3527, 3, 2, 2, 2, 3531, 3530, 3, 2, 2, 2, 3532, 275, 3, 2, 2, 
	2, 3533, 3534, 7, 236, 2, 2, 3534, 3535, 5, 278, 140, 2, 3535, 277, 3, 
	2, 2, 2, 3536, 3539, 7, 43, 2, 2, 3537, 3540, 7, 376, 2, 2, 3538, 3540, 
	5, 498, 250, 2, 3539, 3537, 3, 2, 2, 2, 3539, 3538, 3, 2, 2, 2, 3540, 3541, 
	3, 2, 2, 2, 3541, 3574, 9, 24, 2, 2, 3542, 3543, 7, 266, 2, 2, 3543, 3548, 
	5, 22, 12, 2, 3544, 3545, 7, 591, 2, 2, 3545, 3547, 5, 22, 12, 2, 3546, 
	3544, 3, 2, 2, 2, 3547, 3550, 3, 2, 2, 2, 3548, 3546, 3, 2, 2, 2, 3548, 
	3549, 3, 2, 2, 2, 3549, 3574, 3, 2, 2, 2, 3550, 3548, 3, 2, 2, 2, 3551, 
	3552, 7, 266, 2, 2, 3552, 3553, 7, 242, 2, 2, 3553, 3574, 7, 625, 2, 2, 
	3554, 3555, 7, 235, 2, 2, 3555, 3556, 7, 30, 2, 2, 3556, 3557, 7, 381, 
	2, 2, 3557, 3558, 7, 266, 2, 2, 3558, 3563, 5, 22, 12, 2, 3559, 3560, 7, 
	591, 2, 2, 3560, 3562, 5, 22, 12, 2, 3561, 3559, 3, 2, 2, 2, 3562, 3565, 
	3, 2, 2, 2, 3563, 3561, 3, 2, 2, 2, 3563, 3564, 3, 2, 2, 2, 3564, 3574, 
	3, 2, 2, 2, 3565, 3563, 3, 2, 2, 2, 3566, 3568, 9, 41, 2, 2, 3567, 3566, 
	3, 2, 2, 2, 3567, 3568, 3, 2, 2, 2, 3568, 3569, 3, 2, 2, 2, 3569, 3574, 
	5, 280, 141, 2, 3570, 3571, 7, 298, 2, 2, 3571, 3572, 7, 169, 2, 2, 3572, 
	3574, 9, 42, 2, 2, 3573, 3536, 3, 2, 2, 2, 3573, 3542, 3, 2, 2, 2, 3573, 
	3551, 3, 2, 2, 2, 3573, 3554, 3, 2, 2, 2, 3573, 3567, 3, 2, 2, 2, 3573, 
	3570, 3, 2, 2, 2, 3574, 279, 3, 2, 2, 2, 3575, 3576, 7, 235, 2, 2, 3576, 
	3580, 7, 353, 2, 2, 3577, 3581, 7, 625, 2, 2, 3578, 3581, 5, 556, 279, 
	2, 3579, 3581, 7, 398, 2, 2, 3580, 3577, 3, 2, 2, 2, 3580, 3578, 3, 2, 
	2, 2, 3580, 3579, 3, 2, 2, 2, 3581, 3605, 3, 2, 2, 2, 3582, 3583, 7, 336, 
	2, 2, 3583, 3588, 7, 301, 2, 2, 3584, 3589, 7, 625, 2, 2, 3585, 3589, 5, 
	352, 177, 2, 3586, 3589, 7, 134, 2, 2, 3587, 3589, 7, 398, 2, 2, 3588, 
	3584, 3, 2, 2, 2, 3588, 3585, 3, 2, 2, 2, 3588, 3586, 3, 2, 2, 2, 3588, 
	3587, 3, 2, 2, 2, 3589, 3605, 3, 2, 2, 2, 3590, 3591, 5, 556, 279, 2, 3591, 
	3592, 7, 605, 2, 2, 3592, 3594, 3, 2, 2, 2, 3593, 3590, 3, 2, 2, 2, 3593, 
	3594, 3, 2, 2, 2, 3594, 3595, 3, 2, 2, 2, 3595, 3596, 5, 556, 279, 2, 3596, 
	3597, 9, 27, 2, 2, 3597, 3598, 5, 282, 142, 2, 3598, 3605, 3, 2, 2, 2, 
	3599, 3602, 7, 217, 2, 2, 3600, 3603, 5, 556, 279, 2, 3601, 3603, 7, 323, 
	2, 2, 3602, 3600, 3, 2, 2, 2, 3602, 3601, 3, 2, 2, 2, 3603, 3605, 3, 2, 
	2, 2, 3604, 3575, 3, 2, 2, 2, 3604, 3582, 3, 2, 2, 2, 3604, 3593, 3, 2, 
	2, 2, 3604, 3599, 3, 2, 2, 2, 3605, 281, 3, 2, 2, 2, 3606, 3611, 5, 588, 
	295, 2, 3607, 3608, 7, 591, 2, 2, 3608, 3610, 5, 588, 295, 2, 3609, 3607, 
	3, 2, 2, 2, 3610, 3613, 3, 2, 2, 2, 3611, 3609, 3, 2, 2, 2, 3611, 3612, 
	3, 2, 2, 2, 3612, 3616, 3, 2, 2, 2, 3613, 3611, 3, 2, 2, 2, 3614, 3616, 
	7, 398, 2, 2, 3615, 3606, 3, 2, 2, 2, 3615, 3614, 3, 2, 2, 2, 3616, 283, 
	3, 2, 2, 2, 3617, 3618, 7, 428, 2, 2, 3618, 3620, 7, 210, 2, 2, 3619, 3617, 
	3, 2, 2, 2, 3619, 3620, 3, 2, 2, 2, 3620, 3621, 3, 2, 2, 2, 3621, 3622, 
	7, 223, 2, 2, 3622, 3623, 5, 556, 279, 2, 3623, 3624, 7, 381, 2, 2, 3624, 
	3625, 7, 426, 2, 2, 3625, 3626, 9, 43, 2, 2, 3626, 3627, 7, 440, 2, 2, 
	3627, 3630, 5, 646, 324, 2, 3628, 3629, 7, 449, 2, 2, 3629, 3631, 5, 588, 
	295, 2, 3630, 3628, 3, 2, 2, 2, 3630, 3631, 3, 2, 2, 2, 3631, 3632, 3, 
	2, 2, 2, 3632, 3634, 7, 402, 2, 2, 3633, 3635, 9, 44, 2, 2, 3634, 3633, 
	3, 2, 2, 2, 3634, 3635, 3, 2, 2, 2, 3635, 3653, 3, 2, 2, 2, 3636, 3654, 
	7, 159, 2, 2, 3637, 3654, 5, 286, 144, 2, 3638, 3644, 7, 597, 2, 2, 3639, 
	3640, 5, 286, 144, 2, 3640, 3641, 7, 590, 2, 2, 3641, 3643, 3, 2, 2, 2, 
	3642, 3639, 3, 2, 2, 2, 3643, 3646, 3, 2, 2, 2, 3644, 3642, 3, 2, 2, 2, 
	3644, 3645, 3, 2, 2, 2, 3645, 3647, 3, 2, 2, 2, 3646, 3644, 3, 2, 2, 2, 
	3647, 3649, 5, 286, 144, 2, 3648, 3650, 7, 590, 2, 2, 3649, 3648, 3, 2, 
	2, 2, 3649, 3650, 3, 2, 2, 2, 3650, 3651, 3, 2, 2, 2, 3651, 3652, 7, 598, 
	2, 2, 3652, 3654, 3, 2, 2, 2, 3653, 3636, 3, 2, 2, 2, 3653, 3637, 3, 2, 
	2, 2, 3653, 3638, 3, 2, 2, 2, 3654, 285, 3, 2, 2, 2, 3655, 3661, 5, 652, 
	327, 2, 3656, 3661, 5, 700, 351, 2, 3657, 3661, 5, 712, 357, 2, 3658, 3661, 
	5, 710, 356, 2, 3659, 3661, 5, 716, 359, 2, 3660, 3655, 3, 2, 2, 2, 3660, 
	3656, 3, 2, 2, 2, 3660, 3657, 3, 2, 2, 2, 3660, 3658, 3, 2, 2, 2, 3660, 
	3659, 3, 2, 2, 2, 3661, 287, 3, 2, 2, 2, 3662, 3664, 7, 390, 2, 2, 3663, 
	3662, 3, 2, 2, 2, 3663, 3664, 3, 2, 2, 2, 3664, 3665, 3, 2, 2, 2, 3665, 
	3666, 7, 268, 2, 2, 3666, 3671, 5, 556, 279, 2, 3667, 3672, 7, 20, 2, 2, 
	3668, 3669, 7, 122, 2, 2, 3669, 3672, 7, 164, 2, 2, 3670, 3672, 7, 9, 2, 
	2, 3671, 3667, 3, 2, 2, 2, 3671, 3668, 3, 2, 2, 2, 3671, 3670, 3, 2, 2, 
	2, 3672, 3688, 3, 2, 2, 2, 3673, 3677, 7, 121, 2, 2, 3674, 3677, 7, 62, 
	2, 2, 3675, 3677, 7, 269, 2, 2, 3676, 3673, 3, 2, 2, 2, 3676, 3674, 3, 
	2, 2, 2, 3676, 3675, 3, 2, 2, 2, 3677, 3684, 3, 2, 2, 2, 3678, 3681, 7, 
	281, 2, 2, 3679, 3680, 7, 164, 2, 2, 3680, 3682, 5, 720, 361, 2, 3681, 
	3679, 3, 2, 2, 2, 3681, 3682, 3, 2, 2, 2, 3682, 3684, 3, 2, 2, 2, 3683, 
	3676, 3, 2, 2, 2, 3683, 3678, 3, 2, 2, 2, 3684, 3686, 3, 2, 2, 2, 3685, 
	3687, 7, 428, 2, 2, 3686, 3685, 3, 2, 2, 2, 3686, 3687, 3, 2, 2, 2, 3687, 
	3689, 3, 2, 2, 2, 3688, 3683, 3, 2, 2, 2, 3689, 3690, 3, 2, 2, 2, 3690, 
	3688, 3, 2, 2, 2, 3690, 3691, 3, 2, 2, 2, 3691, 3692, 3, 2, 2, 2, 3692, 
	3693, 7, 426, 2, 2, 3693, 3696, 5, 646, 324, 2, 3694, 3695, 7, 410, 2, 
	2, 3695, 3697, 5, 646, 324, 2, 3696, 3694, 3, 2, 2, 2, 3696, 3697, 3, 2, 
	2, 2, 3697, 3699, 3, 2, 2, 2, 3698, 3700, 5, 100, 51, 2, 3699, 3698, 3, 
	2, 2, 2, 3699, 3700, 3, 2, 2, 2, 3700, 3702, 3, 2, 2, 2, 3701, 3703, 5, 
	102, 52, 2, 3702, 3701, 3, 2, 2, 2, 3702, 3703, 3, 2, 2, 2, 3703, 3709, 
	3, 2, 2, 2, 3704, 3705, 7, 203, 2, 2, 3705, 3707, 5, 290, 146, 2, 3706, 
	3708, 5, 290, 146, 2, 3707, 3706, 3, 2, 2, 2, 3707, 3708, 3, 2, 2, 2, 3708, 
	3710, 3, 2, 2, 2, 3709, 3704, 3, 2, 2, 2, 3709, 3710, 3, 2, 2, 2, 3710, 
	3716, 3, 2, 2, 2, 3711, 3713, 7, 408, 2, 2, 3712, 3714, 7, 74, 2, 2, 3713, 
	3712, 3, 2, 2, 2, 3713, 3714, 3, 2, 2, 2, 3714, 3715, 3, 2, 2, 2, 3715, 
	3717, 9, 45, 2, 2, 3716, 3711, 3, 2, 2, 2, 3716, 3717, 3, 2, 2, 2, 3717, 
	3719, 3, 2, 2, 2, 3718, 3720, 5, 292, 147, 2, 3719, 3718, 3, 2, 2, 2, 3719, 
	3720, 3, 2, 2, 2, 3720, 3721, 3, 2, 2, 2, 3721, 3722, 7, 84, 2, 2, 3722, 
	3723, 9, 17, 2, 2, 3723, 3724, 5, 610, 306, 2, 3724, 289, 3, 2, 2, 2, 3725, 
	3726, 9, 46, 2, 2, 3726, 3728, 7, 438, 2, 2, 3727, 3729, 7, 381, 2, 2, 
	3728, 3727, 3, 2, 2, 2, 3728, 3729, 3, 2, 2, 2, 3729, 3730, 3, 2, 2, 2, 
	3730, 3731, 5, 556, 279, 2, 3731, 291, 3, 2, 2, 2, 3732, 3733, 7, 448, 
	2, 2, 3733, 3734, 7, 597, 2, 2, 3734, 3735, 5, 588, 295, 2, 3735, 3736, 
	7, 598, 2, 2, 3736, 293, 3, 2, 2, 2, 3737, 3743, 7, 411, 2, 2, 3738, 3740, 
	7, 216, 2, 2, 3739, 3741, 5, 116, 59, 2, 3740, 3739, 3, 2, 2, 2, 3740, 
	3741, 3, 2, 2, 2, 3741, 3743, 3, 2, 2, 2, 3742, 3737, 3, 2, 2, 2, 3742, 
	3738, 3, 2, 2, 2, 3743, 3746, 3, 2, 2, 2, 3744, 3747, 5, 302, 152, 2, 3745, 
	3747, 5, 298, 150, 2, 3746, 3744, 3, 2, 2, 2, 3746, 3745, 3, 2, 2, 2, 3747, 
	3748, 3, 2, 2, 2, 3748, 3749, 7, 426, 2, 2, 3749, 3750, 5, 296, 149, 2, 
	3750, 3751, 9, 47, 2, 2, 3751, 3756, 5, 312, 157, 2, 3752, 3753, 7, 451, 
	2, 2, 3753, 3754, 7, 411, 2, 2, 3754, 3757, 7, 169, 2, 2, 3755, 3757, 5, 
	530, 266, 2, 3756, 3752, 3, 2, 2, 2, 3756, 3755, 3, 2, 2, 2, 3756, 3757, 
	3, 2, 2, 2, 3757, 3760, 3, 2, 2, 2, 3758, 3760, 5, 306, 154, 2, 3759, 3742, 
	3, 2, 2, 2, 3759, 3758, 3, 2, 2, 2, 3760, 295, 3, 2, 2, 2, 3761, 3763, 
	7, 438, 2, 2, 3762, 3761, 3, 2, 2, 2, 3762, 3763, 3, 2, 2, 2, 3763, 3764, 
	3, 2, 2, 2, 3764, 3811, 5, 498, 250, 2, 3765, 3766, 7, 231, 2, 2, 3766, 
	3811, 5, 498, 250, 2, 3767, 3768, 7, 55, 2, 2, 3768, 3811, 5, 498, 250, 
	2, 3769, 3770, 7, 71, 2, 2, 3770, 3811, 5, 498, 250, 2, 3771, 3772, 7, 
	409, 2, 2, 3772, 3773, 7, 54, 2, 2, 3773, 3774, 7, 296, 2, 2, 3774, 3811, 
	5, 498, 250, 2, 3775, 3776, 7, 409, 2, 2, 3776, 3777, 7, 234, 2, 2, 3777, 
	3811, 5, 498, 250, 2, 3778, 3779, 9, 48, 2, 2, 3779, 3784, 5, 334, 168, 
	2, 3780, 3781, 7, 591, 2, 2, 3781, 3783, 5, 334, 168, 2, 3782, 3780, 3, 
	2, 2, 2, 3783, 3786, 3, 2, 2, 2, 3784, 3782, 3, 2, 2, 2, 3784, 3785, 3, 
	2, 2, 2, 3785, 3811, 3, 2, 2, 2, 3786, 3784, 3, 2, 2, 2, 3787, 3788, 7, 
	128, 2, 2, 3788, 3789, 7, 163, 2, 2, 3789, 3794, 7, 620, 2, 2, 3790, 3791, 
	7, 591, 2, 2, 3791, 3793, 7, 620, 2, 2, 3792, 3790, 3, 2, 2, 2, 3793, 3796, 
	3, 2, 2, 2, 3794, 3792, 3, 2, 2, 2, 3794, 3795, 3, 2, 2, 2, 3795, 3811, 
	3, 2, 2, 2, 3796, 3794, 3, 2, 2, 2, 3797, 3798, 7, 127, 2, 2, 3798, 3811, 
	5, 498, 250, 2, 3799, 3800, 7, 225, 2, 2, 3800, 3811, 5, 498, 250, 2, 3801, 
	3802, 7, 260, 2, 2, 3802, 3811, 5, 498, 250, 2, 3803, 3804, 7, 271, 2, 
	2, 3804, 3811, 5, 498, 250, 2, 3805, 3806, 7, 376, 2, 2, 3806, 3807, 9, 
	49, 2, 2, 3807, 3808, 7, 414, 2, 2, 3808, 3809, 7, 225, 2, 2, 3809, 3811, 
	5, 498, 250, 2, 3810, 3762, 3, 2, 2, 2, 3810, 3765, 3, 2, 2, 2, 3810, 3767, 
	3, 2, 2, 2, 3810, 3769, 3, 2, 2, 2, 3810, 3771, 3, 2, 2, 2, 3810, 3775, 
	3, 2, 2, 2, 3810, 3778, 3, 2, 2, 2, 3810, 3787, 3, 2, 2, 2, 3810, 3797, 
	3, 2, 2, 2, 3810, 3799, 3, 2, 2, 2, 3810, 3801, 3, 2, 2, 2, 3810, 3803, 
	3, 2, 2, 2, 3810, 3805, 3, 2, 2, 2, 3811, 297, 3, 2, 2, 2, 3812, 3817, 
	5, 300, 151, 2, 3813, 3814, 7, 591, 2, 2, 3814, 3816, 5, 300, 151, 2, 3815, 
	3813, 3, 2, 2, 2, 3816, 3819, 3, 2, 2, 2, 3817, 3815, 3, 2, 2, 2, 3817, 
	3818, 3, 2, 2, 2, 3818, 299, 3, 2, 2, 2, 3819, 3817, 3, 2, 2, 2, 3820, 
	3821, 5, 524, 263, 2, 3821, 3822, 7, 597, 2, 2, 3822, 3823, 5, 720, 361, 
	2, 3823, 3824, 7, 598, 2, 2, 3824, 301, 3, 2, 2, 2, 3825, 3830, 5, 304, 
	153, 2, 3826, 3827, 7, 591, 2, 2, 3827, 3829, 5, 304, 153, 2, 3828, 3826, 
	3, 2, 2, 2, 3829, 3832, 3, 2, 2, 2, 3830, 3828, 3, 2, 2, 2, 3830, 3831, 
	3, 2, 2, 2, 3831, 303, 3, 2, 2, 2, 3832, 3830, 3, 2, 2, 2, 3833, 3835, 
	7, 376, 2, 2, 3834, 3836, 7, 190, 2, 2, 3835, 3834, 3, 2, 2, 2, 3835, 3836, 
	3, 2, 2, 2, 3836, 3850, 3, 2, 2, 2, 3837, 3850, 7, 462, 2, 2, 3838, 3850, 
	7, 391, 2, 2, 3839, 3850, 7, 62, 2, 2, 3840, 3850, 7, 84, 2, 2, 3841, 3850, 
	7, 121, 2, 2, 3842, 3850, 7, 281, 2, 2, 3843, 3850, 7, 432, 2, 2, 3844, 
	3850, 7, 434, 2, 2, 3845, 3850, 7, 261, 2, 2, 3846, 3850, 7, 268, 2, 2, 
	3847, 3850, 7, 269, 2, 2, 3848, 3850, 7, 550, 2, 2, 3849, 3833, 3, 2, 2, 
	2, 3849, 3837, 3, 2, 2, 2, 3849, 3838, 3, 2, 2, 2, 3849, 3839, 3, 2, 2, 
	2, 3849, 3840, 3, 2, 2, 2, 3849, 3841, 3, 2, 2, 2, 3849, 3842, 3, 2, 2, 
	2, 3849, 3843, 3, 2, 2, 2, 3849, 3844, 3, 2, 2, 2, 3849, 3845, 3, 2, 2, 
	2, 3849, 3846, 3, 2, 2, 2, 3849, 3847, 3, 2, 2, 2, 3849, 3848, 3, 2, 2, 
	2, 3850, 305, 3, 2, 2, 2, 3851, 3852, 7, 411, 2, 2, 3852, 3853, 5, 498, 
	250, 2, 3853, 3854, 7, 440, 2, 2, 3854, 3858, 5, 498, 250, 2, 3855, 3856, 
	7, 451, 2, 2, 3856, 3857, 7, 8, 2, 2, 3857, 3859, 7, 169, 2, 2, 3858, 3855, 
	3, 2, 2, 2, 3858, 3859, 3, 2, 2, 2, 3859, 3873, 3, 2, 2, 2, 3860, 3864, 
	7, 216, 2, 2, 3861, 3862, 7, 8, 2, 2, 3862, 3863, 7, 169, 2, 2, 3863, 3865, 
	7, 408, 2, 2, 3864, 3861, 3, 2, 2, 2, 3864, 3865, 3, 2, 2, 2, 3865, 3866, 
	3, 2, 2, 2, 3866, 3867, 5, 498, 250, 2, 3867, 3868, 7, 410, 2, 2, 3868, 
	3870, 5, 498, 250, 2, 3869, 3871, 5, 530, 266, 2, 3870, 3869, 3, 2, 2, 
	2, 3870, 3871, 3, 2, 2, 2, 3871, 3873, 3, 2, 2, 2, 3872, 3851, 3, 2, 2, 
	2, 3872, 3860, 3, 2, 2, 2, 3873, 307, 3, 2, 2, 2, 3874, 3875, 7, 440, 2, 
	2, 3875, 3879, 5, 312, 157, 2, 3876, 3877, 7, 451, 2, 2, 3877, 3878, 7, 
	411, 2, 2, 3878, 3880, 7, 169, 2, 2, 3879, 3876, 3, 2, 2, 2, 3879, 3880, 
	3, 2, 2, 2, 3880, 309, 3, 2, 2, 2, 3881, 3882, 7, 410, 2, 2, 3882, 3884, 
	5, 312, 157, 2, 3883, 3885, 5, 530, 266, 2, 3884, 3883, 3, 2, 2, 2, 3884, 
	3885, 3, 2, 2, 2, 3885, 311, 3, 2, 2, 2, 3886, 3891, 5, 314, 158, 2, 3887, 
	3888, 7, 591, 2, 2, 3888, 3890, 5, 314, 158, 2, 3889, 3887, 3, 2, 2, 2, 
	3890, 3893, 3, 2, 2, 2, 3891, 3889, 3, 2, 2, 2, 3891, 3892, 3, 2, 2, 2, 
	3892, 313, 3, 2, 2, 2, 3893, 3891, 3, 2, 2, 2, 3894, 3896, 7, 412, 2, 2, 
	3895, 3894, 3, 2, 2, 2, 3895, 3896, 3, 2, 2, 2, 3896, 3897, 3, 2, 2, 2, 
	3897, 3898, 5, 44, 23, 2, 3898, 315, 3, 2, 2, 2, 3899, 3900, 7, 36, 2, 
	2, 3900, 3901, 7, 426, 2, 2, 3901, 3902, 5, 320, 161, 2, 3902, 3905, 7, 
	363, 2, 2, 3903, 3906, 5, 340, 171, 2, 3904, 3906, 7, 424, 2, 2, 3905, 
	3903, 3, 2, 2, 2, 3905, 3904, 3, 2, 2, 2, 3906, 317, 3, 2, 2, 2, 3907, 
	3908, 7, 230, 2, 2, 3908, 3914, 7, 126, 2, 2, 3909, 3912, 7, 408, 2, 2, 
	3910, 3913, 5, 556, 279, 2, 3911, 3913, 5, 340, 171, 2, 3912, 3910, 3, 
	2, 2, 2, 3912, 3911, 3, 2, 2, 2, 3913, 3915, 3, 2, 2, 2, 3914, 3909, 3, 
	2, 2, 2, 3914, 3915, 3, 2, 2, 2, 3915, 3916, 3, 2, 2, 2, 3916, 3917, 7, 
	426, 2, 2, 3917, 3918, 5, 322, 162, 2, 3918, 3921, 7, 363, 2, 2, 3919, 
	3922, 5, 340, 171, 2, 3920, 3922, 7, 424, 2, 2, 3921, 3919, 3, 2, 2, 2, 
	3921, 3920, 3, 2, 2, 2, 3922, 319, 3, 2, 2, 2, 3923, 3924, 7, 5, 2, 2, 
	3924, 3925, 7, 143, 2, 2, 3925, 4048, 5, 556, 279, 2, 3926, 3927, 9, 50, 
	2, 2, 3927, 3928, 5, 646, 324, 2, 3928, 3929, 5, 336, 169, 2, 3929, 4048, 
	3, 2, 2, 2, 3930, 3931, 7, 386, 2, 2, 3931, 3932, 7, 597, 2, 2, 3932, 3933, 
	5, 576, 289, 2, 3933, 3934, 7, 381, 2, 2, 3934, 3935, 5, 576, 289, 2, 3935, 
	3936, 7, 598, 2, 2, 3936, 4048, 3, 2, 2, 2, 3937, 3938, 7, 355, 2, 2, 3938, 
	4048, 5, 556, 279, 2, 3939, 3940, 7, 389, 2, 2, 3940, 4048, 5, 646, 324, 
	2, 3941, 3942, 7, 390, 2, 2, 3942, 3943, 5, 556, 279, 2, 3943, 3945, 7, 
	426, 2, 2, 3944, 3946, 7, 71, 2, 2, 3945, 3944, 3, 2, 2, 2, 3945, 3946, 
	3, 2, 2, 2, 3946, 3947, 3, 2, 2, 2, 3947, 3948, 5, 646, 324, 2, 3948, 4048, 
	3, 2, 2, 2, 3949, 3950, 7, 46, 2, 2, 3950, 4048, 5, 646, 324, 2, 3951, 
	3952, 7, 55, 2, 2, 3952, 4048, 5, 556, 279, 2, 3953, 3954, 7, 71, 2, 2, 
	3954, 4048, 5, 646, 324, 2, 3955, 3956, 7, 87, 2, 2, 3956, 4048, 5, 556, 
	279, 2, 3957, 3958, 7, 80, 2, 2, 3958, 3959, 7, 268, 2, 2, 3959, 4048, 
	5, 556, 279, 2, 3960, 3961, 7, 409, 2, 2, 3961, 3962, 7, 54, 2, 2, 3962, 
	3963, 7, 296, 2, 2, 3963, 4048, 5, 556, 279, 2, 3964, 3966, 7, 409, 2, 
	2, 3965, 3964, 3, 2, 2, 2, 3965, 3966, 3, 2, 2, 2, 3966, 3967, 3, 2, 2, 
	2, 3967, 3968, 7, 438, 2, 2, 3968, 4048, 5, 646, 324, 2, 3969, 3970, 7, 
	114, 2, 2, 3970, 4048, 5, 646, 324, 2, 3971, 3972, 7, 128, 2, 2, 3972, 
	3973, 7, 163, 2, 2, 3973, 4048, 7, 620, 2, 2, 3974, 3976, 7, 141, 2, 2, 
	3975, 3974, 3, 2, 2, 2, 3975, 3976, 3, 2, 2, 2, 3976, 3977, 3, 2, 2, 2, 
	3977, 3978, 7, 289, 2, 2, 3978, 4048, 5, 646, 324, 2, 3979, 3980, 7, 168, 
	2, 2, 3980, 4048, 5, 234, 118, 2, 3981, 3982, 7, 168, 2, 2, 3982, 3983, 
	9, 51, 2, 2, 3983, 3984, 5, 646, 324, 2, 3984, 3985, 7, 446, 2, 2, 3985, 
	3986, 5, 556, 279, 2, 3986, 4048, 3, 2, 2, 2, 3987, 3988, 7, 184, 2, 2, 
	3988, 3989, 5, 556, 279, 2, 3989, 3990, 7, 426, 2, 2, 3990, 3991, 5, 646, 
	324, 2, 3991, 4048, 3, 2, 2, 2, 3992, 3994, 7, 191, 2, 2, 3993, 3992, 3, 
	2, 2, 2, 3993, 3994, 3, 2, 2, 2, 3994, 3995, 3, 2, 2, 2, 3995, 3996, 7, 
	127, 2, 2, 3996, 4048, 5, 646, 324, 2, 3997, 3998, 7, 195, 2, 2, 3998, 
	4048, 5, 556, 279, 2, 3999, 4000, 7, 217, 2, 2, 4000, 4048, 5, 556, 279, 
	2, 4001, 4002, 7, 223, 2, 2, 4002, 4003, 5, 556, 279, 2, 4003, 4004, 7, 
	426, 2, 2, 4004, 4005, 5, 646, 324, 2, 4005, 4048, 3, 2, 2, 2, 4006, 4007, 
	7, 225, 2, 2, 4007, 4048, 5, 556, 279, 2, 4008, 4009, 7, 231, 2, 2, 4009, 
	4048, 5, 646, 324, 2, 4010, 4011, 7, 234, 2, 2, 4011, 4048, 5, 556, 279, 
	2, 4012, 4013, 7, 248, 2, 2, 4013, 4048, 5, 646, 324, 2, 4014, 4015, 7, 
	255, 2, 2, 4015, 4048, 5, 556, 279, 2, 4016, 4017, 7, 260, 2, 2, 4017, 
	4048, 5, 556, 279, 2, 4018, 4019, 7, 264, 2, 2, 4019, 4020, 7, 228, 2, 
	2, 4020, 4021, 7, 40, 2, 2, 4021, 4048, 5, 646, 324, 2, 4022, 4023, 7, 
	264, 2, 2, 4023, 4024, 7, 228, 2, 2, 4024, 4025, 7, 67, 2, 2, 4025, 4048, 
	5, 646, 324, 2, 4026, 4027, 7, 264, 2, 2, 4027, 4028, 7, 228, 2, 2, 4028, 
	4029, 7, 178, 2, 2, 4029, 4048, 5, 646, 324, 2, 4030, 4031, 7, 264, 2, 
	2, 4031, 4032, 7, 228, 2, 2, 4032, 4033, 7, 262, 2, 2, 4033, 4048, 5, 646, 
	324, 2, 4034, 4035, 7, 267, 2, 2, 4035, 4036, 7, 408, 2, 2, 4036, 4037, 
	5, 646, 324, 2, 4037, 4038, 7, 127, 2, 2, 4038, 4039, 5, 556, 279, 2, 4039, 
	4048, 3, 2, 2, 2, 4040, 4041, 7, 268, 2, 2, 4041, 4042, 5, 556, 279, 2, 
	4042, 4043, 7, 426, 2, 2, 4043, 4044, 5, 646, 324, 2, 4044, 4048, 3, 2, 
	2, 2, 4045, 4046, 7, 271, 2, 2, 4046, 4048, 5, 646, 324, 2, 4047, 3923, 
	3, 2, 2, 2, 4047, 3926, 3, 2, 2, 2, 4047, 3930, 3, 2, 2, 2, 4047, 3937, 
	3, 2, 2, 2, 4047, 3939, 3, 2, 2, 2, 4047, 3941, 3, 2, 2, 2, 4047, 3949, 
	3, 2, 2, 2, 4047, 3951, 3, 2, 2, 2, 4047, 3953, 3, 2, 2, 2, 4047, 3955, 
	3, 2, 2, 2, 4047, 3957, 3, 2, 2, 2, 4047, 3960, 3, 2, 2, 2, 4047, 3965, 
	3, 2, 2, 2, 4047, 3969, 3, 2, 2, 2, 4047, 3971, 3, 2, 2, 2, 4047, 3975, 
	3, 2, 2, 2, 4047, 3979, 3, 2, 2, 2, 4047, 3981, 3, 2, 2, 2, 4047, 3987, 
	3, 2, 2, 2, 4047, 3993, 3, 2, 2, 2, 4047, 3997, 3, 2, 2, 2, 4047, 3999, 
	3, 2, 2, 2, 4047, 4001, 3, 2, 2, 2, 4047, 4006, 3, 2, 2, 2, 4047, 4008, 
	3, 2, 2, 2, 4047, 4010, 3, 2, 2, 2, 4047, 4012, 3, 2, 2, 2, 4047, 4014, 
	3, 2, 2, 2, 4047, 4016, 3, 2, 2, 2, 4047, 4018, 3, 2, 2, 2, 4047, 4022, 
	3, 2, 2, 2, 4047, 4026, 3, 2, 2, 2, 4047, 4030, 3, 2, 2, 2, 4047, 4034, 
	3, 2, 2, 2, 4047, 4040, 3, 2, 2, 2, 4047, 4045, 3, 2, 2, 2, 4048, 321, 
	3, 2, 2, 2, 4049, 4050, 9, 50, 2, 2, 4050, 4051, 5, 646, 324, 2, 4051, 
	4052, 5, 336, 169, 2, 4052, 4095, 3, 2, 2, 2, 4053, 4054, 7, 389, 2, 2, 
	4054, 4095, 5, 646, 324, 2, 4055, 4056, 7, 55, 2, 2, 4056, 4095, 5, 556, 
	279, 2, 4057, 4058, 7, 71, 2, 2, 4058, 4095, 5, 646, 324, 2, 4059, 4060, 
	7, 80, 2, 2, 4060, 4061, 7, 268, 2, 2, 4061, 4095, 5, 556, 279, 2, 4062, 
	4064, 7, 409, 2, 2, 4063, 4062, 3, 2, 2, 2, 4063, 4064, 3, 2, 2, 2, 4064, 
	4065, 3, 2, 2, 2, 4065, 4066, 7, 438, 2, 2, 4066, 4095, 5, 646, 324, 2, 
	4067, 4068, 7, 128, 2, 2, 4068, 4069, 7, 163, 2, 2, 4069, 4095, 7, 620, 
	2, 2, 4070, 4072, 7, 141, 2, 2, 4071, 4070, 3, 2, 2, 2, 4071, 4072, 3, 
	2, 2, 2, 4072, 4073, 3, 2, 2, 2, 4073, 4074, 7, 289, 2, 2, 4074, 4095, 
	5, 646, 324, 2, 4075, 4077, 7, 191, 2, 2, 4076, 4075, 3, 2, 2, 2, 4076, 
	4077, 3, 2, 2, 2, 4077, 4078, 3, 2, 2, 2, 4078, 4079, 7, 127, 2, 2, 4079, 
	4095, 5, 646, 324, 2, 4080, 4081, 7, 195, 2, 2, 4081, 4095, 5, 556, 279, 
	2, 4082, 4083, 7, 217, 2, 2, 4083, 4095, 5, 556, 279, 2, 4084, 4085, 7, 
	225, 2, 2, 4085, 4095, 5, 556, 279, 2, 4086, 4087, 7, 231, 2, 2, 4087, 
	4095, 5, 646, 324, 2, 4088, 4089, 7, 255, 2, 2, 4089, 4095, 5, 556, 279, 
	2, 4090, 4091, 7, 260, 2, 2, 4091, 4095, 5, 556, 279, 2, 4092, 4093, 7, 
	271, 2, 2, 4093, 4095, 5, 646, 324, 2, 4094, 4049, 3, 2, 2, 2, 4094, 4053, 
	3, 2, 2, 2, 4094, 4055, 3, 2, 2, 2, 4094, 4057, 3, 2, 2, 2, 4094, 4059, 
	3, 2, 2, 2, 4094, 4063, 3, 2, 2, 2, 4094, 4067, 3, 2, 2, 2, 4094, 4071, 
	3, 2, 2, 2, 4094, 4076, 3, 2, 2, 2, 4094, 4080, 3, 2, 2, 2, 4094, 4082, 
	3, 2, 2, 2, 4094, 4084, 3, 2, 2, 2, 4094, 4086, 3, 2, 2, 2, 4094, 4088, 
	3, 2, 2, 2, 4094, 4090, 3, 2, 2, 2, 4094, 4092, 3, 2, 2, 2, 4095, 323, 
	3, 2, 2, 2, 4096, 4097, 7, 428, 2, 2, 4097, 4099, 7, 210, 2, 2, 4098, 4096, 
	3, 2, 2, 2, 4098, 4099, 3, 2, 2, 2, 4099, 4100, 3, 2, 2, 2, 4100, 4101, 
	9, 17, 2, 2, 4101, 4107, 5, 334, 168, 2, 4102, 4105, 7, 215, 2, 2, 4103, 
	4106, 5, 576, 289, 2, 4104, 4106, 5, 330, 166, 2, 4105, 4103, 3, 2, 2, 
	2, 4105, 4104, 3, 2, 2, 2, 4106, 4108, 3, 2, 2, 2, 4107, 4102, 3, 2, 2, 
	2, 4107, 4108, 3, 2, 2, 2, 4108, 4109, 3, 2, 2, 2, 4109, 4110, 5, 326, 
	164, 2, 4110, 325, 3, 2, 2, 2, 4111, 4113, 5, 104, 53, 2, 4112, 4111, 3, 
	2, 2, 2, 4113, 4114, 3, 2, 2, 2, 4114, 4112, 3, 2, 2, 2, 4114, 4115, 3, 
	2, 2, 2, 4115, 4117, 3, 2, 2, 2, 4116, 4118, 5, 506, 254, 2, 4117, 4116, 
	3, 2, 2, 2, 4117, 4118, 3, 2, 2, 2, 4118, 327, 3, 2, 2, 2, 4119, 4120, 
	7, 408, 2, 2, 4120, 4121, 7, 271, 2, 2, 4121, 4122, 5, 576, 289, 2, 4122, 
	329, 3, 2, 2, 2, 4123, 4124, 7, 438, 2, 2, 4124, 4125, 7, 597, 2, 2, 4125, 
	4130, 5, 332, 167, 2, 4126, 4127, 7, 591, 2, 2, 4127, 4129, 5, 332, 167, 
	2, 4128, 4126, 3, 2, 2, 2, 4129, 4132, 3, 2, 2, 2, 4130, 4128, 3, 2, 2, 
	2, 4130, 4131, 3, 2, 2, 2, 4131, 4133, 3, 2, 2, 2, 4132, 4130, 3, 2, 2, 
	2, 4133, 4134, 7, 598, 2, 2, 4134, 331, 3, 2, 2, 2, 4135, 4136, 5, 556, 
	279, 2, 4136, 4137, 5, 576, 289, 2, 4137, 333, 3, 2, 2, 2, 4138, 4139, 
	5, 646, 324, 2, 4139, 4140, 5, 336, 169, 2, 4140, 335, 3, 2, 2, 2, 4141, 
	4156, 7, 597, 2, 2, 4142, 4147, 5, 342, 172, 2, 4143, 4144, 7, 591, 2, 
	2, 4144, 4146, 5, 342, 172, 2, 4145, 4143, 3, 2, 2, 2, 4146, 4149, 3, 2, 
	2, 2, 4147, 4145, 3, 2, 2, 2, 4147, 4148, 3, 2, 2, 2, 4148, 4151, 3, 2, 
	2, 2, 4149, 4147, 3, 2, 2, 2, 4150, 4142, 3, 2, 2, 2, 4150, 4151, 3, 2, 
	2, 2, 4151, 4153, 3, 2, 2, 2, 4152, 4154, 5, 338, 170, 2, 4153, 4152, 3, 
	2, 2, 2, 4153, 4154, 3, 2, 2, 2, 4154, 4157, 3, 2, 2, 2, 4155, 4157, 7, 
	601, 2, 2, 4156, 4150, 3, 2, 2, 2, 4156, 4155, 3, 2, 2, 2, 4157, 4158, 
	3, 2, 2, 2, 4158, 4159, 7, 598, 2, 2, 4159, 337, 3, 2, 2, 2, 4160, 4161, 
	7, 429, 2, 2, 4161, 4162, 7, 22, 2, 2, 4162, 4167, 5, 342, 172, 2, 4163, 
	4164, 7, 591, 2, 2, 4164, 4166, 5, 342, 172, 2, 4165, 4163, 3, 2, 2, 2, 
	4166, 4169, 3, 2, 2, 2, 4167, 4165, 3, 2, 2, 2, 4167, 4168, 3, 2, 2, 2, 
	4168, 339, 3, 2, 2, 2, 4169, 4167, 3, 2, 2, 2, 4170, 4174, 7, 626, 2, 2, 
	4171, 4173, 7, 633, 2, 2, 4172, 4171, 3, 2, 2, 2, 4173, 4176, 3, 2, 2, 
	2, 4174, 4172, 3, 2, 2, 2, 4174, 4175, 3, 2, 2, 2, 4175, 4177, 3, 2, 2, 
	2, 4176, 4174, 3, 2, 2, 2, 4177, 4180, 7, 634, 2, 2, 4178, 4180, 7, 625, 
	2, 2, 4179, 4170, 3, 2, 2, 2, 4179, 4178, 3, 2, 2, 2, 4180, 341, 3, 2, 
	2, 2, 4181, 4183, 5, 344, 173, 2, 4182, 4181, 3, 2, 2, 2, 4182, 4183, 3, 
	2, 2, 2, 4183, 4185, 3, 2, 2, 2, 4184, 4186, 5, 558, 280, 2, 4185, 4184, 
	3, 2, 2, 2, 4185, 4186, 3, 2, 2, 2, 4186, 4187, 3, 2, 2, 2, 4187, 4190, 
	5, 576, 289, 2, 4188, 4189, 9, 52, 2, 2, 4189, 4191, 5, 588, 295, 2, 4190, 
	4188, 3, 2, 2, 2, 4190, 4191, 3, 2, 2, 2, 4191, 343, 3, 2, 2, 2, 4192, 
	4193, 9, 53, 2, 2, 4193, 345, 3, 2, 2, 2, 4194, 4196, 9, 54, 2, 2, 4195, 
	4194, 3, 2, 2, 2, 4195, 4196, 3, 2, 2, 2, 4196, 4197, 3, 2, 2, 2, 4197, 
	4199, 7, 231, 2, 2, 4198, 4200, 5, 424, 213, 2, 4199, 4198, 3, 2, 2, 2, 
	4199, 4200, 3, 2, 2, 2, 4200, 4201, 3, 2, 2, 2, 4201, 4205, 5, 646, 324, 
	2, 4202, 4204, 5, 348, 175, 2, 4203, 4202, 3, 2, 2, 2, 4204, 4207, 3, 2, 
	2, 2, 4205, 4203, 3, 2, 2, 2, 4205, 4206, 3, 2, 2, 2, 4206, 347, 3, 2, 
	2, 2, 4207, 4205, 3, 2, 2, 2, 4208, 4209, 7, 381, 2, 2, 4209, 4245, 9, 
	55, 2, 2, 4210, 4211, 7, 231, 2, 2, 4211, 4212, 7, 149, 2, 2, 4212, 4245, 
	5, 646, 324, 2, 4213, 4215, 7, 113, 2, 2, 4214, 4216, 7, 22, 2, 2, 4215, 
	4214, 3, 2, 2, 2, 4215, 4216, 3, 2, 2, 2, 4216, 4217, 3, 2, 2, 2, 4217, 
	4245, 5, 352, 177, 2, 4218, 4219, 7, 145, 2, 2, 4219, 4223, 5, 352, 177, 
	2, 4220, 4221, 7, 157, 2, 2, 4221, 4223, 7, 145, 2, 2, 4222, 4218, 3, 2, 
	2, 2, 4222, 4220, 3, 2, 2, 2, 4223, 4245, 3, 2, 2, 2, 4224, 4225, 7, 142, 
	2, 2, 4225, 4229, 5, 352, 177, 2, 4226, 4227, 7, 157, 2, 2, 4227, 4229, 
	7, 142, 2, 2, 4228, 4224, 3, 2, 2, 2, 4228, 4226, 3, 2, 2, 2, 4229, 4245, 
	3, 2, 2, 2, 4230, 4232, 7, 246, 2, 2, 4231, 4233, 7, 451, 2, 2, 4232, 4231, 
	3, 2, 2, 2, 4232, 4233, 3, 2, 2, 2, 4233, 4234, 3, 2, 2, 2, 4234, 4245, 
	5, 352, 177, 2, 4235, 4236, 7, 23, 2, 2, 4236, 4245, 5, 352, 177, 2, 4237, 
	4239, 7, 157, 2, 2, 4238, 4237, 3, 2, 2, 2, 4238, 4239, 3, 2, 2, 2, 4239, 
	4240, 3, 2, 2, 2, 4240, 4245, 7, 53, 2, 2, 4241, 4242, 7, 175, 2, 2, 4242, 
	4243, 7, 22, 2, 2, 4243, 4245, 5, 646, 324, 2, 4244, 4208, 3, 2, 2, 2, 
	4244, 4210, 3, 2, 2, 2, 4244, 4213, 3, 2, 2, 2, 4244, 4222, 3, 2, 2, 2, 
	4244, 4228, 3, 2, 2, 2, 4244, 4230, 3, 2, 2, 2, 4244, 4235, 3, 2, 2, 2, 
	4244, 4238, 3, 2, 2, 2, 4244, 4241, 3, 2, 2, 2, 4245, 349, 3, 2, 2, 2, 
	4246, 4248, 5, 354, 178, 2, 4247, 4246, 3, 2, 2, 2, 4247, 4248, 3, 2, 2, 
	2, 4248, 4249, 3, 2, 2, 2, 4249, 4250, 7, 620, 2, 2, 4250, 351, 3, 2, 2, 
	2, 4251, 4253, 5, 354, 178, 2, 4252, 4251, 3, 2, 2, 2, 4252, 4253, 3, 2, 
	2, 2, 4253, 4254, 3, 2, 2, 2, 4254, 4255, 5, 602, 302, 2, 4255, 353, 3, 
	2, 2, 2, 4256, 4257, 9, 56, 2, 2, 4257, 355, 3, 2, 2, 2, 4258, 4260, 7, 
	225, 2, 2, 4259, 4261, 5, 424, 213, 2, 4260, 4259, 3, 2, 2, 2, 4260, 4261, 
	3, 2, 2, 2, 4261, 4263, 3, 2, 2, 2, 4262, 4264, 5, 556, 279, 2, 4263, 4262, 
	3, 2, 2, 2, 4263, 4264, 3, 2, 2, 2, 4264, 4267, 3, 2, 2, 2, 4265, 4266, 
	7, 353, 2, 2, 4266, 4268, 5, 44, 23, 2, 4267, 4265, 3, 2, 2, 2, 4267, 4268, 
	3, 2, 2, 2, 4268, 357, 3, 2, 2, 2, 4269, 4270, 7, 184, 2, 2, 4270, 4271, 
	5, 556, 279, 2, 4271, 4272, 7, 426, 2, 2, 4272, 4275, 5, 646, 324, 2, 4273, 
	4274, 7, 381, 2, 2, 4274, 4276, 9, 57, 2, 2, 4275, 4273, 3, 2, 2, 2, 4275, 
	4276, 3, 2, 2, 2, 4276, 4279, 3, 2, 2, 2, 4277, 4278, 7, 408, 2, 2, 4278, 
	4280, 9, 58, 2, 2, 4279, 4277, 3, 2, 2, 2, 4279, 4280, 3, 2, 2, 2, 4280, 
	4290, 3, 2, 2, 2, 4281, 4282, 7, 440, 2, 2, 4282, 4287, 5, 44, 23, 2, 4283, 
	4284, 7, 591, 2, 2, 4284, 4286, 5, 44, 23, 2, 4285, 4283, 3, 2, 2, 2, 4286, 
	4289, 3, 2, 2, 2, 4287, 4285, 3, 2, 2, 2, 4287, 4288, 3, 2, 2, 2, 4288, 
	4291, 3, 2, 2, 2, 4289, 4287, 3, 2, 2, 2, 4290, 4281, 3, 2, 2, 2, 4290, 
	4291, 3, 2, 2, 2, 4291, 4294, 3, 2, 2, 2, 4292, 4293, 7, 446, 2, 2, 4293, 
	4295, 5, 588, 295, 2, 4294, 4292, 3, 2, 2, 2, 4294, 4295, 3, 2, 2, 2, 4295, 
	4299, 3, 2, 2, 2, 4296, 4297, 7, 451, 2, 2, 4297, 4298, 7, 387, 2, 2, 4298, 
	4300, 5, 588, 295, 2, 4299, 4296, 3, 2, 2, 2, 4299, 4300, 3, 2, 2, 2, 4300, 
	359, 3, 2, 2, 2, 4301, 4302, 7, 184, 2, 2, 4302, 4303, 5, 556, 279, 2, 
	4303, 4304, 7, 426, 2, 2, 4304, 4305, 5, 646, 324, 2, 4305, 4306, 5, 520, 
	261, 2, 4306, 4332, 3, 2, 2, 2, 4307, 4308, 7, 184, 2, 2, 4308, 4309, 5, 
	556, 279, 2, 4309, 4310, 7, 426, 2, 2, 4310, 4320, 5, 646, 324, 2, 4311, 
	4312, 7, 440, 2, 2, 4312, 4317, 5, 44, 23, 2, 4313, 4314, 7, 591, 2, 2, 
	4314, 4316, 5, 44, 23, 2, 4315, 4313, 3, 2, 2, 2, 4316, 4319, 3, 2, 2, 
	2, 4317, 4315, 3, 2, 2, 2, 4317, 4318, 3, 2, 2, 2, 4318, 4321, 3, 2, 2, 
	2, 4319, 4317, 3, 2, 2, 2, 4320, 4311, 3, 2, 2, 2, 4320, 4321, 3, 2, 2, 
	2, 4321, 4324, 3, 2, 2, 2, 4322, 4323, 7, 446, 2, 2, 4323, 4325, 5, 588, 
	295, 2, 4324, 4322, 3, 2, 2, 2, 4324, 4325, 3, 2, 2, 2, 4325, 4329, 3, 
	2, 2, 2, 4326, 4327, 7, 451, 2, 2, 4327, 4328, 7, 387, 2, 2, 4328, 4330, 
	5, 588, 295, 2, 4329, 4326, 3, 2, 2, 2, 4329, 4330, 3, 2, 2, 2, 4330, 4332, 
	3, 2, 2, 2, 4331, 4301, 3, 2, 2, 2, 4331, 4307, 3, 2, 2, 2, 4332, 361, 
	3, 2, 2, 2, 4333, 4335, 7, 184, 2, 2, 4334, 4336, 5, 422, 212, 2, 4335, 
	4334, 3, 2, 2, 2, 4335, 4336, 3, 2, 2, 2, 4336, 4337, 3, 2, 2, 2, 4337, 
	4338, 5, 556, 279, 2, 4338, 4339, 7, 426, 2, 2, 4339, 4341, 5, 646, 324, 
	2, 4340, 4342, 5, 530, 266, 2, 4341, 4340, 3, 2, 2, 2, 4341, 4342, 3, 2, 
	2, 2, 4342, 363, 3, 2, 2, 2, 4343, 4344, 7, 255, 2, 2, 4344, 4345, 5, 556, 
	279, 2, 4345, 4346, 7, 42, 2, 2, 4346, 4347, 7, 625, 2, 2, 4347, 4348, 
	7, 195, 2, 2, 4348, 4350, 5, 720, 361, 2, 4349, 4351, 5, 506, 254, 2, 4350, 
	4349, 3, 2, 2, 2, 4350, 4351, 3, 2, 2, 2, 4351, 365, 3, 2, 2, 2, 4352, 
	4353, 7, 255, 2, 2, 4353, 4354, 5, 556, 279, 2, 4354, 4355, 5, 368, 185, 
	2, 4355, 367, 3, 2, 2, 2, 4356, 4357, 7, 42, 2, 2, 4357, 4376, 5, 340, 
	171, 2, 4358, 4359, 7, 236, 2, 2, 4359, 4360, 7, 195, 2, 2, 4360, 4362, 
	5, 720, 361, 2, 4361, 4363, 5, 506, 254, 2, 4362, 4361, 3, 2, 2, 2, 4362, 
	4363, 3, 2, 2, 2, 4363, 4376, 3, 2, 2, 2, 4364, 4365, 7, 204, 2, 2, 4365, 
	4367, 7, 195, 2, 2, 4366, 4368, 5, 506, 254, 2, 4367, 4366, 3, 2, 2, 2, 
	4367, 4368, 3, 2, 2, 2, 4368, 4376, 3, 2, 2, 2, 4369, 4376, 7, 75, 2, 2, 
	4370, 4376, 7, 68, 2, 2, 4371, 4372, 7, 236, 2, 2, 4372, 4376, 5, 500, 
	251, 2, 4373, 4376, 5, 518, 260, 2, 4374, 4376, 5, 520, 261, 2, 4375, 4356, 
	3, 2, 2, 2, 4375, 4358, 3, 2, 2, 2, 4375, 4364, 3, 2, 2, 2, 4375, 4369, 
	3, 2, 2, 2, 4375, 4370, 3, 2, 2, 2, 4375, 4371, 3, 2, 2, 2, 4375, 4373, 
	3, 2, 2, 2, 4375, 4374, 3, 2, 2, 2, 4376, 369, 3, 2, 2, 2, 4377, 4378, 
	7, 386, 2, 2, 4378, 4379, 7, 597, 2, 2, 4379, 4380, 5, 576, 289, 2, 4380, 
	4381, 7, 381, 2, 2, 4381, 4382, 5, 576, 289, 2, 4382, 4392, 7, 598, 2, 
	2, 4383, 4384, 7, 451, 2, 2, 4384, 4385, 7, 95, 2, 2, 4385, 4386, 5, 646, 
	324, 2, 4386, 4387, 5, 336, 169, 2, 4387, 4393, 3, 2, 2, 2, 4388, 4389, 
	7, 294, 2, 2, 4389, 4393, 7, 95, 2, 2, 4390, 4391, 7, 451, 2, 2, 4391, 
	4393, 7, 316, 2, 2, 4392, 4383, 3, 2, 2, 2, 4392, 4388, 3, 2, 2, 2, 4392, 
	4390, 3, 2, 2, 2, 4393, 4398, 3, 2, 2, 2, 4394, 4395, 7, 381, 2, 2, 4395, 
	4399, 7, 15, 2, 2, 4396, 4397, 7, 381, 2, 2, 4397, 4399, 7, 109, 2, 2, 
	4398, 4394, 3, 2, 2, 2, 4398, 4396, 3, 2, 2, 2, 4398, 4399, 3, 2, 2, 2, 
	4399, 371, 3, 2, 2, 2, 4400, 4402, 7, 386, 2, 2, 4401, 4403, 5, 422, 212, 
	2, 4402, 4401, 3, 2, 2, 2, 4402, 4403, 3, 2, 2, 2, 4403, 4404, 3, 2, 2, 
	2, 4404, 4405, 7, 597, 2, 2, 4405, 4406, 5, 576, 289, 2, 4406, 4407, 7, 
	381, 2, 2, 4407, 4408, 5, 576, 289, 2, 4408, 4410, 7, 598, 2, 2, 4409, 
	4411, 5, 530, 266, 2, 4410, 4409, 3, 2, 2, 2, 4410, 4411, 3, 2, 2, 2, 4411, 
	373, 3, 2, 2, 2, 4412, 4413, 7, 168, 2, 2, 4413, 4414, 7, 89, 2, 2, 4414, 
	4415, 5, 646, 324, 2, 4415, 4416, 7, 446, 2, 2, 4416, 4417, 5, 556, 279, 
	2, 4417, 375, 3, 2, 2, 2, 4418, 4419, 7, 168, 2, 2, 4419, 4420, 7, 89, 
	2, 2, 4420, 4421, 5, 646, 324, 2, 4421, 4422, 7, 446, 2, 2, 4422, 4423, 
	5, 556, 279, 2, 4423, 4424, 5, 378, 190, 2, 4424, 377, 3, 2, 2, 2, 4425, 
	4447, 5, 520, 261, 2, 4426, 4447, 5, 518, 260, 2, 4427, 4447, 5, 522, 262, 
	2, 4428, 4429, 7, 7, 2, 2, 4429, 4434, 5, 380, 191, 2, 4430, 4431, 7, 591, 
	2, 2, 4431, 4433, 5, 380, 191, 2, 4432, 4430, 3, 2, 2, 2, 4433, 4436, 3, 
	2, 2, 2, 4434, 4432, 3, 2, 2, 2, 4434, 4435, 3, 2, 2, 2, 4435, 4447, 3, 
	2, 2, 2, 4436, 4434, 3, 2, 2, 2, 4437, 4438, 7, 73, 2, 2, 4438, 4443, 5, 
	382, 192, 2, 4439, 4440, 7, 591, 2, 2, 4440, 4442, 5, 382, 192, 2, 4441, 
	4439, 3, 2, 2, 2, 4442, 4445, 3, 2, 2, 2, 4443, 4441, 3, 2, 2, 2, 4443, 
	4444, 3, 2, 2, 2, 4444, 4447, 3, 2, 2, 2, 4445, 4443, 3, 2, 2, 2, 4446, 
	4425, 3, 2, 2, 2, 4446, 4426, 3, 2, 2, 2, 4446, 4427, 3, 2, 2, 2, 4446, 
	4428, 3, 2, 2, 2, 4446, 4437, 3, 2, 2, 2, 4447, 379, 3, 2, 2, 2, 4448, 
	4449, 7, 168, 2, 2, 4449, 4450, 5, 602, 302, 2, 4450, 4457, 5, 234, 118, 
	2, 4451, 4452, 7, 408, 2, 2, 4452, 4458, 7, 228, 2, 2, 4453, 4454, 7, 408, 
	2, 2, 4454, 4455, 7, 429, 2, 2, 4455, 4456, 7, 22, 2, 2, 4456, 4458, 5, 
	646, 324, 2, 4457, 4451, 3, 2, 2, 2, 4457, 4453, 3, 2, 2, 2, 4457, 4458, 
	3, 2, 2, 2, 4458, 4479, 3, 2, 2, 2, 4459, 4460, 7, 95, 2, 2, 4460, 4474, 
	5, 602, 302, 2, 4461, 4464, 7, 597, 2, 2, 4462, 4465, 5, 576, 289, 2, 4463, 
	4465, 7, 323, 2, 2, 4464, 4462, 3, 2, 2, 2, 4464, 4463, 3, 2, 2, 2, 4465, 
	4471, 3, 2, 2, 2, 4466, 4469, 7, 591, 2, 2, 4467, 4470, 5, 576, 289, 2, 
	4468, 4470, 7, 323, 2, 2, 4469, 4467, 3, 2, 2, 2, 4469, 4468, 3, 2, 2, 
	2, 4470, 4472, 3, 2, 2, 2, 4471, 4466, 3, 2, 2, 2, 4471, 4472, 3, 2, 2, 
	2, 4472, 4473, 3, 2, 2, 2, 4473, 4475, 7, 598, 2, 2, 4474, 4461, 3, 2, 
	2, 2, 4474, 4475, 3, 2, 2, 2, 4475, 4476, 3, 2, 2, 2, 4476, 4477, 5, 610, 
	306, 2, 4477, 4479, 3, 2, 2, 2, 4478, 4448, 3, 2, 2, 2, 4478, 4459, 3, 
	2, 2, 2, 4479, 381, 3, 2, 2, 2, 4480, 4481, 9, 59, 2, 2, 4481, 4482, 5, 
	602, 302, 2, 4482, 4485, 7, 597, 2, 2, 4483, 4486, 5, 576, 289, 2, 4484, 
	4486, 7, 323, 2, 2, 4485, 4483, 3, 2, 2, 2, 4485, 4484, 3, 2, 2, 2, 4486, 
	4492, 3, 2, 2, 2, 4487, 4490, 7, 591, 2, 2, 4488, 4491, 5, 576, 289, 2, 
	4489, 4491, 7, 323, 2, 2, 4490, 4488, 3, 2, 2, 2, 4490, 4489, 3, 2, 2, 
	2, 4491, 4493, 3, 2, 2, 2, 4492, 4487, 3, 2, 2, 2, 4492, 4493, 3, 2, 2, 
	2, 4493, 4494, 3, 2, 2, 2, 4494, 4495, 7, 598, 2, 2, 4495, 383, 3, 2, 2, 
	2, 4496, 4497, 7, 168, 2, 2, 4497, 4499, 7, 89, 2, 2, 4498, 4500, 5, 422, 
	212, 2, 4499, 4498, 3, 2, 2, 2, 4499, 4500, 3, 2, 2, 2, 4500, 4501, 3, 
	2, 2, 2, 4501, 4502, 5, 646, 324, 2, 4502, 4503, 7, 446, 2, 2, 4503, 4505, 
	5, 556, 279, 2, 4504, 4506, 5, 530, 266, 2, 4505, 4504, 3, 2, 2, 2, 4505, 
	4506, 3, 2, 2, 2, 4506, 385, 3, 2, 2, 2, 4507, 4508, 7, 168, 2, 2, 4508, 
	4509, 7, 32, 2, 2, 4509, 4511, 5, 646, 324, 2, 4510, 4512, 7, 398, 2, 2, 
	4511, 4510, 3, 2, 2, 2, 4511, 4512, 3, 2, 2, 2, 4512, 4513, 3, 2, 2, 2, 
	4513, 4514, 7, 408, 2, 2, 4514, 4515, 7, 271, 2, 2, 4515, 4516, 5, 576, 
	289, 2, 4516, 4517, 7, 446, 2, 2, 4517, 4520, 5, 556, 279, 2, 4518, 4519, 
	7, 89, 2, 2, 4519, 4521, 5, 646, 324, 2, 4520, 4518, 3, 2, 2, 2, 4520, 
	4521, 3, 2, 2, 2, 4521, 4522, 3, 2, 2, 2, 4522, 4523, 7, 381, 2, 2, 4523, 
	4528, 5, 388, 195, 2, 4524, 4525, 7, 591, 2, 2, 4525, 4527, 5, 388, 195, 
	2, 4526, 4524, 3, 2, 2, 2, 4527, 4530, 3, 2, 2, 2, 4528, 4526, 3, 2, 2, 
	2, 4528, 4529, 3, 2, 2, 2, 4529, 387, 3, 2, 2, 2, 4530, 4528, 3, 2, 2, 
	2, 4531, 4532, 7, 168, 2, 2, 4532, 4533, 5, 602, 302, 2, 4533, 4545, 5, 
	268, 135, 2, 4534, 4537, 7, 597, 2, 2, 4535, 4538, 5, 576, 289, 2, 4536, 
	4538, 7, 323, 2, 2, 4537, 4535, 3, 2, 2, 2, 4537, 4536, 3, 2, 2, 2, 4538, 
	4539, 3, 2, 2, 2, 4539, 4542, 7, 591, 2, 2, 4540, 4543, 5, 576, 289, 2, 
	4541, 4543, 7, 323, 2, 2, 4542, 4540, 3, 2, 2, 2, 4542, 4541, 3, 2, 2, 
	2, 4543, 4544, 3, 2, 2, 2, 4544, 4546, 7, 598, 2, 2, 4545, 4534, 3, 2, 
	2, 2, 4545, 4546, 3, 2, 2, 2, 4546, 4553, 3, 2, 2, 2, 4547, 4548, 7, 408, 
	2, 2, 4548, 4554, 7, 228, 2, 2, 4549, 4550, 7, 408, 2, 2, 4550, 4551, 7, 
	429, 2, 2, 4551, 4552, 7, 22, 2, 2, 4552, 4554, 5, 646, 324, 2, 4553, 4547, 
	3, 2, 2, 2, 4553, 4549, 3, 2, 2, 2, 4553, 4554, 3, 2, 2, 2, 4554, 4577, 
	3, 2, 2, 2, 4555, 4556, 7, 95, 2, 2, 4556, 4570, 5, 602, 302, 2, 4557, 
	4560, 7, 597, 2, 2, 4558, 4561, 5, 576, 289, 2, 4559, 4561, 7, 323, 2, 
	2, 4560, 4558, 3, 2, 2, 2, 4560, 4559, 3, 2, 2, 2, 4561, 4567, 3, 2, 2, 
	2, 4562, 4565, 7, 591, 2, 2, 4563, 4566, 5, 576, 289, 2, 4564, 4566, 7, 
	323, 2, 2, 4565, 4563, 3, 2, 2, 2, 4565, 4564, 3, 2, 2, 2, 4566, 4568, 
	3, 2, 2, 2, 4567, 4562, 3, 2, 2, 2, 4567, 4568, 3, 2, 2, 2, 4568, 4569, 
	3, 2, 2, 2, 4569, 4571, 7, 598, 2, 2, 4570, 4557, 3, 2, 2, 2, 4570, 4571, 
	3, 2, 2, 2, 4571, 4572, 3, 2, 2, 2, 4572, 4573, 5, 610, 306, 2, 4573, 4577, 
	3, 2, 2, 2, 4574, 4575, 7, 251, 2, 2, 4575, 4577, 5, 576, 289, 2, 4576, 
	4531, 3, 2, 2, 2, 4576, 4555, 3, 2, 2, 2, 4576, 4574, 3, 2, 2, 2, 4577, 
	389, 3, 2, 2, 2, 4578, 4579, 7, 168, 2, 2, 4579, 4580, 7, 32, 2, 2, 4580, 
	4581, 5, 646, 324, 2, 4581, 4582, 7, 446, 2, 2, 4582, 4586, 5, 556, 279, 
	2, 4583, 4587, 5, 520, 261, 2, 4584, 4587, 5, 518, 260, 2, 4585, 4587, 
	5, 522, 262, 2, 4586, 4583, 3, 2, 2, 2, 4586, 4584, 3, 2, 2, 2, 4586, 4585, 
	3, 2, 2, 2, 4587, 391, 3, 2, 2, 2, 4588, 4589, 7, 168, 2, 2, 4589, 4591, 
	7, 32, 2, 2, 4590, 4592, 5, 422, 212, 2, 4591, 4590, 3, 2, 2, 2, 4591, 
	4592, 3, 2, 2, 2, 4592, 4593, 3, 2, 2, 2, 4593, 4594, 5, 646, 324, 2, 4594, 
	4595, 7, 446, 2, 2, 4595, 4597, 5, 556, 279, 2, 4596, 4598, 5, 530, 266, 
	2, 4597, 4596, 3, 2, 2, 2, 4597, 4598, 3, 2, 2, 2, 4598, 393, 3, 2, 2, 
	2, 4599, 4601, 7, 398, 2, 2, 4600, 4599, 3, 2, 2, 2, 4600, 4601, 3, 2, 
	2, 2, 4601, 4602, 3, 2, 2, 2, 4602, 4603, 7, 46, 2, 2, 4603, 4604, 5, 646, 
	324, 2, 4604, 4605, 7, 408, 2, 2, 4605, 4606, 7, 625, 2, 2, 4606, 4607, 
	7, 440, 2, 2, 4607, 4608, 7, 625, 2, 2, 4608, 4609, 7, 410, 2, 2, 4609, 
	4610, 5, 646, 324, 2, 4610, 395, 3, 2, 2, 2, 4611, 4612, 7, 46, 2, 2, 4612, 
	4616, 5, 646, 324, 2, 4613, 4617, 5, 520, 261, 2, 4614, 4617, 5, 518, 260, 
	2, 4615, 4617, 5, 522, 262, 2, 4616, 4613, 3, 2, 2, 2, 4616, 4614, 3, 2, 
	2, 2, 4616, 4615, 3, 2, 2, 2, 4617, 397, 3, 2, 2, 2, 4618, 4619, 7, 195, 
	2, 2, 4619, 4633, 5, 556, 279, 2, 4620, 4621, 7, 408, 2, 2, 4621, 4622, 
	7, 438, 2, 2, 4622, 4627, 5, 404, 203, 2, 4623, 4624, 7, 591, 2, 2, 4624, 
	4626, 5, 404, 203, 2, 4625, 4623, 3, 2, 2, 2, 4626, 4629, 3, 2, 2, 2, 4627, 
	4625, 3, 2, 2, 2, 4627, 4628, 3, 2, 2, 2, 4628, 4634, 3, 2, 2, 2, 4629, 
	4627, 3, 2, 2, 2, 4630, 4631, 7, 408, 2, 2, 4631, 4632, 7, 376, 2, 2, 4632, 
	4634, 7, 259, 2, 2, 4633, 4620, 3, 2, 2, 2, 4633, 4630, 3, 2, 2, 2, 4633, 
	4634, 3, 2, 2, 2, 4634, 4636, 3, 2, 2, 2, 4635, 4637, 5, 506, 254, 2, 4636, 
	4635, 3, 2, 2, 2, 4636, 4637, 3, 2, 2, 2, 4637, 399, 3, 2, 2, 2, 4638, 
	4639, 7, 195, 2, 2, 4639, 4640, 5, 556, 279, 2, 4640, 4641, 5, 402, 202, 
	2, 4641, 401, 3, 2, 2, 2, 4642, 4657, 5, 520, 261, 2, 4643, 4657, 5, 518, 
	260, 2, 4644, 4645, 7, 236, 2, 2, 4645, 4657, 5, 500, 251, 2, 4646, 4647, 
	9, 60, 2, 2, 4647, 4648, 7, 438, 2, 2, 4648, 4653, 5, 404, 203, 2, 4649, 
	4650, 7, 591, 2, 2, 4650, 4652, 5, 404, 203, 2, 4651, 4649, 3, 2, 2, 2, 
	4652, 4655, 3, 2, 2, 2, 4653, 4651, 3, 2, 2, 2, 4653, 4654, 3, 2, 2, 2, 
	4654, 4657, 3, 2, 2, 2, 4655, 4653, 3, 2, 2, 2, 4656, 4642, 3, 2, 2, 2, 
	4656, 4643, 3, 2, 2, 2, 4656, 4644, 3, 2, 2, 2, 4656, 4646, 3, 2, 2, 2, 
	4657, 403, 3, 2, 2, 2, 4658, 4660, 7, 427, 2, 2, 4659, 4658, 3, 2, 2, 2, 
	4659, 4660, 3, 2, 2, 2, 4660, 4661, 3, 2, 2, 2, 4661, 4663, 5, 646, 324, 
	2, 4662, 4664, 7, 601, 2, 2, 4663, 4662, 3, 2, 2, 2, 4663, 4664, 3, 2, 
	2, 2, 4664, 405, 3, 2, 2, 2, 4665, 4666, 7, 268, 2, 2, 4666, 4667, 5, 556, 
	279, 2, 4667, 4668, 7, 426, 2, 2, 4668, 4677, 5, 646, 324, 2, 4669, 4678, 
	5, 520, 261, 2, 4670, 4672, 7, 157, 2, 2, 4671, 4670, 3, 2, 2, 2, 4671, 
	4672, 3, 2, 2, 2, 4672, 4673, 3, 2, 2, 2, 4673, 4674, 7, 65, 2, 2, 4674, 
	4675, 7, 426, 2, 2, 4675, 4676, 7, 87, 2, 2, 4676, 4678, 5, 556, 279, 2, 
	4677, 4669, 3, 2, 2, 2, 4677, 4671, 3, 2, 2, 2, 4678, 407, 3, 2, 2, 2, 
	4679, 4680, 7, 223, 2, 2, 4680, 4681, 5, 556, 279, 2, 4681, 4682, 7, 426, 
	2, 2, 4682, 4683, 5, 646, 324, 2, 4683, 4684, 5, 520, 261, 2, 4684, 409, 
	3, 2, 2, 2, 4685, 4688, 5, 414, 208, 2, 4686, 4688, 5, 412, 207, 2, 4687, 
	4685, 3, 2, 2, 2, 4687, 4686, 3, 2, 2, 2, 4688, 411, 3, 2, 2, 2, 4689, 
	4690, 7, 47, 2, 2, 4690, 4691, 5, 48, 25, 2, 4691, 4697, 7, 410, 2, 2, 
	4692, 4694, 7, 194, 2, 2, 4693, 4692, 3, 2, 2, 2, 4693, 4694, 3, 2, 2, 
	2, 4694, 4695, 3, 2, 2, 2, 4695, 4698, 7, 625, 2, 2, 4696, 4698, 7, 249, 
	2, 2, 4697, 4693, 3, 2, 2, 2, 4697, 4696, 3, 2, 2, 2, 4698, 4709, 3, 2, 
	2, 2, 4699, 4701, 7, 451, 2, 2, 4700, 4699, 3, 2, 2, 2, 4700, 4701, 3, 
	2, 2, 2, 4701, 4707, 3, 2, 2, 2, 4702, 4703, 7, 597, 2, 2, 4703, 4704, 
	5, 416, 209, 2, 4704, 4705, 7, 598, 2, 2, 4705, 4708, 3, 2, 2, 2, 4706, 
	4708, 5, 416, 209, 2, 4707, 4702, 3, 2, 2, 2, 4707, 4706, 3, 2, 2, 2, 4708, 
	4710, 3, 2, 2, 2, 4709, 4700, 3, 2, 2, 2, 4709, 4710, 3, 2, 2, 2, 4710, 
	4713, 3, 2, 2, 2, 4711, 4712, 7, 449, 2, 2, 4712, 4714, 5, 588, 295, 2, 
	4713, 4711, 3, 2, 2, 2, 4713, 4714, 3, 2, 2, 2, 4714, 413, 3, 2, 2, 2, 
	4715, 4721, 7, 47, 2, 2, 4716, 4722, 5, 48, 25, 2, 4717, 4718, 7, 597, 
	2, 2, 4718, 4719, 5, 16, 9, 2, 4719, 4720, 7, 598, 2, 2, 4720, 4722, 3, 
	2, 2, 2, 4721, 4716, 3, 2, 2, 2, 4721, 4717, 3, 2, 2, 2, 4722, 4723, 3, 
	2, 2, 2, 4723, 4729, 7, 440, 2, 2, 4724, 4726, 7, 194, 2, 2, 4725, 4724, 
	3, 2, 2, 2, 4725, 4726, 3, 2, 2, 2, 4726, 4727, 3, 2, 2, 2, 4727, 4730, 
	7, 625, 2, 2, 4728, 4730, 7, 250, 2, 2, 4729, 4725, 3, 2, 2, 2, 4729, 4728, 
	3, 2, 2, 2, 4730, 4741, 3, 2, 2, 2, 4731, 4733, 7, 451, 2, 2, 4732, 4731, 
	3, 2, 2, 2, 4732, 4733, 3, 2, 2, 2, 4733, 4739, 3, 2, 2, 2, 4734, 4735, 
	7, 597, 2, 2, 4735, 4736, 5, 416, 209, 2, 4736, 4737, 7, 598, 2, 2, 4737, 
	4740, 3, 2, 2, 2, 4738, 4740, 5, 416, 209, 2, 4739, 4734, 3, 2, 2, 2, 4739, 
	4738, 3, 2, 2, 2, 4740, 4742, 3, 2, 2, 2, 4741, 4732, 3, 2, 2, 2, 4741, 
	4742, 3, 2, 2, 2, 4742, 415, 3, 2, 2, 2, 4743, 4750, 5, 418, 210, 2, 4744, 
	4746, 7, 591, 2, 2, 4745, 4744, 3, 2, 2, 2, 4745, 4746, 3, 2, 2, 2, 4746, 
	4747, 3, 2, 2, 2, 4747, 4749, 5, 418, 210, 2, 4748, 4745, 3, 2, 2, 2, 4749, 
	4752, 3, 2, 2, 2, 4750, 4748, 3, 2, 2, 2, 4750, 4751, 3, 2, 2, 2, 4751, 
	417, 3, 2, 2, 2, 4752, 4750, 3, 2, 2, 2, 4753, 4755, 7, 477, 2, 2, 4754, 
	4753, 3, 2, 2, 2, 4754, 4755, 3, 2, 2, 2, 4755, 4756, 3, 2, 2, 2, 4756, 
	4814, 9, 61, 2, 2, 4757, 4759, 7, 166, 2, 2, 4758, 4760, 5, 604, 303, 2, 
	4759, 4758, 3, 2, 2, 2, 4759, 4760, 3, 2, 2, 2, 4760, 4814, 3, 2, 2, 2, 
	4761, 4763, 7, 359, 2, 2, 4762, 4764, 5, 604, 303, 2, 4763, 4762, 3, 2, 
	2, 2, 4763, 4764, 3, 2, 2, 2, 4764, 4814, 3, 2, 2, 2, 4765, 4767, 7, 63, 
	2, 2, 4766, 4768, 7, 381, 2, 2, 4767, 4766, 3, 2, 2, 2, 4767, 4768, 3, 
	2, 2, 2, 4768, 4769, 3, 2, 2, 2, 4769, 4814, 7, 625, 2, 2, 4770, 4772, 
	7, 424, 2, 2, 4771, 4773, 7, 381, 2, 2, 4772, 4771, 3, 2, 2, 2, 4772, 4773, 
	3, 2, 2, 2, 4773, 4774, 3, 2, 2, 2, 4774, 4814, 7, 625, 2, 2, 4775, 4777, 
	7, 102, 2, 2, 4776, 4778, 5, 604, 303, 2, 4777, 4776, 3, 2, 2, 2, 4777, 
	4778, 3, 2, 2, 2, 4778, 4814, 3, 2, 2, 2, 4779, 4780, 7, 196, 2, 2, 4780, 
	4814, 7, 625, 2, 2, 4781, 4782, 7, 79, 2, 2, 4782, 4814, 7, 625, 2, 2, 
	4783, 4784, 7, 93, 2, 2, 4784, 4787, 7, 196, 2, 2, 4785, 4788, 7, 601, 
	2, 2, 4786, 4788, 5, 720, 361, 2, 4787, 4785, 3, 2, 2, 2, 4787, 4786, 3, 
	2, 2, 2, 4788, 4814, 3, 2, 2, 2, 4789, 4795, 7, 476, 2, 2, 4790, 4796, 
	7, 601, 2, 2, 4791, 4792, 7, 597, 2, 2, 4792, 4793, 5, 720, 361, 2, 4793, 
	4794, 7, 598, 2, 2, 4794, 4796, 3, 2, 2, 2, 4795, 4790, 3, 2, 2, 2, 4795, 
	4791, 3, 2, 2, 2, 4796, 4814, 3, 2, 2, 2, 4797, 4798, 7, 93, 2, 2, 4798, 
	4799, 7, 423, 2, 2, 4799, 4800, 7, 424, 2, 2, 4800, 4814, 5, 720, 361, 
	2, 4801, 4802, 7, 474, 2, 2, 4802, 4803, 7, 597, 2, 2, 4803, 4804, 5, 720, 
	361, 2, 4804, 4805, 7, 598, 2, 2, 4805, 4814, 3, 2, 2, 2, 4806, 4807, 7, 
	475, 2, 2, 4807, 4808, 7, 597, 2, 2, 4808, 4809, 5, 720, 361, 2, 4809, 
	4810, 7, 598, 2, 2, 4810, 4814, 3, 2, 2, 2, 4811, 4812, 7, 76, 2, 2, 4812, 
	4814, 7, 625, 2, 2, 4813, 4754, 3, 2, 2, 2, 4813, 4757, 3, 2, 2, 2, 4813, 
	4761, 3, 2, 2, 2, 4813, 4765, 3, 2, 2, 2, 4813, 4770, 3, 2, 2, 2, 4813, 
	4775, 3, 2, 2, 2, 4813, 4779, 3, 2, 2, 2, 4813, 4781, 3, 2, 2, 2, 4813, 
	4783, 3, 2, 2, 2, 4813, 4789, 3, 2, 2, 2, 4813, 4797, 3, 2, 2, 2, 4813, 
	4801, 3, 2, 2, 2, 4813, 4806, 3, 2, 2, 2, 4813, 4811, 3, 2, 2, 2, 4814, 
	419, 3, 2, 2, 2, 4815, 4816, 7, 428, 2, 2, 4816, 4818, 7, 210, 2, 2, 4817, 
	4815, 3, 2, 2, 2, 4817, 4818, 3, 2, 2, 2, 4818, 4820, 3, 2, 2, 2, 4819, 
	4821, 9, 54, 2, 2, 4820, 4819, 3, 2, 2, 2, 4820, 4821, 3, 2, 2, 2, 4821, 
	4823, 3, 2, 2, 2, 4822, 4824, 7, 201, 2, 2, 4823, 4822, 3, 2, 2, 2, 4823, 
	4824, 3, 2, 2, 2, 4824, 4826, 3, 2, 2, 2, 4825, 4827, 7, 141, 2, 2, 4826, 
	4825, 3, 2, 2, 2, 4826, 4827, 3, 2, 2, 2, 4827, 4828, 3, 2, 2, 2, 4828, 
	4830, 7, 289, 2, 2, 4829, 4831, 5, 424, 213, 2, 4830, 4829, 3, 2, 2, 2, 
	4830, 4831, 3, 2, 2, 2, 4831, 4832, 3, 2, 2, 2, 4832, 4834, 5, 646, 324, 
	2, 4833, 4835, 5, 426, 214, 2, 4834, 4833, 3, 2, 2, 2, 4834, 4835, 3, 2, 
	2, 2, 4835, 4838, 3, 2, 2, 2, 4836, 4837, 7, 446, 2, 2, 4837, 4839, 5, 
	556, 279, 2, 4838, 4836, 3, 2, 2, 2, 4838, 4839, 3, 2, 2, 2, 4839, 4842, 
	3, 2, 2, 2, 4840, 4841, 7, 451, 2, 2, 4841, 4843, 5, 500, 251, 2, 4842, 
	4840, 3, 2, 2, 2, 4842, 4843, 3, 2, 2, 2, 4843, 4845, 3, 2, 2, 2, 4844, 
	4846, 5, 512, 257, 2, 4845, 4844, 3, 2, 2, 2, 4845, 4846, 3, 2, 2, 2, 4846, 
	4847, 3, 2, 2, 2, 4847, 4848, 7, 381, 2, 2, 4848, 4850, 5, 652, 327, 2, 
	4849, 4851, 5, 428, 215, 2, 4850, 4849, 3, 2, 2, 2, 4850, 4851, 3, 2, 2, 
	2, 4851, 4857, 3, 2, 2, 2, 4852, 4854, 7, 451, 2, 2, 4853, 4855, 7, 157, 
	2, 2, 4854, 4853, 3, 2, 2, 2, 4854, 4855, 3, 2, 2, 2, 4855, 4856, 3, 2, 
	2, 2, 4856, 4858, 7, 54, 2, 2, 4857, 4852, 3, 2, 2, 2, 4857, 4858, 3, 2, 
	2, 2, 4858, 421, 3, 2, 2, 2, 4859, 4860, 7, 106, 2, 2, 4860, 4861, 7, 311, 
	2, 2, 4861, 423, 3, 2, 2, 2, 4862, 4863, 7, 106, 2, 2, 4863, 4864, 7, 423, 
	2, 2, 4864, 4865, 7, 311, 2, 2, 4865, 425, 3, 2, 2, 2, 4866, 4867, 7, 597, 
	2, 2, 4867, 4872, 5, 556, 279, 2, 4868, 4869, 7, 591, 2, 2, 4869, 4871, 
	5, 556, 279, 2, 4870, 4868, 3, 2, 2, 2, 4871, 4874, 3, 2, 2, 2, 4872, 4870, 
	3, 2, 2, 2, 4872, 4873, 3, 2, 2, 2, 4873, 4875, 3, 2, 2, 2, 4874, 4872, 
	3, 2, 2, 2, 4875, 4876, 7, 598, 2, 2, 4876, 427, 3, 2, 2, 2, 4877, 4879, 
	7, 451, 2, 2, 4878, 4880, 9, 62, 2, 2, 4879, 4878, 3, 2, 2, 2, 4879, 4880, 
	3, 2, 2, 2, 4880, 4881, 3, 2, 2, 2, 4881, 4882, 7, 387, 2, 2, 4882, 4883, 
	7, 169, 2, 2, 4883, 429, 3, 2, 2, 2, 4884, 4885, 7, 55, 2, 2, 4885, 4894, 
	5, 556, 279, 2, 4886, 4888, 7, 451, 2, 2, 4887, 4886, 3, 2, 2, 2, 4887, 
	4888, 3, 2, 2, 2, 4888, 4890, 3, 2, 2, 2, 4889, 4891, 5, 432, 217, 2, 4890, 
	4889, 3, 2, 2, 2, 4891, 4892, 3, 2, 2, 2, 4892, 4890, 3, 2, 2, 2, 4892, 
	4893, 3, 2, 2, 2, 4893, 4895, 3, 2, 2, 2, 4894, 4887, 3, 2, 2, 2, 4894, 
	4895, 3, 2, 2, 2, 4895, 431, 3, 2, 2, 2, 4896, 4898, 9, 63, 2, 2, 4897, 
	4899, 7, 588, 2, 2, 4898, 4897, 3, 2, 2, 2, 4898, 4899, 3, 2, 2, 2, 4899, 
	4903, 3, 2, 2, 2, 4900, 4904, 5, 340, 171, 2, 4901, 4904, 5, 556, 279, 
	2, 4902, 4904, 7, 398, 2, 2, 4903, 4900, 3, 2, 2, 2, 4903, 4901, 3, 2, 
	2, 2, 4903, 4902, 3, 2, 2, 2, 4904, 4907, 3, 2, 2, 2, 4905, 4907, 5, 438, 
	220, 2, 4906, 4896, 3, 2, 2, 2, 4906, 4905, 3, 2, 2, 2, 4907, 433, 3, 2, 
	2, 2, 4908, 4909, 7, 55, 2, 2, 4909, 4911, 5, 556, 279, 2, 4910, 4912, 
	5, 436, 219, 2, 4911, 4910, 3, 2, 2, 2, 4911, 4912, 3, 2, 2, 2, 4912, 435, 
	3, 2, 2, 2, 4913, 4915, 7, 451, 2, 2, 4914, 4913, 3, 2, 2, 2, 4914, 4915, 
	3, 2, 2, 2, 4915, 4917, 3, 2, 2, 2, 4916, 4918, 5, 438, 220, 2, 4917, 4916, 
	3, 2, 2, 2, 4918, 4919, 3, 2, 2, 2, 4919, 4917, 3, 2, 2, 2, 4919, 4920, 
	3, 2, 2, 2, 4920, 4938, 3, 2, 2, 2, 4921, 4923, 7, 451, 2, 2, 4922, 4921, 
	3, 2, 2, 2, 4922, 4923, 3, 2, 2, 2, 4923, 4924, 3, 2, 2, 2, 4924, 4926, 
	7, 260, 2, 2, 4925, 4927, 7, 588, 2, 2, 4926, 4925, 3, 2, 2, 2, 4926, 4927, 
	3, 2, 2, 2, 4927, 4931, 3, 2, 2, 2, 4928, 4932, 5, 340, 171, 2, 4929, 4932, 
	5, 556, 279, 2, 4930, 4932, 7, 398, 2, 2, 4931, 4928, 3, 2, 2, 2, 4931, 
	4929, 3, 2, 2, 2, 4931, 4930, 3, 2, 2, 2, 4932, 4938, 3, 2, 2, 2, 4933, 
	4938, 5, 520, 261, 2, 4934, 4938, 5, 518, 260, 2, 4935, 4938, 5, 514, 258, 
	2, 4936, 4938, 5, 202, 102, 2, 4937, 4914, 3, 2, 2, 2, 4937, 4922, 3, 2, 
	2, 2, 4937, 4933, 3, 2, 2, 2, 4937, 4934, 3, 2, 2, 2, 4937, 4935, 3, 2, 
	2, 2, 4937, 4936, 3, 2, 2, 2, 4938, 437, 3, 2, 2, 2, 4939, 4941, 9, 64, 
	2, 2, 4940, 4942, 7, 588, 2, 2, 4941, 4940, 3, 2, 2, 2, 4941, 4942, 3, 
	2, 2, 2, 4942, 4945, 3, 2, 2, 2, 4943, 4946, 5, 56, 29, 2, 4944, 4946, 
	7, 398, 2, 2, 4945, 4943, 3, 2, 2, 2, 4945, 4944, 3, 2, 2, 2, 4946, 4957, 
	3, 2, 2, 2, 4947, 4948, 7, 42, 2, 2, 4948, 4950, 7, 420, 2, 2, 4949, 4951, 
	7, 588, 2, 2, 4950, 4949, 3, 2, 2, 2, 4950, 4951, 3, 2, 2, 2, 4951, 4954, 
	3, 2, 2, 2, 4952, 4955, 5, 350, 176, 2, 4953, 4955, 7, 398, 2, 2, 4954, 
	4952, 3, 2, 2, 2, 4954, 4953, 3, 2, 2, 2, 4955, 4957, 3, 2, 2, 2, 4956, 
	4939, 3, 2, 2, 2, 4956, 4947, 3, 2, 2, 2, 4957, 439, 3, 2, 2, 2, 4958, 
	4960, 9, 65, 2, 2, 4959, 4958, 3, 2, 2, 2, 4959, 4960, 3, 2, 2, 2, 4960, 
	4961, 3, 2, 2, 2, 4961, 4964, 9, 54, 2, 2, 4962, 4964, 7, 279, 2, 2, 4963, 
	4959, 3, 2, 2, 2, 4963, 4962, 3, 2, 2, 2, 4963, 4964, 3, 2, 2, 2, 4964, 
	4965, 3, 2, 2, 2, 4965, 4967, 7, 438, 2, 2, 4966, 4968, 5, 424, 213, 2, 
	4967, 4966, 3, 2, 2, 2, 4967, 4968, 3, 2, 2, 2, 4968, 4969, 3, 2, 2, 2, 
	4969, 4970, 5, 646, 324, 2, 4970, 4972, 5, 446, 224, 2, 4971, 4973, 5, 
	460, 231, 2, 4972, 4971, 3, 2, 2, 2, 4972, 4973, 3, 2, 2, 2, 4973, 4976, 
	3, 2, 2, 2, 4974, 4975, 7, 446, 2, 2, 4975, 4977, 5, 556, 279, 2, 4976, 
	4974, 3, 2, 2, 2, 4976, 4977, 3, 2, 2, 2, 4977, 4979, 3, 2, 2, 2, 4978, 
	4980, 5, 508, 255, 2, 4979, 4978, 3, 2, 2, 2, 4979, 4980, 3, 2, 2, 2, 4980, 
	4982, 3, 2, 2, 2, 4981, 4983, 5, 510, 256, 2, 4982, 4981, 3, 2, 2, 2, 4982, 
	4983, 3, 2, 2, 2, 4983, 4985, 3, 2, 2, 2, 4984, 4986, 5, 512, 257, 2, 4985, 
	4984, 3, 2, 2, 2, 4985, 4986, 3, 2, 2, 2, 4986, 441, 3, 2, 2, 2, 4987, 
	4989, 9, 65, 2, 2, 4988, 4987, 3, 2, 2, 2, 4988, 4989, 3, 2, 2, 2, 4989, 
	4990, 3, 2, 2, 2, 4990, 4993, 9, 54, 2, 2, 4991, 4993, 7, 279, 2, 2, 4992, 
	4988, 3, 2, 2, 2, 4992, 4991, 3, 2, 2, 2, 4992, 4993, 3, 2, 2, 2, 4993, 
	4994, 3, 2, 2, 2, 4994, 4996, 7, 438, 2, 2, 4995, 4997, 5, 424, 213, 2, 
	4996, 4995, 3, 2, 2, 2, 4996, 4997, 3, 2, 2, 2, 4997, 4998, 3, 2, 2, 2, 
	4998, 5000, 5, 646, 324, 2, 4999, 5001, 5, 496, 249, 2, 5000, 4999, 3, 
	2, 2, 2, 5000, 5001, 3, 2, 2, 2, 5001, 5004, 3, 2, 2, 2, 5002, 5003, 7, 
	446, 2, 2, 5003, 5005, 5, 556, 279, 2, 5004, 5002, 3, 2, 2, 2, 5004, 5005, 
	3, 2, 2, 2, 5005, 5007, 3, 2, 2, 2, 5006, 5008, 5, 508, 255, 2, 5007, 5006, 
	3, 2, 2, 2, 5007, 5008, 3, 2, 2, 2, 5008, 5010, 3, 2, 2, 2, 5009, 5011, 
	5, 510, 256, 2, 5010, 5009, 3, 2, 2, 2, 5010, 5011, 3, 2, 2, 2, 5011, 5013, 
	3, 2, 2, 2, 5012, 5014, 5, 512, 257, 2, 5013, 5012, 3, 2, 2, 2, 5013, 5014, 
	3, 2, 2, 2, 5014, 5015, 3, 2, 2, 2, 5015, 5019, 7, 381, 2, 2, 5016, 5020, 
	5, 652, 327, 2, 5017, 5018, 7, 84, 2, 2, 5018, 5020, 5, 610, 306, 2, 5019, 
	5016, 3, 2, 2, 2, 5019, 5017, 3, 2, 2, 2, 5020, 5026, 3, 2, 2, 2, 5021, 
	5023, 7, 451, 2, 2, 5022, 5024, 7, 157, 2, 2, 5023, 5022, 3, 2, 2, 2, 5023, 
	5024, 3, 2, 2, 2, 5024, 5025, 3, 2, 2, 2, 5025, 5027, 7, 54, 2, 2, 5026, 
	5021, 3, 2, 2, 2, 5026, 5027, 3, 2, 2, 2, 5027, 443, 3, 2, 2, 2, 5028, 
	5029, 7, 409, 2, 2, 5029, 5031, 7, 438, 2, 2, 5030, 5032, 5, 424, 213, 
	2, 5031, 5030, 3, 2, 2, 2, 5031, 5032, 3, 2, 2, 2, 5032, 5033, 3, 2, 2, 
	2, 5033, 5036, 5, 646, 324, 2, 5034, 5037, 5, 456, 229, 2, 5035, 5037, 
	5, 448, 225, 2, 5036, 5034, 3, 2, 2, 2, 5036, 5035, 3, 2, 2, 2, 5037, 5038, 
	3, 2, 2, 2, 5038, 5039, 5, 466, 234, 2, 5039, 445, 3, 2, 2, 2, 5040, 5044, 
	5, 456, 229, 2, 5041, 5044, 5, 458, 230, 2, 5042, 5044, 5, 448, 225, 2, 
	5043, 5040, 3, 2, 2, 2, 5043, 5041, 3, 2, 2, 2, 5043, 5042, 3, 2, 2, 2, 
	5044, 447, 3, 2, 2, 2, 5045, 5046, 7, 180, 2, 2, 5046, 5047, 7, 164, 2, 
	2, 5047, 5049, 5, 646, 324, 2, 5048, 5050, 5, 474, 238, 2, 5049, 5048, 
	3, 2, 2, 2, 5049, 5050, 3, 2, 2, 2, 5050, 5051, 3, 2, 2, 2, 5051, 5052, 
	5, 450, 226, 2, 5052, 449, 3, 2, 2, 2, 5053, 5054, 7, 408, 2, 2, 5054, 
	5055, 7, 340, 2, 2, 5055, 5058, 5, 452, 227, 2, 5056, 5058, 7, 398, 2, 
	2, 5057, 5053, 3, 2, 2, 2, 5057, 5056, 3, 2, 2, 2, 5058, 451, 3, 2, 2, 
	2, 5059, 5060, 7, 414, 2, 2, 5060, 5061, 7, 597, 2, 2, 5061, 5066, 5, 588, 
	295, 2, 5062, 5063, 7, 591, 2, 2, 5063, 5065, 5, 588, 295, 2, 5064, 5062, 
	3, 2, 2, 2, 5065, 5068, 3, 2, 2, 2, 5066, 5064, 3, 2, 2, 2, 5066, 5067, 
	3, 2, 2, 2, 5067, 5069, 3, 2, 2, 2, 5068, 5066, 3, 2, 2, 2, 5069, 5070, 
	7, 598, 2, 2, 5070, 5085, 3, 2, 2, 2, 5071, 5072, 7, 410, 2, 2, 5072, 5073, 
	5, 454, 228, 2, 5073, 5074, 7, 440, 2, 2, 5074, 5075, 5, 454, 228, 2, 5075, 
	5085, 3, 2, 2, 2, 5076, 5077, 7, 451, 2, 2, 5077, 5078, 7, 597, 2, 2, 5078, 
	5079, 7, 504, 2, 2, 5079, 5080, 7, 620, 2, 2, 5080, 5081, 7, 591, 2, 2, 
	5081, 5082, 7, 526, 2, 2, 5082, 5083, 7, 620, 2, 2, 5083, 5085, 7, 598, 
	2, 2, 5084, 5059, 3, 2, 2, 2, 5084, 5071, 3, 2, 2, 2, 5084, 5076, 3, 2, 
	2, 2, 5085, 453, 3, 2, 2, 2, 5086, 5087, 7, 597, 2, 2, 5087, 5092, 5, 588, 
	295, 2, 5088, 5089, 7, 591, 2, 2, 5089, 5091, 5, 588, 295, 2, 5090, 5088, 
	3, 2, 2, 2, 5091, 5094, 3, 2, 2, 2, 5092, 5090, 3, 2, 2, 2, 5092, 5093, 
	3, 2, 2, 2, 5093, 5095, 3, 2, 2, 2, 5094, 5092, 3, 2, 2, 2, 5095, 5096, 
	7, 598, 2, 2, 5096, 455, 3, 2, 2, 2, 5097, 5106, 7, 597, 2, 2, 5098, 5103, 
	5, 476, 239, 2, 5099, 5100, 7, 591, 2, 2, 5100, 5102, 5, 476, 239, 2, 5101, 
	5099, 3, 2, 2, 2, 5102, 5105, 3, 2, 2, 2, 5103, 5101, 3, 2, 2, 2, 5103, 
	5104, 3, 2, 2, 2, 5104, 5107, 3, 2, 2, 2, 5105, 5103, 3, 2, 2, 2, 5106, 
	5098, 3, 2, 2, 2, 5106, 5107, 3, 2, 2, 2, 5107, 5108, 3, 2, 2, 2, 5108, 
	5111, 7, 598, 2, 2, 5109, 5110, 7, 117, 2, 2, 5110, 5112, 5, 496, 249, 
	2, 5111, 5109, 3, 2, 2, 2, 5111, 5112, 3, 2, 2, 2, 5112, 457, 3, 2, 2, 
	2, 5113, 5114, 7, 164, 2, 2, 5114, 5116, 5, 576, 289, 2, 5115, 5117, 5, 
	474, 238, 2, 5116, 5115, 3, 2, 2, 2, 5116, 5117, 3, 2, 2, 2, 5117, 459, 
	3, 2, 2, 2, 5118, 5119, 7, 180, 2, 2, 5119, 5120, 7, 22, 2, 2, 5120, 5121, 
	5, 462, 232, 2, 5121, 461, 3, 2, 2, 2, 5122, 5123, 9, 66, 2, 2, 5123, 5124, 
	7, 597, 2, 2, 5124, 5129, 5, 464, 233, 2, 5125, 5126, 7, 591, 2, 2, 5126, 
	5128, 5, 464, 233, 2, 5127, 5125, 3, 2, 2, 2, 5128, 5131, 3, 2, 2, 2, 5129, 
	5127, 3, 2, 2, 2, 5129, 5130, 3, 2, 2, 2, 5130, 5132, 3, 2, 2, 2, 5131, 
	5129, 3, 2, 2, 2, 5132, 5133, 7, 598, 2, 2, 5133, 463, 3, 2, 2, 2, 5134, 
	5136, 5, 588, 295, 2, 5135, 5137, 5, 556, 279, 2, 5136, 5135, 3, 2, 2, 
	2, 5136, 5137, 3, 2, 2, 2, 5137, 465, 3, 2, 2, 2, 5138, 5139, 7, 234, 2, 
	2, 5139, 5141, 5, 556, 279, 2, 5140, 5142, 5, 468, 235, 2, 5141, 5140, 
	3, 2, 2, 2, 5141, 5142, 3, 2, 2, 2, 5142, 467, 3, 2, 2, 2, 5143, 5144, 
	7, 170, 2, 2, 5144, 5145, 7, 597, 2, 2, 5145, 5150, 5, 470, 236, 2, 5146, 
	5147, 7, 591, 2, 2, 5147, 5149, 5, 470, 236, 2, 5148, 5146, 3, 2, 2, 2, 
	5149, 5152, 3, 2, 2, 2, 5150, 5148, 3, 2, 2, 2, 5150, 5151, 3, 2, 2, 2, 
	5151, 5153, 3, 2, 2, 2, 5152, 5150, 3, 2, 2, 2, 5153, 5154, 7, 598, 2, 
	2, 5154, 469, 3, 2, 2, 2, 5155, 5157, 9, 60, 2, 2, 5156, 5155, 3, 2, 2, 
	2, 5156, 5157, 3, 2, 2, 2, 5157, 5158, 3, 2, 2, 2, 5158, 5160, 5, 472, 
	237, 2, 5159, 5161, 5, 340, 171, 2, 5160, 5159, 3, 2, 2, 2, 5160, 5161, 
	3, 2, 2, 2, 5161, 471, 3, 2, 2, 2, 5162, 5165, 5, 556, 279, 2, 5163, 5165, 
	7, 445, 2, 2, 5164, 5162, 3, 2, 2, 2, 5164, 5163, 3, 2, 2, 2, 5165, 473, 
	3, 2, 2, 2, 5166, 5167, 7, 597, 2, 2, 5167, 5172, 5, 478, 240, 2, 5168, 
	5169, 7, 591, 2, 2, 5169, 5171, 5, 478, 240, 2, 5170, 5168, 3, 2, 2, 2, 
	5171, 5174, 3, 2, 2, 2, 5172, 5170, 3, 2, 2, 2, 5172, 5173, 3, 2, 2, 2, 
	5173, 5175, 3, 2, 2, 2, 5174, 5172, 3, 2, 2, 2, 5175, 5176, 7, 598, 2, 
	2, 5176, 475, 3, 2, 2, 2, 5177, 5188, 5, 480, 241, 2, 5178, 5188, 5, 484, 
	243, 2, 5179, 5180, 7, 367, 2, 2, 5180, 5184, 5, 646, 324, 2, 5181, 5183, 
	5, 482, 242, 2, 5182, 5181, 3, 2, 2, 2, 5183, 5186, 3, 2, 2, 2, 5184, 5182, 
	3, 2, 2, 2, 5184, 5185, 3, 2, 2, 2, 5185, 5188, 3, 2, 2, 2, 5186, 5184, 
	3, 2, 2, 2, 5187, 5177, 3, 2, 2, 2, 5187, 5178, 3, 2, 2, 2, 5187, 5179, 
	3, 2, 2, 2, 5188, 477, 3, 2, 2, 2, 5189, 5192, 5, 556, 279, 2, 5190, 5191, 
	7, 451, 2, 2, 5191, 5193, 7, 170, 2, 2, 5192, 5190, 3, 2, 2, 2, 5192, 5193, 
	3, 2, 2, 2, 5193, 5197, 3, 2, 2, 2, 5194, 5196, 5, 484, 243, 2, 5195, 5194, 
	3, 2, 2, 2, 5196, 5199, 3, 2, 2, 2, 5197, 5195, 3, 2, 2, 2, 5197, 5198, 
	3, 2, 2, 2, 5198, 5202, 3, 2, 2, 2, 5199, 5197, 3, 2, 2, 2, 5200, 5202, 
	5, 484, 243, 2, 5201, 5189, 3, 2, 2, 2, 5201, 5200, 3, 2, 2, 2, 5202, 479, 
	3, 2, 2, 2, 5203, 5204, 5, 556, 279, 2, 5204, 5206, 5, 576, 289, 2, 5205, 
	5207, 5, 468, 235, 2, 5206, 5205, 3, 2, 2, 2, 5206, 5207, 3, 2, 2, 2, 5207, 
	5209, 3, 2, 2, 2, 5208, 5210, 5, 532, 267, 2, 5209, 5208, 3, 2, 2, 2, 5209, 
	5210, 3, 2, 2, 2, 5210, 5214, 3, 2, 2, 2, 5211, 5213, 5, 484, 243, 2, 5212, 
	5211, 3, 2, 2, 2, 5213, 5216, 3, 2, 2, 2, 5214, 5212, 3, 2, 2, 2, 5214, 
	5215, 3, 2, 2, 2, 5215, 481, 3, 2, 2, 2, 5216, 5214, 3, 2, 2, 2, 5217, 
	5218, 9, 67, 2, 2, 5218, 5219, 9, 68, 2, 2, 5219, 483, 3, 2, 2, 2, 5220, 
	5221, 7, 390, 2, 2, 5221, 5223, 5, 556, 279, 2, 5222, 5220, 3, 2, 2, 2, 
	5222, 5223, 3, 2, 2, 2, 5223, 5224, 3, 2, 2, 2, 5224, 5226, 5, 486, 244, 
	2, 5225, 5227, 5, 100, 51, 2, 5226, 5225, 3, 2, 2, 2, 5226, 5227, 3, 2, 
	2, 2, 5227, 5229, 3, 2, 2, 2, 5228, 5230, 5, 102, 52, 2, 5229, 5228, 3, 
	2, 2, 2, 5229, 5230, 3, 2, 2, 2, 5230, 485, 3, 2, 2, 2, 5231, 5234, 7, 
	81, 2, 2, 5232, 5233, 7, 446, 2, 2, 5233, 5235, 5, 556, 279, 2, 5234, 5232, 
	3, 2, 2, 2, 5234, 5235, 3, 2, 2, 2, 5235, 5236, 3, 2, 2, 2, 5236, 5237, 
	7, 597, 2, 2, 5237, 5238, 5, 160, 81, 2, 5238, 5239, 7, 451, 2, 2, 5239, 
	5247, 5, 488, 245, 2, 5240, 5241, 7, 591, 2, 2, 5241, 5242, 5, 160, 81, 
	2, 5242, 5243, 7, 451, 2, 2, 5243, 5244, 5, 488, 245, 2, 5244, 5246, 3, 
	2, 2, 2, 5245, 5240, 3, 2, 2, 2, 5246, 5249, 3, 2, 2, 2, 5247, 5245, 3, 
	2, 2, 2, 5247, 5248, 3, 2, 2, 2, 5248, 5250, 3, 2, 2, 2, 5249, 5247, 3, 
	2, 2, 2, 5250, 5251, 7, 598, 2, 2, 5251, 5254, 5, 494, 248, 2, 5252, 5253, 
	7, 449, 2, 2, 5253, 5255, 5, 588, 295, 2, 5254, 5252, 3, 2, 2, 2, 5254, 
	5255, 3, 2, 2, 2, 5255, 5309, 3, 2, 2, 2, 5256, 5257, 7, 409, 2, 2, 5257, 
	5258, 7, 125, 2, 2, 5258, 5260, 5, 496, 249, 2, 5259, 5256, 3, 2, 2, 2, 
	5259, 5260, 3, 2, 2, 2, 5260, 5261, 3, 2, 2, 2, 5261, 5262, 7, 432, 2, 
	2, 5262, 5264, 5, 646, 324, 2, 5263, 5265, 5, 496, 249, 2, 5264, 5263, 
	3, 2, 2, 2, 5264, 5265, 3, 2, 2, 2, 5265, 5273, 3, 2, 2, 2, 5266, 5267, 
	7, 140, 2, 2, 5267, 5272, 9, 69, 2, 2, 5268, 5269, 7, 426, 2, 2, 5269, 
	5270, 9, 70, 2, 2, 5270, 5272, 5, 516, 259, 2, 5271, 5266, 3, 2, 2, 2, 
	5271, 5268, 3, 2, 2, 2, 5272, 5275, 3, 2, 2, 2, 5273, 5271, 3, 2, 2, 2, 
	5273, 5274, 3, 2, 2, 2, 5274, 5309, 3, 2, 2, 2, 5275, 5273, 3, 2, 2, 2, 
	5276, 5277, 7, 387, 2, 2, 5277, 5278, 7, 597, 2, 2, 5278, 5279, 5, 588, 
	295, 2, 5279, 5282, 7, 598, 2, 2, 5280, 5281, 7, 157, 2, 2, 5281, 5283, 
	7, 116, 2, 2, 5282, 5280, 3, 2, 2, 2, 5282, 5283, 3, 2, 2, 2, 5283, 5309, 
	3, 2, 2, 2, 5284, 5286, 7, 423, 2, 2, 5285, 5284, 3, 2, 2, 2, 5285, 5286, 
	3, 2, 2, 2, 5286, 5287, 3, 2, 2, 2, 5287, 5309, 7, 424, 2, 2, 5288, 5292, 
	7, 444, 2, 2, 5289, 5290, 7, 431, 2, 2, 5290, 5292, 7, 125, 2, 2, 5291, 
	5288, 3, 2, 2, 2, 5291, 5289, 3, 2, 2, 2, 5292, 5294, 3, 2, 2, 2, 5293, 
	5295, 5, 496, 249, 2, 5294, 5293, 3, 2, 2, 2, 5294, 5295, 3, 2, 2, 2, 5295, 
	5296, 3, 2, 2, 2, 5296, 5309, 5, 494, 248, 2, 5297, 5298, 7, 398, 2, 2, 
	5298, 5309, 5, 588, 295, 2, 5299, 5309, 5, 90, 46, 2, 5300, 5301, 7, 97, 
	2, 2, 5301, 5302, 7, 13, 2, 2, 5302, 5303, 7, 381, 2, 2, 5303, 5304, 7, 
	597, 2, 2, 5304, 5305, 5, 588, 295, 2, 5305, 5306, 7, 598, 2, 2, 5306, 
	5307, 7, 252, 2, 2, 5307, 5309, 3, 2, 2, 2, 5308, 5231, 3, 2, 2, 2, 5308, 
	5259, 3, 2, 2, 2, 5308, 5276, 3, 2, 2, 2, 5308, 5285, 3, 2, 2, 2, 5308, 
	5291, 3, 2, 2, 2, 5308, 5297, 3, 2, 2, 2, 5308, 5299, 3, 2, 2, 2, 5308, 
	5300, 3, 2, 2, 2, 5309, 487, 3, 2, 2, 2, 5310, 5324, 5, 592, 297, 2, 5311, 
	5324, 7, 588, 2, 2, 5312, 5324, 7, 592, 2, 2, 5313, 5324, 7, 593, 2, 2, 
	5314, 5324, 7, 594, 2, 2, 5315, 5324, 7, 595, 2, 2, 5316, 5324, 7, 596, 
	2, 2, 5317, 5324, 7, 599, 2, 2, 5318, 5324, 7, 600, 2, 2, 5319, 5324, 7, 
	601, 2, 2, 5320, 5324, 7, 602, 2, 2, 5321, 5324, 7, 603, 2, 2, 5322, 5324, 
	7, 604, 2, 2, 5323, 5310, 3, 2, 2, 2, 5323, 5311, 3, 2, 2, 2, 5323, 5312, 
	3, 2, 2, 2, 5323, 5313, 3, 2, 2, 2, 5323, 5314, 3, 2, 2, 2, 5323, 5315, 
	3, 2, 2, 2, 5323, 5316, 3, 2, 2, 2, 5323, 5317, 3, 2, 2, 2, 5323, 5318, 
	3, 2, 2, 2, 5323, 5319, 3, 2, 2, 2, 5323, 5320, 3, 2, 2, 2, 5323, 5321, 
	3, 2, 2, 2, 5323, 5322, 3, 2, 2, 2, 5324, 489, 3, 2, 2, 2, 5325, 5339, 
	5, 492, 247, 2, 5326, 5339, 7, 588, 2, 2, 5327, 5339, 7, 592, 2, 2, 5328, 
	5339, 7, 593, 2, 2, 5329, 5339, 7, 594, 2, 2, 5330, 5339, 7, 595, 2, 2, 
	5331, 5339, 7, 596, 2, 2, 5332, 5339, 7, 599, 2, 2, 5333, 5339, 7, 600, 
	2, 2, 5334, 5339, 7, 601, 2, 2, 5335, 5339, 7, 602, 2, 2, 5336, 5339, 7, 
	603, 2, 2, 5337, 5339, 7, 604, 2, 2, 5338, 5325, 3, 2, 2, 2, 5338, 5326, 
	3, 2, 2, 2, 5338, 5327, 3, 2, 2, 2, 5338, 5328, 3, 2, 2, 2, 5338, 5329, 
	3, 2, 2, 2, 5338, 5330, 3, 2, 2, 2, 5338, 5331, 3, 2, 2, 2, 5338, 5332, 
	3, 2, 2, 2, 5338, 5333, 3, 2, 2, 2, 5338, 5334, 3, 2, 2, 2, 5338, 5335, 
	3, 2, 2, 2, 5338, 5336, 3, 2, 2, 2, 5338, 5337, 3, 2, 2, 2, 5339, 491, 
	3, 2, 2, 2, 5340, 5341, 9, 71, 2, 2, 5341, 493, 3, 2, 2, 2, 5342, 5344, 
	5, 162, 82, 2, 5343, 5342, 3, 2, 2, 2, 5343, 5344, 3, 2, 2, 2, 5344, 5346, 
	3, 2, 2, 2, 5345, 5347, 5, 506, 254, 2, 5346, 5345, 3, 2, 2, 2, 5346, 5347, 
	3, 2, 2, 2, 5347, 5354, 3, 2, 2, 2, 5348, 5349, 7, 446, 2, 2, 5349, 5352, 
	7, 114, 2, 2, 5350, 5353, 5, 512, 257, 2, 5351, 5353, 5, 646, 324, 2, 5352, 
	5350, 3, 2, 2, 2, 5352, 5351, 3, 2, 2, 2, 5353, 5355, 3, 2, 2, 2, 5354, 
	5348, 3, 2, 2, 2, 5354, 5355, 3, 2, 2, 2, 5355, 495, 3, 2, 2, 2, 5356, 
	5357, 7, 597, 2, 2, 5357, 5358, 5, 498, 250, 2, 5358, 5359, 7, 598, 2, 
	2, 5359, 497, 3, 2, 2, 2, 5360, 5365, 5, 646, 324, 2, 5361, 5362, 7, 591, 
	2, 2, 5362, 5364, 5, 646, 324, 2, 5363, 5361, 3, 2, 2, 2, 5364, 5367, 3, 
	2, 2, 2, 5365, 5363, 3, 2, 2, 2, 5365, 5366, 3, 2, 2, 2, 5366, 499, 3, 
	2, 2, 2, 5367, 5365, 3, 2, 2, 2, 5368, 5369, 7, 597, 2, 2, 5369, 5374, 
	5, 502, 252, 2, 5370, 5371, 7, 591, 2, 2, 5371, 5373, 5, 502, 252, 2, 5372, 
	5370, 3, 2, 2, 2, 5373, 5376, 3, 2, 2, 2, 5374, 5372, 3, 2, 2, 2, 5374, 
	5375, 3, 2, 2, 2, 5375, 5377, 3, 2, 2, 2, 5376, 5374, 3, 2, 2, 2, 5377, 
	5378, 7, 598, 2, 2, 5378, 501, 3, 2, 2, 2, 5379, 5382, 5, 504, 253, 2, 
	5380, 5381, 7, 588, 2, 2, 5381, 5383, 5, 588, 295, 2, 5382, 5380, 3, 2, 
	2, 2, 5382, 5383, 3, 2, 2, 2, 5383, 503, 3, 2, 2, 2, 5384, 5387, 5, 560, 
	281, 2, 5385, 5386, 7, 605, 2, 2, 5386, 5388, 5, 560, 281, 2, 5387, 5385, 
	3, 2, 2, 2, 5387, 5388, 3, 2, 2, 2, 5388, 505, 3, 2, 2, 2, 5389, 5390, 
	7, 451, 2, 2, 5390, 5391, 5, 500, 251, 2, 5391, 507, 3, 2, 2, 2, 5392, 
	5398, 5, 506, 254, 2, 5393, 5394, 7, 451, 2, 2, 5394, 5398, 7, 166, 2, 
	2, 5395, 5396, 7, 294, 2, 2, 5396, 5398, 7, 166, 2, 2, 5397, 5392, 3, 2, 
	2, 2, 5397, 5393, 3, 2, 2, 2, 5397, 5395, 3, 2, 2, 2, 5398, 509, 3, 2, 
	2, 2, 5399, 5400, 7, 426, 2, 2, 5400, 5406, 7, 38, 2, 2, 5401, 5402, 7, 
	188, 2, 2, 5402, 5407, 7, 222, 2, 2, 5403, 5404, 7, 62, 2, 2, 5404, 5407, 
	7, 222, 2, 2, 5405, 5407, 7, 73, 2, 2, 5406, 5401, 3, 2, 2, 2, 5406, 5403, 
	3, 2, 2, 2, 5406, 5405, 3, 2, 2, 2, 5407, 511, 3, 2, 2, 2, 5408, 5409, 
	7, 260, 2, 2, 5409, 5410, 5, 556, 279, 2, 5410, 513, 3, 2, 2, 2, 5411, 
	5412, 7, 236, 2, 2, 5412, 5413, 7, 260, 2, 2, 5413, 5415, 5, 556, 279, 
	2, 5414, 5416, 7, 161, 2, 2, 5415, 5414, 3, 2, 2, 2, 5415, 5416, 3, 2, 
	2, 2, 5416, 515, 3, 2, 2, 2, 5417, 5423, 5, 530, 266, 2, 5418, 5419, 7, 
	236, 2, 2, 5419, 5423, 9, 72, 2, 2, 5420, 5421, 7, 157, 2, 2, 5421, 5423, 
	7, 6, 2, 2, 5422, 5417, 3, 2, 2, 2, 5422, 5418, 3, 2, 2, 2, 5422, 5420, 
	3, 2, 2, 2, 5423, 517, 3, 2, 2, 2, 5424, 5425, 7, 176, 2, 2, 5425, 5429, 
	7, 440, 2, 2, 5426, 5430, 5, 556, 279, 2, 5427, 5430, 7, 397, 2, 2, 5428, 
	5430, 7, 435, 2, 2, 5429, 5426, 3, 2, 2, 2, 5429, 5427, 3, 2, 2, 2, 5429, 
	5428, 3, 2, 2, 2, 5430, 519, 3, 2, 2, 2, 5431, 5432, 7, 208, 2, 2, 5432, 
	5433, 7, 440, 2, 2, 5433, 5434, 5, 556, 279, 2, 5434, 521, 3, 2, 2, 2, 
	5435, 5436, 7, 236, 2, 2, 5436, 5437, 7, 225, 2, 2, 5437, 5438, 5, 556, 
	279, 2, 5438, 523, 3, 2, 2, 2, 5439, 5451, 7, 434, 2, 2, 5440, 5451, 7, 
	121, 2, 2, 5441, 5451, 7, 281, 2, 2, 5442, 5451, 7, 62, 2, 2, 5443, 5451, 
	7, 269, 2, 2, 5444, 5451, 7, 432, 2, 2, 5445, 5451, 7, 268, 2, 2, 5446, 
	5448, 7, 376, 2, 2, 5447, 5449, 7, 190, 2, 2, 5448, 5447, 3, 2, 2, 2, 5448, 
	5449, 3, 2, 2, 2, 5449, 5451, 3, 2, 2, 2, 5450, 5439, 3, 2, 2, 2, 5450, 
	5440, 3, 2, 2, 2, 5450, 5441, 3, 2, 2, 2, 5450, 5442, 3, 2, 2, 2, 5450, 
	5443, 3, 2, 2, 2, 5450, 5444, 3, 2, 2, 2, 5450, 5445, 3, 2, 2, 2, 5450, 
	5446, 3, 2, 2, 2, 5451, 525, 3, 2, 2, 2, 5452, 5453, 9, 73, 2, 2, 5453, 
	527, 3, 2, 2, 2, 5454, 5455, 7, 180, 2, 2, 5455, 5456, 7, 22, 2, 2, 5456, 
	5461, 5, 588, 295, 2, 5457, 5458, 7, 591, 2, 2, 5458, 5460, 5, 588, 295, 
	2, 5459, 5457, 3, 2, 2, 2, 5460, 5463, 3, 2, 2, 2, 5461, 5459, 3, 2, 2, 
	2, 5461, 5462, 3, 2, 2, 2, 5462, 529, 3, 2, 2, 2, 5463, 5461, 3, 2, 2, 
	2, 5464, 5465, 9, 74, 2, 2, 5465, 531, 3, 2, 2, 2, 5466, 5467, 7, 388, 
	2, 2, 5467, 5468, 5, 646, 324, 2, 5468, 533, 3, 2, 2, 2, 5469, 5472, 5, 
	556, 279, 2, 5470, 5472, 5, 536, 269, 2, 5471, 5469, 3, 2, 2, 2, 5471, 
	5470, 3, 2, 2, 2, 5472, 5474, 3, 2, 2, 2, 5473, 5475, 5, 538, 270, 2, 5474, 
	5473, 3, 2, 2, 2, 5474, 5475, 3, 2, 2, 2, 5475, 535, 3, 2, 2, 2, 5476, 
	5477, 7, 622, 2, 2, 5477, 537, 3, 2, 2, 2, 5478, 5480, 5, 540, 271, 2, 
	5479, 5478, 3, 2, 2, 2, 5480, 5481, 3, 2, 2, 2, 5481, 5479, 3, 2, 2, 2, 
	5481, 5482, 3, 2, 2, 2, 5482, 5492, 3, 2, 2, 2, 5483, 5485, 5, 540, 271, 
	2, 5484, 5483, 3, 2, 2, 2, 5485, 5488, 3, 2, 2, 2, 5486, 5484, 3, 2, 2, 
	2, 5486, 5487, 3, 2, 2, 2, 5487, 5489, 3, 2, 2, 2, 5488, 5486, 3, 2, 2, 
	2, 5489, 5490, 7, 605, 2, 2, 5490, 5492, 7, 601, 2, 2, 5491, 5479, 3, 2, 
	2, 2, 5491, 5486, 3, 2, 2, 2, 5492, 539, 3, 2, 2, 2, 5493, 5494, 7, 605, 
	2, 2, 5494, 5509, 5, 560, 281, 2, 5495, 5496, 7, 609, 2, 2, 5496, 5497, 
	5, 588, 295, 2, 5497, 5498, 7, 610, 2, 2, 5498, 5509, 3, 2, 2, 2, 5499, 
	5501, 7, 609, 2, 2, 5500, 5502, 5, 588, 295, 2, 5501, 5500, 3, 2, 2, 2, 
	5501, 5502, 3, 2, 2, 2, 5502, 5503, 3, 2, 2, 2, 5503, 5505, 7, 589, 2, 
	2, 5504, 5506, 5, 588, 295, 2, 5505, 5504, 3, 2, 2, 2, 5505, 5506, 3, 2, 
	2, 2, 5506, 5507, 3, 2, 2, 2, 5507, 5509, 7, 610, 2, 2, 5508, 5493, 3, 
	2, 2, 2, 5508, 5495, 3, 2, 2, 2, 5508, 5499, 3, 2, 2, 2, 5509, 541, 3, 
	2, 2, 2, 5510, 5512, 7, 55, 2, 2, 5511, 5513, 5, 422, 212, 2, 5512, 5511, 
	3, 2, 2, 2, 5512, 5513, 3, 2, 2, 2, 5513, 5514, 3, 2, 2, 2, 5514, 5521, 
	5, 556, 279, 2, 5515, 5517, 7, 451, 2, 2, 5516, 5515, 3, 2, 2, 2, 5516, 
	5517, 3, 2, 2, 2, 5517, 5518, 3, 2, 2, 2, 5518, 5519, 7, 597, 2, 2, 5519, 
	5520, 7, 93, 2, 2, 5520, 5522, 7, 598, 2, 2, 5521, 5516, 3, 2, 2, 2, 5521, 
	5522, 3, 2, 2, 2, 5522, 543, 3, 2, 2, 2, 5523, 5525, 9, 35, 2, 2, 5524, 
	5526, 5, 422, 212, 2, 5525, 5524, 3, 2, 2, 2, 5525, 5526, 3, 2, 2, 2, 5526, 
	5527, 3, 2, 2, 2, 5527, 5529, 5, 646, 324, 2, 5528, 5530, 5, 336, 169, 
	2, 5529, 5528, 3, 2, 2, 2, 5529, 5530, 3, 2, 2, 2, 5530, 5532, 3, 2, 2, 
	2, 5531, 5533, 5, 530, 266, 2, 5532, 5531, 3, 2, 2, 2, 5532, 5533, 3, 2, 
	2, 2, 5533, 545, 3, 2, 2, 2, 5534, 5536, 7, 268, 2, 2, 5535, 5537, 5, 422, 
	212, 2, 5536, 5535, 3, 2, 2, 2, 5536, 5537, 3, 2, 2, 2, 5537, 5538, 3, 
	2, 2, 2, 5538, 5539, 5, 556, 279, 2, 5539, 5540, 7, 426, 2, 2, 5540, 5542, 
	5, 646, 324, 2, 5541, 5543, 5, 530, 266, 2, 5542, 5541, 3, 2, 2, 2, 5542, 
	5543, 3, 2, 2, 2, 5543, 547, 3, 2, 2, 2, 5544, 5546, 7, 223, 2, 2, 5545, 
	5547, 5, 422, 212, 2, 5546, 5545, 3, 2, 2, 2, 5546, 5547, 3, 2, 2, 2, 5547, 
	5548, 3, 2, 2, 2, 5548, 5549, 5, 556, 279, 2, 5549, 5550, 7, 426, 2, 2, 
	5550, 5552, 5, 646, 324, 2, 5551, 5553, 5, 530, 266, 2, 5552, 5551, 3, 
	2, 2, 2, 5552, 5553, 3, 2, 2, 2, 5553, 549, 3, 2, 2, 2, 5554, 5555, 7, 
	5, 2, 2, 5555, 5596, 7, 143, 2, 2, 5556, 5596, 7, 355, 2, 2, 5557, 5596, 
	7, 46, 2, 2, 5558, 5596, 7, 71, 2, 2, 5559, 5560, 7, 80, 2, 2, 5560, 5596, 
	7, 268, 2, 2, 5561, 5596, 7, 87, 2, 2, 5562, 5596, 7, 412, 2, 2, 5563, 
	5565, 7, 409, 2, 2, 5564, 5563, 3, 2, 2, 2, 5564, 5565, 3, 2, 2, 2, 5565, 
	5566, 3, 2, 2, 2, 5566, 5596, 7, 438, 2, 2, 5567, 5568, 7, 409, 2, 2, 5568, 
	5569, 7, 54, 2, 2, 5569, 5596, 7, 296, 2, 2, 5570, 5572, 7, 114, 2, 2, 
	5571, 5573, 7, 356, 2, 2, 5572, 5571, 3, 2, 2, 2, 5572, 5573, 3, 2, 2, 
	2, 5573, 5596, 3, 2, 2, 2, 5574, 5576, 7, 141, 2, 2, 5575, 5574, 3, 2, 
	2, 2, 5575, 5576, 3, 2, 2, 2, 5576, 5577, 3, 2, 2, 2, 5577, 5596, 7, 289, 
	2, 2, 5578, 5580, 7, 191, 2, 2, 5579, 5578, 3, 2, 2, 2, 5579, 5580, 3, 
	2, 2, 2, 5580, 5581, 3, 2, 2, 2, 5581, 5596, 7, 127, 2, 2, 5582, 5596, 
	7, 195, 2, 2, 5583, 5596, 7, 217, 2, 2, 5584, 5596, 7, 225, 2, 2, 5585, 
	5596, 7, 231, 2, 2, 5586, 5596, 7, 234, 2, 2, 5587, 5596, 7, 248, 2, 2, 
	5588, 5596, 7, 255, 2, 2, 5589, 5596, 7, 260, 2, 2, 5590, 5596, 7, 271, 
	2, 2, 5591, 5592, 7, 264, 2, 2, 5592, 5593, 7, 228, 2, 2, 5593, 5596, 9, 
	31, 2, 2, 5594, 5596, 7, 445, 2, 2, 5595, 5554, 3, 2, 2, 2, 5595, 5556, 
	3, 2, 2, 2, 5595, 5557, 3, 2, 2, 2, 5595, 5558, 3, 2, 2, 2, 5595, 5559, 
	3, 2, 2, 2, 5595, 5561, 3, 2, 2, 2, 5595, 5562, 3, 2, 2, 2, 5595, 5564, 
	3, 2, 2, 2, 5595, 5567, 3, 2, 2, 2, 5595, 5570, 3, 2, 2, 2, 5595, 5575, 
	3, 2, 2, 2, 5595, 5579, 3, 2, 2, 2, 5595, 5582, 3, 2, 2, 2, 5595, 5583, 
	3, 2, 2, 2, 5595, 5584, 3, 2, 2, 2, 5595, 5585, 3, 2, 2, 2, 5595, 5586, 
	3, 2, 2, 2, 5595, 5587, 3, 2, 2, 2, 5595, 5588, 3, 2, 2, 2, 5595, 5589, 
	3, 2, 2, 2, 5595, 5590, 3, 2, 2, 2, 5595, 5591, 3, 2, 2, 2, 5595, 5594, 
	3, 2, 2, 2, 5596, 5597, 3, 2, 2, 2, 5597, 5598, 5, 552, 277, 2, 5598, 551, 
	3, 2, 2, 2, 5599, 5601, 5, 422, 212, 2, 5600, 5599, 3, 2, 2, 2, 5600, 5601, 
	3, 2, 2, 2, 5601, 5602, 3, 2, 2, 2, 5602, 5604, 5, 498, 250, 2, 5603, 5605, 
	5, 530, 266, 2, 5604, 5603, 3, 2, 2, 2, 5604, 5605, 3, 2, 2, 2, 5605, 553, 
	3, 2, 2, 2, 5606, 5610, 7, 623, 2, 2, 5607, 5610, 7, 624, 2, 2, 5608, 5610, 
	5, 570, 286, 2, 5609, 5606, 3, 2, 2, 2, 5609, 5607, 3, 2, 2, 2, 5609, 5608, 
	3, 2, 2, 2, 5610, 555, 3, 2, 2, 2, 5611, 5615, 5, 554, 278, 2, 5612, 5615, 
	5, 562, 282, 2, 5613, 5615, 5, 564, 283, 2, 5614, 5611, 3, 2, 2, 2, 5614, 
	5612, 3, 2, 2, 2, 5614, 5613, 3, 2, 2, 2, 5615, 557, 3, 2, 2, 2, 5616, 
	5620, 5, 554, 278, 2, 5617, 5620, 5, 562, 282, 2, 5618, 5620, 5, 566, 284, 
	2, 5619, 5616, 3, 2, 2, 2, 5619, 5617, 3, 2, 2, 2, 5619, 5618, 3, 2, 2, 
	2, 5620, 559, 3, 2, 2, 2, 5621, 5627, 5, 554, 278, 2, 5622, 5627, 5, 568, 
	285, 2, 5623, 5627, 5, 562, 282, 2, 5624, 5627, 5, 566, 284, 2, 5625, 5627, 
	5, 564, 283, 2, 5626, 5621, 3, 2, 2, 2, 5626, 5622, 3, 2, 2, 2, 5626, 5623, 
	3, 2, 2, 2, 5626, 5624, 3, 2, 2, 2, 5626, 5625, 3, 2, 2, 2, 5627, 561, 
	3, 2, 2, 2, 5628, 5629, 9, 75, 2, 2, 5629, 563, 3, 2, 2, 2, 5630, 5631, 
	9, 76, 2, 2, 5631, 565, 3, 2, 2, 2, 5632, 5633, 9, 77, 2, 2, 5633, 567, 
	3, 2, 2, 2, 5634, 5635, 9, 78, 2, 2, 5635, 569, 3, 2, 2, 2, 5636, 5637, 
	9, 79, 2, 2, 5637, 571, 3, 2, 2, 2, 5638, 5644, 5, 558, 280, 2, 5639, 5640, 
	5, 556, 279, 2, 5640, 5641, 7, 605, 2, 2, 5641, 5642, 5, 558, 280, 2, 5642, 
	5644, 3, 2, 2, 2, 5643, 5638, 3, 2, 2, 2, 5643, 5639, 3, 2, 2, 2, 5644, 
	573, 3, 2, 2, 2, 5645, 5650, 5, 576, 289, 2, 5646, 5647, 7, 591, 2, 2, 
	5647, 5649, 5, 576, 289, 2, 5648, 5646, 3, 2, 2, 2, 5649, 5652, 3, 2, 2, 
	2, 5650, 5648, 3, 2, 2, 2, 5650, 5651, 3, 2, 2, 2, 5651, 575, 3, 2, 2, 
	2, 5652, 5650, 3, 2, 2, 2, 5653, 5655, 7, 333, 2, 2, 5654, 5653, 3, 2, 
	2, 2, 5654, 5655, 3, 2, 2, 2, 5655, 5656, 3, 2, 2, 2, 5656, 5666, 5, 580, 
	291, 2, 5657, 5659, 7, 380, 2, 2, 5658, 5660, 5, 578, 290, 2, 5659, 5658, 
	3, 2, 2, 2, 5659, 5660, 3, 2, 2, 2, 5660, 5667, 3, 2, 2, 2, 5661, 5663, 
	5, 578, 290, 2, 5662, 5661, 3, 2, 2, 2, 5663, 5664, 3, 2, 2, 2, 5664, 5662, 
	3, 2, 2, 2, 5664, 5665, 3, 2, 2, 2, 5665, 5667, 3, 2, 2, 2, 5666, 5657, 
	3, 2, 2, 2, 5666, 5662, 3, 2, 2, 2, 5666, 5667, 3, 2, 2, 2, 5667, 577, 
	3, 2, 2, 2, 5668, 5670, 7, 609, 2, 2, 5669, 5671, 7, 620, 2, 2, 5670, 5669, 
	3, 2, 2, 2, 5670, 5671, 3, 2, 2, 2, 5671, 5672, 3, 2, 2, 2, 5672, 5673, 
	7, 610, 2, 2, 5673, 579, 3, 2, 2, 2, 5674, 5766, 7, 303, 2, 2, 5675, 5677, 
	7, 304, 2, 2, 5676, 5678, 7, 287, 2, 2, 5677, 5676, 3, 2, 2, 2, 5677, 5678, 
	3, 2, 2, 2, 5678, 5680, 3, 2, 2, 2, 5679, 5681, 5, 584, 293, 2, 5680, 5679, 
	3, 2, 2, 2, 5680, 5681, 3, 2, 2, 2, 5681, 5766, 3, 2, 2, 2, 5682, 5766, 
	7, 305, 2, 2, 5683, 5685, 7, 309, 2, 2, 5684, 5686, 5, 586, 294, 2, 5685, 
	5684, 3, 2, 2, 2, 5685, 5686, 3, 2, 2, 2, 5686, 5766, 3, 2, 2, 2, 5687, 
	5689, 7, 310, 2, 2, 5688, 5690, 5, 586, 294, 2, 5689, 5688, 3, 2, 2, 2, 
	5689, 5690, 3, 2, 2, 2, 5690, 5766, 3, 2, 2, 2, 5691, 5692, 7, 72, 2, 2, 
	5692, 5766, 7, 330, 2, 2, 5693, 5695, 7, 313, 2, 2, 5694, 5696, 5, 586, 
	294, 2, 5695, 5694, 3, 2, 2, 2, 5695, 5696, 3, 2, 2, 2, 5696, 5766, 3, 
	2, 2, 2, 5697, 5766, 7, 317, 2, 2, 5698, 5766, 7, 318, 2, 2, 5699, 5701, 
	7, 319, 2, 2, 5700, 5702, 5, 582, 292, 2, 5701, 5700, 3, 2, 2, 2, 5701, 
	5702, 3, 2, 2, 2, 5702, 5704, 3, 2, 2, 2, 5703, 5705, 5, 584, 293, 2, 5704, 
	5703, 3, 2, 2, 2, 5704, 5705, 3, 2, 2, 2, 5705, 5766, 3, 2, 2, 2, 5706, 
	5708, 7, 321, 2, 2, 5707, 5706, 3, 2, 2, 2, 5707, 5708, 3, 2, 2, 2, 5708, 
	5709, 3, 2, 2, 2, 5709, 5711, 9, 80, 2, 2, 5710, 5712, 7, 287, 2, 2, 5711, 
	5710, 3, 2, 2, 2, 5711, 5712, 3, 2, 2, 2, 5712, 5714, 3, 2, 2, 2, 5713, 
	5715, 5, 584, 293, 2, 5714, 5713, 3, 2, 2, 2, 5714, 5715, 3, 2, 2, 2, 5715, 
	5766, 3, 2, 2, 2, 5716, 5718, 7, 322, 2, 2, 5717, 5719, 7, 287, 2, 2, 5718, 
	5717, 3, 2, 2, 2, 5718, 5719, 3, 2, 2, 2, 5719, 5721, 3, 2, 2, 2, 5720, 
	5722, 5, 584, 293, 2, 5721, 5720, 3, 2, 2, 2, 5721, 5722, 3, 2, 2, 2, 5722, 
	5766, 3, 2, 2, 2, 5723, 5725, 7, 326, 2, 2, 5724, 5726, 5, 586, 294, 2, 
	5725, 5724, 3, 2, 2, 2, 5725, 5726, 3, 2, 2, 2, 5726, 5766, 3, 2, 2, 2, 
	5727, 5766, 7, 331, 2, 2, 5728, 5766, 7, 334, 2, 2, 5729, 5731, 7, 336, 
	2, 2, 5730, 5732, 5, 584, 293, 2, 5731, 5730, 3, 2, 2, 2, 5731, 5732, 3, 
	2, 2, 2, 5732, 5736, 3, 2, 2, 2, 5733, 5734, 9, 10, 2, 2, 5734, 5735, 7, 
	336, 2, 2, 5735, 5737, 7, 301, 2, 2, 5736, 5733, 3, 2, 2, 2, 5736, 5737, 
	3, 2, 2, 2, 5737, 5766, 3, 2, 2, 2, 5738, 5740, 7, 337, 2, 2, 5739, 5741, 
	5, 584, 293, 2, 5740, 5739, 3, 2, 2, 2, 5740, 5741, 3, 2, 2, 2, 5741, 5745, 
	3, 2, 2, 2, 5742, 5743, 9, 10, 2, 2, 5743, 5744, 7, 336, 2, 2, 5744, 5746, 
	7, 301, 2, 2, 5745, 5742, 3, 2, 2, 2, 5745, 5746, 3, 2, 2, 2, 5746, 5766, 
	3, 2, 2, 2, 5747, 5749, 7, 341, 2, 2, 5748, 5750, 5, 584, 293, 2, 5749, 
	5748, 3, 2, 2, 2, 5749, 5750, 3, 2, 2, 2, 5750, 5766, 3, 2, 2, 2, 5751, 
	5763, 5, 572, 287, 2, 5752, 5753, 7, 597, 2, 2, 5753, 5758, 5, 588, 295, 
	2, 5754, 5755, 7, 591, 2, 2, 5755, 5757, 5, 588, 295, 2, 5756, 5754, 3, 
	2, 2, 2, 5757, 5760, 3, 2, 2, 2, 5758, 5756, 3, 2, 2, 2, 5758, 5759, 3, 
	2, 2, 2, 5759, 5761, 3, 2, 2, 2, 5760, 5758, 3, 2, 2, 2, 5761, 5762, 7, 
	598, 2, 2, 5762, 5764, 3, 2, 2, 2, 5763, 5752, 3, 2, 2, 2, 5763, 5764, 
	3, 2, 2, 2, 5764, 5766, 3, 2, 2, 2, 5765, 5674, 3, 2, 2, 2, 5765, 5675, 
	3, 2, 2, 2, 5765, 5682, 3, 2, 2, 2, 5765, 5683, 3, 2, 2, 2, 5765, 5687, 
	3, 2, 2, 2, 5765, 5691, 3, 2, 2, 2, 5765, 5693, 3, 2, 2, 2, 5765, 5697, 
	3, 2, 2, 2, 5765, 5698, 3, 2, 2, 2, 5765, 5699, 3, 2, 2, 2, 5765, 5707, 
	3, 2, 2, 2, 5765, 5716, 3, 2, 2, 2, 5765, 5723, 3, 2, 2, 2, 5765, 5727, 
	3, 2, 2, 2, 5765, 5728, 3, 2, 2, 2, 5765, 5729, 3, 2, 2, 2, 5765, 5738, 
	3, 2, 2, 2, 5765, 5747, 3, 2, 2, 2, 5765, 5751, 3, 2, 2, 2, 5766, 581, 
	3, 2, 2, 2, 5767, 5795, 7, 299, 2, 2, 5768, 5795, 7, 147, 2, 2, 5769, 5795, 
	7, 56, 2, 2, 5770, 5795, 7, 104, 2, 2, 5771, 5795, 7, 144, 2, 2, 5772, 
	5795, 7, 229, 2, 2, 5773, 5774, 7, 299, 2, 2, 5774, 5775, 7, 440, 2, 2, 
	5775, 5795, 7, 147, 2, 2, 5776, 5777, 7, 56, 2, 2, 5777, 5778, 7, 440, 
	2, 2, 5778, 5795, 7, 104, 2, 2, 5779, 5780, 7, 56, 2, 2, 5780, 5781, 7, 
	440, 2, 2, 5781, 5795, 7, 144, 2, 2, 5782, 5783, 7, 56, 2, 2, 5783, 5784, 
	7, 440, 2, 2, 5784, 5795, 7, 229, 2, 2, 5785, 5786, 7, 104, 2, 2, 5786, 
	5787, 7, 440, 2, 2, 5787, 5795, 7, 144, 2, 2, 5788, 5789, 7, 104, 2, 2, 
	5789, 5790, 7, 440, 2, 2, 5790, 5795, 7, 229, 2, 2, 5791, 5792, 7, 144, 
	2, 2, 5792, 5793, 7, 440, 2, 2, 5793, 5795, 7, 229, 2, 2, 5794, 5767, 3, 
	2, 2, 2, 5794, 5768, 3, 2, 2, 2, 5794, 5769, 3, 2, 2, 2, 5794, 5770, 3, 
	2, 2, 2, 5794, 5771, 3, 2, 2, 2, 5794, 5772, 3, 2, 2, 2, 5794, 5773, 3, 
	2, 2, 2, 5794, 5776, 3, 2, 2, 2, 5794, 5779, 3, 2, 2, 2, 5794, 5782, 3, 
	2, 2, 2, 5794, 5785, 3, 2, 2, 2, 5794, 5788, 3, 2, 2, 2, 5794, 5791, 3, 
	2, 2, 2, 5795, 583, 3, 2, 2, 2, 5796, 5797, 7, 597, 2, 2, 5797, 5798, 7, 
	620, 2, 2, 5798, 5799, 7, 598, 2, 2, 5799, 585, 3, 2, 2, 2, 5800, 5801, 
	7, 597, 2, 2, 5801, 5804, 7, 620, 2, 2, 5802, 5803, 7, 591, 2, 2, 5803, 
	5805, 7, 620, 2, 2, 5804, 5802, 3, 2, 2, 2, 5804, 5805, 3, 2, 2, 2, 5805, 
	5806, 3, 2, 2, 2, 5806, 5807, 7, 598, 2, 2, 5807, 587, 3, 2, 2, 2, 5808, 
	5809, 8, 295, 1, 2, 5809, 5810, 7, 597, 2, 2, 5810, 5811, 5, 588, 295, 
	2, 5811, 5813, 7, 598, 2, 2, 5812, 5814, 5, 538, 270, 2, 5813, 5812, 3, 
	2, 2, 2, 5813, 5814, 3, 2, 2, 2, 5814, 5834, 3, 2, 2, 2, 5815, 5816, 7, 
	597, 2, 2, 5816, 5819, 5, 588, 295, 2, 5817, 5818, 7, 591, 2, 2, 5818, 
	5820, 5, 588, 295, 2, 5819, 5817, 3, 2, 2, 2, 5820, 5821, 3, 2, 2, 2, 5821, 
	5819, 3, 2, 2, 2, 5821, 5822, 3, 2, 2, 2, 5822, 5823, 3, 2, 2, 2, 5823, 
	5824, 7, 598, 2, 2, 5824, 5834, 3, 2, 2, 2, 5825, 5826, 9, 56, 2, 2, 5826, 
	5834, 5, 588, 295, 26, 5827, 5828, 5, 592, 297, 2, 5828, 5829, 5, 588, 
	295, 20, 5829, 5834, 3, 2, 2, 2, 5830, 5831, 7, 423, 2, 2, 5831, 5834, 
	5, 588, 295, 6, 5832, 5834, 5, 598, 300, 2, 5833, 5808, 3, 2, 2, 2, 5833, 
	5815, 3, 2, 2, 2, 5833, 5825, 3, 2, 2, 2, 5833, 5827, 3, 2, 2, 2, 5833, 
	5830, 3, 2, 2, 2, 5833, 5832, 3, 2, 2, 2, 5834, 5970, 3, 2, 2, 2, 5835, 
	5836, 12, 25, 2, 2, 5836, 5837, 7, 16, 2, 2, 5837, 5838, 7, 336, 2, 2, 
	5838, 5839, 7, 301, 2, 2, 5839, 5969, 5, 588, 295, 26, 5840, 5841, 12, 
	24, 2, 2, 5841, 5842, 7, 604, 2, 2, 5842, 5969, 5, 588, 295, 25, 5843, 
	5844, 12, 23, 2, 2, 5844, 5845, 9, 81, 2, 2, 5845, 5969, 5, 588, 295, 24, 
	5846, 5847, 12, 22, 2, 2, 5847, 5848, 9, 56, 2, 2, 5848, 5969, 5, 588, 
	295, 23, 5849, 5850, 12, 21, 2, 2, 5850, 5851, 5, 592, 297, 2, 5851, 5852, 
	5, 588, 295, 22, 5852, 5969, 3, 2, 2, 2, 5853, 5855, 12, 17, 2, 2, 5854, 
	5856, 7, 423, 2, 2, 5855, 5854, 3, 2, 2, 2, 5855, 5856, 3, 2, 2, 2, 5856, 
	5857, 3, 2, 2, 2, 5857, 5859, 7, 302, 2, 2, 5858, 5860, 9, 82, 2, 2, 5859, 
	5858, 3, 2, 2, 2, 5859, 5860, 3, 2, 2, 2, 5860, 5861, 3, 2, 2, 2, 5861, 
	5862, 5, 590, 296, 2, 5862, 5863, 7, 378, 2, 2, 5863, 5864, 5, 588, 295, 
	18, 5864, 5969, 3, 2, 2, 2, 5865, 5867, 12, 16, 2, 2, 5866, 5868, 7, 423, 
	2, 2, 5867, 5866, 3, 2, 2, 2, 5867, 5868, 3, 2, 2, 2, 5868, 5873, 3, 2, 
	2, 2, 5869, 5874, 7, 367, 2, 2, 5870, 5874, 7, 361, 2, 2, 5871, 5872, 7, 
	373, 2, 2, 5872, 5874, 7, 440, 2, 2, 5873, 5869, 3, 2, 2, 2, 5873, 5870, 
	3, 2, 2, 2, 5873, 5871, 3, 2, 2, 2, 5874, 5875, 3, 2, 2, 2, 5875, 5969, 
	5, 588, 295, 17, 5876, 5878, 12, 15, 2, 2, 5877, 5879, 7, 423, 2, 2, 5878, 
	5877, 3, 2, 2, 2, 5878, 5879, 3, 2, 2, 2, 5879, 5884, 3, 2, 2, 2, 5880, 
	5885, 7, 367, 2, 2, 5881, 5885, 7, 361, 2, 2, 5882, 5883, 7, 373, 2, 2, 
	5883, 5885, 7, 440, 2, 2, 5884, 5880, 3, 2, 2, 2, 5884, 5881, 3, 2, 2, 
	2, 5884, 5882, 3, 2, 2, 2, 5885, 5886, 3, 2, 2, 2, 5886, 5887, 5, 588, 
	295, 2, 5887, 5888, 7, 79, 2, 2, 5888, 5889, 5, 588, 295, 16, 5889, 5969, 
	3, 2, 2, 2, 5890, 5891, 12, 14, 2, 2, 5891, 5892, 9, 83, 2, 2, 5892, 5969, 
	5, 588, 295, 15, 5893, 5894, 12, 12, 2, 2, 5894, 5896, 7, 363, 2, 2, 5895, 
	5897, 7, 423, 2, 2, 5896, 5895, 3, 2, 2, 2, 5896, 5897, 3, 2, 2, 2, 5897, 
	5898, 3, 2, 2, 2, 5898, 5899, 7, 401, 2, 2, 5899, 5900, 7, 410, 2, 2, 5900, 
	5969, 5, 588, 295, 13, 5901, 5902, 12, 5, 2, 2, 5902, 5903, 7, 378, 2, 
	2, 5903, 5969, 5, 588, 295, 6, 5904, 5905, 12, 4, 2, 2, 5905, 5906, 7, 
	428, 2, 2, 5906, 5969, 5, 588, 295, 5, 5907, 5908, 12, 30, 2, 2, 5908, 
	5909, 7, 587, 2, 2, 5909, 5969, 5, 576, 289, 2, 5910, 5911, 12, 27, 2, 
	2, 5911, 5969, 5, 532, 267, 2, 5912, 5913, 12, 19, 2, 2, 5913, 5969, 5, 
	592, 297, 2, 5914, 5916, 12, 18, 2, 2, 5915, 5917, 7, 423, 2, 2, 5916, 
	5915, 3, 2, 2, 2, 5916, 5917, 3, 2, 2, 2, 5917, 5918, 3, 2, 2, 2, 5918, 
	5919, 7, 414, 2, 2, 5919, 5929, 7, 597, 2, 2, 5920, 5930, 5, 656, 329, 
	2, 5921, 5926, 5, 588, 295, 2, 5922, 5923, 7, 591, 2, 2, 5923, 5925, 5, 
	588, 295, 2, 5924, 5922, 3, 2, 2, 2, 5925, 5928, 3, 2, 2, 2, 5926, 5924, 
	3, 2, 2, 2, 5926, 5927, 3, 2, 2, 2, 5927, 5930, 3, 2, 2, 2, 5928, 5926, 
	3, 2, 2, 2, 5929, 5920, 3, 2, 2, 2, 5929, 5921, 3, 2, 2, 2, 5930, 5931, 
	3, 2, 2, 2, 5931, 5932, 7, 598, 2, 2, 5932, 5969, 3, 2, 2, 2, 5933, 5934, 
	12, 13, 2, 2, 5934, 5936, 7, 363, 2, 2, 5935, 5937, 7, 423, 2, 2, 5936, 
	5935, 3, 2, 2, 2, 5936, 5937, 3, 2, 2, 2, 5937, 5940, 3, 2, 2, 2, 5938, 
	5941, 5, 604, 303, 2, 5939, 5941, 7, 424, 2, 2, 5940, 5938, 3, 2, 2, 2, 
	5940, 5939, 3, 2, 2, 2, 5941, 5969, 3, 2, 2, 2, 5942, 5943, 12, 11, 2, 
	2, 5943, 5945, 7, 363, 2, 2, 5944, 5946, 7, 423, 2, 2, 5945, 5944, 3, 2, 
	2, 2, 5945, 5946, 3, 2, 2, 2, 5946, 5947, 3, 2, 2, 2, 5947, 5969, 7, 70, 
	2, 2, 5948, 5949, 12, 10, 2, 2, 5949, 5951, 7, 363, 2, 2, 5950, 5952, 7, 
	423, 2, 2, 5951, 5950, 3, 2, 2, 2, 5951, 5952, 3, 2, 2, 2, 5952, 5953, 
	3, 2, 2, 2, 5953, 5969, 7, 277, 2, 2, 5954, 5955, 12, 9, 2, 2, 5955, 5957, 
	7, 363, 2, 2, 5956, 5958, 7, 423, 2, 2, 5957, 5956, 3, 2, 2, 2, 5957, 5958, 
	3, 2, 2, 2, 5958, 5959, 3, 2, 2, 2, 5959, 5960, 7, 164, 2, 2, 5960, 5961, 
	7, 597, 2, 2, 5961, 5962, 5, 574, 288, 2, 5962, 5963, 7, 598, 2, 2, 5963, 
	5969, 3, 2, 2, 2, 5964, 5965, 12, 8, 2, 2, 5965, 5969, 7, 364, 2, 2, 5966, 
	5967, 12, 7, 2, 2, 5967, 5969, 7, 369, 2, 2, 5968, 5835, 3, 2, 2, 2, 5968, 
	5840, 3, 2, 2, 2, 5968, 5843, 3, 2, 2, 2, 5968, 5846, 3, 2, 2, 2, 5968, 
	5849, 3, 2, 2, 2, 5968, 5853, 3, 2, 2, 2, 5968, 5865, 3, 2, 2, 2, 5968, 
	5876, 3, 2, 2, 2, 5968, 5890, 3, 2, 2, 2, 5968, 5893, 3, 2, 2, 2, 5968, 
	5901, 3, 2, 2, 2, 5968, 5904, 3, 2, 2, 2, 5968, 5907, 3, 2, 2, 2, 5968, 
	5910, 3, 2, 2, 2, 5968, 5912, 3, 2, 2, 2, 5968, 5914, 3, 2, 2, 2, 5968, 
	5933, 3, 2, 2, 2, 5968, 5942, 3, 2, 2, 2, 5968, 5948, 3, 2, 2, 2, 5968, 
	5954, 3, 2, 2, 2, 5968, 5964, 3, 2, 2, 2, 5968, 5966, 3, 2, 2, 2, 5969, 
	5972, 3, 2, 2, 2, 5970, 5968, 3, 2, 2, 2, 5970, 5971, 3, 2, 2, 2, 5971, 
	589, 3, 2, 2, 2, 5972, 5970, 3, 2, 2, 2, 5973, 5974, 8, 296, 1, 2, 5974, 
	5975, 7, 597, 2, 2, 5975, 5976, 5, 588, 295, 2, 5976, 5978, 7, 598, 2, 
	2, 5977, 5979, 5, 538, 270, 2, 5978, 5977, 3, 2, 2, 2, 5978, 5979, 3, 2, 
	2, 2, 5979, 5997, 3, 2, 2, 2, 5980, 5981, 7, 597, 2, 2, 5981, 5984, 5, 
	588, 295, 2, 5982, 5983, 7, 591, 2, 2, 5983, 5985, 5, 588, 295, 2, 5984, 
	5982, 3, 2, 2, 2, 5985, 5986, 3, 2, 2, 2, 5986, 5984, 3, 2, 2, 2, 5986, 
	5987, 3, 2, 2, 2, 5987, 5988, 3, 2, 2, 2, 5988, 5989, 7, 598, 2, 2, 5989, 
	5997, 3, 2, 2, 2, 5990, 5991, 9, 56, 2, 2, 5991, 5997, 5, 590, 296, 15, 
	5992, 5993, 5, 592, 297, 2, 5993, 5994, 5, 590, 296, 10, 5994, 5997, 3, 
	2, 2, 2, 5995, 5997, 5, 598, 300, 2, 5996, 5973, 3, 2, 2, 2, 5996, 5980, 
	3, 2, 2, 2, 5996, 5990, 3, 2, 2, 2, 5996, 5992, 3, 2, 2, 2, 5996, 5995, 
	3, 2, 2, 2, 5997, 6051, 3, 2, 2, 2, 5998, 5999, 12, 14, 2, 2, 5999, 6000, 
	7, 604, 2, 2, 6000, 6050, 5, 590, 296, 15, 6001, 6002, 12, 13, 2, 2, 6002, 
	6003, 9, 81, 2, 2, 6003, 6050, 5, 590, 296, 14, 6004, 6005, 12, 12, 2, 
	2, 6005, 6006, 9, 56, 2, 2, 6006, 6050, 5, 590, 296, 13, 6007, 6008, 12, 
	11, 2, 2, 6008, 6009, 5, 592, 297, 2, 6009, 6010, 5, 590, 296, 12, 6010, 
	6050, 3, 2, 2, 2, 6011, 6012, 12, 8, 2, 2, 6012, 6013, 9, 83, 2, 2, 6013, 
	6050, 5, 590, 296, 9, 6014, 6015, 12, 7, 2, 2, 6015, 6017, 7, 363, 2, 2, 
	6016, 6018, 7, 423, 2, 2, 6017, 6016, 3, 2, 2, 2, 6017, 6018, 3, 2, 2, 
	2, 6018, 6019, 3, 2, 2, 2, 6019, 6020, 7, 401, 2, 2, 6020, 6021, 7, 410, 
	2, 2, 6021, 6050, 5, 590, 296, 8, 6022, 6023, 12, 18, 2, 2, 6023, 6024, 
	7, 587, 2, 2, 6024, 6050, 5, 576, 289, 2, 6025, 6026, 12, 9, 2, 2, 6026, 
	6050, 5, 592, 297, 2, 6027, 6028, 12, 6, 2, 2, 6028, 6030, 7, 363, 2, 2, 
	6029, 6031, 7, 423, 2, 2, 6030, 6029, 3, 2, 2, 2, 6030, 6031, 3, 2, 2, 
	2, 6031, 6032, 3, 2, 2, 2, 6032, 6050, 7, 70, 2, 2, 6033, 6034, 12, 5, 
	2, 2, 6034, 6036, 7, 363, 2, 2, 6035, 6037, 7, 423, 2, 2, 6036, 6035, 3, 
	2, 2, 2, 6036, 6037, 3, 2, 2, 2, 6037, 6038, 3, 2, 2, 2, 6038, 6050, 7, 
	277, 2, 2, 6039, 6040, 12, 4, 2, 2, 6040, 6042, 7, 363, 2, 2, 6041, 6043, 
	7, 423, 2, 2, 6042, 6041, 3, 2, 2, 2, 6042, 6043, 3, 2, 2, 2, 6043, 6044, 
	3, 2, 2, 2, 6044, 6045, 7, 164, 2, 2, 6045, 6046, 7, 597, 2, 2, 6046, 6047, 
	5, 574, 288, 2, 6047, 6048, 7, 598, 2, 2, 6048, 6050, 3, 2, 2, 2, 6049, 
	5998, 3, 2, 2, 2, 6049, 6001, 3, 2, 2, 2, 6049, 6004, 3, 2, 2, 2, 6049, 
	6007, 3, 2, 2, 2, 6049, 6011, 3, 2, 2, 2, 6049, 6014, 3, 2, 2, 2, 6049, 
	6022, 3, 2, 2, 2, 6049, 6025, 3, 2, 2, 2, 6049, 6027, 3, 2, 2, 2, 6049, 
	6033, 3, 2, 2, 2, 6049, 6039, 3, 2, 2, 2, 6050, 6053, 3, 2, 2, 2, 6051, 
	6049, 3, 2, 2, 2, 6051, 6052, 3, 2, 2, 2, 6052, 591, 3, 2, 2, 2, 6053, 
	6051, 3, 2, 2, 2, 6054, 6063, 5, 492, 247, 2, 6055, 6056, 7, 168, 2, 2, 
	6056, 6057, 7, 597, 2, 2, 6057, 6058, 5, 556, 279, 2, 6058, 6059, 7, 605, 
	2, 2, 6059, 6060, 5, 490, 246, 2, 6060, 6061, 7, 598, 2, 2, 6061, 6063, 
	3, 2, 2, 2, 6062, 6054, 3, 2, 2, 2, 6062, 6055, 3, 2, 2, 2, 6063, 593, 
	3, 2, 2, 2, 6064, 6073, 5, 490, 246, 2, 6065, 6066, 7, 168, 2, 2, 6066, 
	6067, 7, 597, 2, 2, 6067, 6068, 5, 556, 279, 2, 6068, 6069, 7, 605, 2, 
	2, 6069, 6070, 5, 490, 246, 2, 6070, 6071, 7, 598, 2, 2, 6071, 6073, 3, 
	2, 2, 2, 6072, 6064, 3, 2, 2, 2, 6072, 6065, 3, 2, 2, 2, 6073, 595, 3, 
	2, 2, 2, 6074, 6075, 7, 597, 2, 2, 6075, 6076, 5, 588, 295, 2, 6076, 6077, 
	7, 591, 2, 2, 6077, 6078, 5, 588, 295, 2, 6078, 6079, 7, 598, 2, 2, 6079, 
	6080, 7, 371, 2, 2, 6080, 6081, 7, 597, 2, 2, 6081, 6082, 5, 588, 295, 
	2, 6082, 6083, 7, 591, 2, 2, 6083, 6084, 5, 588, 295, 2, 6084, 6085, 7, 
	598, 2, 2, 6085, 597, 3, 2, 2, 2, 6086, 6105, 5, 600, 301, 2, 6087, 6088, 
	7, 597, 2, 2, 6088, 6089, 5, 656, 329, 2, 6089, 6091, 7, 598, 2, 2, 6090, 
	6092, 5, 538, 270, 2, 6091, 6090, 3, 2, 2, 2, 6091, 6092, 3, 2, 2, 2, 6092, 
	6105, 3, 2, 2, 2, 6093, 6105, 5, 606, 304, 2, 6094, 6105, 7, 424, 2, 2, 
	6095, 6105, 7, 601, 2, 2, 6096, 6105, 5, 630, 316, 2, 6097, 6098, 7, 311, 
	2, 2, 6098, 6105, 5, 650, 326, 2, 6099, 6105, 5, 610, 306, 2, 6100, 6105, 
	5, 534, 268, 2, 6101, 6105, 5, 640, 321, 2, 6102, 6105, 5, 644, 323, 2, 
	6103, 6105, 5, 596, 299, 2, 6104, 6086, 3, 2, 2, 2, 6104, 6087, 3, 2, 2, 
	2, 6104, 6093, 3, 2, 2, 2, 6104, 6094, 3, 2, 2, 2, 6104, 6095, 3, 2, 2, 
	2, 6104, 6096, 3, 2, 2, 2, 6104, 6097, 3, 2, 2, 2, 6104, 6099, 3, 2, 2, 
	2, 6104, 6100, 3, 2, 2, 2, 6104, 6101, 3, 2, 2, 2, 6104, 6102, 3, 2, 2, 
	2, 6104, 6103, 3, 2, 2, 2, 6105, 599, 3, 2, 2, 2, 6106, 6110, 5, 602, 302, 
	2, 6107, 6110, 5, 340, 171, 2, 6108, 6110, 5, 604, 303, 2, 6109, 6106, 
	3, 2, 2, 2, 6109, 6107, 3, 2, 2, 2, 6109, 6108, 3, 2, 2, 2, 6110, 601, 
	3, 2, 2, 2, 6111, 6112, 9, 84, 2, 2, 6112, 603, 3, 2, 2, 2, 6113, 6114, 
	9, 85, 2, 2, 6114, 605, 3, 2, 2, 2, 6115, 6117, 7, 385, 2, 2, 6116, 6118, 
	5, 588, 295, 2, 6117, 6116, 3, 2, 2, 2, 6117, 6118, 3, 2, 2, 2, 6118, 6124, 
	3, 2, 2, 2, 6119, 6120, 7, 448, 2, 2, 6120, 6121, 5, 588, 295, 2, 6121, 
	6122, 7, 439, 2, 2, 6122, 6123, 5, 588, 295, 2, 6123, 6125, 3, 2, 2, 2, 
	6124, 6119, 3, 2, 2, 2, 6125, 6126, 3, 2, 2, 2, 6126, 6124, 3, 2, 2, 2, 
	6126, 6127, 3, 2, 2, 2, 6127, 6130, 3, 2, 2, 2, 6128, 6129, 7, 403, 2, 
	2, 6129, 6131, 5, 588, 295, 2, 6130, 6128, 3, 2, 2, 2, 6130, 6131, 3, 2, 
	2, 2, 6131, 6132, 3, 2, 2, 2, 6132, 6133, 7, 404, 2, 2, 6133, 607, 3, 2, 
	2, 2, 6134, 6135, 9, 86, 2, 2, 6135, 6136, 7, 597, 2, 2, 6136, 6137, 5, 
	588, 295, 2, 6137, 6138, 7, 381, 2, 2, 6138, 6139, 5, 576, 289, 2, 6139, 
	6140, 7, 598, 2, 2, 6140, 609, 3, 2, 2, 2, 6141, 6142, 5, 572, 287, 2, 
	6142, 6157, 7, 597, 2, 2, 6143, 6145, 5, 648, 325, 2, 6144, 6143, 3, 2, 
	2, 2, 6144, 6145, 3, 2, 2, 2, 6145, 6146, 3, 2, 2, 2, 6146, 6151, 5, 612, 
	307, 2, 6147, 6148, 7, 591, 2, 2, 6148, 6150, 5, 612, 307, 2, 6149, 6147, 
	3, 2, 2, 2, 6150, 6153, 3, 2, 2, 2, 6151, 6149, 3, 2, 2, 2, 6151, 6152, 
	3, 2, 2, 2, 6152, 6155, 3, 2, 2, 2, 6153, 6151, 3, 2, 2, 2, 6154, 6156, 
	5, 692, 347, 2, 6155, 6154, 3, 2, 2, 2, 6155, 6156, 3, 2, 2, 2, 6156, 6158, 
	3, 2, 2, 2, 6157, 6144, 3, 2, 2, 2, 6157, 6158, 3, 2, 2, 2, 6158, 6159, 
	3, 2, 2, 2, 6159, 6166, 7, 598, 2, 2, 6160, 6161, 7, 293, 2, 2, 6161, 6162, 
	7, 412, 2, 2, 6162, 6163, 7, 597, 2, 2, 6163, 6164, 5, 692, 347, 2, 6164, 
	6165, 7, 598, 2, 2, 6165, 6167, 3, 2, 2, 2, 6166, 6160, 3, 2, 2, 2, 6166, 
	6167, 3, 2, 2, 2, 6167, 6169, 3, 2, 2, 2, 6168, 6170, 5, 632, 317, 2, 6169, 
	6168, 3, 2, 2, 2, 6169, 6170, 3, 2, 2, 2, 6170, 6176, 3, 2, 2, 2, 6171, 
	6174, 7, 173, 2, 2, 6172, 6175, 5, 556, 279, 2, 6173, 6175, 5, 634, 318, 
	2, 6174, 6172, 3, 2, 2, 2, 6174, 6173, 3, 2, 2, 2, 6175, 6177, 3, 2, 2, 
	2, 6176, 6171, 3, 2, 2, 2, 6176, 6177, 3, 2, 2, 2, 6177, 6185, 3, 2, 2, 
	2, 6178, 6185, 5, 616, 309, 2, 6179, 6185, 5, 618, 310, 2, 6180, 6185, 
	5, 620, 311, 2, 6181, 6185, 5, 622, 312, 2, 6182, 6185, 5, 624, 313, 2, 
	6183, 6185, 5, 626, 314, 2, 6184, 6141, 3, 2, 2, 2, 6184, 6178, 3, 2, 2, 
	2, 6184, 6179, 3, 2, 2, 2, 6184, 6180, 3, 2, 2, 2, 6184, 6181, 3, 2, 2, 
	2, 6184, 6182, 3, 2, 2, 2, 6184, 6183, 3, 2, 2, 2, 6185, 611, 3, 2, 2, 
	2, 6186, 6188, 7, 447, 2, 2, 6187, 6186, 3, 2, 2, 2, 6187, 6188, 3, 2, 
	2, 2, 6188, 6192, 3, 2, 2, 2, 6189, 6190, 5, 556, 279, 2, 6190, 6191, 5, 
	614, 308, 2, 6191, 6193, 3, 2, 2, 2, 6192, 6189, 3, 2, 2, 2, 6192, 6193, 
	3, 2, 2, 2, 6193, 6194, 3, 2, 2, 2, 6194, 6195, 5, 588, 295, 2, 6195, 613, 
	3, 2, 2, 2, 6196, 6197, 9, 87, 2, 2, 6197, 615, 3, 2, 2, 2, 6198, 6199, 
	9, 88, 2, 2, 6199, 6200, 7, 597, 2, 2, 6200, 6205, 5, 588, 295, 2, 6201, 
	6202, 7, 591, 2, 2, 6202, 6204, 5, 588, 295, 2, 6203, 6201, 3, 2, 2, 2, 
	6204, 6207, 3, 2, 2, 2, 6205, 6203, 3, 2, 2, 2, 6205, 6206, 3, 2, 2, 2, 
	6206, 6208, 3, 2, 2, 2, 6207, 6205, 3, 2, 2, 2, 6208, 6209, 7, 598, 2, 
	2, 6209, 6224, 3, 2, 2, 2, 6210, 6211, 7, 332, 2, 2, 6211, 6220, 7, 597, 
	2, 2, 6212, 6217, 5, 588, 295, 2, 6213, 6214, 7, 591, 2, 2, 6214, 6216, 
	5, 588, 295, 2, 6215, 6213, 3, 2, 2, 2, 6216, 6219, 3, 2, 2, 2, 6217, 6215, 
	3, 2, 2, 2, 6217, 6218, 3, 2, 2, 2, 6218, 6221, 3, 2, 2, 2, 6219, 6217, 
	3, 2, 2, 2, 6220, 6212, 3, 2, 2, 2, 6220, 6221, 3, 2, 2, 2, 6221, 6222, 
	3, 2, 2, 2, 6222, 6224, 7, 598, 2, 2, 6223, 6198, 3, 2, 2, 2, 6223, 6210, 
	3, 2, 2, 2, 6224, 617, 3, 2, 2, 2, 6225, 6226, 7, 312, 2, 2, 6226, 6229, 
	7, 597, 2, 2, 6227, 6230, 5, 556, 279, 2, 6228, 6230, 5, 340, 171, 2, 6229, 
	6227, 3, 2, 2, 2, 6229, 6228, 3, 2, 2, 2, 6230, 6231, 3, 2, 2, 2, 6231, 
	6232, 7, 410, 2, 2, 6232, 6233, 5, 588, 295, 2, 6233, 6234, 7, 598, 2, 
	2, 6234, 619, 3, 2, 2, 2, 6235, 6242, 7, 392, 2, 2, 6236, 6242, 7, 358, 
	2, 2, 6237, 6242, 7, 397, 2, 2, 6238, 6242, 7, 435, 2, 2, 6239, 6242, 7, 
	445, 2, 2, 6240, 6242, 5, 608, 305, 2, 6241, 6235, 3, 2, 2, 2, 6241, 6236, 
	3, 2, 2, 2, 6241, 6237, 3, 2, 2, 2, 6241, 6238, 3, 2, 2, 2, 6241, 6239, 
	3, 2, 2, 2, 6241, 6240, 3, 2, 2, 2, 6242, 621, 3, 2, 2, 2, 6243, 6261, 
	7, 393, 2, 2, 6244, 6246, 7, 395, 2, 2, 6245, 6247, 5, 584, 293, 2, 6246, 
	6245, 3, 2, 2, 2, 6246, 6247, 3, 2, 2, 2, 6247, 6261, 3, 2, 2, 2, 6248, 
	6250, 7, 396, 2, 2, 6249, 6251, 5, 584, 293, 2, 6250, 6249, 3, 2, 2, 2, 
	6250, 6251, 3, 2, 2, 2, 6251, 6261, 3, 2, 2, 2, 6252, 6254, 7, 421, 2, 
	2, 6253, 6255, 5, 584, 293, 2, 6254, 6253, 3, 2, 2, 2, 6254, 6255, 3, 2, 
	2, 2, 6255, 6261, 3, 2, 2, 2, 6256, 6258, 7, 422, 2, 2, 6257, 6259, 5, 
	584, 293, 2, 6258, 6257, 3, 2, 2, 2, 6258, 6259, 3, 2, 2, 2, 6259, 6261, 
	3, 2, 2, 2, 6260, 6243, 3, 2, 2, 2, 6260, 6244, 3, 2, 2, 2, 6260, 6248, 
	3, 2, 2, 2, 6260, 6252, 3, 2, 2, 2, 6260, 6256, 3, 2, 2, 2, 6261, 623, 
	3, 2, 2, 2, 6262, 6263, 7, 339, 2, 2, 6263, 6265, 7, 597, 2, 2, 6264, 6266, 
	9, 89, 2, 2, 6265, 6264, 3, 2, 2, 2, 6265, 6266, 3, 2, 2, 2, 6266, 6279, 
	3, 2, 2, 2, 6267, 6268, 5, 588, 295, 2, 6268, 6269, 7, 410, 2, 2, 6269, 
	6270, 5, 588, 295, 2, 6270, 6280, 3, 2, 2, 2, 6271, 6273, 7, 410, 2, 2, 
	6272, 6271, 3, 2, 2, 2, 6272, 6273, 3, 2, 2, 2, 6273, 6274, 3, 2, 2, 2, 
	6274, 6277, 5, 588, 295, 2, 6275, 6276, 7, 591, 2, 2, 6276, 6278, 5, 588, 
	295, 2, 6277, 6275, 3, 2, 2, 2, 6277, 6278, 3, 2, 2, 2, 6278, 6280, 3, 
	2, 2, 2, 6279, 6267, 3, 2, 2, 2, 6279, 6272, 3, 2, 2, 2, 6280, 6281, 3, 
	2, 2, 2, 6281, 6282, 7, 598, 2, 2, 6282, 6330, 3, 2, 2, 2, 6283, 6284, 
	7, 335, 2, 2, 6284, 6285, 7, 597, 2, 2, 6285, 6290, 5, 588, 295, 2, 6286, 
	6287, 7, 591, 2, 2, 6287, 6289, 5, 588, 295, 2, 6288, 6286, 3, 2, 2, 2, 
	6289, 6292, 3, 2, 2, 2, 6290, 6288, 3, 2, 2, 2, 6290, 6291, 3, 2, 2, 2, 
	6291, 6295, 3, 2, 2, 2, 6292, 6290, 3, 2, 2, 2, 6293, 6294, 7, 410, 2, 
	2, 6294, 6296, 5, 588, 295, 2, 6295, 6293, 3, 2, 2, 2, 6295, 6296, 3, 2, 
	2, 2, 6296, 6299, 3, 2, 2, 2, 6297, 6298, 7, 408, 2, 2, 6298, 6300, 5, 
	588, 295, 2, 6299, 6297, 3, 2, 2, 2, 6299, 6300, 3, 2, 2, 2, 6300, 6301, 
	3, 2, 2, 2, 6301, 6302, 7, 598, 2, 2, 6302, 6330, 3, 2, 2, 2, 6303, 6304, 
	7, 329, 2, 2, 6304, 6305, 7, 597, 2, 2, 6305, 6306, 5, 590, 296, 2, 6306, 
	6307, 7, 414, 2, 2, 6307, 6308, 5, 588, 295, 2, 6308, 6309, 7, 598, 2, 
	2, 6309, 6330, 3, 2, 2, 2, 6310, 6311, 7, 328, 2, 2, 6311, 6312, 7, 597, 
	2, 2, 6312, 6313, 5, 588, 295, 2, 6313, 6314, 7, 430, 2, 2, 6314, 6315, 
	5, 588, 295, 2, 6315, 6316, 7, 410, 2, 2, 6316, 6319, 5, 588, 295, 2, 6317, 
	6318, 7, 408, 2, 2, 6318, 6320, 5, 588, 295, 2, 6319, 6317, 3, 2, 2, 2, 
	6319, 6320, 3, 2, 2, 2, 6320, 6321, 3, 2, 2, 2, 6321, 6322, 7, 598, 2, 
	2, 6322, 6330, 3, 2, 2, 2, 6323, 6324, 7, 355, 2, 2, 6324, 6325, 7, 408, 
	2, 2, 6325, 6326, 7, 597, 2, 2, 6326, 6327, 5, 588, 295, 2, 6327, 6328, 
	7, 598, 2, 2, 6328, 6330, 3, 2, 2, 2, 6329, 6262, 3, 2, 2, 2, 6329, 6283, 
	3, 2, 2, 2, 6329, 6303, 3, 2, 2, 2, 6329, 6310, 3, 2, 2, 2, 6329, 6323, 
	3, 2, 2, 2, 6330, 625, 3, 2, 2, 2, 6331, 6332, 7, 344, 2, 2, 6332, 6333, 
	7, 597, 2, 2, 6333, 6334, 7, 149, 2, 2, 6334, 6356, 5, 556, 279, 2, 6335, 
	6336, 7, 591, 2, 2, 6336, 6337, 7, 342, 2, 2, 6337, 6338, 7, 597, 2, 2, 
	6338, 6341, 5, 588, 295, 2, 6339, 6340, 7, 381, 2, 2, 6340, 6342, 5, 556, 
	279, 2, 6341, 6339, 3, 2, 2, 2, 6341, 6342, 3, 2, 2, 2, 6342, 6351, 3, 
	2, 2, 2, 6343, 6344, 7, 591, 2, 2, 6344, 6347, 5, 588, 295, 2, 6345, 6346, 
	7, 381, 2, 2, 6346, 6348, 5, 556, 279, 2, 6347, 6345, 3, 2, 2, 2, 6347, 
	6348, 3, 2, 2, 2, 6348, 6350, 3, 2, 2, 2, 6349, 6343, 3, 2, 2, 2, 6350, 
	6353, 3, 2, 2, 2, 6351, 6349, 3, 2, 2, 2, 6351, 6352, 3, 2, 2, 2, 6352, 
	6354, 3, 2, 2, 2, 6353, 6351, 3, 2, 2, 2, 6354, 6355, 7, 598, 2, 2, 6355, 
	6357, 3, 2, 2, 2, 6356, 6335, 3, 2, 2, 2, 6356, 6357, 3, 2, 2, 2, 6357, 
	6362, 3, 2, 2, 2, 6358, 6359, 7, 591, 2, 2, 6359, 6361, 5, 588, 295, 2, 
	6360, 6358, 3, 2, 2, 2, 6361, 6364, 3, 2, 2, 2, 6362, 6360, 3, 2, 2, 2, 
	6362, 6363, 3, 2, 2, 2, 6363, 6365, 3, 2, 2, 2, 6364, 6362, 3, 2, 2, 2, 
	6365, 6366, 7, 598, 2, 2, 6366, 6493, 3, 2, 2, 2, 6367, 6368, 7, 346, 2, 
	2, 6368, 6369, 7, 597, 2, 2, 6369, 6372, 5, 588, 295, 2, 6370, 6371, 7, 
	381, 2, 2, 6371, 6373, 5, 556, 279, 2, 6372, 6370, 3, 2, 2, 2, 6372, 6373, 
	3, 2, 2, 2, 6373, 6382, 3, 2, 2, 2, 6374, 6375, 7, 591, 2, 2, 6375, 6378, 
	5, 588, 295, 2, 6376, 6377, 7, 381, 2, 2, 6377, 6379, 5, 556, 279, 2, 6378, 
	6376, 3, 2, 2, 2, 6378, 6379, 3, 2, 2, 2, 6379, 6381, 3, 2, 2, 2, 6380, 
	6374, 3, 2, 2, 2, 6381, 6384, 3, 2, 2, 2, 6382, 6380, 3, 2, 2, 2, 6382, 
	6383, 3, 2, 2, 2, 6383, 6385, 3, 2, 2, 2, 6384, 6382, 3, 2, 2, 2, 6385, 
	6386, 7, 598, 2, 2, 6386, 6493, 3, 2, 2, 2, 6387, 6388, 7, 349, 2, 2, 6388, 
	6389, 7, 597, 2, 2, 6389, 6390, 7, 149, 2, 2, 6390, 6393, 5, 556, 279, 
	2, 6391, 6392, 7, 591, 2, 2, 6392, 6394, 5, 588, 295, 2, 6393, 6391, 3, 
	2, 2, 2, 6393, 6394, 3, 2, 2, 2, 6394, 6395, 3, 2, 2, 2, 6395, 6396, 7, 
	598, 2, 2, 6396, 6493, 3, 2, 2, 2, 6397, 6398, 7, 350, 2, 2, 6398, 6399, 
	7, 597, 2, 2, 6399, 6400, 5, 588, 295, 2, 6400, 6401, 7, 591, 2, 2, 6401, 
	6405, 7, 288, 2, 2, 6402, 6406, 5, 588, 295, 2, 6403, 6404, 7, 157, 2, 
	2, 6404, 6406, 7, 286, 2, 2, 6405, 6402, 3, 2, 2, 2, 6405, 6403, 3, 2, 
	2, 2, 6406, 6415, 3, 2, 2, 2, 6407, 6408, 7, 591, 2, 2, 6408, 6413, 7, 
	245, 2, 2, 6409, 6414, 7, 300, 2, 2, 6410, 6414, 7, 157, 2, 2, 6411, 6412, 
	7, 157, 2, 2, 6412, 6414, 7, 286, 2, 2, 6413, 6409, 3, 2, 2, 2, 6413, 6410, 
	3, 2, 2, 2, 6413, 6411, 3, 2, 2, 2, 6414, 6416, 3, 2, 2, 2, 6415, 6407, 
	3, 2, 2, 2, 6415, 6416, 3, 2, 2, 2, 6416, 6417, 3, 2, 2, 2, 6417, 6418, 
	7, 598, 2, 2, 6418, 6493, 3, 2, 2, 2, 6419, 6420, 7, 345, 2, 2, 6420, 6421, 
	7, 597, 2, 2, 6421, 6422, 5, 588, 295, 2, 6422, 6425, 7, 181, 2, 2, 6423, 
	6424, 7, 22, 2, 2, 6424, 6426, 7, 202, 2, 2, 6425, 6423, 3, 2, 2, 2, 6425, 
	6426, 3, 2, 2, 2, 6426, 6427, 3, 2, 2, 2, 6427, 6430, 5, 588, 295, 2, 6428, 
	6429, 7, 22, 2, 2, 6429, 6431, 7, 202, 2, 2, 6430, 6428, 3, 2, 2, 2, 6430, 
	6431, 3, 2, 2, 2, 6431, 6432, 3, 2, 2, 2, 6432, 6433, 7, 598, 2, 2, 6433, 
	6493, 3, 2, 2, 2, 6434, 6435, 7, 348, 2, 2, 6435, 6436, 7, 597, 2, 2, 6436, 
	6437, 9, 42, 2, 2, 6437, 6438, 5, 588, 295, 2, 6438, 6439, 7, 598, 2, 2, 
	6439, 6493, 3, 2, 2, 2, 6440, 6441, 7, 351, 2, 2, 6441, 6442, 7, 597, 2, 
	2, 6442, 6443, 9, 42, 2, 2, 6443, 6444, 5, 588, 295, 2, 6444, 6445, 7, 
	381, 2, 2, 6445, 6446, 5, 576, 289, 2, 6446, 6447, 7, 598, 2, 2, 6447, 
	6493, 3, 2, 2, 2, 6448, 6449, 7, 352, 2, 2, 6449, 6468, 7, 597, 2, 2, 6450, 
	6451, 7, 347, 2, 2, 6451, 6452, 7, 597, 2, 2, 6452, 6453, 5, 588, 295, 
	2, 6453, 6454, 7, 381, 2, 2, 6454, 6462, 5, 556, 279, 2, 6455, 6456, 7, 
	591, 2, 2, 6456, 6457, 5, 588, 295, 2, 6457, 6458, 7, 381, 2, 2, 6458, 
	6459, 5, 556, 279, 2, 6459, 6461, 3, 2, 2, 2, 6460, 6455, 3, 2, 2, 2, 6461, 
	6464, 3, 2, 2, 2, 6462, 6460, 3, 2, 2, 2, 6462, 6463, 3, 2, 2, 2, 6463, 
	6465, 3, 2, 2, 2, 6464, 6462, 3, 2, 2, 2, 6465, 6466, 7, 598, 2, 2, 6466, 
	6467, 7, 591, 2, 2, 6467, 6469, 3, 2, 2, 2, 6468, 6450, 3, 2, 2, 2, 6468, 
	6469, 3, 2, 2, 2, 6469, 6470, 3, 2, 2, 2, 6470, 6471, 5, 588, 295, 2, 6471, 
	6474, 7, 181, 2, 2, 6472, 6473, 7, 22, 2, 2, 6473, 6475, 7, 202, 2, 2, 
	6474, 6472, 3, 2, 2, 2, 6474, 6475, 3, 2, 2, 2, 6475, 6476, 3, 2, 2, 2, 
	6476, 6479, 5, 588, 295, 2, 6477, 6478, 7, 22, 2, 2, 6478, 6480, 7, 202, 
	2, 2, 6479, 6477, 3, 2, 2, 2, 6479, 6480, 3, 2, 2, 2, 6480, 6481, 3, 2, 
	2, 2, 6481, 6482, 7, 35, 2, 2, 6482, 6487, 5, 628, 315, 2, 6483, 6484, 
	7, 591, 2, 2, 6484, 6486, 5, 628, 315, 2, 6485, 6483, 3, 2, 2, 2, 6486, 
	6489, 3, 2, 2, 2, 6487, 6485, 3, 2, 2, 2, 6487, 6488, 3, 2, 2, 2, 6488, 
	6490, 3, 2, 2, 2, 6489, 6487, 3, 2, 2, 2, 6490, 6491, 7, 598, 2, 2, 6491, 
	6493, 3, 2, 2, 2, 6492, 6331, 3, 2, 2, 2, 6492, 6367, 3, 2, 2, 2, 6492, 
	6387, 3, 2, 2, 2, 6492, 6397, 3, 2, 2, 2, 6492, 6419, 3, 2, 2, 2, 6492, 
	6434, 3, 2, 2, 2, 6492, 6440, 3, 2, 2, 2, 6492, 6448, 3, 2, 2, 2, 6493, 
	627, 3, 2, 2, 2, 6494, 6512, 5, 556, 279, 2, 6495, 6498, 5, 576, 289, 2, 
	6496, 6497, 7, 518, 2, 2, 6497, 6499, 5, 588, 295, 2, 6498, 6496, 3, 2, 
	2, 2, 6498, 6499, 3, 2, 2, 2, 6499, 6502, 3, 2, 2, 2, 6500, 6501, 7, 398, 
	2, 2, 6501, 6503, 5, 588, 295, 2, 6502, 6500, 3, 2, 2, 2, 6502, 6503, 3, 
	2, 2, 2, 6503, 6508, 3, 2, 2, 2, 6504, 6506, 7, 423, 2, 2, 6505, 6504, 
	3, 2, 2, 2, 6505, 6506, 3, 2, 2, 2, 6506, 6507, 3, 2, 2, 2, 6507, 6509, 
	7, 424, 2, 2, 6508, 6505, 3, 2, 2, 2, 6508, 6509, 3, 2, 2, 2, 6509, 6513, 
	3, 2, 2, 2, 6510, 6511, 7, 408, 2, 2, 6511, 6513, 7, 171, 2, 2, 6512, 6495, 
	3, 2, 2, 2, 6512, 6510, 3, 2, 2, 2, 6513, 629, 3, 2, 2, 2, 6514, 6515, 
	9, 90, 2, 2, 6515, 6518, 7, 597, 2, 2, 6516, 6519, 5, 588, 295, 2, 6517, 
	6519, 5, 656, 329, 2, 6518, 6516, 3, 2, 2, 2, 6518, 6517, 3, 2, 2, 2, 6519, 
	6520, 3, 2, 2, 2, 6520, 6521, 7, 598, 2, 2, 6521, 631, 3, 2, 2, 2, 6522, 
	6523, 7, 90, 2, 2, 6523, 6524, 7, 597, 2, 2, 6524, 6525, 7, 449, 2, 2, 
	6525, 6526, 5, 588, 295, 2, 6526, 6527, 7, 598, 2, 2, 6527, 633, 3, 2, 
	2, 2, 6528, 6530, 7, 597, 2, 2, 6529, 6531, 5, 556, 279, 2, 6530, 6529, 
	3, 2, 2, 2, 6530, 6531, 3, 2, 2, 2, 6531, 6533, 3, 2, 2, 2, 6532, 6534, 
	5, 528, 265, 2, 6533, 6532, 3, 2, 2, 2, 6533, 6534, 3, 2, 2, 2, 6534, 6536, 
	3, 2, 2, 2, 6535, 6537, 5, 692, 347, 2, 6536, 6535, 3, 2, 2, 2, 6536, 6537, 
	3, 2, 2, 2, 6537, 6539, 3, 2, 2, 2, 6538, 6540, 5, 636, 319, 2, 6539, 6538, 
	3, 2, 2, 2, 6539, 6540, 3, 2, 2, 2, 6540, 6541, 3, 2, 2, 2, 6541, 6542, 
	7, 598, 2, 2, 6542, 635, 3, 2, 2, 2, 6543, 6550, 9, 91, 2, 2, 6544, 6551, 
	5, 638, 320, 2, 6545, 6546, 7, 302, 2, 2, 6546, 6547, 5, 638, 320, 2, 6547, 
	6548, 7, 378, 2, 2, 6548, 6549, 5, 638, 320, 2, 6549, 6551, 3, 2, 2, 2, 
	6550, 6544, 3, 2, 2, 2, 6550, 6545, 3, 2, 2, 2, 6551, 6561, 3, 2, 2, 2, 
	6552, 6559, 7, 81, 2, 2, 6553, 6554, 7, 51, 2, 2, 6554, 6560, 7, 332, 2, 
	2, 6555, 6560, 7, 412, 2, 2, 6556, 6560, 7, 265, 2, 2, 6557, 6558, 7, 157, 
	2, 2, 6558, 6560, 7, 172, 2, 2, 6559, 6553, 3, 2, 2, 2, 6559, 6555, 3, 
	2, 2, 2, 6559, 6556, 3, 2, 2, 2, 6559, 6557, 3, 2, 2, 2, 6560, 6562, 3, 
	2, 2, 2, 6561, 6552, 3, 2, 2, 2, 6561, 6562, 3, 2, 2, 2, 6562, 637, 3, 
	2, 2, 2, 6563, 6564, 5, 588, 295, 2, 6564, 6565, 9, 92, 2, 2, 6565, 6569, 
	3, 2, 2, 2, 6566, 6567, 7, 51, 2, 2, 6567, 6569, 7, 332, 2, 2, 6568, 6563, 
	3, 2, 2, 2, 6568, 6566, 3, 2, 2, 2, 6569, 639, 3, 2, 2, 2, 6570, 6573, 
	7, 380, 2, 2, 6571, 6574, 5, 642, 322, 2, 6572, 6574, 5, 650, 326, 2, 6573, 
	6571, 3, 2, 2, 2, 6573, 6572, 3, 2, 2, 2, 6574, 641, 3, 2, 2, 2, 6575, 
	6590, 7, 609, 2, 2, 6576, 6579, 5, 588, 295, 2, 6577, 6579, 5, 642, 322, 
	2, 6578, 6576, 3, 2, 2, 2, 6578, 6577, 3, 2, 2, 2, 6579, 6587, 3, 2, 2, 
	2, 6580, 6583, 7, 591, 2, 2, 6581, 6584, 5, 588, 295, 2, 6582, 6584, 5, 
	642, 322, 2, 6583, 6581, 3, 2, 2, 2, 6583, 6582, 3, 2, 2, 2, 6584, 6586, 
	3, 2, 2, 2, 6585, 6580, 3, 2, 2, 2, 6586, 6589, 3, 2, 2, 2, 6587, 6585, 
	3, 2, 2, 2, 6587, 6588, 3, 2, 2, 2, 6588, 6591, 3, 2, 2, 2, 6589, 6587, 
	3, 2, 2, 2, 6590, 6578, 3, 2, 2, 2, 6590, 6591, 3, 2, 2, 2, 6591, 6592, 
	3, 2, 2, 2, 6592, 6593, 7, 610, 2, 2, 6593, 643, 3, 2, 2, 2, 6594, 6595, 
	5, 576, 289, 2, 6595, 6596, 5, 340, 171, 2, 6596, 6604, 3, 2, 2, 2, 6597, 
	6598, 7, 319, 2, 2, 6598, 6599, 5, 340, 171, 2, 6599, 6601, 5, 582, 292, 
	2, 6600, 6602, 5, 584, 293, 2, 6601, 6600, 3, 2, 2, 2, 6601, 6602, 3, 2, 
	2, 2, 6602, 6604, 3, 2, 2, 2, 6603, 6594, 3, 2, 2, 2, 6603, 6597, 3, 2, 
	2, 2, 6604, 645, 3, 2, 2, 2, 6605, 6612, 5, 556, 279, 2, 6606, 6607, 7, 
	605, 2, 2, 6607, 6610, 5, 556, 279, 2, 6608, 6609, 7, 605, 2, 2, 6609, 
	6611, 5, 556, 279, 2, 6610, 6608, 3, 2, 2, 2, 6610, 6611, 3, 2, 2, 2, 6611, 
	6613, 3, 2, 2, 2, 6612, 6606, 3, 2, 2, 2, 6612, 6613, 3, 2, 2, 2, 6613, 
	647, 3, 2, 2, 2, 6614, 6615, 9, 93, 2, 2, 6615, 649, 3, 2, 2, 2, 6616, 
	6617, 7, 597, 2, 2, 6617, 6618, 5, 652, 327, 2, 6618, 6619, 7, 598, 2, 
	2, 6619, 651, 3, 2, 2, 2, 6620, 6622, 5, 658, 330, 2, 6621, 6620, 3, 2, 
	2, 2, 6621, 6622, 3, 2, 2, 2, 6622, 6623, 3, 2, 2, 2, 6623, 6627, 5, 662, 
	332, 2, 6624, 6626, 5, 654, 328, 2, 6625, 6624, 3, 2, 2, 2, 6626, 6629, 
	3, 2, 2, 2, 6627, 6625, 3, 2, 2, 2, 6627, 6628, 3, 2, 2, 2, 6628, 653, 
	3, 2, 2, 2, 6629, 6627, 3, 2, 2, 2, 6630, 6679, 5, 692, 347, 2, 6631, 6634, 
	7, 420, 2, 2, 6632, 6635, 5, 588, 295, 2, 6633, 6635, 7, 376, 2, 2, 6634, 
	6632, 3, 2, 2, 2, 6634, 6633, 3, 2, 2, 2, 6635, 6679, 3, 2, 2, 2, 6636, 
	6637, 7, 425, 2, 2, 6637, 6639, 5, 588, 295, 2, 6638, 6640, 9, 94, 2, 2, 
	6639, 6638, 3, 2, 2, 2, 6639, 6640, 3, 2, 2, 2, 6640, 6679, 3, 2, 2, 2, 
	6641, 6642, 7, 407, 2, 2, 6642, 6644, 9, 95, 2, 2, 6643, 6645, 5, 588, 
	295, 2, 6644, 6643, 3, 2, 2, 2, 6644, 6645, 3, 2, 2, 2, 6645, 6646, 3, 
	2, 2, 2, 6646, 6650, 9, 94, 2, 2, 6647, 6651, 7, 427, 2, 2, 6648, 6649, 
	7, 451, 2, 2, 6649, 6651, 7, 265, 2, 2, 6650, 6647, 3, 2, 2, 2, 6650, 6648, 
	3, 2, 2, 2, 6650, 6651, 3, 2, 2, 2, 6651, 6679, 3, 2, 2, 2, 6652, 6660, 
	7, 408, 2, 2, 6653, 6661, 7, 281, 2, 2, 6654, 6655, 7, 157, 2, 2, 6655, 
	6656, 7, 125, 2, 2, 6656, 6661, 7, 281, 2, 2, 6657, 6661, 7, 238, 2, 2, 
	6658, 6659, 7, 125, 2, 2, 6659, 6661, 7, 238, 2, 2, 6660, 6653, 3, 2, 2, 
	2, 6660, 6654, 3, 2, 2, 2, 6660, 6657, 3, 2, 2, 2, 6660, 6658, 3, 2, 2, 
	2, 6661, 6671, 3, 2, 2, 2, 6662, 6663, 7, 164, 2, 2, 6663, 6668, 5, 646, 
	324, 2, 6664, 6665, 7, 591, 2, 2, 6665, 6667, 5, 646, 324, 2, 6666, 6664, 
	3, 2, 2, 2, 6667, 6670, 3, 2, 2, 2, 6668, 6666, 3, 2, 2, 2, 6668, 6669, 
	3, 2, 2, 2, 6669, 6672, 3, 2, 2, 2, 6670, 6668, 3, 2, 2, 2, 6671, 6662, 
	3, 2, 2, 2, 6671, 6672, 3, 2, 2, 2, 6672, 6676, 3, 2, 2, 2, 6673, 6677, 
	7, 161, 2, 2, 6674, 6675, 7, 241, 2, 2, 6675, 6677, 7, 137, 2, 2, 6676, 
	6673, 3, 2, 2, 2, 6676, 6674, 3, 2, 2, 2, 6676, 6677, 3, 2, 2, 2, 6677, 
	6679, 3, 2, 2, 2, 6678, 6630, 3, 2, 2, 2, 6678, 6631, 3, 2, 2, 2, 6678, 
	6636, 3, 2, 2, 2, 6678, 6641, 3, 2, 2, 2, 6678, 6652, 3, 2, 2, 2, 6679, 
	655, 3, 2, 2, 2, 6680, 6682, 5, 658, 330, 2, 6681, 6680, 3, 2, 2, 2, 6681, 
	6682, 3, 2, 2, 2, 6682, 6683, 3, 2, 2, 2, 6683, 6687, 5, 664, 333, 2, 6684, 
	6686, 5, 654, 328, 2, 6685, 6684, 3, 2, 2, 2, 6686, 6689, 3, 2, 2, 2, 6687, 
	6685, 3, 2, 2, 2, 6687, 6688, 3, 2, 2, 2, 6688, 657, 3, 2, 2, 2, 6689, 
	6687, 3, 2, 2, 2, 6690, 6692, 7, 451, 2, 2, 6691, 6693, 7, 201, 2, 2, 6692, 
	6691, 3, 2, 2, 2, 6692, 6693, 3, 2, 2, 2, 6693, 6694, 3, 2, 2, 2, 6694, 
	6699, 5, 660, 331, 2, 6695, 6696, 7, 591, 2, 2, 6696, 6698, 5, 660, 331, 
	2, 6697, 6695, 3, 2, 2, 2, 6698, 6701, 3, 2, 2, 2, 6699, 6697, 3, 2, 2, 
	2, 6699, 6700, 3, 2, 2, 2, 6700, 659, 3, 2, 2, 2, 6701, 6699, 3, 2, 2, 
	2, 6702, 6714, 5, 556, 279, 2, 6703, 6704, 7, 597, 2, 2, 6704, 6709, 5, 
	556, 279, 2, 6705, 6706, 7, 591, 2, 2, 6706, 6708, 5, 556, 279, 2, 6707, 
	6705, 3, 2, 2, 2, 6708, 6711, 3, 2, 2, 2, 6709, 6707, 3, 2, 2, 2, 6709, 
	6710, 3, 2, 2, 2, 6710, 6712, 3, 2, 2, 2, 6711, 6709, 3, 2, 2, 2, 6712, 
	6713, 7, 598, 2, 2, 6713, 6715, 3, 2, 2, 2, 6714, 6703, 3, 2, 2, 2, 6714, 
	6715, 3, 2, 2, 2, 6715, 6716, 3, 2, 2, 2, 6716, 6721, 7, 381, 2, 2, 6717, 
	6719, 7, 423, 2, 2, 6718, 6717, 3, 2, 2, 2, 6718, 6719, 3, 2, 2, 2, 6719, 
	6720, 3, 2, 2, 2, 6720, 6722, 7, 141, 2, 2, 6721, 6718, 3, 2, 2, 2, 6721, 
	6722, 3, 2, 2, 2, 6722, 6723, 3, 2, 2, 2, 6723, 6724, 7, 597, 2, 2, 6724, 
	6725, 5, 16, 9, 2, 6725, 6726, 7, 598, 2, 2, 6726, 661, 3, 2, 2, 2, 6727, 
	6728, 8, 332, 1, 2, 6728, 6729, 7, 597, 2, 2, 6729, 6730, 5, 652, 327, 
	2, 6730, 6731, 7, 598, 2, 2, 6731, 6734, 3, 2, 2, 2, 6732, 6734, 5, 666, 
	334, 2, 6733, 6727, 3, 2, 2, 2, 6733, 6732, 3, 2, 2, 2, 6734, 6743, 3, 
	2, 2, 2, 6735, 6736, 12, 4, 2, 2, 6736, 6738, 9, 96, 2, 2, 6737, 6739, 
	5, 648, 325, 2, 6738, 6737, 3, 2, 2, 2, 6738, 6739, 3, 2, 2, 2, 6739, 6740, 
	3, 2, 2, 2, 6740, 6742, 5, 662, 332, 5, 6741, 6735, 3, 2, 2, 2, 6742, 6745, 
	3, 2, 2, 2, 6743, 6741, 3, 2, 2, 2, 6743, 6744, 3, 2, 2, 2, 6744, 663, 
	3, 2, 2, 2, 6745, 6743, 3, 2, 2, 2, 6746, 6747, 5, 662, 332, 2, 6747, 6749, 
	9, 96, 2, 2, 6748, 6750, 5, 648, 325, 2, 6749, 6748, 3, 2, 2, 2, 6749, 
	6750, 3, 2, 2, 2, 6750, 6756, 3, 2, 2, 2, 6751, 6757, 5, 666, 334, 2, 6752, 
	6753, 7, 597, 2, 2, 6753, 6754, 5, 652, 327, 2, 6754, 6755, 7, 598, 2, 
	2, 6755, 6757, 3, 2, 2, 2, 6756, 6751, 3, 2, 2, 2, 6756, 6752, 3, 2, 2, 
	2, 6757, 6760, 3, 2, 2, 2, 6758, 6760, 5, 666, 334, 2, 6759, 6746, 3, 2, 
	2, 2, 6759, 6758, 3, 2, 2, 2, 6760, 665, 3, 2, 2, 2, 6761, 6777, 7, 434, 
	2, 2, 6762, 6775, 5, 648, 325, 2, 6763, 6764, 7, 426, 2, 2, 6764, 6765, 
	7, 597, 2, 2, 6765, 6770, 5, 588, 295, 2, 6766, 6767, 7, 591, 2, 2, 6767, 
	6769, 5, 588, 295, 2, 6768, 6766, 3, 2, 2, 2, 6769, 6772, 3, 2, 2, 2, 6770, 
	6768, 3, 2, 2, 2, 6770, 6771, 3, 2, 2, 2, 6771, 6773, 3, 2, 2, 2, 6772, 
	6770, 3, 2, 2, 2, 6773, 6774, 7, 598, 2, 2, 6774, 6776, 3, 2, 2, 2, 6775, 
	6763, 3, 2, 2, 2, 6775, 6776, 3, 2, 2, 2, 6776, 6778, 3, 2, 2, 2, 6777, 
	6762, 3, 2, 2, 2, 6777, 6778, 3, 2, 2, 2, 6778, 6780, 3, 2, 2, 2, 6779, 
	6781, 5, 668, 335, 2, 6780, 6779, 3, 2, 2, 2, 6780, 6781, 3, 2, 2, 2, 6781, 
	6783, 3, 2, 2, 2, 6782, 6784, 5, 672, 337, 2, 6783, 6782, 3, 2, 2, 2, 6783, 
	6784, 3, 2, 2, 2, 6784, 6794, 3, 2, 2, 2, 6785, 6786, 7, 410, 2, 2, 6786, 
	6791, 5, 674, 338, 2, 6787, 6788, 7, 591, 2, 2, 6788, 6790, 5, 674, 338, 
	2, 6789, 6787, 3, 2, 2, 2, 6790, 6793, 3, 2, 2, 2, 6791, 6789, 3, 2, 2, 
	2, 6791, 6792, 3, 2, 2, 2, 6792, 6795, 3, 2, 2, 2, 6793, 6791, 3, 2, 2, 
	2, 6794, 6785, 3, 2, 2, 2, 6794, 6795, 3, 2, 2, 2, 6795, 6798, 3, 2, 2, 
	2, 6796, 6797, 7, 449, 2, 2, 6797, 6799, 5, 588, 295, 2, 6798, 6796, 3, 
	2, 2, 2, 6798, 6799, 3, 2, 2, 2, 6799, 6801, 3, 2, 2, 2, 6800, 6802, 5, 
	682, 342, 2, 6801, 6800, 3, 2, 2, 2, 6801, 6802, 3, 2, 2, 2, 6802, 6805, 
	3, 2, 2, 2, 6803, 6804, 7, 413, 2, 2, 6804, 6806, 5, 588, 295, 2, 6805, 
	6803, 3, 2, 2, 2, 6805, 6806, 3, 2, 2, 2, 6806, 6821, 3, 2, 2, 2, 6807, 
	6808, 7, 450, 2, 2, 6808, 6809, 5, 556, 279, 2, 6809, 6810, 7, 381, 2, 
	2, 6810, 6818, 5, 634, 318, 2, 6811, 6812, 7, 591, 2, 2, 6812, 6813, 5, 
	556, 279, 2, 6813, 6814, 7, 381, 2, 2, 6814, 6815, 5, 634, 318, 2, 6815, 
	6817, 3, 2, 2, 2, 6816, 6811, 3, 2, 2, 2, 6817, 6820, 3, 2, 2, 2, 6818, 
	6816, 3, 2, 2, 2, 6818, 6819, 3, 2, 2, 2, 6819, 6822, 3, 2, 2, 2, 6820, 
	6818, 3, 2, 2, 2, 6821, 6807, 3, 2, 2, 2, 6821, 6822, 3, 2, 2, 2, 6822, 
	6833, 3, 2, 2, 2, 6823, 6825, 7, 438, 2, 2, 6824, 6826, 7, 427, 2, 2, 6825, 
	6824, 3, 2, 2, 2, 6825, 6826, 3, 2, 2, 2, 6826, 6827, 3, 2, 2, 2, 6827, 
	6829, 5, 646, 324, 2, 6828, 6830, 7, 601, 2, 2, 6829, 6828, 3, 2, 2, 2, 
	6829, 6830, 3, 2, 2, 2, 6830, 6833, 3, 2, 2, 2, 6831, 6833, 5, 688, 345, 
	2, 6832, 6761, 3, 2, 2, 2, 6832, 6823, 3, 2, 2, 2, 6832, 6831, 3, 2, 2, 
	2, 6833, 667, 3, 2, 2, 2, 6834, 6839, 5, 670, 336, 2, 6835, 6836, 7, 591, 
	2, 2, 6836, 6838, 5, 670, 336, 2, 6837, 6835, 3, 2, 2, 2, 6838, 6841, 3, 
	2, 2, 2, 6839, 6837, 3, 2, 2, 2, 6839, 6840, 3, 2, 2, 2, 6840, 669, 3, 
	2, 2, 2, 6841, 6839, 3, 2, 2, 2, 6842, 6846, 5, 588, 295, 2, 6843, 6844, 
	7, 381, 2, 2, 6844, 6847, 5, 560, 281, 2, 6845, 6847, 5, 554, 278, 2, 6846, 
	6843, 3, 2, 2, 2, 6846, 6845, 3, 2, 2, 2, 6846, 6847, 3, 2, 2, 2, 6847, 
	671, 3, 2, 2, 2, 6848, 6850, 7, 417, 2, 2, 6849, 6851, 9, 97, 2, 2, 6850, 
	6849, 3, 2, 2, 2, 6850, 6851, 3, 2, 2, 2, 6851, 6853, 3, 2, 2, 2, 6852, 
	6854, 7, 438, 2, 2, 6853, 6852, 3, 2, 2, 2, 6853, 6854, 3, 2, 2, 2, 6854, 
	6855, 3, 2, 2, 2, 6855, 6856, 5, 646, 324, 2, 6856, 673, 3, 2, 2, 2, 6857, 
	6858, 8, 338, 1, 2, 6858, 6859, 7, 597, 2, 2, 6859, 6860, 5, 674, 338, 
	2, 6860, 6862, 7, 598, 2, 2, 6861, 6863, 5, 678, 340, 2, 6862, 6861, 3, 
	2, 2, 2, 6862, 6863, 3, 2, 2, 2, 6863, 6866, 3, 2, 2, 2, 6864, 6866, 5, 
	676, 339, 2, 6865, 6857, 3, 2, 2, 2, 6865, 6864, 3, 2, 2, 2, 6866, 6910, 
	3, 2, 2, 2, 6867, 6868, 12, 7, 2, 2, 6868, 6869, 7, 357, 2, 2, 6869, 6870, 
	7, 365, 2, 2, 6870, 6909, 5, 674, 338, 8, 6871, 6872, 12, 4, 2, 2, 6872, 
	6878, 7, 368, 2, 2, 6873, 6879, 7, 362, 2, 2, 6874, 6876, 9, 98, 2, 2, 
	6875, 6877, 7, 370, 2, 2, 6876, 6875, 3, 2, 2, 2, 6876, 6877, 3, 2, 2, 
	2, 6877, 6879, 3, 2, 2, 2, 6878, 6873, 3, 2, 2, 2, 6878, 6874, 3, 2, 2, 
	2, 6878, 6879, 3, 2, 2, 2, 6879, 6880, 3, 2, 2, 2, 6880, 6881, 7, 365, 
	2, 2, 6881, 6909, 5, 674, 338, 5, 6882, 6888, 12, 6, 2, 2, 6883, 6889, 
	7, 362, 2, 2, 6884, 6886, 9, 98, 2, 2, 6885, 6887, 7, 370, 2, 2, 6886, 
	6885, 3, 2, 2, 2, 6886, 6887, 3, 2, 2, 2, 6887, 6889, 3, 2, 2, 2, 6888, 
	6883, 3, 2, 2, 2, 6888, 6884, 3, 2, 2, 2, 6888, 6889, 3, 2, 2, 2, 6889, 
	6890, 3, 2, 2, 2, 6890, 6891, 7, 365, 2, 2, 6891, 6892, 5, 674, 338, 2, 
	6892, 6893, 7, 426, 2, 2, 6893, 6894, 5, 588, 295, 2, 6894, 6909, 3, 2, 
	2, 2, 6895, 6901, 12, 5, 2, 2, 6896, 6902, 7, 362, 2, 2, 6897, 6899, 9, 
	98, 2, 2, 6898, 6900, 7, 370, 2, 2, 6899, 6898, 3, 2, 2, 2, 6899, 6900, 
	3, 2, 2, 2, 6900, 6902, 3, 2, 2, 2, 6901, 6896, 3, 2, 2, 2, 6901, 6897, 
	3, 2, 2, 2, 6901, 6902, 3, 2, 2, 2, 6902, 6903, 3, 2, 2, 2, 6903, 6904, 
	7, 365, 2, 2, 6904, 6905, 5, 674, 338, 2, 6905, 6906, 7, 446, 2, 2, 6906, 
	6907, 5, 496, 249, 2, 6907, 6909, 3, 2, 2, 2, 6908, 6867, 3, 2, 2, 2, 6908, 
	6871, 3, 2, 2, 2, 6908, 6882, 3, 2, 2, 2, 6908, 6895, 3, 2, 2, 2, 6909, 
	6912, 3, 2, 2, 2, 6910, 6908, 3, 2, 2, 2, 6910, 6911, 3, 2, 2, 2, 6911, 
	675, 3, 2, 2, 2, 6912, 6910, 3, 2, 2, 2, 6913, 6915, 7, 427, 2, 2, 6914, 
	6913, 3, 2, 2, 2, 6914, 6915, 3, 2, 2, 2, 6915, 6916, 3, 2, 2, 2, 6916, 
	6918, 5, 646, 324, 2, 6917, 6919, 7, 601, 2, 2, 6918, 6917, 3, 2, 2, 2, 
	6918, 6919, 3, 2, 2, 2, 6919, 6921, 3, 2, 2, 2, 6920, 6922, 5, 678, 340, 
	2, 6921, 6920, 3, 2, 2, 2, 6921, 6922, 3, 2, 2, 2, 6922, 6939, 3, 2, 2, 
	2, 6923, 6924, 7, 374, 2, 2, 6924, 6925, 5, 556, 279, 2, 6925, 6926, 7, 
	597, 2, 2, 6926, 6931, 5, 588, 295, 2, 6927, 6928, 7, 591, 2, 2, 6928, 
	6930, 5, 588, 295, 2, 6929, 6927, 3, 2, 2, 2, 6930, 6933, 3, 2, 2, 2, 6931, 
	6929, 3, 2, 2, 2, 6931, 6932, 3, 2, 2, 2, 6932, 6934, 3, 2, 2, 2, 6933, 
	6931, 3, 2, 2, 2, 6934, 6937, 7, 598, 2, 2, 6935, 6936, 7, 209, 2, 2, 6936, 
	6938, 5, 588, 295, 2, 6937, 6935, 3, 2, 2, 2, 6937, 6938, 3, 2, 2, 2, 6938, 
	6940, 3, 2, 2, 2, 6939, 6923, 3, 2, 2, 2, 6939, 6940, 3, 2, 2, 2, 6940, 
	7024, 3, 2, 2, 2, 6941, 6943, 7, 418, 2, 2, 6942, 6941, 3, 2, 2, 2, 6942, 
	6943, 3, 2, 2, 2, 6943, 6944, 3, 2, 2, 2, 6944, 6945, 5, 650, 326, 2, 6945, 
	6946, 5, 678, 340, 2, 6946, 7024, 3, 2, 2, 2, 6947, 6949, 7, 418, 2, 2, 
	6948, 6947, 3, 2, 2, 2, 6948, 6949, 3, 2, 2, 2, 6949, 6950, 3, 2, 2, 2, 
	6950, 6953, 5, 610, 306, 2, 6951, 6952, 7, 451, 2, 2, 6952, 6954, 7, 171, 
	2, 2, 6953, 6951, 3, 2, 2, 2, 6953, 6954, 3, 2, 2, 2, 6954, 6975, 3, 2, 
	2, 2, 6955, 6956, 7, 381, 2, 2, 6956, 6976, 5, 680, 341, 2, 6957, 6959, 
	7, 381, 2, 2, 6958, 6957, 3, 2, 2, 2, 6958, 6959, 3, 2, 2, 2, 6959, 6960, 
	3, 2, 2, 2, 6960, 6973, 5, 556, 279, 2, 6961, 6962, 7, 597, 2, 2, 6962, 
	6967, 5, 556, 279, 2, 6963, 6964, 7, 591, 2, 2, 6964, 6966, 5, 556, 279, 
	2, 6965, 6963, 3, 2, 2, 2, 6966, 6969, 3, 2, 2, 2, 6967, 6965, 3, 2, 2, 
	2, 6967, 6968, 3, 2, 2, 2, 6968, 6970, 3, 2, 2, 2, 6969, 6967, 3, 2, 2, 
	2, 6970, 6971, 7, 598, 2, 2, 6971, 6974, 3, 2, 2, 2, 6972, 6974, 5, 680, 
	341, 2, 6973, 6961, 3, 2, 2, 2, 6973, 6972, 3, 2, 2, 2, 6973, 6974, 3, 
	2, 2, 2, 6974, 6976, 3, 2, 2, 2, 6975, 6955, 3, 2, 2, 2, 6975, 6958, 3, 
	2, 2, 2, 6975, 6976, 3, 2, 2, 2, 6976, 7024, 3, 2, 2, 2, 6977, 6979, 7, 
	418, 2, 2, 6978, 6977, 3, 2, 2, 2, 6978, 6979, 3, 2, 2, 2, 6979, 6980, 
	3, 2, 2, 2, 6980, 6981, 7, 222, 2, 2, 6981, 6982, 7, 410, 2, 2, 6982, 6983, 
	7, 597, 2, 2, 6983, 6986, 5, 610, 306, 2, 6984, 6985, 7, 381, 2, 2, 6985, 
	6987, 5, 680, 341, 2, 6986, 6984, 3, 2, 2, 2, 6986, 6987, 3, 2, 2, 2, 6987, 
	6996, 3, 2, 2, 2, 6988, 6989, 7, 591, 2, 2, 6989, 6992, 5, 610, 306, 2, 
	6990, 6991, 7, 381, 2, 2, 6991, 6993, 5, 680, 341, 2, 6992, 6990, 3, 2, 
	2, 2, 6992, 6993, 3, 2, 2, 2, 6993, 6995, 3, 2, 2, 2, 6994, 6988, 3, 2, 
	2, 2, 6995, 6998, 3, 2, 2, 2, 6996, 6994, 3, 2, 2, 2, 6996, 6997, 3, 2, 
	2, 2, 6997, 6999, 3, 2, 2, 2, 6998, 6996, 3, 2, 2, 2, 6999, 7002, 7, 598, 
	2, 2, 7000, 7001, 7, 451, 2, 2, 7001, 7003, 7, 171, 2, 2, 7002, 7000, 3, 
	2, 2, 2, 7002, 7003, 3, 2, 2, 2, 7003, 7021, 3, 2, 2, 2, 7004, 7006, 7, 
	381, 2, 2, 7005, 7004, 3, 2, 2, 2, 7005, 7006, 3, 2, 2, 2, 7006, 7007, 
	3, 2, 2, 2, 7007, 7019, 5, 556, 279, 2, 7008, 7009, 7, 597, 2, 2, 7009, 
	7014, 5, 556, 279, 2, 7010, 7011, 7, 591, 2, 2, 7011, 7013, 5, 556, 279, 
	2, 7012, 7010, 3, 2, 2, 2, 7013, 7016, 3, 2, 2, 2, 7014, 7012, 3, 2, 2, 
	2, 7014, 7015, 3, 2, 2, 2, 7015, 7017, 3, 2, 2, 2, 7016, 7014, 3, 2, 2, 
	2, 7017, 7018, 7, 598, 2, 2, 7018, 7020, 3, 2, 2, 2, 7019, 7008, 3, 2, 
	2, 2, 7019, 7020, 3, 2, 2, 2, 7020, 7022, 3, 2, 2, 2, 7021, 7005, 3, 2, 
	2, 2, 7021, 7022, 3, 2, 2, 2, 7022, 7024, 3, 2, 2, 2, 7023, 6914, 3, 2, 
	2, 2, 7023, 6942, 3, 2, 2, 2, 7023, 6948, 3, 2, 2, 2, 7023, 6978, 3, 2, 
	2, 2, 7024, 677, 3, 2, 2, 2, 7025, 7027, 7, 381, 2, 2, 7026, 7025, 3, 2, 
	2, 2, 7026, 7027, 3, 2, 2, 2, 7027, 7028, 3, 2, 2, 2, 7028, 7040, 5, 556, 
	279, 2, 7029, 7030, 7, 597, 2, 2, 7030, 7035, 5, 556, 279, 2, 7031, 7032, 
	7, 591, 2, 2, 7032, 7034, 5, 556, 279, 2, 7033, 7031, 3, 2, 2, 2, 7034, 
	7037, 3, 2, 2, 2, 7035, 7033, 3, 2, 2, 2, 7035, 7036, 3, 2, 2, 2, 7036, 
	7038, 3, 2, 2, 2, 7037, 7035, 3, 2, 2, 2, 7038, 7039, 7, 598, 2, 2, 7039, 
	7041, 3, 2, 2, 2, 7040, 7029, 3, 2, 2, 2, 7040, 7041, 3, 2, 2, 2, 7041, 
	679, 3, 2, 2, 2, 7042, 7043, 7, 597, 2, 2, 7043, 7044, 5, 556, 279, 2, 
	7044, 7051, 5, 576, 289, 2, 7045, 7046, 7, 591, 2, 2, 7046, 7047, 5, 556, 
	279, 2, 7047, 7048, 5, 576, 289, 2, 7048, 7050, 3, 2, 2, 2, 7049, 7045, 
	3, 2, 2, 2, 7050, 7053, 3, 2, 2, 2, 7051, 7049, 3, 2, 2, 2, 7051, 7052, 
	3, 2, 2, 2, 7052, 7054, 3, 2, 2, 2, 7053, 7051, 3, 2, 2, 2, 7054, 7055, 
	7, 598, 2, 2, 7055, 681, 3, 2, 2, 2, 7056, 7057, 7, 412, 2, 2, 7057, 7058, 
	7, 22, 2, 2, 7058, 7059, 5, 684, 343, 2, 7059, 683, 3, 2, 2, 2, 7060, 7065, 
	5, 686, 344, 2, 7061, 7062, 7, 591, 2, 2, 7062, 7064, 5, 686, 344, 2, 7063, 
	7061, 3, 2, 2, 2, 7064, 7067, 3, 2, 2, 2, 7065, 7063, 3, 2, 2, 2, 7065, 
	7066, 3, 2, 2, 2, 7066, 685, 3, 2, 2, 2, 7067, 7065, 3, 2, 2, 2, 7068, 
	7082, 5, 588, 295, 2, 7069, 7070, 7, 597, 2, 2, 7070, 7082, 7, 598, 2, 
	2, 7071, 7076, 7, 219, 2, 2, 7072, 7076, 7, 50, 2, 2, 7073, 7074, 7, 315, 
	2, 2, 7074, 7076, 7, 237, 2, 2, 7075, 7071, 3, 2, 2, 2, 7075, 7072, 3, 
	2, 2, 2, 7075, 7073, 3, 2, 2, 2, 7076, 7077, 3, 2, 2, 2, 7077, 7078, 7, 
	597, 2, 2, 7078, 7079, 5, 684, 343, 2, 7079, 7080, 7, 598, 2, 2, 7080, 
	7082, 3, 2, 2, 2, 7081, 7068, 3, 2, 2, 2, 7081, 7069, 3, 2, 2, 2, 7081, 
	7075, 3, 2, 2, 2, 7082, 687, 3, 2, 2, 2, 7083, 7084, 7, 340, 2, 2, 7084, 
	7089, 5, 690, 346, 2, 7085, 7086, 7, 591, 2, 2, 7086, 7088, 5, 690, 346, 
	2, 7087, 7085, 3, 2, 2, 2, 7088, 7091, 3, 2, 2, 2, 7089, 7087, 3, 2, 2, 
	2, 7089, 7090, 3, 2, 2, 2, 7090, 689, 3, 2, 2, 2, 7091, 7089, 3, 2, 2, 
	2, 7092, 7095, 7, 597, 2, 2, 7093, 7096, 5, 588, 295, 2, 7094, 7096, 7, 
	398, 2, 2, 7095, 7093, 3, 2, 2, 2, 7095, 7094, 3, 2, 2, 2, 7096, 7104, 
	3, 2, 2, 2, 7097, 7100, 7, 591, 2, 2, 7098, 7101, 5, 588, 295, 2, 7099, 
	7101, 7, 398, 2, 2, 7100, 7098, 3, 2, 2, 2, 7100, 7099, 3, 2, 2, 2, 7101, 
	7103, 3, 2, 2, 2, 7102, 7097, 3, 2, 2, 2, 7103, 7106, 3, 2, 2, 2, 7104, 
	7102, 3, 2, 2, 2, 7104, 7105, 3, 2, 2, 2, 7105, 7107, 3, 2, 2, 2, 7106, 
	7104, 3, 2, 2, 2, 7107, 7108, 7, 598, 2, 2, 7108, 691, 3, 2, 2, 2, 7109, 
	7110, 7, 429, 2, 2, 7110, 7111, 7, 22, 2, 2, 7111, 7116, 5, 694, 348, 2, 
	7112, 7113, 7, 591, 2, 2, 7113, 7115, 5, 694, 348, 2, 7114, 7112, 3, 2, 
	2, 2, 7115, 7118, 3, 2, 2, 2, 7116, 7114, 3, 2, 2, 2, 7116, 7117, 3, 2, 
	2, 2, 7117, 693, 3, 2, 2, 2, 7118, 7116, 3, 2, 2, 2, 7119, 7121, 5, 588, 
	295, 2, 7120, 7122, 5, 696, 349, 2, 7121, 7120, 3, 2, 2, 2, 7121, 7122, 
	3, 2, 2, 2, 7122, 7124, 3, 2, 2, 2, 7123, 7125, 5, 698, 350, 2, 7124, 7123, 
	3, 2, 2, 2, 7124, 7125, 3, 2, 2, 2, 7125, 695, 3, 2, 2, 2, 7126, 7131, 
	7, 382, 2, 2, 7127, 7131, 7, 400, 2, 2, 7128, 7129, 7, 446, 2, 2, 7129, 
	7131, 5, 594, 298, 2, 7130, 7126, 3, 2, 2, 2, 7130, 7127, 3, 2, 2, 2, 7130, 
	7128, 3, 2, 2, 2, 7131, 697, 3, 2, 2, 2, 7132, 7133, 7, 162, 2, 2, 7133, 
	7134, 9, 99, 2, 2, 7134, 699, 3, 2, 2, 2, 7135, 7137, 5, 658, 330, 2, 7136, 
	7135, 3, 2, 2, 2, 7136, 7137, 3, 2, 2, 2, 7137, 7138, 3, 2, 2, 2, 7138, 
	7139, 7, 121, 2, 2, 7139, 7140, 7, 417, 2, 2, 7140, 7143, 5, 646, 324, 
	2, 7141, 7142, 7, 381, 2, 2, 7142, 7144, 5, 556, 279, 2, 7143, 7141, 3, 
	2, 2, 2, 7143, 7144, 3, 2, 2, 2, 7144, 7148, 3, 2, 2, 2, 7145, 7146, 7, 
	174, 2, 2, 7146, 7147, 9, 100, 2, 2, 7147, 7149, 7, 286, 2, 2, 7148, 7145, 
	3, 2, 2, 2, 7148, 7149, 3, 2, 2, 2, 7149, 7151, 3, 2, 2, 2, 7150, 7152, 
	5, 702, 352, 2, 7151, 7150, 3, 2, 2, 2, 7151, 7152, 3, 2, 2, 2, 7152, 7156, 
	3, 2, 2, 2, 7153, 7157, 5, 652, 327, 2, 7154, 7155, 7, 398, 2, 2, 7155, 
	7157, 7, 340, 2, 2, 7156, 7153, 3, 2, 2, 2, 7156, 7154, 3, 2, 2, 2, 7157, 
	7164, 3, 2, 2, 2, 7158, 7159, 7, 426, 2, 2, 7159, 7161, 7, 41, 2, 2, 7160, 
	7162, 5, 706, 354, 2, 7161, 7160, 3, 2, 2, 2, 7161, 7162, 3, 2, 2, 2, 7162, 
	7163, 3, 2, 2, 2, 7163, 7165, 5, 708, 355, 2, 7164, 7158, 3, 2, 2, 2, 7164, 
	7165, 3, 2, 2, 2, 7165, 7168, 3, 2, 2, 2, 7166, 7167, 7, 433, 2, 2, 7167, 
	7169, 5, 668, 335, 2, 7168, 7166, 3, 2, 2, 2, 7168, 7169, 3, 2, 2, 2, 7169, 
	701, 3, 2, 2, 2, 7170, 7171, 7, 597, 2, 2, 7171, 7176, 5, 704, 353, 2, 
	7172, 7173, 7, 591, 2, 2, 7173, 7175, 5, 704, 353, 2, 7174, 7172, 3, 2, 
	2, 2, 7175, 7178, 3, 2, 2, 2, 7176, 7174, 3, 2, 2, 2, 7176, 7177, 3, 2, 
	2, 2, 7177, 7179, 3, 2, 2, 2, 7178, 7176, 3, 2, 2, 2, 7179, 7180, 7, 598, 
	2, 2, 7180, 703, 3, 2, 2, 2, 7181, 7183, 5, 556, 279, 2, 7182, 7184, 5, 
	538, 270, 2, 7183, 7182, 3, 2, 2, 2, 7183, 7184, 3, 2, 2, 2, 7184, 705, 
	3, 2, 2, 2, 7185, 7187, 5, 158, 80, 2, 7186, 7188, 5, 164, 83, 2, 7187, 
	7186, 3, 2, 2, 2, 7187, 7188, 3, 2, 2, 2, 7188, 7193, 3, 2, 2, 2, 7189, 
	7190, 7, 426, 2, 2, 7190, 7191, 7, 390, 2, 2, 7191, 7193, 5, 556, 279, 
	2, 7192, 7185, 3, 2, 2, 2, 7192, 7189, 3, 2, 2, 2, 7193, 707, 3, 2, 2, 
	2, 7194, 7195, 7, 402, 2, 2, 7195, 7212, 7, 159, 2, 2, 7196, 7197, 7, 402, 
	2, 2, 7197, 7198, 7, 281, 2, 2, 7198, 7199, 7, 236, 2, 2, 7199, 7204, 5, 
	714, 358, 2, 7200, 7201, 7, 591, 2, 2, 7201, 7203, 5, 714, 358, 2, 7202, 
	7200, 3, 2, 2, 2, 7203, 7206, 3, 2, 2, 2, 7204, 7202, 3, 2, 2, 2, 7204, 
	7205, 3, 2, 2, 2, 7205, 7209, 3, 2, 2, 2, 7206, 7204, 3, 2, 2, 2, 7207, 
	7208, 7, 449, 2, 2, 7208, 7210, 5, 588, 295, 2, 7209, 7207, 3, 2, 2, 2, 
	7209, 7210, 3, 2, 2, 2, 7210, 7212, 3, 2, 2, 2, 7211, 7194, 3, 2, 2, 2, 
	7211, 7196, 3, 2, 2, 2, 7212, 709, 3, 2, 2, 2, 7213, 7215, 5, 658, 330, 
	2, 7214, 7213, 3, 2, 2, 2, 7214, 7215, 3, 2, 2, 2, 7215, 7216, 3, 2, 2, 
	2, 7216, 7217, 7, 62, 2, 2, 7217, 7219, 7, 410, 2, 2, 7218, 7220, 7, 427, 
	2, 2, 7219, 7218, 3, 2, 2, 2, 7219, 7220, 3, 2, 2, 2, 7220, 7221, 3, 2, 
	2, 2, 7221, 7223, 5, 646, 324, 2, 7222, 7224, 7, 601, 2, 2, 7223, 7222, 
	3, 2, 2, 2, 7223, 7224, 3, 2, 2, 2, 7224, 7229, 3, 2, 2, 2, 7225, 7227, 
	7, 381, 2, 2, 7226, 7225, 3, 2, 2, 2, 7226, 7227, 3, 2, 2, 2, 7227, 7228, 
	3, 2, 2, 2, 7228, 7230, 5, 556, 279, 2, 7229, 7226, 3, 2, 2, 2, 7229, 7230, 
	3, 2, 2, 2, 7230, 7240, 3, 2, 2, 2, 7231, 7232, 7, 446, 2, 2, 7232, 7237, 
	5, 674, 338, 2, 7233, 7234, 7, 591, 2, 2, 7234, 7236, 5, 674, 338, 2, 7235, 
	7233, 3, 2, 2, 2, 7236, 7239, 3, 2, 2, 2, 7237, 7235, 3, 2, 2, 2, 7237, 
	7238, 3, 2, 2, 2, 7238, 7241, 3, 2, 2, 2, 7239, 7237, 3, 2, 2, 2, 7240, 
	7231, 3, 2, 2, 2, 7240, 7241, 3, 2, 2, 2, 7241, 7249, 3, 2, 2, 2, 7242, 
	7247, 7, 449, 2, 2, 7243, 7248, 5, 588, 295, 2, 7244, 7245, 7, 51, 2, 2, 
	7245, 7246, 7, 164, 2, 2, 7246, 7248, 5, 556, 279, 2, 7247, 7243, 3, 2, 
	2, 2, 7247, 7244, 3, 2, 2, 2, 7248, 7250, 3, 2, 2, 2, 7249, 7242, 3, 2, 
	2, 2, 7249, 7250, 3, 2, 2, 2, 7250, 7253, 3, 2, 2, 2, 7251, 7252, 7, 433, 
	2, 2, 7252, 7254, 5, 668, 335, 2, 7253, 7251, 3, 2, 2, 2, 7253, 7254, 3, 
	2, 2, 2, 7254, 711, 3, 2, 2, 2, 7255, 7257, 5, 658, 330, 2, 7256, 7255, 
	3, 2, 2, 2, 7256, 7257, 3, 2, 2, 2, 7257, 7258, 3, 2, 2, 2, 7258, 7260, 
	7, 281, 2, 2, 7259, 7261, 7, 427, 2, 2, 7260, 7259, 3, 2, 2, 2, 7260, 7261, 
	3, 2, 2, 2, 7261, 7262, 3, 2, 2, 2, 7262, 7264, 5, 646, 324, 2, 7263, 7265, 
	7, 601, 2, 2, 7264, 7263, 3, 2, 2, 2, 7264, 7265, 3, 2, 2, 2, 7265, 7270, 
	3, 2, 2, 2, 7266, 7268, 7, 381, 2, 2, 7267, 7266, 3, 2, 2, 2, 7267, 7268, 
	3, 2, 2, 2, 7268, 7269, 3, 2, 2, 2, 7269, 7271, 5, 556, 279, 2, 7270, 7267, 
	3, 2, 2, 2, 7270, 7271, 3, 2, 2, 2, 7271, 7272, 3, 2, 2, 2, 7272, 7273, 
	7, 236, 2, 2, 7273, 7278, 5, 714, 358, 2, 7274, 7275, 7, 591, 2, 2, 7275, 
	7277, 5, 714, 358, 2, 7276, 7274, 3, 2, 2, 2, 7277, 7280, 3, 2, 2, 2, 7278, 
	7276, 3, 2, 2, 2, 7278, 7279, 3, 2, 2, 2, 7279, 7290, 3, 2, 2, 2, 7280, 
	7278, 3, 2, 2, 2, 7281, 7282, 7, 410, 2, 2, 7282, 7287, 5, 674, 338, 2, 
	7283, 7284, 7, 591, 2, 2, 7284, 7286, 5, 674, 338, 2, 7285, 7283, 3, 2, 
	2, 2, 7286, 7289, 3, 2, 2, 2, 7287, 7285, 3, 2, 2, 2, 7287, 7288, 3, 2, 
	2, 2, 7288, 7291, 3, 2, 2, 2, 7289, 7287, 3, 2, 2, 2, 7290, 7281, 3, 2, 
	2, 2, 7290, 7291, 3, 2, 2, 2, 7291, 7299, 3, 2, 2, 2, 7292, 7297, 7, 449, 
	2, 2, 7293, 7298, 5, 588, 295, 2, 7294, 7295, 7, 51, 2, 2, 7295, 7296, 
	7, 164, 2, 2, 7296, 7298, 5, 556, 279, 2, 7297, 7293, 3, 2, 2, 2, 7297, 
	7294, 3, 2, 2, 2, 7298, 7300, 3, 2, 2, 2, 7299, 7292, 3, 2, 2, 2, 7299, 
	7300, 3, 2, 2, 2, 7300, 7303, 3, 2, 2, 2, 7301, 7302, 7, 433, 2, 2, 7302, 
	7304, 5, 668, 335, 2, 7303, 7301, 3, 2, 2, 2, 7303, 7304, 3, 2, 2, 2, 7304, 
	713, 3, 2, 2, 2, 7305, 7306, 5, 704, 353, 2, 7306, 7309, 7, 588, 2, 2, 
	7307, 7310, 5, 588, 295, 2, 7308, 7310, 7, 398, 2, 2, 7309, 7307, 3, 2, 
	2, 2, 7309, 7308, 3, 2, 2, 2, 7310, 7345, 3, 2, 2, 2, 7311, 7312, 7, 597, 
	2, 2, 7312, 7317, 5, 704, 353, 2, 7313, 7314, 7, 591, 2, 2, 7314, 7316, 
	5, 704, 353, 2, 7315, 7313, 3, 2, 2, 2, 7316, 7319, 3, 2, 2, 2, 7317, 7315, 
	3, 2, 2, 2, 7317, 7318, 3, 2, 2, 2, 7318, 7320, 3, 2, 2, 2, 7319, 7317, 
	3, 2, 2, 2, 7320, 7321, 7, 598, 2, 2, 7321, 7323, 7, 588, 2, 2, 7322, 7324, 
	7, 332, 2, 2, 7323, 7322, 3, 2, 2, 2, 7323, 7324, 3, 2, 2, 2, 7324, 7342, 
	3, 2, 2, 2, 7325, 7328, 7, 597, 2, 2, 7326, 7329, 5, 588, 295, 2, 7327, 
	7329, 7, 398, 2, 2, 7328, 7326, 3, 2, 2, 2, 7328, 7327, 3, 2, 2, 2, 7329, 
	7337, 3, 2, 2, 2, 7330, 7333, 7, 591, 2, 2, 7331, 7334, 5, 588, 295, 2, 
	7332, 7334, 7, 398, 2, 2, 7333, 7331, 3, 2, 2, 2, 7333, 7332, 3, 2, 2, 
	2, 7334, 7336, 3, 2, 2, 2, 7335, 7330, 3, 2, 2, 2, 7336, 7339, 3, 2, 2, 
	2, 7337, 7335, 3, 2, 2, 2, 7337, 7338, 3, 2, 2, 2, 7338, 7340, 3, 2, 2, 
	2, 7339, 7337, 3, 2, 2, 2, 7340, 7343, 7, 598, 2, 2, 7341, 7343, 5, 650, 
	326, 2, 7342, 7325, 3, 2, 2, 2, 7342, 7341, 3, 2, 2, 2, 7343, 7345, 3, 
	2, 2, 2, 7344, 7305, 3, 2, 2, 2, 7344, 7311, 3, 2, 2, 2, 7345, 715, 3, 
	2, 2, 2, 7346, 7347, 7, 160, 2, 2, 7347, 7350, 5, 556, 279, 2, 7348, 7349, 
	7, 591, 2, 2, 7349, 7351, 5, 340, 171, 2, 7350, 7348, 3, 2, 2, 2, 7350, 
	7351, 3, 2, 2, 2, 7351, 717, 3, 2, 2, 2, 7352, 7354, 7, 269, 2, 2, 7353, 
	7355, 7, 438, 2, 2, 7354, 7353, 3, 2, 2, 2, 7354, 7355, 3, 2, 2, 2, 7355, 
	7356, 3, 2, 2, 2, 7356, 7361, 5, 404, 203, 2, 7357, 7358, 7, 591, 2, 2, 
	7358, 7360, 5, 404, 203, 2, 7359, 7357, 3, 2, 2, 2, 7360, 7363, 3, 2, 2, 
	2, 7361, 7359, 3, 2, 2, 2, 7361, 7362, 3, 2, 2, 2, 7362, 7366, 3, 2, 2, 
	2, 7363, 7361, 3, 2, 2, 2, 7364, 7365, 9, 101, 2, 2, 7365, 7367, 7, 105, 
	2, 2, 7366, 7364, 3, 2, 2, 2, 7366, 7367, 3, 2, 2, 2, 7367, 7369, 3, 2, 
	2, 2, 7368, 7370, 5, 530, 266, 2, 7369, 7368, 3, 2, 2, 2, 7369, 7370, 3, 
	2, 2, 2, 7370, 719, 3, 2, 2, 2, 7371, 7376, 5, 556, 279, 2, 7372, 7373, 
	7, 591, 2, 2, 7373, 7375, 5, 556, 279, 2, 7374, 7372, 3, 2, 2, 2, 7375, 
	7378, 3, 2, 2, 2, 7376, 7374, 3, 2, 2, 2, 7376, 7377, 3, 2, 2, 2, 7377, 
	721, 3, 2, 2, 2, 7378, 7376, 3, 2, 2, 2, 7379, 7385, 7, 402, 2, 2, 7380, 
	7383, 7, 127, 2, 2, 7381, 7384, 5, 556, 279, 2, 7382, 7384, 5, 340, 171, 
	2, 7383, 7381, 3, 2, 2, 2, 7383, 7382, 3, 2, 2, 2, 7384, 7386, 3, 2, 2, 
	2, 7385, 7380, 3, 2, 2, 2, 7385, 7386, 3, 2, 2, 2, 7386, 7387, 3, 2, 2, 
	2, 7387, 7396, 5, 340, 171, 2, 7388, 7389, 7, 402, 2, 2, 7389, 7390, 5, 
	340, 171, 2, 7390, 7393, 7, 127, 2, 2, 7391, 7394, 5, 556, 279, 2, 7392, 
	7394, 5, 340, 171, 2, 7393, 7391, 3, 2, 2, 2, 7393, 7392, 3, 2, 2, 2, 7394, 
	7396, 3, 2, 2, 2, 7395, 7379, 3, 2, 2, 2, 7395, 7388, 3, 2, 2, 2, 7396, 
	723, 3, 2, 2, 2, 7397, 7398, 7, 616, 2, 2, 7398, 7401, 5, 556, 279, 2, 
	7399, 7402, 5, 556, 279, 2, 7400, 7402, 5, 604, 303, 2, 7401, 7399, 3, 
	2, 2, 2, 7401, 7400, 3, 2, 2, 2, 7402, 725, 3, 2, 2, 2, 7403, 7405, 5, 
	728, 365, 2, 7404, 7403, 3, 2, 2, 2, 7404, 7405, 3, 2, 2, 2, 7405, 7407, 
	3, 2, 2, 2, 7406, 7408, 5, 730, 366, 2, 7407, 7406, 3, 2, 2, 2, 7407, 7408, 
	3, 2, 2, 2, 7408, 7409, 3, 2, 2, 2, 7409, 7410, 7, 21, 2, 2, 7410, 7412, 
	5, 742, 372, 2, 7411, 7413, 5, 740, 371, 2, 7412, 7411, 3, 2, 2, 2, 7412, 
	7413, 3, 2, 2, 2, 7413, 7414, 3, 2, 2, 2, 7414, 7416, 7, 404, 2, 2, 7415, 
	7417, 5, 556, 279, 2, 7416, 7415, 3, 2, 2, 2, 7416, 7417, 3, 2, 2, 2, 7417, 
	727, 3, 2, 2, 2, 7418, 7419, 7, 613, 2, 2, 7419, 7420, 5, 560, 281, 2, 
	7420, 7421, 7, 614, 2, 2, 7421, 729, 3, 2, 2, 2, 7422, 7426, 7, 58, 2, 
	2, 7423, 7425, 5, 732, 367, 2, 7424, 7423, 3, 2, 2, 2, 7425, 7428, 3, 2, 
	2, 2, 7426, 7424, 3, 2, 2, 2, 7426, 7427, 3, 2, 2, 2, 7427, 731, 3, 2, 
	2, 2, 7428, 7426, 3, 2, 2, 2, 7429, 7431, 7, 58, 2, 2, 7430, 7429, 3, 2, 
	2, 2, 7431, 7434, 3, 2, 2, 2, 7432, 7430, 3, 2, 2, 2, 7432, 7433, 3, 2, 
	2, 2, 7433, 7435, 3, 2, 2, 2, 7434, 7432, 3, 2, 2, 2, 7435, 7436, 5, 556, 
	279, 2, 7436, 7437, 5, 734, 368, 2, 7437, 7438, 7, 590, 2, 2, 7438, 733, 
	3, 2, 2, 2, 7439, 7441, 7, 556, 2, 2, 7440, 7439, 3, 2, 2, 2, 7440, 7441, 
	3, 2, 2, 2, 7441, 7442, 3, 2, 2, 2, 7442, 7444, 5, 738, 370, 2, 7443, 7445, 
	5, 532, 267, 2, 7444, 7443, 3, 2, 2, 2, 7444, 7445, 3, 2, 2, 2, 7445, 7448, 
	3, 2, 2, 2, 7446, 7447, 7, 423, 2, 2, 7447, 7449, 7, 424, 2, 2, 7448, 7446, 
	3, 2, 2, 2, 7448, 7449, 3, 2, 2, 2, 7449, 7452, 3, 2, 2, 2, 7450, 7451, 
	9, 102, 2, 2, 7451, 7453, 5, 588, 295, 2, 7452, 7450, 3, 2, 2, 2, 7452, 
	7453, 3, 2, 2, 2, 7453, 7476, 3, 2, 2, 2, 7454, 7455, 7, 554, 2, 2, 7455, 
	7458, 7, 408, 2, 2, 7456, 7459, 5, 556, 279, 2, 7457, 7459, 7, 622, 2, 
	2, 7458, 7456, 3, 2, 2, 2, 7458, 7457, 3, 2, 2, 2, 7459, 7476, 3, 2, 2, 
	2, 7460, 7462, 7, 157, 2, 2, 7461, 7460, 3, 2, 2, 2, 7461, 7462, 3, 2, 
	2, 2, 7462, 7463, 3, 2, 2, 2, 7463, 7465, 7, 227, 2, 2, 7464, 7461, 3, 
	2, 2, 2, 7464, 7465, 3, 2, 2, 2, 7465, 7466, 3, 2, 2, 2, 7466, 7471, 7, 
	52, 2, 2, 7467, 7468, 7, 597, 2, 2, 7468, 7469, 5, 736, 369, 2, 7469, 7470, 
	7, 598, 2, 2, 7470, 7472, 3, 2, 2, 2, 7471, 7467, 3, 2, 2, 2, 7471, 7472, 
	3, 2, 2, 2, 7472, 7473, 3, 2, 2, 2, 7473, 7474, 9, 103, 2, 2, 7474, 7476, 
	5, 652, 327, 2, 7475, 7440, 3, 2, 2, 2, 7475, 7454, 3, 2, 2, 2, 7475, 7464, 
	3, 2, 2, 2, 7476, 735, 3, 2, 2, 2, 7477, 7478, 5, 556, 279, 2, 7478, 7485, 
	5, 576, 289, 2, 7479, 7480, 7, 591, 2, 2, 7480, 7481, 5, 556, 279, 2, 7481, 
	7482, 5, 576, 289, 2, 7482, 7484, 3, 2, 2, 2, 7483, 7479, 3, 2, 2, 2, 7484, 
	7487, 3, 2, 2, 2, 7485, 7483, 3, 2, 2, 2, 7485, 7486, 3, 2, 2, 2, 7486, 
	737, 3, 2, 2, 2, 7487, 7485, 3, 2, 2, 2, 7488, 7498, 5, 576, 289, 2, 7489, 
	7490, 5, 646, 324, 2, 7490, 7491, 7, 603, 2, 2, 7491, 7492, 7, 271, 2, 
	2, 7492, 7498, 3, 2, 2, 2, 7493, 7494, 5, 572, 287, 2, 7494, 7495, 7, 603, 
	2, 2, 7495, 7496, 7, 581, 2, 2, 7496, 7498, 3, 2, 2, 2, 7497, 7488, 3, 
	2, 2, 2, 7497, 7489, 3, 2, 2, 2, 7497, 7493, 3, 2, 2, 2, 7498, 739, 3, 
	2, 2, 2, 7499, 7505, 7, 565, 2, 2, 7500, 7501, 7, 448, 2, 2, 7501, 7502, 
	5, 588, 295, 2, 7502, 7503, 7, 439, 2, 2, 7503, 7504, 5, 742, 372, 2, 7504, 
	7506, 3, 2, 2, 2, 7505, 7500, 3, 2, 2, 2, 7506, 7507, 3, 2, 2, 2, 7507, 
	7505, 3, 2, 2, 2, 7507, 7508, 3, 2, 2, 2, 7508, 741, 3, 2, 2, 2, 7509, 
	7510, 5, 744, 373, 2, 7510, 7511, 7, 590, 2, 2, 7511, 7513, 3, 2, 2, 2, 
	7512, 7509, 3, 2, 2, 2, 7513, 7516, 3, 2, 2, 2, 7514, 7512, 3, 2, 2, 2, 
	7514, 7515, 3, 2, 2, 2, 7515, 743, 3, 2, 2, 2, 7516, 7514, 3, 2, 2, 2, 
	7517, 7527, 5, 726, 364, 2, 7518, 7527, 5, 746, 374, 2, 7519, 7527, 5, 
	758, 380, 2, 7520, 7527, 5, 764, 383, 2, 7521, 7527, 5, 760, 381, 2, 7522, 
	7527, 5, 766, 384, 2, 7523, 7527, 5, 60, 31, 2, 7524, 7527, 5, 786, 394, 
	2, 7525, 7527, 5, 30, 16, 2, 7526, 7517, 3, 2, 2, 2, 7526, 7518, 3, 2, 
	2, 2, 7526, 7519, 3, 2, 2, 2, 7526, 7520, 3, 2, 2, 2, 7526, 7521, 3, 2, 
	2, 2, 7526, 7522, 3, 2, 2, 2, 7526, 7523, 3, 2, 2, 2, 7526, 7524, 3, 2, 
	2, 2, 7526, 7525, 3, 2, 2, 2, 7527, 745, 3, 2, 2, 2, 7528, 7546, 5, 754, 
	378, 2, 7529, 7530, 7, 575, 2, 2, 7530, 7546, 5, 752, 377, 2, 7531, 7533, 
	7, 567, 2, 2, 7532, 7534, 9, 104, 2, 2, 7533, 7532, 3, 2, 2, 2, 7533, 7534, 
	3, 2, 2, 2, 7534, 7535, 3, 2, 2, 2, 7535, 7536, 7, 560, 2, 2, 7536, 7541, 
	5, 750, 376, 2, 7537, 7538, 7, 591, 2, 2, 7538, 7540, 5, 750, 376, 2, 7539, 
	7537, 3, 2, 2, 2, 7540, 7543, 3, 2, 2, 2, 7541, 7539, 3, 2, 2, 2, 7541, 
	7542, 3, 2, 2, 2, 7542, 7546, 3, 2, 2, 2, 7543, 7541, 3, 2, 2, 2, 7544, 
	7546, 7, 424, 2, 2, 7545, 7528, 3, 2, 2, 2, 7545, 7529, 3, 2, 2, 2, 7545, 
	7531, 3, 2, 2, 2, 7545, 7544, 3, 2, 2, 2, 7546, 747, 3, 2, 2, 2, 7547, 
	7550, 5, 646, 324, 2, 7548, 7550, 7, 622, 2, 2, 7549, 7547, 3, 2, 2, 2, 
	7549, 7548, 3, 2, 2, 2, 7550, 7557, 3, 2, 2, 2, 7551, 7552, 7, 609, 2, 
	2, 7552, 7553, 5, 588, 295, 2, 7553, 7554, 7, 610, 2, 2, 7554, 7556, 3, 
	2, 2, 2, 7555, 7551, 3, 2, 2, 2, 7556, 7559, 3, 2, 2, 2, 7557, 7555, 3, 
	2, 2, 2, 7557, 7558, 3, 2, 2, 2, 7558, 749, 3, 2, 2, 2, 7559, 7557, 3, 
	2, 2, 2, 7560, 7561, 5, 748, 375, 2, 7561, 7562, 9, 105, 2, 2, 7562, 7563, 
	5, 556, 279, 2, 7563, 751, 3, 2, 2, 2, 7564, 7577, 5, 648, 325, 2, 7565, 
	7566, 7, 426, 2, 2, 7566, 7567, 7, 597, 2, 2, 7567, 7572, 5, 588, 295, 
	2, 7568, 7569, 7, 591, 2, 2, 7569, 7571, 5, 588, 295, 2, 7570, 7568, 3, 
	2, 2, 2, 7571, 7574, 3, 2, 2, 2, 7572, 7570, 3, 2, 2, 2, 7572, 7573, 3, 
	2, 2, 2, 7573, 7575, 3, 2, 2, 2, 7574, 7572, 3, 2, 2, 2, 7575, 7576, 7, 
	598, 2, 2, 7576, 7578, 3, 2, 2, 2, 7577, 7565, 3, 2, 2, 2, 7577, 7578, 
	3, 2, 2, 2, 7578, 7580, 3, 2, 2, 2, 7579, 7564, 3, 2, 2, 2, 7579, 7580, 
	3, 2, 2, 2, 7580, 7581, 3, 2, 2, 2, 7581, 7591, 5, 668, 335, 2, 7582, 7583, 
	7, 410, 2, 2, 7583, 7588, 5, 674, 338, 2, 7584, 7585, 7, 591, 2, 2, 7585, 
	7587, 5, 674, 338, 2, 7586, 7584, 3, 2, 2, 2, 7587, 7590, 3, 2, 2, 2, 7588, 
	7586, 3, 2, 2, 2, 7588, 7589, 3, 2, 2, 2, 7589, 7592, 3, 2, 2, 2, 7590, 
	7588, 3, 2, 2, 2, 7591, 7582, 3, 2, 2, 2, 7591, 7592, 3, 2, 2, 2, 7592, 
	7595, 3, 2, 2, 2, 7593, 7594, 7, 449, 2, 2, 7594, 7596, 5, 588, 295, 2, 
	7595, 7593, 3, 2, 2, 2, 7595, 7596, 3, 2, 2, 2, 7596, 7598, 3, 2, 2, 2, 
	7597, 7599, 5, 682, 342, 2, 7598, 7597, 3, 2, 2, 2, 7598, 7599, 3, 2, 2, 
	2, 7599, 7602, 3, 2, 2, 2, 7600, 7601, 7, 413, 2, 2, 7601, 7603, 5, 588, 
	295, 2, 7602, 7600, 3, 2, 2, 2, 7602, 7603, 3, 2, 2, 2, 7603, 7618, 3, 
	2, 2, 2, 7604, 7605, 7, 450, 2, 2, 7605, 7606, 5, 556, 279, 2, 7606, 7607, 
	7, 381, 2, 2, 7607, 7615, 5, 634, 318, 2, 7608, 7609, 7, 591, 2, 2, 7609, 
	7610, 5, 556, 279, 2, 7610, 7611, 7, 381, 2, 2, 7611, 7612, 5, 634, 318, 
	2, 7612, 7614, 3, 2, 2, 2, 7613, 7608, 3, 2, 2, 2, 7614, 7617, 3, 2, 2, 
	2, 7615, 7613, 3, 2, 2, 2, 7615, 7616, 3, 2, 2, 2, 7616, 7619, 3, 2, 2, 
	2, 7617, 7615, 3, 2, 2, 2, 7618, 7604, 3, 2, 2, 2, 7618, 7619, 3, 2, 2, 
	2, 7619, 7625, 3, 2, 2, 2, 7620, 7622, 9, 96, 2, 2, 7621, 7623, 5, 648, 
	325, 2, 7622, 7621, 3, 2, 2, 2, 7622, 7623, 3, 2, 2, 2, 7623, 7624, 3, 
	2, 2, 2, 7624, 7626, 5, 662, 332, 2, 7625, 7620, 3, 2, 2, 2, 7625, 7626, 
	3, 2, 2, 2, 7626, 7630, 3, 2, 2, 2, 7627, 7629, 5, 654, 328, 2, 7628, 7627, 
	3, 2, 2, 2, 7629, 7632, 3, 2, 2, 2, 7630, 7628, 3, 2, 2, 2, 7630, 7631, 
	3, 2, 2, 2, 7631, 753, 3, 2, 2, 2, 7632, 7630, 3, 2, 2, 2, 7633, 7634, 
	5, 748, 375, 2, 7634, 7637, 9, 105, 2, 2, 7635, 7638, 5, 656, 329, 2, 7636, 
	7638, 5, 752, 377, 2, 7637, 7635, 3, 2, 2, 2, 7637, 7636, 3, 2, 2, 2, 7638, 
	755, 3, 2, 2, 2, 7639, 7640, 7, 84, 2, 2, 7640, 7642, 5, 588, 295, 2, 7641, 
	7643, 5, 780, 391, 2, 7642, 7641, 3, 2, 2, 2, 7642, 7643, 3, 2, 2, 2, 7643, 
	757, 3, 2, 2, 2, 7644, 7651, 5, 774, 388, 2, 7645, 7646, 7, 24, 2, 2, 7646, 
	7651, 5, 610, 306, 2, 7647, 7651, 5, 782, 392, 2, 7648, 7651, 5, 784, 393, 
	2, 7649, 7651, 5, 776, 389, 2, 7650, 7644, 3, 2, 2, 2, 7650, 7645, 3, 2, 
	2, 2, 7650, 7647, 3, 2, 2, 2, 7650, 7648, 3, 2, 2, 2, 7650, 7649, 3, 2, 
	2, 2, 7651, 759, 3, 2, 2, 2, 7652, 7653, 7, 574, 2, 2, 7653, 7658, 5, 748, 
	375, 2, 7654, 7656, 7, 157, 2, 2, 7655, 7654, 3, 2, 2, 2, 7655, 7656, 3, 
	2, 2, 2, 7656, 7657, 3, 2, 2, 2, 7657, 7659, 7, 227, 2, 2, 7658, 7655, 
	3, 2, 2, 2, 7658, 7659, 3, 2, 2, 2, 7659, 7660, 3, 2, 2, 2, 7660, 7661, 
	7, 408, 2, 2, 7661, 7662, 5, 786, 394, 2, 7662, 7697, 3, 2, 2, 2, 7663, 
	7664, 7, 574, 2, 2, 7664, 7676, 5, 748, 375, 2, 7665, 7666, 7, 597, 2, 
	2, 7666, 7671, 5, 762, 382, 2, 7667, 7668, 7, 591, 2, 2, 7668, 7670, 5, 
	762, 382, 2, 7669, 7667, 3, 2, 2, 2, 7670, 7673, 3, 2, 2, 2, 7671, 7669, 
	3, 2, 2, 2, 7671, 7672, 3, 2, 2, 2, 7672, 7674, 3, 2, 2, 2, 7673, 7671, 
	3, 2, 2, 2, 7674, 7675, 7, 598, 2, 2, 7675, 7677, 3, 2, 2, 2, 7676, 7665, 
	3, 2, 2, 2, 7676, 7677, 3, 2, 2, 2, 7677, 7697, 3, 2, 2, 2, 7678, 7680, 
	7, 407, 2, 2, 7679, 7681, 5, 58, 30, 2, 7680, 7679, 3, 2, 2, 2, 7680, 7681, 
	3, 2, 2, 2, 7681, 7683, 3, 2, 2, 2, 7682, 7684, 9, 7, 2, 2, 7683, 7682, 
	3, 2, 2, 2, 7683, 7684, 3, 2, 2, 2, 7684, 7685, 3, 2, 2, 2, 7685, 7697, 
	5, 748, 375, 2, 7686, 7688, 7, 148, 2, 2, 7687, 7689, 5, 58, 30, 2, 7688, 
	7687, 3, 2, 2, 2, 7688, 7689, 3, 2, 2, 2, 7689, 7691, 3, 2, 2, 2, 7690, 
	7692, 9, 7, 2, 2, 7691, 7690, 3, 2, 2, 2, 7691, 7692, 3, 2, 2, 2, 7692, 
	7693, 3, 2, 2, 2, 7693, 7697, 5, 748, 375, 2, 7694, 7695, 7, 33, 2, 2, 
	7695, 7697, 5, 748, 375, 2, 7696, 7652, 3, 2, 2, 2, 7696, 7663, 3, 2, 2, 
	2, 7696, 7678, 3, 2, 2, 2, 7696, 7686, 3, 2, 2, 2, 7696, 7694, 3, 2, 2, 
	2, 7697, 761, 3, 2, 2, 2, 7698, 7699, 5, 556, 279, 2, 7699, 7700, 7, 612, 
	2, 2, 7700, 7702, 3, 2, 2, 2, 7701, 7698, 3, 2, 2, 2, 7701, 7702, 3, 2, 
	2, 2, 7702, 7703, 3, 2, 2, 2, 7703, 7704, 5, 588, 295, 2, 7704, 763, 3, 
	2, 2, 2, 7705, 7711, 9, 106, 2, 2, 7706, 7708, 7, 378, 2, 2, 7707, 7709, 
	7, 157, 2, 2, 7708, 7707, 3, 2, 2, 2, 7708, 7709, 3, 2, 2, 2, 7709, 7710, 
	3, 2, 2, 2, 7710, 7712, 7, 29, 2, 2, 7711, 7706, 3, 2, 2, 2, 7711, 7712, 
	3, 2, 2, 2, 7712, 7715, 3, 2, 2, 2, 7713, 7715, 5, 24, 13, 2, 7714, 7705, 
	3, 2, 2, 2, 7714, 7713, 3, 2, 2, 2, 7715, 765, 3, 2, 2, 2, 7716, 7718, 
	7, 577, 2, 2, 7717, 7719, 5, 768, 385, 2, 7718, 7717, 3, 2, 2, 2, 7718, 
	7719, 3, 2, 2, 2, 7719, 7728, 3, 2, 2, 2, 7720, 7725, 5, 340, 171, 2, 7721, 
	7722, 7, 591, 2, 2, 7722, 7724, 5, 588, 295, 2, 7723, 7721, 3, 2, 2, 2, 
	7724, 7727, 3, 2, 2, 2, 7725, 7723, 3, 2, 2, 2, 7725, 7726, 3, 2, 2, 2, 
	7726, 7729, 3, 2, 2, 2, 7727, 7725, 3, 2, 2, 2, 7728, 7720, 3, 2, 2, 2, 
	7728, 7729, 3, 2, 2, 2, 7729, 7731, 3, 2, 2, 2, 7730, 7732, 5, 770, 386, 
	2, 7731, 7730, 3, 2, 2, 2, 7731, 7732, 3, 2, 2, 2, 7732, 7757, 3, 2, 2, 
	2, 7733, 7735, 7, 577, 2, 2, 7734, 7736, 5, 768, 385, 2, 7735, 7734, 3, 
	2, 2, 2, 7735, 7736, 3, 2, 2, 2, 7736, 7737, 3, 2, 2, 2, 7737, 7739, 5, 
	556, 279, 2, 7738, 7740, 5, 770, 386, 2, 7739, 7738, 3, 2, 2, 2, 7739, 
	7740, 3, 2, 2, 2, 7740, 7757, 3, 2, 2, 2, 7741, 7743, 7, 577, 2, 2, 7742, 
	7744, 5, 768, 385, 2, 7743, 7742, 3, 2, 2, 2, 7743, 7744, 3, 2, 2, 2, 7744, 
	7745, 3, 2, 2, 2, 7745, 7746, 7, 583, 2, 2, 7746, 7748, 5, 340, 171, 2, 
	7747, 7749, 5, 770, 386, 2, 7748, 7747, 3, 2, 2, 2, 7748, 7749, 3, 2, 2, 
	2, 7749, 7757, 3, 2, 2, 2, 7750, 7751, 7, 555, 2, 2, 7751, 7754, 5, 588, 
	295, 2, 7752, 7753, 7, 591, 2, 2, 7753, 7755, 5, 588, 295, 2, 7754, 7752, 
	3, 2, 2, 2, 7754, 7755, 3, 2, 2, 2, 7755, 7757, 3, 2, 2, 2, 7756, 7716, 
	3, 2, 2, 2, 7756, 7733, 3, 2, 2, 2, 7756, 7741, 3, 2, 2, 2, 7756, 7750, 
	3, 2, 2, 2, 7757, 767, 3, 2, 2, 2, 7758, 7759, 9, 107, 2, 2, 7759, 769, 
	3, 2, 2, 2, 7760, 7761, 7, 446, 2, 2, 7761, 7762, 5, 772, 387, 2, 7762, 
	7763, 7, 588, 2, 2, 7763, 7771, 5, 588, 295, 2, 7764, 7765, 7, 591, 2, 
	2, 7765, 7766, 5, 772, 387, 2, 7766, 7767, 7, 588, 2, 2, 7767, 7768, 5, 
	588, 295, 2, 7768, 7770, 3, 2, 2, 2, 7769, 7764, 3, 2, 2, 2, 7770, 7773, 
	3, 2, 2, 2, 7771, 7769, 3, 2, 2, 2, 7771, 7772, 3, 2, 2, 2, 7772, 771, 
	3, 2, 2, 2, 7773, 7771, 3, 2, 2, 2, 7774, 7775, 9, 108, 2, 2, 7775, 773, 
	3, 2, 2, 2, 7776, 7778, 7, 579, 2, 2, 7777, 7779, 5, 752, 377, 2, 7778, 
	7777, 3, 2, 2, 2, 7778, 7779, 3, 2, 2, 2, 7779, 7787, 3, 2, 2, 2, 7780, 
	7781, 7, 579, 2, 2, 7781, 7782, 7, 152, 2, 2, 7782, 7787, 5, 588, 295, 
	2, 7783, 7784, 7, 579, 2, 2, 7784, 7785, 7, 576, 2, 2, 7785, 7787, 5, 786, 
	394, 2, 7786, 7776, 3, 2, 2, 2, 7786, 7780, 3, 2, 2, 2, 7786, 7783, 3, 
	2, 2, 2, 7787, 775, 3, 2, 2, 2, 7788, 7790, 5, 728, 365, 2, 7789, 7788, 
	3, 2, 2, 2, 7789, 7790, 3, 2, 2, 2, 7790, 7792, 3, 2, 2, 2, 7791, 7793, 
	5, 778, 390, 2, 7792, 7791, 3, 2, 2, 2, 7792, 7793, 3, 2, 2, 2, 7793, 7794, 
	3, 2, 2, 2, 7794, 7795, 7, 571, 2, 2, 7795, 7796, 5, 742, 372, 2, 7796, 
	7797, 7, 404, 2, 2, 7797, 7799, 7, 571, 2, 2, 7798, 7800, 5, 556, 279, 
	2, 7799, 7798, 3, 2, 2, 2, 7799, 7800, 3, 2, 2, 2, 7800, 7810, 3, 2, 2, 
	2, 7801, 7803, 9, 109, 2, 2, 7802, 7804, 5, 560, 281, 2, 7803, 7802, 3, 
	2, 2, 2, 7803, 7804, 3, 2, 2, 2, 7804, 7807, 3, 2, 2, 2, 7805, 7806, 7, 
	448, 2, 2, 7806, 7808, 5, 588, 295, 2, 7807, 7805, 3, 2, 2, 2, 7807, 7808, 
	3, 2, 2, 2, 7808, 7810, 3, 2, 2, 2, 7809, 7789, 3, 2, 2, 2, 7809, 7801, 
	3, 2, 2, 2, 7810, 777, 3, 2, 2, 2, 7811, 7812, 7, 586, 2, 2, 7812, 7859, 
	5, 588, 295, 2, 7813, 7814, 7, 408, 2, 2, 7814, 7815, 5, 556, 279, 2, 7815, 
	7817, 7, 414, 2, 2, 7816, 7818, 7, 580, 2, 2, 7817, 7816, 3, 2, 2, 2, 7817, 
	7818, 3, 2, 2, 2, 7818, 7819, 3, 2, 2, 2, 7819, 7820, 5, 588, 295, 2, 7820, 
	7821, 7, 615, 2, 2, 7821, 7824, 5, 588, 295, 2, 7822, 7823, 7, 22, 2, 2, 
	7823, 7825, 5, 588, 295, 2, 7824, 7822, 3, 2, 2, 2, 7824, 7825, 3, 2, 2, 
	2, 7825, 7859, 3, 2, 2, 2, 7826, 7827, 7, 408, 2, 2, 7827, 7828, 5, 720, 
	361, 2, 7828, 7829, 7, 414, 2, 2, 7829, 7830, 5, 786, 394, 2, 7830, 7859, 
	3, 2, 2, 2, 7831, 7832, 7, 408, 2, 2, 7832, 7833, 5, 556, 279, 2, 7833, 
	7834, 7, 414, 2, 2, 7834, 7846, 5, 556, 279, 2, 7835, 7836, 7, 597, 2, 
	2, 7836, 7841, 5, 762, 382, 2, 7837, 7838, 7, 591, 2, 2, 7838, 7840, 5, 
	762, 382, 2, 7839, 7837, 3, 2, 2, 2, 7840, 7843, 3, 2, 2, 2, 7841, 7839, 
	3, 2, 2, 2, 7841, 7842, 3, 2, 2, 2, 7842, 7844, 3, 2, 2, 2, 7843, 7841, 
	3, 2, 2, 2, 7844, 7845, 7, 598, 2, 2, 7845, 7847, 3, 2, 2, 2, 7846, 7835, 
	3, 2, 2, 2, 7846, 7847, 3, 2, 2, 2, 7847, 7859, 3, 2, 2, 2, 7848, 7849, 
	7, 566, 2, 2, 7849, 7852, 5, 720, 361, 2, 7850, 7851, 7, 582, 2, 2, 7851, 
	7853, 7, 620, 2, 2, 7852, 7850, 3, 2, 2, 2, 7852, 7853, 3, 2, 2, 2, 7853, 
	7854, 3, 2, 2, 2, 7854, 7855, 7, 414, 2, 2, 7855, 7856, 7, 380, 2, 2, 7856, 
	7857, 5, 588, 295, 2, 7857, 7859, 3, 2, 2, 2, 7858, 7811, 3, 2, 2, 2, 7858, 
	7813, 3, 2, 2, 2, 7858, 7826, 3, 2, 2, 2, 7858, 7831, 3, 2, 2, 2, 7858, 
	7848, 3, 2, 2, 2, 7859, 779, 3, 2, 2, 2, 7860, 7861, 7, 446, 2, 2, 7861, 
	7866, 5, 588, 295, 2, 7862, 7863, 7, 591, 2, 2, 7863, 7865, 5, 588, 295, 
	2, 7864, 7862, 3, 2, 2, 2, 7865, 7868, 3, 2, 2, 2, 7866, 7864, 3, 2, 2, 
	2, 7866, 7867, 3, 2, 2, 2, 7867, 781, 3, 2, 2, 2, 7868, 7866, 3, 2, 2, 
	2, 7869, 7870, 7, 106, 2, 2, 7870, 7871, 5, 588, 295, 2, 7871, 7872, 7, 
	439, 2, 2, 7872, 7880, 5, 742, 372, 2, 7873, 7874, 9, 110, 2, 2, 7874, 
	7875, 5, 588, 295, 2, 7875, 7876, 7, 439, 2, 2, 7876, 7877, 5, 742, 372, 
	2, 7877, 7879, 3, 2, 2, 2, 7878, 7873, 3, 2, 2, 2, 7879, 7882, 3, 2, 2, 
	2, 7880, 7878, 3, 2, 2, 2, 7880, 7881, 3, 2, 2, 2, 7881, 7885, 3, 2, 2, 
	2, 7882, 7880, 3, 2, 2, 2, 7883, 7884, 7, 403, 2, 2, 7884, 7886, 5, 742, 
	372, 2, 7885, 7883, 3, 2, 2, 2, 7885, 7886, 3, 2, 2, 2, 7886, 7887, 3, 
	2, 2, 2, 7887, 7888, 7, 404, 2, 2, 7888, 7889, 7, 106, 2, 2, 7889, 783, 
	3, 2, 2, 2, 7890, 7892, 7, 385, 2, 2, 7891, 7893, 5, 588, 295, 2, 7892, 
	7891, 3, 2, 2, 2, 7892, 7893, 3, 2, 2, 2, 7893, 7906, 3, 2, 2, 2, 7894, 
	7895, 7, 448, 2, 2, 7895, 7900, 5, 588, 295, 2, 7896, 7897, 7, 591, 2, 
	2, 7897, 7899, 5, 588, 295, 2, 7898, 7896, 3, 2, 2, 2, 7899, 7902, 3, 2, 
	2, 2, 7900, 7898, 3, 2, 2, 2, 7900, 7901, 3, 2, 2, 2, 7901, 7903, 3, 2, 
	2, 2, 7902, 7900, 3, 2, 2, 2, 7903, 7904, 7, 439, 2, 2, 7904, 7905, 5, 
	742, 372, 2, 7905, 7907, 3, 2, 2, 2, 7906, 7894, 3, 2, 2, 2, 7907, 7908, 
	3, 2, 2, 2, 7908, 7906, 3, 2, 2, 2, 7908, 7909, 3, 2, 2, 2, 7909, 7912, 
	3, 2, 2, 2, 7910, 7911, 7, 403, 2, 2, 7911, 7913, 5, 742, 372, 2, 7912, 
	7910, 3, 2, 2, 2, 7912, 7913, 3, 2, 2, 2, 7913, 7914, 3, 2, 2, 2, 7914, 
	7915, 7, 404, 2, 2, 7915, 7916, 7, 385, 2, 2, 7916, 785, 3, 2, 2, 2, 7917, 
	7922, 5, 16, 9, 2, 7918, 7922, 5, 756, 379, 2, 7919, 7922, 5, 40, 21, 2, 
	7920, 7922, 5, 32, 17, 2, 7921, 7917, 3, 2, 2, 2, 7921, 7918, 3, 2, 2, 
	2, 7921, 7919, 3, 2, 2, 2, 7921, 7920, 3, 2, 2, 2, 7922, 787, 3, 2, 2, 
	2, 1084, 789, 794, 801, 804, 808, 817, 827, 833, 837, 842, 849, 857, 863, 
	867, 873, 875, 882, 885, 889, 893, 896, 902, 908, 910, 918, 922, 926, 937, 
	944, 947, 951, 958, 965, 968, 979, 982, 988, 992, 995, 1001, 1011, 1019, 
	1028, 1034, 1037, 1041, 1050, 1052, 1059, 1063, 1069, 1073, 1080, 1088, 
	1094, 1099, 1102, 1112, 1117, 1130, 1139, 1143, 1146, 1154, 1159, 1169, 
	1171, 1181, 1186, 1191, 1194, 1197, 1200, 1205, 1214, 1225, 1229, 1233, 
	1238, 1245, 1255, 1260, 1268, 1274, 1277, 1280, 1283, 1285, 1289, 1293, 
	1297, 1305, 1312, 1318, 1322, 1324, 1329, 1371, 1378, 1415, 1430, 1439, 
	1445, 1453, 1457, 1464, 1468, 1470, 1472, 1475, 1480, 1486, 1492, 1503, 
	1505, 1509, 1542, 1561, 1601, 1608, 1614, 1617, 1621, 1624, 1628, 1635, 
	1640, 1662, 1666, 1669, 1674, 1677, 1681, 1685, 1694, 1703, 1721, 1762, 
	1768, 1771, 1773, 1777, 1782, 1786, 1794, 1801, 1806, 1820, 1822, 1828, 
	1836, 1840, 1847, 1853, 1856, 1858, 1869, 1873, 1876, 1886, 1897, 1905, 
	1909, 1925, 1932, 1939, 1944, 1948, 1961, 1965, 1972, 1980, 1984, 1995, 
	2002, 2007, 2014, 2016, 2023, 2034, 2039, 2041, 2048, 2050, 2058, 2060, 
	2067, 2069, 2073, 2077, 2085, 2091, 2094, 2096, 2098, 2103, 2107, 2114, 
	2121, 2128, 2140, 2145, 2159, 2163, 2169, 2176, 2187, 2190, 2194, 2201, 
	2209, 2217, 2234, 2244, 2248, 2257, 2262, 2270, 2283, 2293, 2298, 2311, 
	2323, 2331, 2338, 2346, 2356, 2368, 2375, 2386, 2390, 2397, 2400, 2405, 
	2409, 2416, 2421, 2424, 2426, 2434, 2444, 2448, 2451, 2454, 2458, 2465, 
	2469, 2472, 2475, 2478, 2486, 2493, 2501, 2506, 2509, 2512, 2521, 2531, 
	2535, 2539, 2544, 2546, 2551, 2553, 2556, 2560, 2563, 2566, 2574, 2578, 
	2580, 2596, 2601, 2605, 2607, 2622, 2625, 2635, 2638, 2658, 2676, 2680, 
	2684, 2691, 2694, 2723, 2753, 2757, 2762, 2767, 2774, 2776, 2781, 2786, 
	2790, 2797, 2811, 2831, 2845, 2854, 2880, 2889, 2895, 2906, 2909, 2912, 
	2921, 2927, 2932, 2937, 2942, 2947, 2954, 2959, 2968, 2973, 2975, 2979, 
	2984, 2992, 3002, 3012, 3017, 3030, 3056, 3059, 3062, 3065, 3078, 3088, 
	3096, 3112, 3118, 3121, 3125, 3139, 3144, 3153, 3158, 3170, 3174, 3178, 
	3185, 3189, 3195, 3200, 3206, 3214, 3217, 3221, 3253, 3259, 3262, 3267, 
	3271, 3284, 3289, 3294, 3303, 3314, 3317, 3322, 3327, 3329, 3333, 3339, 
	3350, 3355, 3359, 3366, 3383, 3389, 3398, 3403, 3416, 3424, 3445, 3449, 
	3454, 3462, 3475, 3531, 3539, 3548, 3563, 3567, 3573, 3580, 3588, 3593, 
	3602, 3604, 3611, 3615, 3619, 3630, 3634, 3644, 3649, 3653, 3660, 3663, 
	3671, 3676, 3681, 3683, 3686, 3690, 3696, 3699, 3702, 3707, 3709, 3713, 
	3716, 3719, 3728, 3740, 3742, 3746, 3756, 3759, 3762, 3784, 3794, 3810, 
	3817, 3830, 3835, 3849, 3858, 3864, 3870, 3872, 3879, 3884, 3891, 3895, 
	3905, 3912, 3914, 3921, 3945, 3965, 3975, 3993, 4047, 4063, 4071, 4076, 
	4094, 4098, 4105, 4107, 4114, 4117, 4130, 4147, 4150, 4153, 4156, 4167, 
	4174, 4179, 4182, 4185, 4190, 4195, 4199, 4205, 4215, 4222, 4228, 4232, 
	4238, 4244, 4247, 4252, 4260, 4263, 4267, 4275, 4279, 4287, 4290, 4294, 
	4299, 4317, 4320, 4324, 4329, 4331, 4335, 4341, 4350, 4362, 4367, 4375, 
	4392, 4398, 4402, 4410, 4434, 4443, 4446, 4457, 4464, 4469, 4471, 4474, 
	4478, 4485, 4490, 4492, 4499, 4505, 4511, 4520, 4528, 4537, 4542, 4545, 
	4553, 4560, 4565, 4567, 4570, 4576, 4586, 4591, 4597, 4600, 4616, 4627, 
	4633, 4636, 4653, 4656, 4659, 4663, 4671, 4677, 4687, 4693, 4697, 4700, 
	4707, 4709, 4713, 4721, 4725, 4729, 4732, 4739, 4741, 4745, 4750, 4754, 
	4759, 4763, 4767, 4772, 4777, 4787, 4795, 4813, 4817, 4820, 4823, 4826, 
	4830, 4834, 4838, 4842, 4845, 4850, 4854, 4857, 4872, 4879, 4887, 4892, 
	4894, 4898, 4903, 4906, 4911, 4914, 4919, 4922, 4926, 4931, 4937, 4941, 
	4945, 4950, 4954, 4956, 4959, 4963, 4967, 4972, 4976, 4979, 4982, 4985, 
	4988, 4992, 4996, 5000, 5004, 5007, 5010, 5013, 5019, 5023, 5026, 5031, 
	5036, 5043, 5049, 5057, 5066, 5084, 5092, 5103, 5106, 5111, 5116, 5129, 
	5136, 5141, 5150, 5156, 5160, 5164, 5172, 5184, 5187, 5192, 5197, 5201, 
	5206, 5209, 5214, 5222, 5226, 5229, 5234, 5247, 5254, 5259, 5264, 5271, 
	5273, 5282, 5285, 5291, 5294, 5308, 5323, 5338, 5343, 5346, 5352, 5354, 
	5365, 5374, 5382, 5387, 5397, 5406, 5415, 5422, 5429, 5448, 5450, 5461, 
	5471, 5474, 5481, 5486, 5491, 5501, 5505, 5508, 5512, 5516, 5521, 5525, 
	5529, 5532, 5536, 5542, 5546, 5552, 5564, 5572, 5575, 5579, 5595, 5600, 
	5604, 5609, 5614, 5619, 5626, 5643, 5650, 5654, 5659, 5664, 5666, 5670, 
	5677, 5680, 5685, 5689, 5695, 5701, 5704, 5707, 5711, 5714, 5718, 5721, 
	5725, 5731, 5736, 5740, 5745, 5749, 5758, 5763, 5765, 5794, 5804, 5813, 
	5821, 5833, 5855, 5859, 5867, 5873, 5878, 5884, 5896, 5916, 5926, 5929, 
	5936, 5940, 5945, 5951, 5957, 5968, 5970, 5978, 5986, 5996, 6017, 6030, 
	6036, 6042, 6049, 6051, 6062, 6072, 6091, 6104, 6109, 6117, 6126, 6130, 
	6144, 6151, 6155, 6157, 6166, 6169, 6174, 6176, 6184, 6187, 6192, 6205, 
	6217, 6220, 6223, 6229, 6241, 6246, 6250, 6254, 6258, 6260, 6265, 6272, 
	6277, 6279, 6290, 6295, 6299, 6319, 6329, 6341, 6347, 6351, 6356, 6362, 
	6372, 6378, 6382, 6393, 6405, 6413, 6415, 6425, 6430, 6462, 6468, 6474, 
	6479, 6487, 6492, 6498, 6502, 6505, 6508, 6512, 6518, 6530, 6533, 6536, 
	6539, 6550, 6559, 6561, 6568, 6573, 6578, 6583, 6587, 6590, 6601, 6603, 
	6610, 6612, 6621, 6627, 6634, 6639, 6644, 6650, 6660, 6668, 6671, 6676, 
	6678, 6681, 6687, 6692, 6699, 6709, 6714, 6718, 6721, 6733, 6738, 6743, 
	6749, 6756, 6759, 6770, 6775, 6777, 6780, 6783, 6791, 6794, 6798, 6801, 
	6805, 6818, 6821, 6825, 6829, 6832, 6839, 6846, 6850, 6853, 6862, 6865, 
	6876, 6878, 6886, 6888, 6899, 6901, 6908, 6910, 6914, 6918, 6921, 6931, 
	6937, 6939, 6942, 6948, 6953, 6958, 6967, 6973, 6975, 6978, 6986, 6992, 
	6996, 7002, 7005, 7014, 7019, 7021, 7023, 7026, 7035, 7040, 7051, 7065, 
	7075, 7081, 7089, 7095, 7100, 7104, 7116, 7121, 7124, 7130, 7136, 7143, 
	7148, 7151, 7156, 7161, 7164, 7168, 7176, 7183, 7187, 7192, 7204, 7209, 
	7211, 7214, 7219, 7223, 7226, 7229, 7237, 7240, 7247, 7249, 7253, 7256, 
	7260, 7264, 7267, 7270, 7278, 7287, 7290, 7297, 7299, 7303, 7309, 7317, 
	7323, 7328, 7333, 7337, 7342, 7344, 7350, 7354, 7361, 7366, 7369, 7376, 
	7383, 7385, 7393, 7395, 7401, 7404, 7407, 7412, 7416, 7426, 7432, 7440, 
	7444, 7448, 7452, 7458, 7461, 7464, 7471, 7475, 7485, 7497, 7507, 7514, 
	7526, 7533, 7541, 7545, 7549, 7557, 7572, 7577, 7579, 7588, 7591, 7595, 
	7598, 7602, 7615, 7618, 7622, 7625, 7630, 7637, 7642, 7650, 7655, 7658, 
	7671, 7676, 7680, 7683, 7688, 7691, 7696, 7701, 7708, 7711, 7714, 7718, 
	7725, 7728, 7731, 7735, 7739, 7743, 7748, 7754, 7756, 7771, 7778, 7786, 
	7789, 7792, 7799, 7803, 7807, 7809, 7817, 7824, 7841, 7846, 7852, 7858, 
	7866, 7880, 7885, 7892, 7900, 7908, 7912, 7921,
}
var literalNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "'='", "':'", "';'", "','", "", 
	"'<'", "'<='", "'>'", "'>='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
	"'%'", "'^'", "'.'", "'''", "'\"'", "'$'", "'['", "']'", "'=>'", "':='", 
	"'<<'", "'>>'", "'..'", "'#'", "", "", "", "", "", "", "", "", "", "", 
	"' '", "", "", "'\u0009'", "'\uFEFF'",
}
var symbolicNames = []string{
	"", "ABORT", "ABSOLUTE", "ACCESS", "ACTION", "ADD", "ADMIN", "AFTER", "AGGREGATE", 
	"ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", "ATTACH", "ATTRIBUTE", 
	"BACKWARD", "BEFORE", "BEGIN", "BY", "CACHE", "CALL", "CALLED", "CASCADE", 
	"CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", "CHECKPOINT", "CLASS", 
	"CLOSE", "CLUSTER", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", 
	"CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINTS", "CONTENT", "CONTINUE", 
	"CONVERSION", "COPY", "COST", "CSV", "CUBE", "CURRENT", "CURSOR", "CYCLE", 
	"DATA", "DATABASE", "DAY", "DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", 
	"DEFINER", "DELETE", "DELIMITER", "DELIMITERS", "DEPENDS", "DETACH", "DICTIONARY", 
	"DISABLE", "DISCARD", "DOCUMENT", "DOMAIN", "DOUBLE", "DROP", "EACH", "ENABLE", 
	"ENCODING", "ENCRYPTED", "ENUM", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", 
	"EXCLUSIVE", "EXECUTE", "EXPLAIN", "EXPRESSION", "EXTENSION", "EXTERNAL", 
	"FAMILY", "FILTER", "FIRST", "FOLLOWING", "FORCE", "FORWARD", "FUNCTION", 
	"FUNCTIONS", "GENERATED", "GLOBAL", "GRANTED", "GROUPS", "HANDLER", "HEADER", 
	"HOLD", "HOUR", "IDENTITY", "IF", "IMMEDIATE", "IMMUTABLE", "IMPLICIT", 
	"IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", 
	"INHERITS", "INLINE", "INPUT", "INSENSITIVE", "INSERT", "INSTEAD", "INVOKER", 
	"ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE", "LAST", "LEAKPROOF", 
	"LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKED", "LOGGED", 
	"MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MINUTE", "MINVALUE", 
	"MODE", "MONTH", "MOVE", "NAME", "NAMES", "NEW", "NEXT", "NFC", "NFD", 
	"NFKC", "NFKD", "NO", "NORMALIZED", "NOTHING", "NOTIFY", "NOWAIT", "NULLS", 
	"OBJECT", "OF", "OFF", "OIDS", "OLD", "OPERATOR", "OPTION", "OPTIONS", 
	"ORDINALITY", "OTHERS", "OVER", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", 
	"PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLANS", "POLICY", 
	"PRECEDING", "PREPARE", "PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", 
	"PROCEDURAL", "PROCEDURE", "PROCEDURES", "PROGRAM", "PUBLICATION", "QUOTE", 
	"RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCING", 
	"REFRESH", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", 
	"REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", "ROLE", 
	"ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINES", "ROWS", "RULE", "SAVEPOINT", 
	"SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND", "SECURITY", "SEQUENCE", 
	"SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET", "SETS", "SHARE", 
	"SHOW", "SIMPLE", "SKIP_", "SNAPSHOT", "SQL", "STABLE", "STANDALONE", "START", 
	"STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT", 
	"STRIP", "SUBSCRIPTION", "SUPPORT", "SYSID", "SYSTEM", "TABLES", "TABLESPACE", 
	"TEMP", "TEMPLATE", "TEMPORARY", "TEXT", "TIES", "TRANSACTION", "TRANSFORM", 
	"TRIGGER", "TRUNCATE", "TRUSTED", "TYPE", "TYPES", "UESCAPE", "UNBOUNDED", 
	"UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", 
	"UPDATE", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VARYING", 
	"VERSION", "VIEW", "VIEWS", "VOLATILE", "WHITESPACE", "WITHIN", "WITHOUT", 
	"WORK", "WRAPPER", "WRITE", "XML", "YEAR", "YES", "ZONE", "BETWEEN", "BIGINT", 
	"BIT", "BOOLEAN", "CHAR", "CHARACTER", "COALESCE", "DEC", "DECIMAL", "EXISTS", 
	"EXTRACT", "FLOAT", "GREATEST", "GROUPING", "INOUT", "INT", "INTEGER", 
	"INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", "NORMALIZE", "NULLIF", 
	"NUMERIC", "OUT", "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", "SETOF", 
	"SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", "VALUES", 
	"VARCHAR", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", 
	"XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
	"AUTHORIZATION", "BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", 
	"FREEZE", "FULL", "ILIKE", "INNER", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", 
	"NATURAL", "NOTNULL", "OUTER", "OVERLAPS", "RIGHT", "SIMILAR", "TABLESAMPLE", 
	"VERBOSE", "ALL", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", 
	"BOTH", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "CONSTRAINT", "CREATE", 
	"CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
	"CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", 
	"END", "EXCEPT", "FALSE", "FETCH", "FOR", "FOREIGN", "FROM", "GRANT", "GROUP", 
	"HAVING", "IN", "INITIALLY", "INTERSECT", "INTO", "LATERAL", "LEADING", 
	"LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL", "OFFSET", "ON", 
	"ONLY", "OR", "ORDER", "PLACING", "PRIMARY", "REFERENCES", "RETURNING", 
	"SELECT", "SESSION_USER", "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", "TRAILING", 
	"TRUE", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", "WHEN", "WHERE", 
	"WINDOW", "WITH", "ALIGNMENT", "ALLOW_CONNECTIONS", "BASETYPE", "BUFFERS", 
	"BYPASSRLS", "CANONICAL", "CATEGORY", "COLLATABLE", "COMBINEFUNC", "COMMUTATOR", 
	"CONNECT", "COSTS", "CREATEDB", "CREATEROLE", "DESERIALFUNC", "DETERMINISTIC", 
	"DISABLE_PAGE_SKIPPING", "ELEMENT", "EXTENDED", "FINALFUNC", "FINALFUNC_EXTRA", 
	"FINALFUNC_MODIFY", "FORCE_NOT_NULL", "FORCE_NULL", "FORCE_QUOTE", "FORMAT", 
	"GETTOKEN", "HASH", "HASHES", "HEADLINE", "HYPOTHETICAL", "INDEX_CLEANUP", 
	"INIT", "INITCOND", "INTERNALLENGTH", "IS_TEMPLATE", "JSON", "LC_COLLATE", 
	"LC_CTYPE", "LEFTARG", "LEXIZE", "LEXTYPES", "LIST", "LOCALE", "LOGIN", 
	"MAIN", "MERGES", "MFINALFUNC", "MFINALFUNC_EXTRA", "MFINALFUNC_MODIFY", 
	"MINITCOND", "MINVFUNC", "MODULUS", "MSFUNC", "MSSPACE", "MSTYPE", "NEGATOR", 
	"NOBYPASSRLS", "NOCREATEDB", "NOCREATEROLE", "NOINHERIT", "NOLOGIN", "NOREPLICATION", 
	"NOSUPERUSER", "OUTPUT", "PASSEDBYVALUE", "PATH", "PERMISSIVE", "PLAIN", 
	"PREFERRED", "PROVIDER", "READ_ONLY", "READ_WRITE", "RECEIVE", "REMAINDER", 
	"REPLICATION", "RESTRICTED", "RESTRICTIVE", "RIGHTARG", "SAFE", "SEND", 
	"SERIALFUNC", "SETTINGS", "SFUNC", "SHAREABLE", "SKIP_LOCKED", "SORTOP", 
	"SSPACE", "STYPE", "SUBTYPE_DIFF", "SUBTYPE_OPCLASS", "SUBTYPE", "SUMMARY", 
	"SUPERUSER", "TIMING", "TYPMOD_IN", "TYPMOD_OUT", "UNSAFE", "USAGE", "VARIABLE", 
	"WAL", "YAML", "ALIAS", "ASSERT", "CONSTANT", "DATATYPE", "DEBUG", "DETAIL", 
	"DIAGNOSTICS", "ELSEIF", "ELSIF", "ERRCODE", "EXIT", "EXCEPTION", "FOREACH", 
	"GET", "HINT", "INFO", "LOG", "LOOP", "MESSAGE", "NOTICE", "OPEN", "PERFORM", 
	"QUERY", "RAISE", "RECORD", "RETURN", "REVERSE", "ROWTYPE", "SLICE", "SQLSTATE", 
	"STACKED", "WARNING", "WHILE", "CAST_EXPRESSION", "EQUAL", "COLON", "SEMI_COLON", 
	"COMMA", "NOT_EQUAL", "LTH", "LEQ", "GTH", "GEQ", "LEFT_PAREN", "RIGHT_PAREN", 
	"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", "EXP", "DOT", "QUOTE_CHAR", 
	"DOUBLE_QUOTE", "DOLLAR", "LEFT_BRACKET", "RIGHT_BRACKET", "EQUAL_GTH", 
	"COLON_EQUAL", "LESS_LESS", "GREATER_GREATER", "DOUBLE_DOT", "HASH_SIGN", 
	"BlockComment", "LineComment", "OP_CHARS", "NUMBER_LITERAL", "REAL_NUMBER", 
	"DOLLAR_NUMBER", "Identifier", "QuotedIdentifier", "Character_String_Literal", 
	"BeginDollarStringConstant", "Space", "White_Space", "New_Line", "Tab", 
	"BOM", "BAD", "Text_between_Dollar", "EndDollarStringConstant",
}

var ruleNames = []string{
	"sql", "qname_parser", "function_args_parser", "vex_eof", "plpgsql_function", 
	"plpgsql_function_test_list", "statement", "data_statement", "script_statement", 
	"script_transaction", "transaction_mode", "lock_table", "lock_mode", "script_additional", 
	"additional_statement", "explain_statement", "explain_query", "execute_statement", 
	"declare_statement", "show_statement", "explain_option", "user_name", "table_cols_list", 
	"table_cols", "vacuum_mode", "vacuum_option", "analyze_mode", "boolean_value", 
	"fetch_move_direction", "schema_statement", "schema_create", "schema_alter", 
	"schema_drop", "schema_import", "alter_function_statement", "alter_aggregate_statement", 
	"alter_extension_statement", "alter_extension_action", "extension_member_object", 
	"alter_schema_statement", "alter_language_statement", "alter_table_statement", 
	"table_action", "column_action", "identity_body", "alter_identity", "storage_option", 
	"validate_constraint", "drop_constraint", "table_deferrable", "table_initialy_immed", 
	"function_actions_common", "function_def", "alter_index_statement", "index_def_action", 
	"alter_default_privileges_statement", "abbreviated_grant_or_revoke", "grant_option_for", 
	"alter_sequence_statement", "alter_view_statement", "alter_view_action", 
	"alter_materialized_view_statement", "alter_materialized_view_action", 
	"materialized_view_action", "alter_event_trigger_statement", "alter_event_trigger_action", 
	"alter_type_statement", "alter_domain_statement", "alter_server_statement", 
	"alter_server_action", "alter_fts_statement", "alter_fts_configuration", 
	"type_action", "type_property", "set_def_column", "drop_def", "create_index_statement", 
	"index_rest", "index_sort", "index_column", "including_index", "index_where", 
	"create_extension_statement", "create_language_statement", "create_event_trigger_statement", 
	"create_type_statement", "create_domain_statement", "create_server_statement", 
	"create_fts_dictionary_statement", "option_with_value", "create_fts_configuration_statement", 
	"create_fts_template_statement", "create_fts_parser_statement", "create_collation_statement", 
	"alter_collation_statement", "collation_option", "create_user_mapping_statement", 
	"alter_user_mapping_statement", "alter_user_or_role_statement", "alter_user_or_role_set_reset", 
	"set_reset_parameter", "alter_group_statement", "alter_group_action", "alter_tablespace_statement", 
	"alter_owner_statement", "alter_tablespace_action", "alter_statistics_statement", 
	"set_statistics", "alter_foreign_data_wrapper", "alter_foreign_data_wrapper_action", 
	"alter_operator_statement", "alter_operator_action", "operator_set_restrict_join", 
	"drop_user_mapping_statement", "drop_owned_statement", "drop_operator_statement", 
	"target_operator", "domain_constraint", "create_transform_statement", "create_access_method_statement", 
	"create_user_or_role_statement", "user_or_role_option", "user_or_role_option_for_alter", 
	"user_or_role_or_group_common_option", "user_or_role_common_option", "user_or_role_or_group_option_for_create", 
	"create_group_statement", "group_option", "create_tablespace_statement", 
	"create_statistics_statement", "create_foreign_data_wrapper_statement", 
	"option_without_equal", "create_operator_statement", "operator_name", "operator_option", 
	"create_aggregate_statement", "aggregate_param", "set_statement", "set_action", 
	"session_local_option", "set_statement_value", "create_rewrite_statement", 
	"rewrite_command", "create_trigger_statement", "trigger_referencing", "when_trigger", 
	"rule_common", "rule_member_object", "columns_permissions", "table_column_privileges", 
	"permissions", "permission", "other_rules", "grant_to_rule", "revoke_from_cascade_restrict", 
	"roles_names", "role_name_with_group", "comment_on_statement", "security_label", 
	"comment_member_object", "label_member_object", "create_function_statement", 
	"create_funct_params", "transform_for_type", "function_ret_table", "function_column_name_type", 
	"function_parameters", "function_args", "agg_order", "character_string", 
	"function_arguments", "argmode", "create_sequence_statement", "sequence_body", 
	"signed_number_literal", "signed_numerical_literal", "sign", "create_schema_statement", 
	"create_policy_statement", "alter_policy_statement", "drop_policy_statement", 
	"create_subscription_statement", "alter_subscription_statement", "alter_subscription_action", 
	"create_cast_statement", "drop_cast_statement", "create_operator_family_statement", 
	"alter_operator_family_statement", "operator_family_action", "add_operator_to_family", 
	"drop_operator_from_family", "drop_operator_family_statement", "create_operator_class_statement", 
	"create_operator_class_option", "alter_operator_class_statement", "drop_operator_class_statement", 
	"create_conversion_statement", "alter_conversion_statement", "create_publication_statement", 
	"alter_publication_statement", "alter_publication_action", "only_table_multiply", 
	"alter_trigger_statement", "alter_rule_statement", "copy_statement", "copy_from_statement", 
	"copy_to_statement", "copy_option_list", "copy_option", "create_view_statement", 
	"if_exists", "if_not_exists", "view_columns", "with_check_option", "create_database_statement", 
	"create_database_option", "alter_database_statement", "alter_database_action", 
	"alter_database_option", "create_table_statement", "create_table_as_statement", 
	"create_foreign_table_statement", "define_table", "define_partition", "for_values_bound", 
	"partition_bound_spec", "partition_bound_part", "define_columns", "define_type", 
	"partition_by", "partition_method", "partition_column", "define_server", 
	"define_foreign_options", "foreign_option", "foreign_option_name", "list_of_type_column_def", 
	"table_column_def", "table_of_type_column_def", "table_column_definition", 
	"like_option", "constraint_common", "constr_body", "all_op", "all_simple_op", 
	"op_chars", "index_parameters", "names_in_parens", "names_references", 
	"storage_parameter", "storage_parameter_option", "storage_parameter_name", 
	"with_storage_parameter", "storage_parameter_oid", "on_commit", "table_space", 
	"set_tablespace", "x_action", "owner_to", "rename_to", "set_schema", "table_column_privilege", 
	"usage_select_update", "partition_by_columns", "cascade_restrict", "collate_identifier", 
	"indirection_var", "dollar_number", "indirection_list", "indirection", 
	"drop_database_statement", "drop_function_statement", "drop_trigger_statement", 
	"drop_rule_statement", "drop_statements", "if_exist_names_restrict_cascade", 
	"id_token", "identifier", "identifier_nontype", "col_label", "tokens_nonreserved", 
	"tokens_nonreserved_except_function_type", "tokens_reserved_except_function_type", 
	"tokens_reserved", "tokens_nonkeyword", "schema_qualified_name_nontype", 
	"type_list", "data_type", "array_type", "predefined_type", "interval_field", 
	"type_length", "precision_param", "vex", "vex_b", "op", "all_op_ref", "datetime_overlaps", 
	"value_expression_primary", "unsigned_value_specification", "unsigned_numeric_literal", 
	"truth_value", "case_expression", "cast_specification", "function_call", 
	"vex_or_named_notation", "pointer", "function_construct", "extract_function", 
	"system_function", "date_time_function", "string_value_function", "xml_function", 
	"xml_table_column", "comparison_mod", "filter_clause", "window_definition", 
	"frame_clause", "frame_bound", "array_expression", "array_elements", "type_coercion", 
	"schema_qualified_name", "set_qualifier", "table_subquery", "select_stmt", 
	"after_ops", "select_stmt_no_parens", "with_clause", "with_query", "select_ops", 
	"select_ops_no_parens", "select_primary", "select_list", "select_sublist", 
	"into_table", "from_item", "from_primary", "alias_clause", "from_function_column_def", 
	"groupby_clause", "grouping_element_list", "grouping_element", "values_stmt", 
	"values_values", "orderby_clause", "sort_specifier", "order_specification", 
	"null_ordering", "insert_stmt_for_psql", "insert_columns", "indirection_identifier", 
	"conflict_object", "conflict_action", "delete_stmt_for_psql", "update_stmt_for_psql", 
	"update_set", "notify_stmt", "truncate_stmt", "identifier_list", "anonymous_block", 
	"comp_options", "function_block", "start_label", "declarations", "declaration", 
	"type_declaration", "arguments_list", "data_type_dec", "exception_statement", 
	"function_statements", "function_statement", "base_statement", "x_var", 
	"diagnostic_option", "perform_stmt", "assign_stmt", "execute_stmt", "control_statement", 
	"cursor_statement", "option", "transaction_statement", "message_statement", 
	"log_level", "raise_using", "raise_param", "return_stmt", "loop_statement", 
	"loop_start", "using_vex", "if_statement", "case_statement", "plpgsql_query",
}
type SQLParser struct {
	*antlr.BaseParser
}

// NewSQLParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *SQLParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewSQLParser(input antlr.TokenStream) *SQLParser {
	this := new(SQLParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SQLParser.g4"

	return this
}


// SQLParser tokens.
const (
	SQLParserEOF = antlr.TokenEOF
	SQLParserABORT = 1
	SQLParserABSOLUTE = 2
	SQLParserACCESS = 3
	SQLParserACTION = 4
	SQLParserADD = 5
	SQLParserADMIN = 6
	SQLParserAFTER = 7
	SQLParserAGGREGATE = 8
	SQLParserALSO = 9
	SQLParserALTER = 10
	SQLParserALWAYS = 11
	SQLParserASSERTION = 12
	SQLParserASSIGNMENT = 13
	SQLParserAT = 14
	SQLParserATTACH = 15
	SQLParserATTRIBUTE = 16
	SQLParserBACKWARD = 17
	SQLParserBEFORE = 18
	SQLParserBEGIN = 19
	SQLParserBY = 20
	SQLParserCACHE = 21
	SQLParserCALL = 22
	SQLParserCALLED = 23
	SQLParserCASCADE = 24
	SQLParserCASCADED = 25
	SQLParserCATALOG = 26
	SQLParserCHAIN = 27
	SQLParserCHARACTERISTICS = 28
	SQLParserCHECKPOINT = 29
	SQLParserCLASS = 30
	SQLParserCLOSE = 31
	SQLParserCLUSTER = 32
	SQLParserCOLUMNS = 33
	SQLParserCOMMENT = 34
	SQLParserCOMMENTS = 35
	SQLParserCOMMIT = 36
	SQLParserCOMMITTED = 37
	SQLParserCONFIGURATION = 38
	SQLParserCONFLICT = 39
	SQLParserCONNECTION = 40
	SQLParserCONSTRAINTS = 41
	SQLParserCONTENT = 42
	SQLParserCONTINUE = 43
	SQLParserCONVERSION = 44
	SQLParserCOPY = 45
	SQLParserCOST = 46
	SQLParserCSV = 47
	SQLParserCUBE = 48
	SQLParserCURRENT = 49
	SQLParserCURSOR = 50
	SQLParserCYCLE = 51
	SQLParserDATA = 52
	SQLParserDATABASE = 53
	SQLParserDAY = 54
	SQLParserDEALLOCATE = 55
	SQLParserDECLARE = 56
	SQLParserDEFAULTS = 57
	SQLParserDEFERRED = 58
	SQLParserDEFINER = 59
	SQLParserDELETE = 60
	SQLParserDELIMITER = 61
	SQLParserDELIMITERS = 62
	SQLParserDEPENDS = 63
	SQLParserDETACH = 64
	SQLParserDICTIONARY = 65
	SQLParserDISABLE = 66
	SQLParserDISCARD = 67
	SQLParserDOCUMENT = 68
	SQLParserDOMAIN = 69
	SQLParserDOUBLE = 70
	SQLParserDROP = 71
	SQLParserEACH = 72
	SQLParserENABLE = 73
	SQLParserENCODING = 74
	SQLParserENCRYPTED = 75
	SQLParserENUM = 76
	SQLParserESCAPE = 77
	SQLParserEVENT = 78
	SQLParserEXCLUDE = 79
	SQLParserEXCLUDING = 80
	SQLParserEXCLUSIVE = 81
	SQLParserEXECUTE = 82
	SQLParserEXPLAIN = 83
	SQLParserEXPRESSION = 84
	SQLParserEXTENSION = 85
	SQLParserEXTERNAL = 86
	SQLParserFAMILY = 87
	SQLParserFILTER = 88
	SQLParserFIRST = 89
	SQLParserFOLLOWING = 90
	SQLParserFORCE = 91
	SQLParserFORWARD = 92
	SQLParserFUNCTION = 93
	SQLParserFUNCTIONS = 94
	SQLParserGENERATED = 95
	SQLParserGLOBAL = 96
	SQLParserGRANTED = 97
	SQLParserGROUPS = 98
	SQLParserHANDLER = 99
	SQLParserHEADER = 100
	SQLParserHOLD = 101
	SQLParserHOUR = 102
	SQLParserIDENTITY = 103
	SQLParserIF = 104
	SQLParserIMMEDIATE = 105
	SQLParserIMMUTABLE = 106
	SQLParserIMPLICIT = 107
	SQLParserIMPORT = 108
	SQLParserINCLUDE = 109
	SQLParserINCLUDING = 110
	SQLParserINCREMENT = 111
	SQLParserINDEX = 112
	SQLParserINDEXES = 113
	SQLParserINHERIT = 114
	SQLParserINHERITS = 115
	SQLParserINLINE = 116
	SQLParserINPUT = 117
	SQLParserINSENSITIVE = 118
	SQLParserINSERT = 119
	SQLParserINSTEAD = 120
	SQLParserINVOKER = 121
	SQLParserISOLATION = 122
	SQLParserKEY = 123
	SQLParserLABEL = 124
	SQLParserLANGUAGE = 125
	SQLParserLARGE = 126
	SQLParserLAST = 127
	SQLParserLEAKPROOF = 128
	SQLParserLEVEL = 129
	SQLParserLISTEN = 130
	SQLParserLOAD = 131
	SQLParserLOCAL = 132
	SQLParserLOCATION = 133
	SQLParserLOCK = 134
	SQLParserLOCKED = 135
	SQLParserLOGGED = 136
	SQLParserMAPPING = 137
	SQLParserMATCH = 138
	SQLParserMATERIALIZED = 139
	SQLParserMAXVALUE = 140
	SQLParserMETHOD = 141
	SQLParserMINUTE = 142
	SQLParserMINVALUE = 143
	SQLParserMODE = 144
	SQLParserMONTH = 145
	SQLParserMOVE = 146
	SQLParserNAME = 147
	SQLParserNAMES = 148
	SQLParserNEW = 149
	SQLParserNEXT = 150
	SQLParserNFC = 151
	SQLParserNFD = 152
	SQLParserNFKC = 153
	SQLParserNFKD = 154
	SQLParserNO = 155
	SQLParserNORMALIZED = 156
	SQLParserNOTHING = 157
	SQLParserNOTIFY = 158
	SQLParserNOWAIT = 159
	SQLParserNULLS = 160
	SQLParserOBJECT = 161
	SQLParserOF = 162
	SQLParserOFF = 163
	SQLParserOIDS = 164
	SQLParserOLD = 165
	SQLParserOPERATOR = 166
	SQLParserOPTION = 167
	SQLParserOPTIONS = 168
	SQLParserORDINALITY = 169
	SQLParserOTHERS = 170
	SQLParserOVER = 171
	SQLParserOVERRIDING = 172
	SQLParserOWNED = 173
	SQLParserOWNER = 174
	SQLParserPARALLEL = 175
	SQLParserPARSER = 176
	SQLParserPARTIAL = 177
	SQLParserPARTITION = 178
	SQLParserPASSING = 179
	SQLParserPASSWORD = 180
	SQLParserPLANS = 181
	SQLParserPOLICY = 182
	SQLParserPRECEDING = 183
	SQLParserPREPARE = 184
	SQLParserPREPARED = 185
	SQLParserPRESERVE = 186
	SQLParserPRIOR = 187
	SQLParserPRIVILEGES = 188
	SQLParserPROCEDURAL = 189
	SQLParserPROCEDURE = 190
	SQLParserPROCEDURES = 191
	SQLParserPROGRAM = 192
	SQLParserPUBLICATION = 193
	SQLParserQUOTE = 194
	SQLParserRANGE = 195
	SQLParserREAD = 196
	SQLParserREASSIGN = 197
	SQLParserRECHECK = 198
	SQLParserRECURSIVE = 199
	SQLParserREF = 200
	SQLParserREFERENCING = 201
	SQLParserREFRESH = 202
	SQLParserREINDEX = 203
	SQLParserRELATIVE = 204
	SQLParserRELEASE = 205
	SQLParserRENAME = 206
	SQLParserREPEATABLE = 207
	SQLParserREPLACE = 208
	SQLParserREPLICA = 209
	SQLParserRESET = 210
	SQLParserRESTART = 211
	SQLParserRESTRICT = 212
	SQLParserRETURNS = 213
	SQLParserREVOKE = 214
	SQLParserROLE = 215
	SQLParserROLLBACK = 216
	SQLParserROLLUP = 217
	SQLParserROUTINE = 218
	SQLParserROUTINES = 219
	SQLParserROWS = 220
	SQLParserRULE = 221
	SQLParserSAVEPOINT = 222
	SQLParserSCHEMA = 223
	SQLParserSCHEMAS = 224
	SQLParserSCROLL = 225
	SQLParserSEARCH = 226
	SQLParserSECOND = 227
	SQLParserSECURITY = 228
	SQLParserSEQUENCE = 229
	SQLParserSEQUENCES = 230
	SQLParserSERIALIZABLE = 231
	SQLParserSERVER = 232
	SQLParserSESSION = 233
	SQLParserSET = 234
	SQLParserSETS = 235
	SQLParserSHARE = 236
	SQLParserSHOW = 237
	SQLParserSIMPLE = 238
	SQLParserSKIP_ = 239
	SQLParserSNAPSHOT = 240
	SQLParserSQL = 241
	SQLParserSTABLE = 242
	SQLParserSTANDALONE = 243
	SQLParserSTART = 244
	SQLParserSTATEMENT = 245
	SQLParserSTATISTICS = 246
	SQLParserSTDIN = 247
	SQLParserSTDOUT = 248
	SQLParserSTORAGE = 249
	SQLParserSTORED = 250
	SQLParserSTRICT = 251
	SQLParserSTRIP = 252
	SQLParserSUBSCRIPTION = 253
	SQLParserSUPPORT = 254
	SQLParserSYSID = 255
	SQLParserSYSTEM = 256
	SQLParserTABLES = 257
	SQLParserTABLESPACE = 258
	SQLParserTEMP = 259
	SQLParserTEMPLATE = 260
	SQLParserTEMPORARY = 261
	SQLParserTEXT = 262
	SQLParserTIES = 263
	SQLParserTRANSACTION = 264
	SQLParserTRANSFORM = 265
	SQLParserTRIGGER = 266
	SQLParserTRUNCATE = 267
	SQLParserTRUSTED = 268
	SQLParserTYPE = 269
	SQLParserTYPES = 270
	SQLParserUESCAPE = 271
	SQLParserUNBOUNDED = 272
	SQLParserUNCOMMITTED = 273
	SQLParserUNENCRYPTED = 274
	SQLParserUNKNOWN = 275
	SQLParserUNLISTEN = 276
	SQLParserUNLOGGED = 277
	SQLParserUNTIL = 278
	SQLParserUPDATE = 279
	SQLParserVACUUM = 280
	SQLParserVALID = 281
	SQLParserVALIDATE = 282
	SQLParserVALIDATOR = 283
	SQLParserVALUE = 284
	SQLParserVARYING = 285
	SQLParserVERSION = 286
	SQLParserVIEW = 287
	SQLParserVIEWS = 288
	SQLParserVOLATILE = 289
	SQLParserWHITESPACE = 290
	SQLParserWITHIN = 291
	SQLParserWITHOUT = 292
	SQLParserWORK = 293
	SQLParserWRAPPER = 294
	SQLParserWRITE = 295
	SQLParserXML = 296
	SQLParserYEAR = 297
	SQLParserYES = 298
	SQLParserZONE = 299
	SQLParserBETWEEN = 300
	SQLParserBIGINT = 301
	SQLParserBIT = 302
	SQLParserBOOLEAN = 303
	SQLParserCHAR = 304
	SQLParserCHARACTER = 305
	SQLParserCOALESCE = 306
	SQLParserDEC = 307
	SQLParserDECIMAL = 308
	SQLParserEXISTS = 309
	SQLParserEXTRACT = 310
	SQLParserFLOAT = 311
	SQLParserGREATEST = 312
	SQLParserGROUPING = 313
	SQLParserINOUT = 314
	SQLParserINT = 315
	SQLParserINTEGER = 316
	SQLParserINTERVAL = 317
	SQLParserLEAST = 318
	SQLParserNATIONAL = 319
	SQLParserNCHAR = 320
	SQLParserNONE = 321
	SQLParserNORMALIZE = 322
	SQLParserNULLIF = 323
	SQLParserNUMERIC = 324
	SQLParserOUT = 325
	SQLParserOVERLAY = 326
	SQLParserPOSITION = 327
	SQLParserPRECISION = 328
	SQLParserREAL = 329
	SQLParserROW = 330
	SQLParserSETOF = 331
	SQLParserSMALLINT = 332
	SQLParserSUBSTRING = 333
	SQLParserTIME = 334
	SQLParserTIMESTAMP = 335
	SQLParserTREAT = 336
	SQLParserTRIM = 337
	SQLParserVALUES = 338
	SQLParserVARCHAR = 339
	SQLParserXMLATTRIBUTES = 340
	SQLParserXMLCONCAT = 341
	SQLParserXMLELEMENT = 342
	SQLParserXMLEXISTS = 343
	SQLParserXMLFOREST = 344
	SQLParserXMLNAMESPACES = 345
	SQLParserXMLPARSE = 346
	SQLParserXMLPI = 347
	SQLParserXMLROOT = 348
	SQLParserXMLSERIALIZE = 349
	SQLParserXMLTABLE = 350
	SQLParserAUTHORIZATION = 351
	SQLParserBINARY = 352
	SQLParserCOLLATION = 353
	SQLParserCONCURRENTLY = 354
	SQLParserCROSS = 355
	SQLParserCURRENT_SCHEMA = 356
	SQLParserFREEZE = 357
	SQLParserFULL = 358
	SQLParserILIKE = 359
	SQLParserINNER = 360
	SQLParserIS = 361
	SQLParserISNULL = 362
	SQLParserJOIN = 363
	SQLParserLEFT = 364
	SQLParserLIKE = 365
	SQLParserNATURAL = 366
	SQLParserNOTNULL = 367
	SQLParserOUTER = 368
	SQLParserOVERLAPS = 369
	SQLParserRIGHT = 370
	SQLParserSIMILAR = 371
	SQLParserTABLESAMPLE = 372
	SQLParserVERBOSE = 373
	SQLParserALL = 374
	SQLParserANALYZE = 375
	SQLParserAND = 376
	SQLParserANY = 377
	SQLParserARRAY = 378
	SQLParserAS = 379
	SQLParserASC = 380
	SQLParserASYMMETRIC = 381
	SQLParserBOTH = 382
	SQLParserCASE = 383
	SQLParserCAST = 384
	SQLParserCHECK = 385
	SQLParserCOLLATE = 386
	SQLParserCOLUMN = 387
	SQLParserCONSTRAINT = 388
	SQLParserCREATE = 389
	SQLParserCURRENT_CATALOG = 390
	SQLParserCURRENT_DATE = 391
	SQLParserCURRENT_ROLE = 392
	SQLParserCURRENT_TIME = 393
	SQLParserCURRENT_TIMESTAMP = 394
	SQLParserCURRENT_USER = 395
	SQLParserDEFAULT = 396
	SQLParserDEFERRABLE = 397
	SQLParserDESC = 398
	SQLParserDISTINCT = 399
	SQLParserDO = 400
	SQLParserELSE = 401
	SQLParserEND = 402
	SQLParserEXCEPT = 403
	SQLParserFALSE = 404
	SQLParserFETCH = 405
	SQLParserFOR = 406
	SQLParserFOREIGN = 407
	SQLParserFROM = 408
	SQLParserGRANT = 409
	SQLParserGROUP = 410
	SQLParserHAVING = 411
	SQLParserIN = 412
	SQLParserINITIALLY = 413
	SQLParserINTERSECT = 414
	SQLParserINTO = 415
	SQLParserLATERAL = 416
	SQLParserLEADING = 417
	SQLParserLIMIT = 418
	SQLParserLOCALTIME = 419
	SQLParserLOCALTIMESTAMP = 420
	SQLParserNOT = 421
	SQLParserNULL = 422
	SQLParserOFFSET = 423
	SQLParserON = 424
	SQLParserONLY = 425
	SQLParserOR = 426
	SQLParserORDER = 427
	SQLParserPLACING = 428
	SQLParserPRIMARY = 429
	SQLParserREFERENCES = 430
	SQLParserRETURNING = 431
	SQLParserSELECT = 432
	SQLParserSESSION_USER = 433
	SQLParserSOME = 434
	SQLParserSYMMETRIC = 435
	SQLParserTABLE = 436
	SQLParserTHEN = 437
	SQLParserTO = 438
	SQLParserTRAILING = 439
	SQLParserTRUE = 440
	SQLParserUNION = 441
	SQLParserUNIQUE = 442
	SQLParserUSER = 443
	SQLParserUSING = 444
	SQLParserVARIADIC = 445
	SQLParserWHEN = 446
	SQLParserWHERE = 447
	SQLParserWINDOW = 448
	SQLParserWITH = 449
	SQLParserALIGNMENT = 450
	SQLParserALLOW_CONNECTIONS = 451
	SQLParserBASETYPE = 452
	SQLParserBUFFERS = 453
	SQLParserBYPASSRLS = 454
	SQLParserCANONICAL = 455
	SQLParserCATEGORY = 456
	SQLParserCOLLATABLE = 457
	SQLParserCOMBINEFUNC = 458
	SQLParserCOMMUTATOR = 459
	SQLParserCONNECT = 460
	SQLParserCOSTS = 461
	SQLParserCREATEDB = 462
	SQLParserCREATEROLE = 463
	SQLParserDESERIALFUNC = 464
	SQLParserDETERMINISTIC = 465
	SQLParserDISABLE_PAGE_SKIPPING = 466
	SQLParserELEMENT = 467
	SQLParserEXTENDED = 468
	SQLParserFINALFUNC = 469
	SQLParserFINALFUNC_EXTRA = 470
	SQLParserFINALFUNC_MODIFY = 471
	SQLParserFORCE_NOT_NULL = 472
	SQLParserFORCE_NULL = 473
	SQLParserFORCE_QUOTE = 474
	SQLParserFORMAT = 475
	SQLParserGETTOKEN = 476
	SQLParserHASH = 477
	SQLParserHASHES = 478
	SQLParserHEADLINE = 479
	SQLParserHYPOTHETICAL = 480
	SQLParserINDEX_CLEANUP = 481
	SQLParserINIT = 482
	SQLParserINITCOND = 483
	SQLParserINTERNALLENGTH = 484
	SQLParserIS_TEMPLATE = 485
	SQLParserJSON = 486
	SQLParserLC_COLLATE = 487
	SQLParserLC_CTYPE = 488
	SQLParserLEFTARG = 489
	SQLParserLEXIZE = 490
	SQLParserLEXTYPES = 491
	SQLParserLIST = 492
	SQLParserLOCALE = 493
	SQLParserLOGIN = 494
	SQLParserMAIN = 495
	SQLParserMERGES = 496
	SQLParserMFINALFUNC = 497
	SQLParserMFINALFUNC_EXTRA = 498
	SQLParserMFINALFUNC_MODIFY = 499
	SQLParserMINITCOND = 500
	SQLParserMINVFUNC = 501
	SQLParserMODULUS = 502
	SQLParserMSFUNC = 503
	SQLParserMSSPACE = 504
	SQLParserMSTYPE = 505
	SQLParserNEGATOR = 506
	SQLParserNOBYPASSRLS = 507
	SQLParserNOCREATEDB = 508
	SQLParserNOCREATEROLE = 509
	SQLParserNOINHERIT = 510
	SQLParserNOLOGIN = 511
	SQLParserNOREPLICATION = 512
	SQLParserNOSUPERUSER = 513
	SQLParserOUTPUT = 514
	SQLParserPASSEDBYVALUE = 515
	SQLParserPATH = 516
	SQLParserPERMISSIVE = 517
	SQLParserPLAIN = 518
	SQLParserPREFERRED = 519
	SQLParserPROVIDER = 520
	SQLParserREAD_ONLY = 521
	SQLParserREAD_WRITE = 522
	SQLParserRECEIVE = 523
	SQLParserREMAINDER = 524
	SQLParserREPLICATION = 525
	SQLParserRESTRICTED = 526
	SQLParserRESTRICTIVE = 527
	SQLParserRIGHTARG = 528
	SQLParserSAFE = 529
	SQLParserSEND = 530
	SQLParserSERIALFUNC = 531
	SQLParserSETTINGS = 532
	SQLParserSFUNC = 533
	SQLParserSHAREABLE = 534
	SQLParserSKIP_LOCKED = 535
	SQLParserSORTOP = 536
	SQLParserSSPACE = 537
	SQLParserSTYPE = 538
	SQLParserSUBTYPE_DIFF = 539
	SQLParserSUBTYPE_OPCLASS = 540
	SQLParserSUBTYPE = 541
	SQLParserSUMMARY = 542
	SQLParserSUPERUSER = 543
	SQLParserTIMING = 544
	SQLParserTYPMOD_IN = 545
	SQLParserTYPMOD_OUT = 546
	SQLParserUNSAFE = 547
	SQLParserUSAGE = 548
	SQLParserVARIABLE = 549
	SQLParserWAL = 550
	SQLParserYAML = 551
	SQLParserALIAS = 552
	SQLParserASSERT = 553
	SQLParserCONSTANT = 554
	SQLParserDATATYPE = 555
	SQLParserDEBUG = 556
	SQLParserDETAIL = 557
	SQLParserDIAGNOSTICS = 558
	SQLParserELSEIF = 559
	SQLParserELSIF = 560
	SQLParserERRCODE = 561
	SQLParserEXIT = 562
	SQLParserEXCEPTION = 563
	SQLParserFOREACH = 564
	SQLParserGET = 565
	SQLParserHINT = 566
	SQLParserINFO = 567
	SQLParserLOG = 568
	SQLParserLOOP = 569
	SQLParserMESSAGE = 570
	SQLParserNOTICE = 571
	SQLParserOPEN = 572
	SQLParserPERFORM = 573
	SQLParserQUERY = 574
	SQLParserRAISE = 575
	SQLParserRECORD = 576
	SQLParserRETURN = 577
	SQLParserREVERSE = 578
	SQLParserROWTYPE = 579
	SQLParserSLICE = 580
	SQLParserSQLSTATE = 581
	SQLParserSTACKED = 582
	SQLParserWARNING = 583
	SQLParserWHILE = 584
	SQLParserCAST_EXPRESSION = 585
	SQLParserEQUAL = 586
	SQLParserCOLON = 587
	SQLParserSEMI_COLON = 588
	SQLParserCOMMA = 589
	SQLParserNOT_EQUAL = 590
	SQLParserLTH = 591
	SQLParserLEQ = 592
	SQLParserGTH = 593
	SQLParserGEQ = 594
	SQLParserLEFT_PAREN = 595
	SQLParserRIGHT_PAREN = 596
	SQLParserPLUS = 597
	SQLParserMINUS = 598
	SQLParserMULTIPLY = 599
	SQLParserDIVIDE = 600
	SQLParserMODULAR = 601
	SQLParserEXP = 602
	SQLParserDOT = 603
	SQLParserQUOTE_CHAR = 604
	SQLParserDOUBLE_QUOTE = 605
	SQLParserDOLLAR = 606
	SQLParserLEFT_BRACKET = 607
	SQLParserRIGHT_BRACKET = 608
	SQLParserEQUAL_GTH = 609
	SQLParserCOLON_EQUAL = 610
	SQLParserLESS_LESS = 611
	SQLParserGREATER_GREATER = 612
	SQLParserDOUBLE_DOT = 613
	SQLParserHASH_SIGN = 614
	SQLParserBlockComment = 615
	SQLParserLineComment = 616
	SQLParserOP_CHARS = 617
	SQLParserNUMBER_LITERAL = 618
	SQLParserREAL_NUMBER = 619
	SQLParserDOLLAR_NUMBER = 620
	SQLParserIdentifier = 621
	SQLParserQuotedIdentifier = 622
	SQLParserCharacter_String_Literal = 623
	SQLParserBeginDollarStringConstant = 624
	SQLParserSpace = 625
	SQLParserWhite_Space = 626
	SQLParserNew_Line = 627
	SQLParserTab = 628
	SQLParserBOM = 629
	SQLParserBAD = 630
	SQLParserText_between_Dollar = 631
	SQLParserEndDollarStringConstant = 632
)

// SQLParser rules.
const (
	SQLParserRULE_sql = 0
	SQLParserRULE_qname_parser = 1
	SQLParserRULE_function_args_parser = 2
	SQLParserRULE_vex_eof = 3
	SQLParserRULE_plpgsql_function = 4
	SQLParserRULE_plpgsql_function_test_list = 5
	SQLParserRULE_statement = 6
	SQLParserRULE_data_statement = 7
	SQLParserRULE_script_statement = 8
	SQLParserRULE_script_transaction = 9
	SQLParserRULE_transaction_mode = 10
	SQLParserRULE_lock_table = 11
	SQLParserRULE_lock_mode = 12
	SQLParserRULE_script_additional = 13
	SQLParserRULE_additional_statement = 14
	SQLParserRULE_explain_statement = 15
	SQLParserRULE_explain_query = 16
	SQLParserRULE_execute_statement = 17
	SQLParserRULE_declare_statement = 18
	SQLParserRULE_show_statement = 19
	SQLParserRULE_explain_option = 20
	SQLParserRULE_user_name = 21
	SQLParserRULE_table_cols_list = 22
	SQLParserRULE_table_cols = 23
	SQLParserRULE_vacuum_mode = 24
	SQLParserRULE_vacuum_option = 25
	SQLParserRULE_analyze_mode = 26
	SQLParserRULE_boolean_value = 27
	SQLParserRULE_fetch_move_direction = 28
	SQLParserRULE_schema_statement = 29
	SQLParserRULE_schema_create = 30
	SQLParserRULE_schema_alter = 31
	SQLParserRULE_schema_drop = 32
	SQLParserRULE_schema_import = 33
	SQLParserRULE_alter_function_statement = 34
	SQLParserRULE_alter_aggregate_statement = 35
	SQLParserRULE_alter_extension_statement = 36
	SQLParserRULE_alter_extension_action = 37
	SQLParserRULE_extension_member_object = 38
	SQLParserRULE_alter_schema_statement = 39
	SQLParserRULE_alter_language_statement = 40
	SQLParserRULE_alter_table_statement = 41
	SQLParserRULE_table_action = 42
	SQLParserRULE_column_action = 43
	SQLParserRULE_identity_body = 44
	SQLParserRULE_alter_identity = 45
	SQLParserRULE_storage_option = 46
	SQLParserRULE_validate_constraint = 47
	SQLParserRULE_drop_constraint = 48
	SQLParserRULE_table_deferrable = 49
	SQLParserRULE_table_initialy_immed = 50
	SQLParserRULE_function_actions_common = 51
	SQLParserRULE_function_def = 52
	SQLParserRULE_alter_index_statement = 53
	SQLParserRULE_index_def_action = 54
	SQLParserRULE_alter_default_privileges_statement = 55
	SQLParserRULE_abbreviated_grant_or_revoke = 56
	SQLParserRULE_grant_option_for = 57
	SQLParserRULE_alter_sequence_statement = 58
	SQLParserRULE_alter_view_statement = 59
	SQLParserRULE_alter_view_action = 60
	SQLParserRULE_alter_materialized_view_statement = 61
	SQLParserRULE_alter_materialized_view_action = 62
	SQLParserRULE_materialized_view_action = 63
	SQLParserRULE_alter_event_trigger_statement = 64
	SQLParserRULE_alter_event_trigger_action = 65
	SQLParserRULE_alter_type_statement = 66
	SQLParserRULE_alter_domain_statement = 67
	SQLParserRULE_alter_server_statement = 68
	SQLParserRULE_alter_server_action = 69
	SQLParserRULE_alter_fts_statement = 70
	SQLParserRULE_alter_fts_configuration = 71
	SQLParserRULE_type_action = 72
	SQLParserRULE_type_property = 73
	SQLParserRULE_set_def_column = 74
	SQLParserRULE_drop_def = 75
	SQLParserRULE_create_index_statement = 76
	SQLParserRULE_index_rest = 77
	SQLParserRULE_index_sort = 78
	SQLParserRULE_index_column = 79
	SQLParserRULE_including_index = 80
	SQLParserRULE_index_where = 81
	SQLParserRULE_create_extension_statement = 82
	SQLParserRULE_create_language_statement = 83
	SQLParserRULE_create_event_trigger_statement = 84
	SQLParserRULE_create_type_statement = 85
	SQLParserRULE_create_domain_statement = 86
	SQLParserRULE_create_server_statement = 87
	SQLParserRULE_create_fts_dictionary_statement = 88
	SQLParserRULE_option_with_value = 89
	SQLParserRULE_create_fts_configuration_statement = 90
	SQLParserRULE_create_fts_template_statement = 91
	SQLParserRULE_create_fts_parser_statement = 92
	SQLParserRULE_create_collation_statement = 93
	SQLParserRULE_alter_collation_statement = 94
	SQLParserRULE_collation_option = 95
	SQLParserRULE_create_user_mapping_statement = 96
	SQLParserRULE_alter_user_mapping_statement = 97
	SQLParserRULE_alter_user_or_role_statement = 98
	SQLParserRULE_alter_user_or_role_set_reset = 99
	SQLParserRULE_set_reset_parameter = 100
	SQLParserRULE_alter_group_statement = 101
	SQLParserRULE_alter_group_action = 102
	SQLParserRULE_alter_tablespace_statement = 103
	SQLParserRULE_alter_owner_statement = 104
	SQLParserRULE_alter_tablespace_action = 105
	SQLParserRULE_alter_statistics_statement = 106
	SQLParserRULE_set_statistics = 107
	SQLParserRULE_alter_foreign_data_wrapper = 108
	SQLParserRULE_alter_foreign_data_wrapper_action = 109
	SQLParserRULE_alter_operator_statement = 110
	SQLParserRULE_alter_operator_action = 111
	SQLParserRULE_operator_set_restrict_join = 112
	SQLParserRULE_drop_user_mapping_statement = 113
	SQLParserRULE_drop_owned_statement = 114
	SQLParserRULE_drop_operator_statement = 115
	SQLParserRULE_target_operator = 116
	SQLParserRULE_domain_constraint = 117
	SQLParserRULE_create_transform_statement = 118
	SQLParserRULE_create_access_method_statement = 119
	SQLParserRULE_create_user_or_role_statement = 120
	SQLParserRULE_user_or_role_option = 121
	SQLParserRULE_user_or_role_option_for_alter = 122
	SQLParserRULE_user_or_role_or_group_common_option = 123
	SQLParserRULE_user_or_role_common_option = 124
	SQLParserRULE_user_or_role_or_group_option_for_create = 125
	SQLParserRULE_create_group_statement = 126
	SQLParserRULE_group_option = 127
	SQLParserRULE_create_tablespace_statement = 128
	SQLParserRULE_create_statistics_statement = 129
	SQLParserRULE_create_foreign_data_wrapper_statement = 130
	SQLParserRULE_option_without_equal = 131
	SQLParserRULE_create_operator_statement = 132
	SQLParserRULE_operator_name = 133
	SQLParserRULE_operator_option = 134
	SQLParserRULE_create_aggregate_statement = 135
	SQLParserRULE_aggregate_param = 136
	SQLParserRULE_set_statement = 137
	SQLParserRULE_set_action = 138
	SQLParserRULE_session_local_option = 139
	SQLParserRULE_set_statement_value = 140
	SQLParserRULE_create_rewrite_statement = 141
	SQLParserRULE_rewrite_command = 142
	SQLParserRULE_create_trigger_statement = 143
	SQLParserRULE_trigger_referencing = 144
	SQLParserRULE_when_trigger = 145
	SQLParserRULE_rule_common = 146
	SQLParserRULE_rule_member_object = 147
	SQLParserRULE_columns_permissions = 148
	SQLParserRULE_table_column_privileges = 149
	SQLParserRULE_permissions = 150
	SQLParserRULE_permission = 151
	SQLParserRULE_other_rules = 152
	SQLParserRULE_grant_to_rule = 153
	SQLParserRULE_revoke_from_cascade_restrict = 154
	SQLParserRULE_roles_names = 155
	SQLParserRULE_role_name_with_group = 156
	SQLParserRULE_comment_on_statement = 157
	SQLParserRULE_security_label = 158
	SQLParserRULE_comment_member_object = 159
	SQLParserRULE_label_member_object = 160
	SQLParserRULE_create_function_statement = 161
	SQLParserRULE_create_funct_params = 162
	SQLParserRULE_transform_for_type = 163
	SQLParserRULE_function_ret_table = 164
	SQLParserRULE_function_column_name_type = 165
	SQLParserRULE_function_parameters = 166
	SQLParserRULE_function_args = 167
	SQLParserRULE_agg_order = 168
	SQLParserRULE_character_string = 169
	SQLParserRULE_function_arguments = 170
	SQLParserRULE_argmode = 171
	SQLParserRULE_create_sequence_statement = 172
	SQLParserRULE_sequence_body = 173
	SQLParserRULE_signed_number_literal = 174
	SQLParserRULE_signed_numerical_literal = 175
	SQLParserRULE_sign = 176
	SQLParserRULE_create_schema_statement = 177
	SQLParserRULE_create_policy_statement = 178
	SQLParserRULE_alter_policy_statement = 179
	SQLParserRULE_drop_policy_statement = 180
	SQLParserRULE_create_subscription_statement = 181
	SQLParserRULE_alter_subscription_statement = 182
	SQLParserRULE_alter_subscription_action = 183
	SQLParserRULE_create_cast_statement = 184
	SQLParserRULE_drop_cast_statement = 185
	SQLParserRULE_create_operator_family_statement = 186
	SQLParserRULE_alter_operator_family_statement = 187
	SQLParserRULE_operator_family_action = 188
	SQLParserRULE_add_operator_to_family = 189
	SQLParserRULE_drop_operator_from_family = 190
	SQLParserRULE_drop_operator_family_statement = 191
	SQLParserRULE_create_operator_class_statement = 192
	SQLParserRULE_create_operator_class_option = 193
	SQLParserRULE_alter_operator_class_statement = 194
	SQLParserRULE_drop_operator_class_statement = 195
	SQLParserRULE_create_conversion_statement = 196
	SQLParserRULE_alter_conversion_statement = 197
	SQLParserRULE_create_publication_statement = 198
	SQLParserRULE_alter_publication_statement = 199
	SQLParserRULE_alter_publication_action = 200
	SQLParserRULE_only_table_multiply = 201
	SQLParserRULE_alter_trigger_statement = 202
	SQLParserRULE_alter_rule_statement = 203
	SQLParserRULE_copy_statement = 204
	SQLParserRULE_copy_from_statement = 205
	SQLParserRULE_copy_to_statement = 206
	SQLParserRULE_copy_option_list = 207
	SQLParserRULE_copy_option = 208
	SQLParserRULE_create_view_statement = 209
	SQLParserRULE_if_exists = 210
	SQLParserRULE_if_not_exists = 211
	SQLParserRULE_view_columns = 212
	SQLParserRULE_with_check_option = 213
	SQLParserRULE_create_database_statement = 214
	SQLParserRULE_create_database_option = 215
	SQLParserRULE_alter_database_statement = 216
	SQLParserRULE_alter_database_action = 217
	SQLParserRULE_alter_database_option = 218
	SQLParserRULE_create_table_statement = 219
	SQLParserRULE_create_table_as_statement = 220
	SQLParserRULE_create_foreign_table_statement = 221
	SQLParserRULE_define_table = 222
	SQLParserRULE_define_partition = 223
	SQLParserRULE_for_values_bound = 224
	SQLParserRULE_partition_bound_spec = 225
	SQLParserRULE_partition_bound_part = 226
	SQLParserRULE_define_columns = 227
	SQLParserRULE_define_type = 228
	SQLParserRULE_partition_by = 229
	SQLParserRULE_partition_method = 230
	SQLParserRULE_partition_column = 231
	SQLParserRULE_define_server = 232
	SQLParserRULE_define_foreign_options = 233
	SQLParserRULE_foreign_option = 234
	SQLParserRULE_foreign_option_name = 235
	SQLParserRULE_list_of_type_column_def = 236
	SQLParserRULE_table_column_def = 237
	SQLParserRULE_table_of_type_column_def = 238
	SQLParserRULE_table_column_definition = 239
	SQLParserRULE_like_option = 240
	SQLParserRULE_constraint_common = 241
	SQLParserRULE_constr_body = 242
	SQLParserRULE_all_op = 243
	SQLParserRULE_all_simple_op = 244
	SQLParserRULE_op_chars = 245
	SQLParserRULE_index_parameters = 246
	SQLParserRULE_names_in_parens = 247
	SQLParserRULE_names_references = 248
	SQLParserRULE_storage_parameter = 249
	SQLParserRULE_storage_parameter_option = 250
	SQLParserRULE_storage_parameter_name = 251
	SQLParserRULE_with_storage_parameter = 252
	SQLParserRULE_storage_parameter_oid = 253
	SQLParserRULE_on_commit = 254
	SQLParserRULE_table_space = 255
	SQLParserRULE_set_tablespace = 256
	SQLParserRULE_x_action = 257
	SQLParserRULE_owner_to = 258
	SQLParserRULE_rename_to = 259
	SQLParserRULE_set_schema = 260
	SQLParserRULE_table_column_privilege = 261
	SQLParserRULE_usage_select_update = 262
	SQLParserRULE_partition_by_columns = 263
	SQLParserRULE_cascade_restrict = 264
	SQLParserRULE_collate_identifier = 265
	SQLParserRULE_indirection_var = 266
	SQLParserRULE_dollar_number = 267
	SQLParserRULE_indirection_list = 268
	SQLParserRULE_indirection = 269
	SQLParserRULE_drop_database_statement = 270
	SQLParserRULE_drop_function_statement = 271
	SQLParserRULE_drop_trigger_statement = 272
	SQLParserRULE_drop_rule_statement = 273
	SQLParserRULE_drop_statements = 274
	SQLParserRULE_if_exist_names_restrict_cascade = 275
	SQLParserRULE_id_token = 276
	SQLParserRULE_identifier = 277
	SQLParserRULE_identifier_nontype = 278
	SQLParserRULE_col_label = 279
	SQLParserRULE_tokens_nonreserved = 280
	SQLParserRULE_tokens_nonreserved_except_function_type = 281
	SQLParserRULE_tokens_reserved_except_function_type = 282
	SQLParserRULE_tokens_reserved = 283
	SQLParserRULE_tokens_nonkeyword = 284
	SQLParserRULE_schema_qualified_name_nontype = 285
	SQLParserRULE_type_list = 286
	SQLParserRULE_data_type = 287
	SQLParserRULE_array_type = 288
	SQLParserRULE_predefined_type = 289
	SQLParserRULE_interval_field = 290
	SQLParserRULE_type_length = 291
	SQLParserRULE_precision_param = 292
	SQLParserRULE_vex = 293
	SQLParserRULE_vex_b = 294
	SQLParserRULE_op = 295
	SQLParserRULE_all_op_ref = 296
	SQLParserRULE_datetime_overlaps = 297
	SQLParserRULE_value_expression_primary = 298
	SQLParserRULE_unsigned_value_specification = 299
	SQLParserRULE_unsigned_numeric_literal = 300
	SQLParserRULE_truth_value = 301
	SQLParserRULE_case_expression = 302
	SQLParserRULE_cast_specification = 303
	SQLParserRULE_function_call = 304
	SQLParserRULE_vex_or_named_notation = 305
	SQLParserRULE_pointer = 306
	SQLParserRULE_function_construct = 307
	SQLParserRULE_extract_function = 308
	SQLParserRULE_system_function = 309
	SQLParserRULE_date_time_function = 310
	SQLParserRULE_string_value_function = 311
	SQLParserRULE_xml_function = 312
	SQLParserRULE_xml_table_column = 313
	SQLParserRULE_comparison_mod = 314
	SQLParserRULE_filter_clause = 315
	SQLParserRULE_window_definition = 316
	SQLParserRULE_frame_clause = 317
	SQLParserRULE_frame_bound = 318
	SQLParserRULE_array_expression = 319
	SQLParserRULE_array_elements = 320
	SQLParserRULE_type_coercion = 321
	SQLParserRULE_schema_qualified_name = 322
	SQLParserRULE_set_qualifier = 323
	SQLParserRULE_table_subquery = 324
	SQLParserRULE_select_stmt = 325
	SQLParserRULE_after_ops = 326
	SQLParserRULE_select_stmt_no_parens = 327
	SQLParserRULE_with_clause = 328
	SQLParserRULE_with_query = 329
	SQLParserRULE_select_ops = 330
	SQLParserRULE_select_ops_no_parens = 331
	SQLParserRULE_select_primary = 332
	SQLParserRULE_select_list = 333
	SQLParserRULE_select_sublist = 334
	SQLParserRULE_into_table = 335
	SQLParserRULE_from_item = 336
	SQLParserRULE_from_primary = 337
	SQLParserRULE_alias_clause = 338
	SQLParserRULE_from_function_column_def = 339
	SQLParserRULE_groupby_clause = 340
	SQLParserRULE_grouping_element_list = 341
	SQLParserRULE_grouping_element = 342
	SQLParserRULE_values_stmt = 343
	SQLParserRULE_values_values = 344
	SQLParserRULE_orderby_clause = 345
	SQLParserRULE_sort_specifier = 346
	SQLParserRULE_order_specification = 347
	SQLParserRULE_null_ordering = 348
	SQLParserRULE_insert_stmt_for_psql = 349
	SQLParserRULE_insert_columns = 350
	SQLParserRULE_indirection_identifier = 351
	SQLParserRULE_conflict_object = 352
	SQLParserRULE_conflict_action = 353
	SQLParserRULE_delete_stmt_for_psql = 354
	SQLParserRULE_update_stmt_for_psql = 355
	SQLParserRULE_update_set = 356
	SQLParserRULE_notify_stmt = 357
	SQLParserRULE_truncate_stmt = 358
	SQLParserRULE_identifier_list = 359
	SQLParserRULE_anonymous_block = 360
	SQLParserRULE_comp_options = 361
	SQLParserRULE_function_block = 362
	SQLParserRULE_start_label = 363
	SQLParserRULE_declarations = 364
	SQLParserRULE_declaration = 365
	SQLParserRULE_type_declaration = 366
	SQLParserRULE_arguments_list = 367
	SQLParserRULE_data_type_dec = 368
	SQLParserRULE_exception_statement = 369
	SQLParserRULE_function_statements = 370
	SQLParserRULE_function_statement = 371
	SQLParserRULE_base_statement = 372
	SQLParserRULE_x_var = 373
	SQLParserRULE_diagnostic_option = 374
	SQLParserRULE_perform_stmt = 375
	SQLParserRULE_assign_stmt = 376
	SQLParserRULE_execute_stmt = 377
	SQLParserRULE_control_statement = 378
	SQLParserRULE_cursor_statement = 379
	SQLParserRULE_option = 380
	SQLParserRULE_transaction_statement = 381
	SQLParserRULE_message_statement = 382
	SQLParserRULE_log_level = 383
	SQLParserRULE_raise_using = 384
	SQLParserRULE_raise_param = 385
	SQLParserRULE_return_stmt = 386
	SQLParserRULE_loop_statement = 387
	SQLParserRULE_loop_start = 388
	SQLParserRULE_using_vex = 389
	SQLParserRULE_if_statement = 390
	SQLParserRULE_case_statement = 391
	SQLParserRULE_plpgsql_query = 392
)

// ISqlContext is an interface to support dynamic dispatch.
type ISqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSqlContext differentiates from other interfaces.
	IsSqlContext()
}

type SqlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlContext() *SqlContext {
	var p = new(SqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_sql
	return p
}

func (*SqlContext) IsSqlContext() {}

func NewSqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlContext {
	var p = new(SqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_sql

	return p
}

func (s *SqlContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlContext) AllEOF() []antlr.TerminalNode {
	return s.GetTokens(SQLParserEOF)
}

func (s *SqlContext) EOF(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserEOF, i)
}

func (s *SqlContext) BOM() antlr.TerminalNode {
	return s.GetToken(SQLParserBOM, 0)
}

func (s *SqlContext) AllSEMI_COLON() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSEMI_COLON)
}

func (s *SqlContext) SEMI_COLON(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSEMI_COLON, i)
}

func (s *SqlContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *SqlContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *SqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSql(s)
	}
}

func (s *SqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSql(s)
	}
}




func (p *SQLParser) Sql() (localctx ISqlContext) {
	localctx = NewSqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SQLParserRULE_sql)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(787)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserBOM {
		{
			p.SetState(786)
			p.Match(SQLParserBOM)
		}

	}
	p.SetState(792)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserSEMI_COLON {
		{
			p.SetState(789)
			p.Match(SQLParserSEMI_COLON)
		}


		p.SetState(794)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(806)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserALTER) | (1 << SQLParserBEGIN) | (1 << SQLParserCALL) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDELETE - 32)))) != 0) || ((((_la - 67)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 67))) & ((1 << (SQLParserDISCARD - 67)) | (1 << (SQLParserDROP - 67)) | (1 << (SQLParserEXECUTE - 67)) | (1 << (SQLParserEXPLAIN - 67)))) != 0) || ((((_la - 108)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 108))) & ((1 << (SQLParserIMPORT - 108)) | (1 << (SQLParserINSERT - 108)) | (1 << (SQLParserLISTEN - 108)) | (1 << (SQLParserLOAD - 108)) | (1 << (SQLParserLOCK - 108)))) != 0) || _la == SQLParserMOVE || _la == SQLParserNOTIFY || ((((_la - 184)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 184))) & ((1 << (SQLParserPREPARE - 184)) | (1 << (SQLParserREASSIGN - 184)) | (1 << (SQLParserREFRESH - 184)) | (1 << (SQLParserREINDEX - 184)) | (1 << (SQLParserRELEASE - 184)) | (1 << (SQLParserRESET - 184)) | (1 << (SQLParserREVOKE - 184)))) != 0) || ((((_la - 216)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 216))) & ((1 << (SQLParserROLLBACK - 216)) | (1 << (SQLParserSAVEPOINT - 216)) | (1 << (SQLParserSECURITY - 216)) | (1 << (SQLParserSET - 216)) | (1 << (SQLParserSHOW - 216)) | (1 << (SQLParserSTART - 216)))) != 0) || ((((_la - 267)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 267))) & ((1 << (SQLParserTRUNCATE - 267)) | (1 << (SQLParserUNLISTEN - 267)) | (1 << (SQLParserUPDATE - 267)) | (1 << (SQLParserVACUUM - 267)))) != 0) || _la == SQLParserVALUES || ((((_la - 375)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 375))) & ((1 << (SQLParserANALYZE - 375)) | (1 << (SQLParserCREATE - 375)) | (1 << (SQLParserDO - 375)) | (1 << (SQLParserEND - 375)) | (1 << (SQLParserFETCH - 375)))) != 0) || ((((_la - 409)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 409))) & ((1 << (SQLParserGRANT - 409)) | (1 << (SQLParserSELECT - 409)) | (1 << (SQLParserTABLE - 409)))) != 0) || _la == SQLParserWITH || _la == SQLParserLEFT_PAREN {
		{
			p.SetState(795)
			p.Statement()
		}
		p.SetState(802)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserSEMI_COLON:
			p.SetState(797)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for ok := true; ok; ok = _la == SQLParserSEMI_COLON {
				{
					p.SetState(796)
					p.Match(SQLParserSEMI_COLON)
				}


				p.SetState(799)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}


		case SQLParserEOF:
			{
				p.SetState(801)
				p.Match(SQLParserEOF)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


		p.SetState(808)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(809)
		p.Match(SQLParserEOF)
	}



	return localctx
}


// IQname_parserContext is an interface to support dynamic dispatch.
type IQname_parserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQname_parserContext differentiates from other interfaces.
	IsQname_parserContext()
}

type Qname_parserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQname_parserContext() *Qname_parserContext {
	var p = new(Qname_parserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_qname_parser
	return p
}

func (*Qname_parserContext) IsQname_parserContext() {}

func NewQname_parserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qname_parserContext {
	var p = new(Qname_parserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_qname_parser

	return p
}

func (s *Qname_parserContext) GetParser() antlr.Parser { return s.parser }

func (s *Qname_parserContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Qname_parserContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLParserEOF, 0)
}

func (s *Qname_parserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qname_parserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Qname_parserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterQname_parser(s)
	}
}

func (s *Qname_parserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitQname_parser(s)
	}
}




func (p *SQLParser) Qname_parser() (localctx IQname_parserContext) {
	localctx = NewQname_parserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SQLParserRULE_qname_parser)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(811)
		p.Schema_qualified_name()
	}
	{
		p.SetState(812)
		p.Match(SQLParserEOF)
	}



	return localctx
}


// IFunction_args_parserContext is an interface to support dynamic dispatch.
type IFunction_args_parserContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_args_parserContext differentiates from other interfaces.
	IsFunction_args_parserContext()
}

type Function_args_parserContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_args_parserContext() *Function_args_parserContext {
	var p = new(Function_args_parserContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_args_parser
	return p
}

func (*Function_args_parserContext) IsFunction_args_parserContext() {}

func NewFunction_args_parserContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_args_parserContext {
	var p = new(Function_args_parserContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_args_parser

	return p
}

func (s *Function_args_parserContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_args_parserContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Function_args_parserContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLParserEOF, 0)
}

func (s *Function_args_parserContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Function_args_parserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_args_parserContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_args_parserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_args_parser(s)
	}
}

func (s *Function_args_parserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_args_parser(s)
	}
}




func (p *SQLParser) Function_args_parser() (localctx IFunction_args_parserContext) {
	localctx = NewFunction_args_parserContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SQLParserRULE_function_args_parser)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(815)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
		{
			p.SetState(814)
			p.Schema_qualified_name()
		}

	}
	{
		p.SetState(817)
		p.Function_args()
	}
	{
		p.SetState(818)
		p.Match(SQLParserEOF)
	}



	return localctx
}


// IVex_eofContext is an interface to support dynamic dispatch.
type IVex_eofContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVex_eofContext differentiates from other interfaces.
	IsVex_eofContext()
}

type Vex_eofContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVex_eofContext() *Vex_eofContext {
	var p = new(Vex_eofContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_vex_eof
	return p
}

func (*Vex_eofContext) IsVex_eofContext() {}

func NewVex_eofContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vex_eofContext {
	var p = new(Vex_eofContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_vex_eof

	return p
}

func (s *Vex_eofContext) GetParser() antlr.Parser { return s.parser }

func (s *Vex_eofContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Vex_eofContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Vex_eofContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLParserEOF, 0)
}

func (s *Vex_eofContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Vex_eofContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Vex_eofContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vex_eofContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Vex_eofContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterVex_eof(s)
	}
}

func (s *Vex_eofContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitVex_eof(s)
	}
}




func (p *SQLParser) Vex_eof() (localctx IVex_eofContext) {
	localctx = NewVex_eofContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SQLParserRULE_vex_eof)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(820)
		p.vex(0)
	}
	p.SetState(825)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(821)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(822)
			p.vex(0)
		}


		p.SetState(827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(828)
		p.Match(SQLParserEOF)
	}



	return localctx
}


// IPlpgsql_functionContext is an interface to support dynamic dispatch.
type IPlpgsql_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlpgsql_functionContext differentiates from other interfaces.
	IsPlpgsql_functionContext()
}

type Plpgsql_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlpgsql_functionContext() *Plpgsql_functionContext {
	var p = new(Plpgsql_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_plpgsql_function
	return p
}

func (*Plpgsql_functionContext) IsPlpgsql_functionContext() {}

func NewPlpgsql_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Plpgsql_functionContext {
	var p = new(Plpgsql_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_plpgsql_function

	return p
}

func (s *Plpgsql_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Plpgsql_functionContext) Function_block() IFunction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_blockContext)
}

func (s *Plpgsql_functionContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLParserEOF, 0)
}

func (s *Plpgsql_functionContext) Comp_options() IComp_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComp_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComp_optionsContext)
}

func (s *Plpgsql_functionContext) SEMI_COLON() antlr.TerminalNode {
	return s.GetToken(SQLParserSEMI_COLON, 0)
}

func (s *Plpgsql_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Plpgsql_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Plpgsql_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPlpgsql_function(s)
	}
}

func (s *Plpgsql_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPlpgsql_function(s)
	}
}




func (p *SQLParser) Plpgsql_function() (localctx IPlpgsql_functionContext) {
	localctx = NewPlpgsql_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SQLParserRULE_plpgsql_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(831)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserHASH_SIGN {
		{
			p.SetState(830)
			p.Comp_options()
		}

	}
	{
		p.SetState(833)
		p.Function_block()
	}
	p.SetState(835)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserSEMI_COLON {
		{
			p.SetState(834)
			p.Match(SQLParserSEMI_COLON)
		}

	}
	{
		p.SetState(837)
		p.Match(SQLParserEOF)
	}



	return localctx
}


// IPlpgsql_function_test_listContext is an interface to support dynamic dispatch.
type IPlpgsql_function_test_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlpgsql_function_test_listContext differentiates from other interfaces.
	IsPlpgsql_function_test_listContext()
}

type Plpgsql_function_test_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlpgsql_function_test_listContext() *Plpgsql_function_test_listContext {
	var p = new(Plpgsql_function_test_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_plpgsql_function_test_list
	return p
}

func (*Plpgsql_function_test_listContext) IsPlpgsql_function_test_listContext() {}

func NewPlpgsql_function_test_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Plpgsql_function_test_listContext {
	var p = new(Plpgsql_function_test_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_plpgsql_function_test_list

	return p
}

func (s *Plpgsql_function_test_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Plpgsql_function_test_listContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLParserEOF, 0)
}

func (s *Plpgsql_function_test_listContext) AllFunction_block() []IFunction_blockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_blockContext)(nil)).Elem())
	var tst = make([]IFunction_blockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_blockContext)
		}
	}

	return tst
}

func (s *Plpgsql_function_test_listContext) Function_block(i int) IFunction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_blockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_blockContext)
}

func (s *Plpgsql_function_test_listContext) AllSEMI_COLON() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSEMI_COLON)
}

func (s *Plpgsql_function_test_listContext) SEMI_COLON(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSEMI_COLON, i)
}

func (s *Plpgsql_function_test_listContext) AllComp_options() []IComp_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IComp_optionsContext)(nil)).Elem())
	var tst = make([]IComp_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IComp_optionsContext)
		}
	}

	return tst
}

func (s *Plpgsql_function_test_listContext) Comp_options(i int) IComp_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComp_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IComp_optionsContext)
}

func (s *Plpgsql_function_test_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Plpgsql_function_test_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Plpgsql_function_test_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPlpgsql_function_test_list(s)
	}
}

func (s *Plpgsql_function_test_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPlpgsql_function_test_list(s)
	}
}




func (p *SQLParser) Plpgsql_function_test_list() (localctx IPlpgsql_function_test_listContext) {
	localctx = NewPlpgsql_function_test_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SQLParserRULE_plpgsql_function_test_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(847)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserBEGIN || _la == SQLParserDECLARE || _la == SQLParserLESS_LESS || _la == SQLParserHASH_SIGN {
		p.SetState(840)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserHASH_SIGN {
			{
				p.SetState(839)
				p.Comp_options()
			}

		}
		{
			p.SetState(842)
			p.Function_block()
		}
		{
			p.SetState(843)
			p.Match(SQLParserSEMI_COLON)
		}


		p.SetState(849)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(850)
		p.Match(SQLParserEOF)
	}



	return localctx
}


// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Data_statement() IData_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_statementContext)
}

func (s *StatementContext) Schema_statement() ISchema_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_statementContext)
}

func (s *StatementContext) Script_statement() IScript_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScript_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScript_statementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitStatement(s)
	}
}




func (p *SQLParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SQLParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(855)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserDELETE, SQLParserINSERT, SQLParserUPDATE, SQLParserVALUES, SQLParserSELECT, SQLParserTABLE, SQLParserWITH, SQLParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(852)
			p.Data_statement()
		}


	case SQLParserALTER, SQLParserCOMMENT, SQLParserDROP, SQLParserIMPORT, SQLParserREVOKE, SQLParserSECURITY, SQLParserSET, SQLParserCREATE, SQLParserGRANT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(853)
			p.Schema_statement()
		}


	case SQLParserABORT, SQLParserBEGIN, SQLParserCALL, SQLParserCHECKPOINT, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOMMIT, SQLParserCOPY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDISCARD, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCK, SQLParserMOVE, SQLParserNOTIFY, SQLParserPREPARE, SQLParserREASSIGN, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELEASE, SQLParserRESET, SQLParserROLLBACK, SQLParserSAVEPOINT, SQLParserSHOW, SQLParserSTART, SQLParserTRUNCATE, SQLParserUNLISTEN, SQLParserVACUUM, SQLParserANALYZE, SQLParserDO, SQLParserEND, SQLParserFETCH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(854)
			p.Script_statement()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IData_statementContext is an interface to support dynamic dispatch.
type IData_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_statementContext differentiates from other interfaces.
	IsData_statementContext()
}

type Data_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_statementContext() *Data_statementContext {
	var p = new(Data_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_data_statement
	return p
}

func (*Data_statementContext) IsData_statementContext() {}

func NewData_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_statementContext {
	var p = new(Data_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_data_statement

	return p
}

func (s *Data_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_statementContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Data_statementContext) Insert_stmt_for_psql() IInsert_stmt_for_psqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmt_for_psqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmt_for_psqlContext)
}

func (s *Data_statementContext) Update_stmt_for_psql() IUpdate_stmt_for_psqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmt_for_psqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmt_for_psqlContext)
}

func (s *Data_statementContext) Delete_stmt_for_psql() IDelete_stmt_for_psqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmt_for_psqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmt_for_psqlContext)
}

func (s *Data_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Data_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterData_statement(s)
	}
}

func (s *Data_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitData_statement(s)
	}
}




func (p *SQLParser) Data_statement() (localctx IData_statementContext) {
	localctx = NewData_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SQLParserRULE_data_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(857)
			p.Select_stmt()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(858)
			p.Insert_stmt_for_psql()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(859)
			p.Update_stmt_for_psql()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(860)
			p.Delete_stmt_for_psql()
		}

	}


	return localctx
}


// IScript_statementContext is an interface to support dynamic dispatch.
type IScript_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScript_statementContext differentiates from other interfaces.
	IsScript_statementContext()
}

type Script_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScript_statementContext() *Script_statementContext {
	var p = new(Script_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_script_statement
	return p
}

func (*Script_statementContext) IsScript_statementContext() {}

func NewScript_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Script_statementContext {
	var p = new(Script_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_script_statement

	return p
}

func (s *Script_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Script_statementContext) Script_transaction() IScript_transactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScript_transactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScript_transactionContext)
}

func (s *Script_statementContext) Script_additional() IScript_additionalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScript_additionalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScript_additionalContext)
}

func (s *Script_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Script_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Script_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterScript_statement(s)
	}
}

func (s *Script_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitScript_statement(s)
	}
}




func (p *SQLParser) Script_statement() (localctx IScript_statementContext) {
	localctx = NewScript_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SQLParserRULE_script_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(863)
			p.Script_transaction()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(864)
			p.Script_additional()
		}

	}


	return localctx
}


// IScript_transactionContext is an interface to support dynamic dispatch.
type IScript_transactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScript_transactionContext differentiates from other interfaces.
	IsScript_transactionContext()
}

type Script_transactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScript_transactionContext() *Script_transactionContext {
	var p = new(Script_transactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_script_transaction
	return p
}

func (*Script_transactionContext) IsScript_transactionContext() {}

func NewScript_transactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Script_transactionContext {
	var p = new(Script_transactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_script_transaction

	return p
}

func (s *Script_transactionContext) GetParser() antlr.Parser { return s.parser }

func (s *Script_transactionContext) START() antlr.TerminalNode {
	return s.GetToken(SQLParserSTART, 0)
}

func (s *Script_transactionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSACTION, 0)
}

func (s *Script_transactionContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLParserBEGIN, 0)
}

func (s *Script_transactionContext) AllTransaction_mode() []ITransaction_modeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransaction_modeContext)(nil)).Elem())
	var tst = make([]ITransaction_modeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransaction_modeContext)
		}
	}

	return tst
}

func (s *Script_transactionContext) Transaction_mode(i int) ITransaction_modeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_modeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransaction_modeContext)
}

func (s *Script_transactionContext) WORK() antlr.TerminalNode {
	return s.GetToken(SQLParserWORK, 0)
}

func (s *Script_transactionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Script_transactionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Script_transactionContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMIT, 0)
}

func (s *Script_transactionContext) END() antlr.TerminalNode {
	return s.GetToken(SQLParserEND, 0)
}

func (s *Script_transactionContext) ABORT() antlr.TerminalNode {
	return s.GetToken(SQLParserABORT, 0)
}

func (s *Script_transactionContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLParserROLLBACK, 0)
}

func (s *Script_transactionContext) AND() antlr.TerminalNode {
	return s.GetToken(SQLParserAND, 0)
}

func (s *Script_transactionContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserCHAIN, 0)
}

func (s *Script_transactionContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Script_transactionContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Script_transactionContext) PREPARED() antlr.TerminalNode {
	return s.GetToken(SQLParserPREPARED, 0)
}

func (s *Script_transactionContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(SQLParserPREPARE, 0)
}

func (s *Script_transactionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Script_transactionContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLParserSAVEPOINT, 0)
}

func (s *Script_transactionContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(SQLParserRELEASE, 0)
}

func (s *Script_transactionContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Script_transactionContext) Lock_table() ILock_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILock_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILock_tableContext)
}

func (s *Script_transactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Script_transactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Script_transactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterScript_transaction(s)
	}
}

func (s *Script_transactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitScript_transaction(s)
	}
}




func (p *SQLParser) Script_transaction() (localctx IScript_transactionContext) {
	localctx = NewScript_transactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SQLParserRULE_script_transaction)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(924)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(873)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserSTART:
			{
				p.SetState(867)
				p.Match(SQLParserSTART)
			}
			{
				p.SetState(868)
				p.Match(SQLParserTRANSACTION)
			}


		case SQLParserBEGIN:
			{
				p.SetState(869)
				p.Match(SQLParserBEGIN)
			}
			p.SetState(871)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserTRANSACTION || _la == SQLParserWORK {
				{
					p.SetState(870)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLParserTRANSACTION || _la == SQLParserWORK) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserISOLATION || _la == SQLParserREAD || _la == SQLParserDEFERRABLE || _la == SQLParserNOT {
			{
				p.SetState(875)
				p.Transaction_mode()
			}
			p.SetState(880)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(876)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(877)
					p.Transaction_mode()
				}


				p.SetState(882)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(885)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserABORT || _la == SQLParserCOMMIT || _la == SQLParserROLLBACK || _la == SQLParserEND) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(887)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserTRANSACTION || _la == SQLParserWORK {
			{
				p.SetState(886)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserTRANSACTION || _la == SQLParserWORK) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(894)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAND {
			{
				p.SetState(889)
				p.Match(SQLParserAND)
			}
			p.SetState(891)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserNO {
				{
					p.SetState(890)
					p.Match(SQLParserNO)
				}

			}
			{
				p.SetState(893)
				p.Match(SQLParserCHAIN)
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(900)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCOMMIT:
			{
				p.SetState(896)
				p.Match(SQLParserCOMMIT)
			}
			{
				p.SetState(897)
				p.Match(SQLParserPREPARED)
			}


		case SQLParserPREPARE:
			{
				p.SetState(898)
				p.Match(SQLParserPREPARE)
			}
			{
				p.SetState(899)
				p.Match(SQLParserTRANSACTION)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(902)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(908)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserSAVEPOINT:
			{
				p.SetState(903)
				p.Match(SQLParserSAVEPOINT)
			}


		case SQLParserRELEASE:
			{
				p.SetState(904)
				p.Match(SQLParserRELEASE)
			}
			p.SetState(906)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(905)
					p.Match(SQLParserSAVEPOINT)
				}


			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(910)
			p.Identifier()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(911)
			p.Match(SQLParserROLLBACK)
		}
		{
			p.SetState(912)
			p.Match(SQLParserPREPARED)
		}
		{
			p.SetState(913)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(914)
			p.Match(SQLParserROLLBACK)
		}
		p.SetState(916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserTRANSACTION || _la == SQLParserWORK {
			{
				p.SetState(915)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserTRANSACTION || _la == SQLParserWORK) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(918)
			p.Match(SQLParserTO)
		}
		p.SetState(920)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(919)
				p.Match(SQLParserSAVEPOINT)
			}


		}
		{
			p.SetState(922)
			p.Identifier()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(923)
			p.Lock_table()
		}

	}


	return localctx
}


// ITransaction_modeContext is an interface to support dynamic dispatch.
type ITransaction_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_modeContext differentiates from other interfaces.
	IsTransaction_modeContext()
}

type Transaction_modeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_modeContext() *Transaction_modeContext {
	var p = new(Transaction_modeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_transaction_mode
	return p
}

func (*Transaction_modeContext) IsTransaction_modeContext() {}

func NewTransaction_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_modeContext {
	var p = new(Transaction_modeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_transaction_mode

	return p
}

func (s *Transaction_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_modeContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserISOLATION, 0)
}

func (s *Transaction_modeContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(SQLParserLEVEL, 0)
}

func (s *Transaction_modeContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserSERIALIZABLE, 0)
}

func (s *Transaction_modeContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPEATABLE, 0)
}

func (s *Transaction_modeContext) READ() antlr.TerminalNode {
	return s.GetToken(SQLParserREAD, 0)
}

func (s *Transaction_modeContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMITTED, 0)
}

func (s *Transaction_modeContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNCOMMITTED, 0)
}

func (s *Transaction_modeContext) WRITE() antlr.TerminalNode {
	return s.GetToken(SQLParserWRITE, 0)
}

func (s *Transaction_modeContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *Transaction_modeContext) DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFERRABLE, 0)
}

func (s *Transaction_modeContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Transaction_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Transaction_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTransaction_mode(s)
	}
}

func (s *Transaction_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTransaction_mode(s)
	}
}




func (p *SQLParser) Transaction_mode() (localctx ITransaction_modeContext) {
	localctx = NewTransaction_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SQLParserRULE_transaction_mode)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(926)
			p.Match(SQLParserISOLATION)
		}
		{
			p.SetState(927)
			p.Match(SQLParserLEVEL)
		}
		p.SetState(935)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(928)
				p.Match(SQLParserSERIALIZABLE)
			}


		case 2:
			{
				p.SetState(929)
				p.Match(SQLParserREPEATABLE)
			}
			{
				p.SetState(930)
				p.Match(SQLParserREAD)
			}


		case 3:
			{
				p.SetState(931)
				p.Match(SQLParserREAD)
			}
			{
				p.SetState(932)
				p.Match(SQLParserCOMMITTED)
			}


		case 4:
			{
				p.SetState(933)
				p.Match(SQLParserREAD)
			}
			{
				p.SetState(934)
				p.Match(SQLParserUNCOMMITTED)
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(937)
			p.Match(SQLParserREAD)
		}
		{
			p.SetState(938)
			p.Match(SQLParserWRITE)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(939)
			p.Match(SQLParserREAD)
		}
		{
			p.SetState(940)
			p.Match(SQLParserONLY)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(942)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT {
			{
				p.SetState(941)
				p.Match(SQLParserNOT)
			}

		}
		{
			p.SetState(944)
			p.Match(SQLParserDEFERRABLE)
		}

	}


	return localctx
}


// ILock_tableContext is an interface to support dynamic dispatch.
type ILock_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLock_tableContext differentiates from other interfaces.
	IsLock_tableContext()
}

type Lock_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLock_tableContext() *Lock_tableContext {
	var p = new(Lock_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_lock_table
	return p
}

func (*Lock_tableContext) IsLock_tableContext() {}

func NewLock_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lock_tableContext {
	var p = new(Lock_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_lock_table

	return p
}

func (s *Lock_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Lock_tableContext) LOCK() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCK, 0)
}

func (s *Lock_tableContext) AllOnly_table_multiply() []IOnly_table_multiplyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOnly_table_multiplyContext)(nil)).Elem())
	var tst = make([]IOnly_table_multiplyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOnly_table_multiplyContext)
		}
	}

	return tst
}

func (s *Lock_tableContext) Only_table_multiply(i int) IOnly_table_multiplyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOnly_table_multiplyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOnly_table_multiplyContext)
}

func (s *Lock_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Lock_tableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Lock_tableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Lock_tableContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Lock_tableContext) Lock_mode() ILock_modeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILock_modeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILock_modeContext)
}

func (s *Lock_tableContext) MODE() antlr.TerminalNode {
	return s.GetToken(SQLParserMODE, 0)
}

func (s *Lock_tableContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOWAIT, 0)
}

func (s *Lock_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lock_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Lock_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterLock_table(s)
	}
}

func (s *Lock_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitLock_table(s)
	}
}




func (p *SQLParser) Lock_table() (localctx ILock_tableContext) {
	localctx = NewLock_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SQLParserRULE_lock_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(947)
		p.Match(SQLParserLOCK)
	}
	p.SetState(949)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTABLE {
		{
			p.SetState(948)
			p.Match(SQLParserTABLE)
		}

	}
	{
		p.SetState(951)
		p.Only_table_multiply()
	}
	p.SetState(956)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(952)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(953)
			p.Only_table_multiply()
		}


		p.SetState(958)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(963)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserIN {
		{
			p.SetState(959)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(960)
			p.Lock_mode()
		}
		{
			p.SetState(961)
			p.Match(SQLParserMODE)
		}

	}
	p.SetState(966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserNOWAIT {
		{
			p.SetState(965)
			p.Match(SQLParserNOWAIT)
		}

	}



	return localctx
}


// ILock_modeContext is an interface to support dynamic dispatch.
type ILock_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLock_modeContext differentiates from other interfaces.
	IsLock_modeContext()
}

type Lock_modeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLock_modeContext() *Lock_modeContext {
	var p = new(Lock_modeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_lock_mode
	return p
}

func (*Lock_modeContext) IsLock_modeContext() {}

func NewLock_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lock_modeContext {
	var p = new(Lock_modeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_lock_mode

	return p
}

func (s *Lock_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Lock_modeContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SQLParserSHARE, 0)
}

func (s *Lock_modeContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *Lock_modeContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SQLParserACCESS, 0)
}

func (s *Lock_modeContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCLUSIVE, 0)
}

func (s *Lock_modeContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Lock_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lock_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Lock_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterLock_mode(s)
	}
}

func (s *Lock_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitLock_mode(s)
	}
}




func (p *SQLParser) Lock_mode() (localctx ILock_modeContext) {
	localctx = NewLock_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SQLParserRULE_lock_mode)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(980)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(968)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserACCESS || _la == SQLParserROW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(969)
			p.Match(SQLParserSHARE)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(970)
			p.Match(SQLParserROW)
		}
		{
			p.SetState(971)
			p.Match(SQLParserEXCLUSIVE)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(972)
			p.Match(SQLParserSHARE)
		}
		{
			p.SetState(973)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserUPDATE || _la == SQLParserROW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(974)
			p.Match(SQLParserEXCLUSIVE)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(975)
			p.Match(SQLParserSHARE)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(977)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserACCESS {
			{
				p.SetState(976)
				p.Match(SQLParserACCESS)
			}

		}
		{
			p.SetState(979)
			p.Match(SQLParserEXCLUSIVE)
		}

	}


	return localctx
}


// IScript_additionalContext is an interface to support dynamic dispatch.
type IScript_additionalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScript_additionalContext differentiates from other interfaces.
	IsScript_additionalContext()
}

type Script_additionalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScript_additionalContext() *Script_additionalContext {
	var p = new(Script_additionalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_script_additional
	return p
}

func (*Script_additionalContext) IsScript_additionalContext() {}

func NewScript_additionalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Script_additionalContext {
	var p = new(Script_additionalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_script_additional

	return p
}

func (s *Script_additionalContext) GetParser() antlr.Parser { return s.parser }

func (s *Script_additionalContext) Additional_statement() IAdditional_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditional_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditional_statementContext)
}

func (s *Script_additionalContext) VACUUM() antlr.TerminalNode {
	return s.GetToken(SQLParserVACUUM, 0)
}

func (s *Script_additionalContext) Vacuum_mode() IVacuum_modeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVacuum_modeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVacuum_modeContext)
}

func (s *Script_additionalContext) Table_cols_list() ITable_cols_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_cols_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_cols_listContext)
}

func (s *Script_additionalContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Script_additionalContext) FETCH() antlr.TerminalNode {
	return s.GetToken(SQLParserFETCH, 0)
}

func (s *Script_additionalContext) MOVE() antlr.TerminalNode {
	return s.GetToken(SQLParserMOVE, 0)
}

func (s *Script_additionalContext) Fetch_move_direction() IFetch_move_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_move_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_move_directionContext)
}

func (s *Script_additionalContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Script_additionalContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Script_additionalContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserCLOSE, 0)
}

func (s *Script_additionalContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Script_additionalContext) CALL() antlr.TerminalNode {
	return s.GetToken(SQLParserCALL, 0)
}

func (s *Script_additionalContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Script_additionalContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(SQLParserDISCARD, 0)
}

func (s *Script_additionalContext) PLANS() antlr.TerminalNode {
	return s.GetToken(SQLParserPLANS, 0)
}

func (s *Script_additionalContext) SEQUENCES() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCES, 0)
}

func (s *Script_additionalContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPORARY, 0)
}

func (s *Script_additionalContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMP, 0)
}

func (s *Script_additionalContext) Declare_statement() IDeclare_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_statementContext)
}

func (s *Script_additionalContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Script_additionalContext) Explain_statement() IExplain_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplain_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplain_statementContext)
}

func (s *Script_additionalContext) Show_statement() IShow_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShow_statementContext)
}

func (s *Script_additionalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Script_additionalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Script_additionalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterScript_additional(s)
	}
}

func (s *Script_additionalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitScript_additional(s)
	}
}




func (p *SQLParser) Script_additional() (localctx IScript_additionalContext) {
	localctx = NewScript_additionalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SQLParserRULE_script_additional)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1009)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCHECKPOINT, SQLParserCLUSTER, SQLParserCOPY, SQLParserDEALLOCATE, SQLParserLISTEN, SQLParserLOAD, SQLParserNOTIFY, SQLParserPREPARE, SQLParserREASSIGN, SQLParserREFRESH, SQLParserREINDEX, SQLParserRESET, SQLParserTRUNCATE, SQLParserUNLISTEN, SQLParserANALYZE, SQLParserDO:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(982)
			p.Additional_statement()
		}


	case SQLParserVACUUM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(983)
			p.Match(SQLParserVACUUM)
		}
		{
			p.SetState(984)
			p.Vacuum_mode()
		}
		p.SetState(986)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
			{
				p.SetState(985)
				p.Table_cols_list()
			}

		}


	case SQLParserMOVE, SQLParserFETCH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(988)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserMOVE || _la == SQLParserFETCH) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(990)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(989)
				p.Fetch_move_direction()
			}


		}
		p.SetState(993)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFROM || _la == SQLParserIN {
			{
				p.SetState(992)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserFROM || _la == SQLParserIN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(995)
			p.Identifier()
		}


	case SQLParserCLOSE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(996)
			p.Match(SQLParserCLOSE)
		}
		p.SetState(999)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(997)
				p.Identifier()
			}


		case SQLParserALL:
			{
				p.SetState(998)
				p.Match(SQLParserALL)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserCALL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1001)
			p.Match(SQLParserCALL)
		}
		{
			p.SetState(1002)
			p.Function_call()
		}


	case SQLParserDISCARD:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1003)
			p.Match(SQLParserDISCARD)
		}
		{
			p.SetState(1004)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserPLANS || ((((_la - 230)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 230))) & ((1 << (SQLParserSEQUENCES - 230)) | (1 << (SQLParserTEMP - 230)) | (1 << (SQLParserTEMPORARY - 230)))) != 0) || _la == SQLParserALL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserDECLARE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1005)
			p.Declare_statement()
		}


	case SQLParserEXECUTE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1006)
			p.Execute_statement()
		}


	case SQLParserEXPLAIN:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1007)
			p.Explain_statement()
		}


	case SQLParserSHOW:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1008)
			p.Show_statement()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAdditional_statementContext is an interface to support dynamic dispatch.
type IAdditional_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditional_statementContext differentiates from other interfaces.
	IsAdditional_statementContext()
}

type Additional_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditional_statementContext() *Additional_statementContext {
	var p = new(Additional_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_additional_statement
	return p
}

func (*Additional_statementContext) IsAdditional_statementContext() {}

func NewAdditional_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Additional_statementContext {
	var p = new(Additional_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_additional_statement

	return p
}

func (s *Additional_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Additional_statementContext) Anonymous_block() IAnonymous_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnonymous_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnonymous_blockContext)
}

func (s *Additional_statementContext) LISTEN() antlr.TerminalNode {
	return s.GetToken(SQLParserLISTEN, 0)
}

func (s *Additional_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Additional_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Additional_statementContext) UNLISTEN() antlr.TerminalNode {
	return s.GetToken(SQLParserUNLISTEN, 0)
}

func (s *Additional_statementContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Additional_statementContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLParserANALYZE, 0)
}

func (s *Additional_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Additional_statementContext) AllAnalyze_mode() []IAnalyze_modeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnalyze_modeContext)(nil)).Elem())
	var tst = make([]IAnalyze_modeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnalyze_modeContext)
		}
	}

	return tst
}

func (s *Additional_statementContext) Analyze_mode(i int) IAnalyze_modeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyze_modeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnalyze_modeContext)
}

func (s *Additional_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Additional_statementContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserVERBOSE, 0)
}

func (s *Additional_statementContext) Table_cols_list() ITable_cols_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_cols_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_cols_listContext)
}

func (s *Additional_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Additional_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Additional_statementContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(SQLParserCLUSTER, 0)
}

func (s *Additional_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Additional_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Additional_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Additional_statementContext) CHECKPOINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCHECKPOINT, 0)
}

func (s *Additional_statementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(SQLParserLOAD, 0)
}

func (s *Additional_statementContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Additional_statementContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(SQLParserDEALLOCATE, 0)
}

func (s *Additional_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Additional_statementContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(SQLParserPREPARE, 0)
}

func (s *Additional_statementContext) REINDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserREINDEX, 0)
}

func (s *Additional_statementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Additional_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Additional_statementContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Additional_statementContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Additional_statementContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(SQLParserSYSTEM, 0)
}

func (s *Additional_statementContext) CONCURRENTLY() antlr.TerminalNode {
	return s.GetToken(SQLParserCONCURRENTLY, 0)
}

func (s *Additional_statementContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Additional_statementContext) TIME() antlr.TerminalNode {
	return s.GetToken(SQLParserTIME, 0)
}

func (s *Additional_statementContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLParserZONE, 0)
}

func (s *Additional_statementContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION, 0)
}

func (s *Additional_statementContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(SQLParserAUTHORIZATION, 0)
}

func (s *Additional_statementContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Additional_statementContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SQLParserREFRESH, 0)
}

func (s *Additional_statementContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Additional_statementContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Additional_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Additional_statementContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Additional_statementContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Additional_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Additional_statementContext) Data_statement() IData_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_statementContext)
}

func (s *Additional_statementContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Additional_statementContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Additional_statementContext) REASSIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserREASSIGN, 0)
}

func (s *Additional_statementContext) OWNED() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNED, 0)
}

func (s *Additional_statementContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Additional_statementContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *Additional_statementContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Additional_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Additional_statementContext) Copy_statement() ICopy_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICopy_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICopy_statementContext)
}

func (s *Additional_statementContext) Truncate_stmt() ITruncate_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncate_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncate_stmtContext)
}

func (s *Additional_statementContext) Notify_stmt() INotify_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotify_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotify_stmtContext)
}

func (s *Additional_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Additional_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Additional_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAdditional_statement(s)
	}
}

func (s *Additional_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAdditional_statement(s)
	}
}




func (p *SQLParser) Additional_statement() (localctx IAdditional_statementContext) {
	localctx = NewAdditional_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SQLParserRULE_additional_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1137)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserDO:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1011)
			p.Anonymous_block()
		}


	case SQLParserLISTEN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1012)
			p.Match(SQLParserLISTEN)
		}
		{
			p.SetState(1013)
			p.Identifier()
		}


	case SQLParserUNLISTEN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1014)
			p.Match(SQLParserUNLISTEN)
		}
		p.SetState(1017)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(1015)
				p.Identifier()
			}


		case SQLParserMULTIPLY:
			{
				p.SetState(1016)
				p.Match(SQLParserMULTIPLY)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserANALYZE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1019)
			p.Match(SQLParserANALYZE)
		}
		p.SetState(1032)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserLEFT_PAREN:
			{
				p.SetState(1020)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(1021)
				p.Analyze_mode()
			}
			p.SetState(1026)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(1022)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(1023)
					p.Analyze_mode()
				}


				p.SetState(1028)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1029)
				p.Match(SQLParserRIGHT_PAREN)
			}


		case SQLParserVERBOSE:
			{
				p.SetState(1031)
				p.Match(SQLParserVERBOSE)
			}


		case SQLParserEOF, SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserSEMI_COLON, SQLParserIdentifier, SQLParserQuotedIdentifier:



		default:
		}
		p.SetState(1035)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
			{
				p.SetState(1034)
				p.Table_cols_list()
			}

		}


	case SQLParserCLUSTER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1037)
			p.Match(SQLParserCLUSTER)
		}
		p.SetState(1039)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserVERBOSE {
			{
				p.SetState(1038)
				p.Match(SQLParserVERBOSE)
			}

		}
		p.SetState(1050)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1041)
				p.Identifier()
			}
			{
				p.SetState(1042)
				p.Match(SQLParserON)
			}
			{
				p.SetState(1043)
				p.Schema_qualified_name()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1045)
				p.Schema_qualified_name()
			}
			p.SetState(1048)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserUSING {
				{
					p.SetState(1046)
					p.Match(SQLParserUSING)
				}
				{
					p.SetState(1047)
					p.Identifier()
				}

			}


		}


	case SQLParserCHECKPOINT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1052)
			p.Match(SQLParserCHECKPOINT)
		}


	case SQLParserLOAD:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1053)
			p.Match(SQLParserLOAD)
		}
		{
			p.SetState(1054)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case SQLParserDEALLOCATE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1055)
			p.Match(SQLParserDEALLOCATE)
		}
		p.SetState(1057)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1056)
				p.Match(SQLParserPREPARE)
			}


		}
		p.SetState(1061)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(1059)
				p.Identifier()
			}


		case SQLParserALL:
			{
				p.SetState(1060)
				p.Match(SQLParserALL)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserREINDEX:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1063)
			p.Match(SQLParserREINDEX)
		}
		p.SetState(1067)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(1064)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(1065)
				p.Match(SQLParserVERBOSE)
			}
			{
				p.SetState(1066)
				p.Match(SQLParserRIGHT_PAREN)
			}

		}
		{
			p.SetState(1069)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDATABASE || _la == SQLParserINDEX || _la == SQLParserSCHEMA || _la == SQLParserSYSTEM || _la == SQLParserTABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCONCURRENTLY {
			{
				p.SetState(1070)
				p.Match(SQLParserCONCURRENTLY)
			}

		}
		{
			p.SetState(1073)
			p.Schema_qualified_name()
		}


	case SQLParserRESET:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1074)
			p.Match(SQLParserRESET)
		}
		p.SetState(1086)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1078)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1075)
					p.Identifier()
				}
				{
					p.SetState(1076)
					p.Match(SQLParserDOT)
				}


			}
			{
				p.SetState(1080)
				p.Identifier()
			}


		case 2:
			{
				p.SetState(1081)
				p.Match(SQLParserTIME)
			}
			{
				p.SetState(1082)
				p.Match(SQLParserZONE)
			}


		case 3:
			{
				p.SetState(1083)
				p.Match(SQLParserSESSION)
			}
			{
				p.SetState(1084)
				p.Match(SQLParserAUTHORIZATION)
			}


		case 4:
			{
				p.SetState(1085)
				p.Match(SQLParserALL)
			}

		}


	case SQLParserREFRESH:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1088)
			p.Match(SQLParserREFRESH)
		}
		{
			p.SetState(1089)
			p.Match(SQLParserMATERIALIZED)
		}
		{
			p.SetState(1090)
			p.Match(SQLParserVIEW)
		}
		p.SetState(1092)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCONCURRENTLY {
			{
				p.SetState(1091)
				p.Match(SQLParserCONCURRENTLY)
			}

		}
		{
			p.SetState(1094)
			p.Schema_qualified_name()
		}
		p.SetState(1100)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(1095)
				p.Match(SQLParserWITH)
			}
			p.SetState(1097)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserNO {
				{
					p.SetState(1096)
					p.Match(SQLParserNO)
				}

			}
			{
				p.SetState(1099)
				p.Match(SQLParserDATA)
			}

		}


	case SQLParserPREPARE:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1102)
			p.Match(SQLParserPREPARE)
		}
		{
			p.SetState(1103)
			p.Identifier()
		}
		p.SetState(1115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(1104)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(1105)
				p.Data_type()
			}
			p.SetState(1110)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(1106)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(1107)
					p.Data_type()
				}


				p.SetState(1112)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1113)
				p.Match(SQLParserRIGHT_PAREN)
			}

		}
		{
			p.SetState(1117)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(1118)
			p.Data_statement()
		}


	case SQLParserREASSIGN:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1120)
			p.Match(SQLParserREASSIGN)
		}
		{
			p.SetState(1121)
			p.Match(SQLParserOWNED)
		}
		{
			p.SetState(1122)
			p.Match(SQLParserBY)
		}
		{
			p.SetState(1123)
			p.User_name()
		}
		p.SetState(1128)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(1124)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(1125)
				p.User_name()
			}


			p.SetState(1130)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1131)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(1132)
			p.User_name()
		}


	case SQLParserCOPY:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1134)
			p.Copy_statement()
		}


	case SQLParserTRUNCATE:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1135)
			p.Truncate_stmt()
		}


	case SQLParserNOTIFY:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1136)
			p.Notify_stmt()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IExplain_statementContext is an interface to support dynamic dispatch.
type IExplain_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplain_statementContext differentiates from other interfaces.
	IsExplain_statementContext()
}

type Explain_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplain_statementContext() *Explain_statementContext {
	var p = new(Explain_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_explain_statement
	return p
}

func (*Explain_statementContext) IsExplain_statementContext() {}

func NewExplain_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Explain_statementContext {
	var p = new(Explain_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_explain_statement

	return p
}

func (s *Explain_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Explain_statementContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserEXPLAIN, 0)
}

func (s *Explain_statementContext) Explain_query() IExplain_queryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplain_queryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplain_queryContext)
}

func (s *Explain_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Explain_statementContext) AllExplain_option() []IExplain_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExplain_optionContext)(nil)).Elem())
	var tst = make([]IExplain_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExplain_optionContext)
		}
	}

	return tst
}

func (s *Explain_statementContext) Explain_option(i int) IExplain_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplain_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExplain_optionContext)
}

func (s *Explain_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Explain_statementContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLParserANALYZE, 0)
}

func (s *Explain_statementContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserVERBOSE, 0)
}

func (s *Explain_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Explain_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Explain_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Explain_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Explain_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterExplain_statement(s)
	}
}

func (s *Explain_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitExplain_statement(s)
	}
}




func (p *SQLParser) Explain_statement() (localctx IExplain_statementContext) {
	localctx = NewExplain_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SQLParserRULE_explain_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1139)
		p.Match(SQLParserEXPLAIN)
	}
	p.SetState(1157)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1141)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserANALYZE {
			{
				p.SetState(1140)
				p.Match(SQLParserANALYZE)
			}

		}
		p.SetState(1144)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserVERBOSE {
			{
				p.SetState(1143)
				p.Match(SQLParserVERBOSE)
			}

		}


	case 2:
		{
			p.SetState(1146)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(1147)
			p.Explain_option()
		}
		p.SetState(1152)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(1148)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(1149)
				p.Explain_option()
			}


			p.SetState(1154)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1155)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}
	{
		p.SetState(1159)
		p.Explain_query()
	}



	return localctx
}


// IExplain_queryContext is an interface to support dynamic dispatch.
type IExplain_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplain_queryContext differentiates from other interfaces.
	IsExplain_queryContext()
}

type Explain_queryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplain_queryContext() *Explain_queryContext {
	var p = new(Explain_queryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_explain_query
	return p
}

func (*Explain_queryContext) IsExplain_queryContext() {}

func NewExplain_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Explain_queryContext {
	var p = new(Explain_queryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_explain_query

	return p
}

func (s *Explain_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Explain_queryContext) Data_statement() IData_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_statementContext)
}

func (s *Explain_queryContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Explain_queryContext) Declare_statement() IDeclare_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_statementContext)
}

func (s *Explain_queryContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATE, 0)
}

func (s *Explain_queryContext) Create_table_as_statement() ICreate_table_as_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_table_as_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_table_as_statementContext)
}

func (s *Explain_queryContext) Create_view_statement() ICreate_view_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_view_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_view_statementContext)
}

func (s *Explain_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Explain_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Explain_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterExplain_query(s)
	}
}

func (s *Explain_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitExplain_query(s)
	}
}




func (p *SQLParser) Explain_query() (localctx IExplain_queryContext) {
	localctx = NewExplain_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SQLParserRULE_explain_query)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1169)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserDELETE, SQLParserINSERT, SQLParserUPDATE, SQLParserVALUES, SQLParserSELECT, SQLParserTABLE, SQLParserWITH, SQLParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1161)
			p.Data_statement()
		}


	case SQLParserEXECUTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1162)
			p.Execute_statement()
		}


	case SQLParserDECLARE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1163)
			p.Declare_statement()
		}


	case SQLParserCREATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1164)
			p.Match(SQLParserCREATE)
		}
		p.SetState(1167)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1165)
				p.Create_table_as_statement()
			}


		case 2:
			{
				p.SetState(1166)
				p.Create_view_statement()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IExecute_statementContext is an interface to support dynamic dispatch.
type IExecute_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_statementContext differentiates from other interfaces.
	IsExecute_statementContext()
}

type Execute_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_statementContext() *Execute_statementContext {
	var p = new(Execute_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_execute_statement
	return p
}

func (*Execute_statementContext) IsExecute_statementContext() {}

func NewExecute_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statementContext {
	var p = new(Execute_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_execute_statement

	return p
}

func (s *Execute_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXECUTE, 0)
}

func (s *Execute_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Execute_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Execute_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Execute_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Execute_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Execute_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Execute_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Execute_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Execute_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterExecute_statement(s)
	}
}

func (s *Execute_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitExecute_statement(s)
	}
}




func (p *SQLParser) Execute_statement() (localctx IExecute_statementContext) {
	localctx = NewExecute_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SQLParserRULE_execute_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1171)
		p.Match(SQLParserEXECUTE)
	}
	{
		p.SetState(1172)
		p.Identifier()
	}
	p.SetState(1184)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(1173)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(1174)
			p.vex(0)
		}
		p.SetState(1179)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(1175)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(1176)
				p.vex(0)
			}


			p.SetState(1181)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1182)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}



	return localctx
}


// IDeclare_statementContext is an interface to support dynamic dispatch.
type IDeclare_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_statementContext differentiates from other interfaces.
	IsDeclare_statementContext()
}

type Declare_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_statementContext() *Declare_statementContext {
	var p = new(Declare_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_declare_statement
	return p
}

func (*Declare_statementContext) IsDeclare_statementContext() {}

func NewDeclare_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_statementContext {
	var p = new(Declare_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_declare_statement

	return p
}

func (s *Declare_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_statementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(SQLParserDECLARE, 0)
}

func (s *Declare_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Declare_statementContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(SQLParserCURSOR, 0)
}

func (s *Declare_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Declare_statementContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Declare_statementContext) BINARY() antlr.TerminalNode {
	return s.GetToken(SQLParserBINARY, 0)
}

func (s *Declare_statementContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserINSENSITIVE, 0)
}

func (s *Declare_statementContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(SQLParserSCROLL, 0)
}

func (s *Declare_statementContext) HOLD() antlr.TerminalNode {
	return s.GetToken(SQLParserHOLD, 0)
}

func (s *Declare_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Declare_statementContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHOUT, 0)
}

func (s *Declare_statementContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Declare_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Declare_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDeclare_statement(s)
	}
}

func (s *Declare_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDeclare_statement(s)
	}
}




func (p *SQLParser) Declare_statement() (localctx IDeclare_statementContext) {
	localctx = NewDeclare_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SQLParserRULE_declare_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1186)
		p.Match(SQLParserDECLARE)
	}
	{
		p.SetState(1187)
		p.Identifier()
	}
	p.SetState(1189)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserBINARY {
		{
			p.SetState(1188)
			p.Match(SQLParserBINARY)
		}

	}
	p.SetState(1192)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserINSENSITIVE {
		{
			p.SetState(1191)
			p.Match(SQLParserINSENSITIVE)
		}

	}
	p.SetState(1198)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserNO || _la == SQLParserSCROLL {
		p.SetState(1195)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(1194)
				p.Match(SQLParserNO)
			}

		}
		{
			p.SetState(1197)
			p.Match(SQLParserSCROLL)
		}

	}
	{
		p.SetState(1200)
		p.Match(SQLParserCURSOR)
	}
	p.SetState(1203)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITHOUT || _la == SQLParserWITH {
		{
			p.SetState(1201)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserWITHOUT || _la == SQLParserWITH) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1202)
			p.Match(SQLParserHOLD)
		}

	}
	{
		p.SetState(1205)
		p.Match(SQLParserFOR)
	}
	{
		p.SetState(1206)
		p.Select_stmt()
	}



	return localctx
}


// IShow_statementContext is an interface to support dynamic dispatch.
type IShow_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_statementContext differentiates from other interfaces.
	IsShow_statementContext()
}

type Show_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_statementContext() *Show_statementContext {
	var p = new(Show_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_show_statement
	return p
}

func (*Show_statementContext) IsShow_statementContext() {}

func NewShow_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_statementContext {
	var p = new(Show_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_show_statement

	return p
}

func (s *Show_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_statementContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SQLParserSHOW, 0)
}

func (s *Show_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Show_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Show_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Show_statementContext) TIME() antlr.TerminalNode {
	return s.GetToken(SQLParserTIME, 0)
}

func (s *Show_statementContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLParserZONE, 0)
}

func (s *Show_statementContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSACTION, 0)
}

func (s *Show_statementContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserISOLATION, 0)
}

func (s *Show_statementContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(SQLParserLEVEL, 0)
}

func (s *Show_statementContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION, 0)
}

func (s *Show_statementContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(SQLParserAUTHORIZATION, 0)
}

func (s *Show_statementContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Show_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Show_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterShow_statement(s)
	}
}

func (s *Show_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitShow_statement(s)
	}
}




func (p *SQLParser) Show_statement() (localctx IShow_statementContext) {
	localctx = NewShow_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SQLParserRULE_show_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1208)
		p.Match(SQLParserSHOW)
	}
	p.SetState(1223)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1212)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1209)
				p.Identifier()
			}
			{
				p.SetState(1210)
				p.Match(SQLParserDOT)
			}


		}
		{
			p.SetState(1214)
			p.Identifier()
		}


	case 2:
		{
			p.SetState(1215)
			p.Match(SQLParserALL)
		}


	case 3:
		{
			p.SetState(1216)
			p.Match(SQLParserTIME)
		}
		{
			p.SetState(1217)
			p.Match(SQLParserZONE)
		}


	case 4:
		{
			p.SetState(1218)
			p.Match(SQLParserTRANSACTION)
		}
		{
			p.SetState(1219)
			p.Match(SQLParserISOLATION)
		}
		{
			p.SetState(1220)
			p.Match(SQLParserLEVEL)
		}


	case 5:
		{
			p.SetState(1221)
			p.Match(SQLParserSESSION)
		}
		{
			p.SetState(1222)
			p.Match(SQLParserAUTHORIZATION)
		}

	}



	return localctx
}


// IExplain_optionContext is an interface to support dynamic dispatch.
type IExplain_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplain_optionContext differentiates from other interfaces.
	IsExplain_optionContext()
}

type Explain_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplain_optionContext() *Explain_optionContext {
	var p = new(Explain_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_explain_option
	return p
}

func (*Explain_optionContext) IsExplain_optionContext() {}

func NewExplain_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Explain_optionContext {
	var p = new(Explain_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_explain_option

	return p
}

func (s *Explain_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Explain_optionContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLParserANALYZE, 0)
}

func (s *Explain_optionContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserVERBOSE, 0)
}

func (s *Explain_optionContext) COSTS() antlr.TerminalNode {
	return s.GetToken(SQLParserCOSTS, 0)
}

func (s *Explain_optionContext) SETTINGS() antlr.TerminalNode {
	return s.GetToken(SQLParserSETTINGS, 0)
}

func (s *Explain_optionContext) BUFFERS() antlr.TerminalNode {
	return s.GetToken(SQLParserBUFFERS, 0)
}

func (s *Explain_optionContext) WAL() antlr.TerminalNode {
	return s.GetToken(SQLParserWAL, 0)
}

func (s *Explain_optionContext) TIMING() antlr.TerminalNode {
	return s.GetToken(SQLParserTIMING, 0)
}

func (s *Explain_optionContext) SUMMARY() antlr.TerminalNode {
	return s.GetToken(SQLParserSUMMARY, 0)
}

func (s *Explain_optionContext) Boolean_value() IBoolean_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_valueContext)
}

func (s *Explain_optionContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SQLParserFORMAT, 0)
}

func (s *Explain_optionContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Explain_optionContext) XML() antlr.TerminalNode {
	return s.GetToken(SQLParserXML, 0)
}

func (s *Explain_optionContext) JSON() antlr.TerminalNode {
	return s.GetToken(SQLParserJSON, 0)
}

func (s *Explain_optionContext) YAML() antlr.TerminalNode {
	return s.GetToken(SQLParserYAML, 0)
}

func (s *Explain_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Explain_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Explain_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterExplain_option(s)
	}
}

func (s *Explain_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitExplain_option(s)
	}
}




func (p *SQLParser) Explain_option() (localctx IExplain_optionContext) {
	localctx = NewExplain_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SQLParserRULE_explain_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1231)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserVERBOSE, SQLParserANALYZE, SQLParserBUFFERS, SQLParserCOSTS, SQLParserSETTINGS, SQLParserSUMMARY, SQLParserTIMING, SQLParserWAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1225)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserVERBOSE || _la == SQLParserANALYZE || _la == SQLParserBUFFERS || _la == SQLParserCOSTS || ((((_la - 532)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 532))) & ((1 << (SQLParserSETTINGS - 532)) | (1 << (SQLParserSUMMARY - 532)) | (1 << (SQLParserTIMING - 532)) | (1 << (SQLParserWAL - 532)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1227)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserOFF || _la == SQLParserFALSE || _la == SQLParserON || _la == SQLParserTRUE || ((((_la - 618)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 618))) & ((1 << (SQLParserNUMBER_LITERAL - 618)) | (1 << (SQLParserCharacter_String_Literal - 618)) | (1 << (SQLParserBeginDollarStringConstant - 618)))) != 0) {
			{
				p.SetState(1226)
				p.Boolean_value()
			}

		}


	case SQLParserFORMAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1229)
			p.Match(SQLParserFORMAT)
		}
		{
			p.SetState(1230)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserTEXT || _la == SQLParserXML || _la == SQLParserJSON || _la == SQLParserYAML) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IUser_nameContext is an interface to support dynamic dispatch.
type IUser_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_nameContext differentiates from other interfaces.
	IsUser_nameContext()
}

type User_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_nameContext() *User_nameContext {
	var p = new(User_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_user_name
	return p
}

func (*User_nameContext) IsUser_nameContext() {}

func NewUser_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_nameContext {
	var p = new(User_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_user_name

	return p
}

func (s *User_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *User_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *User_nameContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_USER, 0)
}

func (s *User_nameContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION_USER, 0)
}

func (s *User_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *User_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUser_name(s)
	}
}

func (s *User_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUser_name(s)
	}
}




func (p *SQLParser) User_name() (localctx IUser_nameContext) {
	localctx = NewUser_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SQLParserRULE_user_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1236)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1233)
			p.Identifier()
		}


	case SQLParserCURRENT_USER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1234)
			p.Match(SQLParserCURRENT_USER)
		}


	case SQLParserSESSION_USER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1235)
			p.Match(SQLParserSESSION_USER)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ITable_cols_listContext is an interface to support dynamic dispatch.
type ITable_cols_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_cols_listContext differentiates from other interfaces.
	IsTable_cols_listContext()
}

type Table_cols_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_cols_listContext() *Table_cols_listContext {
	var p = new(Table_cols_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_cols_list
	return p
}

func (*Table_cols_listContext) IsTable_cols_listContext() {}

func NewTable_cols_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_cols_listContext {
	var p = new(Table_cols_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_cols_list

	return p
}

func (s *Table_cols_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_cols_listContext) AllTable_cols() []ITable_colsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_colsContext)(nil)).Elem())
	var tst = make([]ITable_colsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_colsContext)
		}
	}

	return tst
}

func (s *Table_cols_listContext) Table_cols(i int) ITable_colsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_colsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_colsContext)
}

func (s *Table_cols_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Table_cols_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Table_cols_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_cols_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_cols_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_cols_list(s)
	}
}

func (s *Table_cols_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_cols_list(s)
	}
}




func (p *SQLParser) Table_cols_list() (localctx ITable_cols_listContext) {
	localctx = NewTable_cols_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SQLParserRULE_table_cols_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1238)
		p.Table_cols()
	}
	p.SetState(1243)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(1239)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(1240)
			p.Table_cols()
		}


		p.SetState(1245)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ITable_colsContext is an interface to support dynamic dispatch.
type ITable_colsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_colsContext differentiates from other interfaces.
	IsTable_colsContext()
}

type Table_colsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_colsContext() *Table_colsContext {
	var p = new(Table_colsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_cols
	return p
}

func (*Table_colsContext) IsTable_colsContext() {}

func NewTable_colsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_colsContext {
	var p = new(Table_colsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_cols

	return p
}

func (s *Table_colsContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_colsContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Table_colsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Table_colsContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Table_colsContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_colsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Table_colsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Table_colsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Table_colsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_colsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_colsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_cols(s)
	}
}

func (s *Table_colsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_cols(s)
	}
}




func (p *SQLParser) Table_cols() (localctx ITable_colsContext) {
	localctx = NewTable_colsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SQLParserRULE_table_cols)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1246)
		p.Schema_qualified_name()
	}
	p.SetState(1258)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(1247)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(1248)
			p.Identifier()
		}
		p.SetState(1253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(1249)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(1250)
				p.Identifier()
			}


			p.SetState(1255)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1256)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}



	return localctx
}


// IVacuum_modeContext is an interface to support dynamic dispatch.
type IVacuum_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVacuum_modeContext differentiates from other interfaces.
	IsVacuum_modeContext()
}

type Vacuum_modeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_modeContext() *Vacuum_modeContext {
	var p = new(Vacuum_modeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_vacuum_mode
	return p
}

func (*Vacuum_modeContext) IsVacuum_modeContext() {}

func NewVacuum_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_modeContext {
	var p = new(Vacuum_modeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_vacuum_mode

	return p
}

func (s *Vacuum_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_modeContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Vacuum_modeContext) AllVacuum_option() []IVacuum_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVacuum_optionContext)(nil)).Elem())
	var tst = make([]IVacuum_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVacuum_optionContext)
		}
	}

	return tst
}

func (s *Vacuum_modeContext) Vacuum_option(i int) IVacuum_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVacuum_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVacuum_optionContext)
}

func (s *Vacuum_modeContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Vacuum_modeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Vacuum_modeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Vacuum_modeContext) FULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFULL, 0)
}

func (s *Vacuum_modeContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(SQLParserFREEZE, 0)
}

func (s *Vacuum_modeContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserVERBOSE, 0)
}

func (s *Vacuum_modeContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLParserANALYZE, 0)
}

func (s *Vacuum_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Vacuum_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterVacuum_mode(s)
	}
}

func (s *Vacuum_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitVacuum_mode(s)
	}
}




func (p *SQLParser) Vacuum_mode() (localctx IVacuum_modeContext) {
	localctx = NewVacuum_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SQLParserRULE_vacuum_mode)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1283)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1260)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(1261)
			p.Vacuum_option()
		}
		p.SetState(1266)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(1262)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(1263)
				p.Vacuum_option()
			}


			p.SetState(1268)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1269)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserEOF, SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserFREEZE, SQLParserFULL, SQLParserVERBOSE, SQLParserANALYZE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserSEMI_COLON, SQLParserIdentifier, SQLParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1272)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFULL {
			{
				p.SetState(1271)
				p.Match(SQLParserFULL)
			}

		}
		p.SetState(1275)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFREEZE {
			{
				p.SetState(1274)
				p.Match(SQLParserFREEZE)
			}

		}
		p.SetState(1278)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserVERBOSE {
			{
				p.SetState(1277)
				p.Match(SQLParserVERBOSE)
			}

		}
		p.SetState(1281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserANALYZE {
			{
				p.SetState(1280)
				p.Match(SQLParserANALYZE)
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IVacuum_optionContext is an interface to support dynamic dispatch.
type IVacuum_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVacuum_optionContext differentiates from other interfaces.
	IsVacuum_optionContext()
}

type Vacuum_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_optionContext() *Vacuum_optionContext {
	var p = new(Vacuum_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_vacuum_option
	return p
}

func (*Vacuum_optionContext) IsVacuum_optionContext() {}

func NewVacuum_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_optionContext {
	var p = new(Vacuum_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_vacuum_option

	return p
}

func (s *Vacuum_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_optionContext) FULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFULL, 0)
}

func (s *Vacuum_optionContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(SQLParserFREEZE, 0)
}

func (s *Vacuum_optionContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserVERBOSE, 0)
}

func (s *Vacuum_optionContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLParserANALYZE, 0)
}

func (s *Vacuum_optionContext) DISABLE_PAGE_SKIPPING() antlr.TerminalNode {
	return s.GetToken(SQLParserDISABLE_PAGE_SKIPPING, 0)
}

func (s *Vacuum_optionContext) SKIP_LOCKED() antlr.TerminalNode {
	return s.GetToken(SQLParserSKIP_LOCKED, 0)
}

func (s *Vacuum_optionContext) INDEX_CLEANUP() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX_CLEANUP, 0)
}

func (s *Vacuum_optionContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUNCATE, 0)
}

func (s *Vacuum_optionContext) Boolean_value() IBoolean_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_valueContext)
}

func (s *Vacuum_optionContext) PARALLEL() antlr.TerminalNode {
	return s.GetToken(SQLParserPARALLEL, 0)
}

func (s *Vacuum_optionContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Vacuum_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Vacuum_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterVacuum_option(s)
	}
}

func (s *Vacuum_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitVacuum_option(s)
	}
}




func (p *SQLParser) Vacuum_option() (localctx IVacuum_optionContext) {
	localctx = NewVacuum_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SQLParserRULE_vacuum_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1291)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserTRUNCATE, SQLParserFREEZE, SQLParserFULL, SQLParserVERBOSE, SQLParserANALYZE, SQLParserDISABLE_PAGE_SKIPPING, SQLParserINDEX_CLEANUP, SQLParserSKIP_LOCKED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1285)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserTRUNCATE || ((((_la - 357)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 357))) & ((1 << (SQLParserFREEZE - 357)) | (1 << (SQLParserFULL - 357)) | (1 << (SQLParserVERBOSE - 357)) | (1 << (SQLParserANALYZE - 357)))) != 0) || _la == SQLParserDISABLE_PAGE_SKIPPING || _la == SQLParserINDEX_CLEANUP || _la == SQLParserSKIP_LOCKED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1287)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserOFF || _la == SQLParserFALSE || _la == SQLParserON || _la == SQLParserTRUE || ((((_la - 618)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 618))) & ((1 << (SQLParserNUMBER_LITERAL - 618)) | (1 << (SQLParserCharacter_String_Literal - 618)) | (1 << (SQLParserBeginDollarStringConstant - 618)))) != 0) {
			{
				p.SetState(1286)
				p.Boolean_value()
			}

		}


	case SQLParserPARALLEL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1289)
			p.Match(SQLParserPARALLEL)
		}
		{
			p.SetState(1290)
			p.Match(SQLParserNUMBER_LITERAL)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAnalyze_modeContext is an interface to support dynamic dispatch.
type IAnalyze_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalyze_modeContext differentiates from other interfaces.
	IsAnalyze_modeContext()
}

type Analyze_modeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_modeContext() *Analyze_modeContext {
	var p = new(Analyze_modeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_analyze_mode
	return p
}

func (*Analyze_modeContext) IsAnalyze_modeContext() {}

func NewAnalyze_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_modeContext {
	var p = new(Analyze_modeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_analyze_mode

	return p
}

func (s *Analyze_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_modeContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserVERBOSE, 0)
}

func (s *Analyze_modeContext) SKIP_LOCKED() antlr.TerminalNode {
	return s.GetToken(SQLParserSKIP_LOCKED, 0)
}

func (s *Analyze_modeContext) Boolean_value() IBoolean_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_valueContext)
}

func (s *Analyze_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Analyze_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAnalyze_mode(s)
	}
}

func (s *Analyze_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAnalyze_mode(s)
	}
}




func (p *SQLParser) Analyze_mode() (localctx IAnalyze_modeContext) {
	localctx = NewAnalyze_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SQLParserRULE_analyze_mode)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1293)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserVERBOSE || _la == SQLParserSKIP_LOCKED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1295)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOFF || _la == SQLParserFALSE || _la == SQLParserON || _la == SQLParserTRUE || ((((_la - 618)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 618))) & ((1 << (SQLParserNUMBER_LITERAL - 618)) | (1 << (SQLParserCharacter_String_Literal - 618)) | (1 << (SQLParserBeginDollarStringConstant - 618)))) != 0) {
		{
			p.SetState(1294)
			p.Boolean_value()
		}

	}



	return localctx
}


// IBoolean_valueContext is an interface to support dynamic dispatch.
type IBoolean_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolean_valueContext differentiates from other interfaces.
	IsBoolean_valueContext()
}

type Boolean_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_valueContext() *Boolean_valueContext {
	var p = new(Boolean_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_boolean_value
	return p
}

func (*Boolean_valueContext) IsBoolean_valueContext() {}

func NewBoolean_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_valueContext {
	var p = new(Boolean_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_boolean_value

	return p
}

func (s *Boolean_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Boolean_valueContext) TRUE() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUE, 0)
}

func (s *Boolean_valueContext) FALSE() antlr.TerminalNode {
	return s.GetToken(SQLParserFALSE, 0)
}

func (s *Boolean_valueContext) OFF() antlr.TerminalNode {
	return s.GetToken(SQLParserOFF, 0)
}

func (s *Boolean_valueContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Boolean_valueContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Boolean_valueContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Boolean_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Boolean_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterBoolean_value(s)
	}
}

func (s *Boolean_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitBoolean_value(s)
	}
}




func (p *SQLParser) Boolean_value() (localctx IBoolean_valueContext) {
	localctx = NewBoolean_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SQLParserRULE_boolean_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1303)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserTRUE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1297)
			p.Match(SQLParserTRUE)
		}


	case SQLParserFALSE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1298)
			p.Match(SQLParserFALSE)
		}


	case SQLParserOFF:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1299)
			p.Match(SQLParserOFF)
		}


	case SQLParserON:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1300)
			p.Match(SQLParserON)
		}


	case SQLParserNUMBER_LITERAL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1301)
			p.Match(SQLParserNUMBER_LITERAL)
		}


	case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1302)
			p.Character_string()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IFetch_move_directionContext is an interface to support dynamic dispatch.
type IFetch_move_directionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFetch_move_directionContext differentiates from other interfaces.
	IsFetch_move_directionContext()
}

type Fetch_move_directionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFetch_move_directionContext() *Fetch_move_directionContext {
	var p = new(Fetch_move_directionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_fetch_move_direction
	return p
}

func (*Fetch_move_directionContext) IsFetch_move_directionContext() {}

func NewFetch_move_directionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fetch_move_directionContext {
	var p = new(Fetch_move_directionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_fetch_move_direction

	return p
}

func (s *Fetch_move_directionContext) GetParser() antlr.Parser { return s.parser }

func (s *Fetch_move_directionContext) NEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserNEXT, 0)
}

func (s *Fetch_move_directionContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIOR, 0)
}

func (s *Fetch_move_directionContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SQLParserFIRST, 0)
}

func (s *Fetch_move_directionContext) LAST() antlr.TerminalNode {
	return s.GetToken(SQLParserLAST, 0)
}

func (s *Fetch_move_directionContext) Signed_number_literal() ISigned_number_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_number_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_number_literalContext)
}

func (s *Fetch_move_directionContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserABSOLUTE, 0)
}

func (s *Fetch_move_directionContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRELATIVE, 0)
}

func (s *Fetch_move_directionContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Fetch_move_directionContext) FORWARD() antlr.TerminalNode {
	return s.GetToken(SQLParserFORWARD, 0)
}

func (s *Fetch_move_directionContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Fetch_move_directionContext) BACKWARD() antlr.TerminalNode {
	return s.GetToken(SQLParserBACKWARD, 0)
}

func (s *Fetch_move_directionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fetch_move_directionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Fetch_move_directionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFetch_move_direction(s)
	}
}

func (s *Fetch_move_directionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFetch_move_direction(s)
	}
}




func (p *SQLParser) Fetch_move_direction() (localctx IFetch_move_directionContext) {
	localctx = NewFetch_move_directionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SQLParserRULE_fetch_move_direction)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1322)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserNEXT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1305)
			p.Match(SQLParserNEXT)
		}


	case SQLParserPRIOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1306)
			p.Match(SQLParserPRIOR)
		}


	case SQLParserFIRST:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1307)
			p.Match(SQLParserFIRST)
		}


	case SQLParserLAST:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1308)
			p.Match(SQLParserLAST)
		}


	case SQLParserABSOLUTE, SQLParserRELATIVE, SQLParserPLUS, SQLParserMINUS, SQLParserNUMBER_LITERAL:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserABSOLUTE || _la == SQLParserRELATIVE {
			{
				p.SetState(1309)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserABSOLUTE || _la == SQLParserRELATIVE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(1312)
			p.Signed_number_literal()
		}


	case SQLParserALL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1313)
			p.Match(SQLParserALL)
		}


	case SQLParserFORWARD:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1314)
			p.Match(SQLParserFORWARD)
		}
		p.SetState(1316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserALL || _la == SQLParserNUMBER_LITERAL {
			{
				p.SetState(1315)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserALL || _la == SQLParserNUMBER_LITERAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}


	case SQLParserBACKWARD:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1318)
			p.Match(SQLParserBACKWARD)
		}
		p.SetState(1320)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserALL || _la == SQLParserNUMBER_LITERAL {
			{
				p.SetState(1319)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserALL || _la == SQLParserNUMBER_LITERAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISchema_statementContext is an interface to support dynamic dispatch.
type ISchema_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_statementContext differentiates from other interfaces.
	IsSchema_statementContext()
}

type Schema_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_statementContext() *Schema_statementContext {
	var p = new(Schema_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_schema_statement
	return p
}

func (*Schema_statementContext) IsSchema_statementContext() {}

func NewSchema_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_statementContext {
	var p = new(Schema_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_schema_statement

	return p
}

func (s *Schema_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_statementContext) Schema_create() ISchema_createContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_createContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_createContext)
}

func (s *Schema_statementContext) Schema_alter() ISchema_alterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_alterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_alterContext)
}

func (s *Schema_statementContext) Schema_drop() ISchema_dropContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_dropContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_dropContext)
}

func (s *Schema_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSchema_statement(s)
	}
}

func (s *Schema_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSchema_statement(s)
	}
}




func (p *SQLParser) Schema_statement() (localctx ISchema_statementContext) {
	localctx = NewSchema_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SQLParserRULE_schema_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1327)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCOMMENT, SQLParserIMPORT, SQLParserREVOKE, SQLParserSECURITY, SQLParserSET, SQLParserCREATE, SQLParserGRANT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1324)
			p.Schema_create()
		}


	case SQLParserALTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1325)
			p.Schema_alter()
		}


	case SQLParserDROP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1326)
			p.Schema_drop()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISchema_createContext is an interface to support dynamic dispatch.
type ISchema_createContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_createContext differentiates from other interfaces.
	IsSchema_createContext()
}

type Schema_createContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_createContext() *Schema_createContext {
	var p = new(Schema_createContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_schema_create
	return p
}

func (*Schema_createContext) IsSchema_createContext() {}

func NewSchema_createContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_createContext {
	var p = new(Schema_createContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_schema_create

	return p
}

func (s *Schema_createContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_createContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATE, 0)
}

func (s *Schema_createContext) Create_access_method_statement() ICreate_access_method_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_access_method_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_access_method_statementContext)
}

func (s *Schema_createContext) Create_aggregate_statement() ICreate_aggregate_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_aggregate_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_aggregate_statementContext)
}

func (s *Schema_createContext) Create_cast_statement() ICreate_cast_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_cast_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_cast_statementContext)
}

func (s *Schema_createContext) Create_collation_statement() ICreate_collation_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_collation_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_collation_statementContext)
}

func (s *Schema_createContext) Create_conversion_statement() ICreate_conversion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_conversion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_conversion_statementContext)
}

func (s *Schema_createContext) Create_database_statement() ICreate_database_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_database_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_database_statementContext)
}

func (s *Schema_createContext) Create_domain_statement() ICreate_domain_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_domain_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_domain_statementContext)
}

func (s *Schema_createContext) Create_event_trigger_statement() ICreate_event_trigger_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_event_trigger_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_event_trigger_statementContext)
}

func (s *Schema_createContext) Create_extension_statement() ICreate_extension_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_extension_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_extension_statementContext)
}

func (s *Schema_createContext) Create_foreign_data_wrapper_statement() ICreate_foreign_data_wrapper_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_foreign_data_wrapper_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_foreign_data_wrapper_statementContext)
}

func (s *Schema_createContext) Create_foreign_table_statement() ICreate_foreign_table_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_foreign_table_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_foreign_table_statementContext)
}

func (s *Schema_createContext) Create_fts_configuration_statement() ICreate_fts_configuration_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_fts_configuration_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_fts_configuration_statementContext)
}

func (s *Schema_createContext) Create_fts_dictionary_statement() ICreate_fts_dictionary_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_fts_dictionary_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_fts_dictionary_statementContext)
}

func (s *Schema_createContext) Create_fts_parser_statement() ICreate_fts_parser_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_fts_parser_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_fts_parser_statementContext)
}

func (s *Schema_createContext) Create_fts_template_statement() ICreate_fts_template_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_fts_template_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_fts_template_statementContext)
}

func (s *Schema_createContext) Create_function_statement() ICreate_function_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_function_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_function_statementContext)
}

func (s *Schema_createContext) Create_group_statement() ICreate_group_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_group_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_group_statementContext)
}

func (s *Schema_createContext) Create_index_statement() ICreate_index_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_index_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_index_statementContext)
}

func (s *Schema_createContext) Create_language_statement() ICreate_language_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_language_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_language_statementContext)
}

func (s *Schema_createContext) Create_operator_class_statement() ICreate_operator_class_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_operator_class_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_operator_class_statementContext)
}

func (s *Schema_createContext) Create_operator_family_statement() ICreate_operator_family_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_operator_family_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_operator_family_statementContext)
}

func (s *Schema_createContext) Create_operator_statement() ICreate_operator_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_operator_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_operator_statementContext)
}

func (s *Schema_createContext) Create_policy_statement() ICreate_policy_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_policy_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_policy_statementContext)
}

func (s *Schema_createContext) Create_publication_statement() ICreate_publication_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_publication_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_publication_statementContext)
}

func (s *Schema_createContext) Create_rewrite_statement() ICreate_rewrite_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_rewrite_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_rewrite_statementContext)
}

func (s *Schema_createContext) Create_schema_statement() ICreate_schema_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_schema_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_schema_statementContext)
}

func (s *Schema_createContext) Create_sequence_statement() ICreate_sequence_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_sequence_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_sequence_statementContext)
}

func (s *Schema_createContext) Create_server_statement() ICreate_server_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_server_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_server_statementContext)
}

func (s *Schema_createContext) Create_statistics_statement() ICreate_statistics_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_statistics_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_statistics_statementContext)
}

func (s *Schema_createContext) Create_subscription_statement() ICreate_subscription_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_subscription_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_subscription_statementContext)
}

func (s *Schema_createContext) Create_table_as_statement() ICreate_table_as_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_table_as_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_table_as_statementContext)
}

func (s *Schema_createContext) Create_table_statement() ICreate_table_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_table_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_table_statementContext)
}

func (s *Schema_createContext) Create_tablespace_statement() ICreate_tablespace_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tablespace_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_tablespace_statementContext)
}

func (s *Schema_createContext) Create_transform_statement() ICreate_transform_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_transform_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_transform_statementContext)
}

func (s *Schema_createContext) Create_trigger_statement() ICreate_trigger_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_trigger_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_trigger_statementContext)
}

func (s *Schema_createContext) Create_type_statement() ICreate_type_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_type_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_type_statementContext)
}

func (s *Schema_createContext) Create_user_mapping_statement() ICreate_user_mapping_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_user_mapping_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_user_mapping_statementContext)
}

func (s *Schema_createContext) Create_user_or_role_statement() ICreate_user_or_role_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_user_or_role_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_user_or_role_statementContext)
}

func (s *Schema_createContext) Create_view_statement() ICreate_view_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_view_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_view_statementContext)
}

func (s *Schema_createContext) Comment_on_statement() IComment_on_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComment_on_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComment_on_statementContext)
}

func (s *Schema_createContext) Rule_common() IRule_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRule_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRule_commonContext)
}

func (s *Schema_createContext) Schema_import() ISchema_importContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_importContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_importContext)
}

func (s *Schema_createContext) Security_label() ISecurity_labelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISecurity_labelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISecurity_labelContext)
}

func (s *Schema_createContext) Set_statement() ISet_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statementContext)
}

func (s *Schema_createContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_createContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_createContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSchema_create(s)
	}
}

func (s *Schema_createContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSchema_create(s)
	}
}




func (p *SQLParser) Schema_create() (localctx ISchema_createContext) {
	localctx = NewSchema_createContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SQLParserRULE_schema_create)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1376)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCREATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1329)
			p.Match(SQLParserCREATE)
		}
		p.SetState(1369)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1330)
				p.Create_access_method_statement()
			}


		case 2:
			{
				p.SetState(1331)
				p.Create_aggregate_statement()
			}


		case 3:
			{
				p.SetState(1332)
				p.Create_cast_statement()
			}


		case 4:
			{
				p.SetState(1333)
				p.Create_collation_statement()
			}


		case 5:
			{
				p.SetState(1334)
				p.Create_conversion_statement()
			}


		case 6:
			{
				p.SetState(1335)
				p.Create_database_statement()
			}


		case 7:
			{
				p.SetState(1336)
				p.Create_domain_statement()
			}


		case 8:
			{
				p.SetState(1337)
				p.Create_event_trigger_statement()
			}


		case 9:
			{
				p.SetState(1338)
				p.Create_extension_statement()
			}


		case 10:
			{
				p.SetState(1339)
				p.Create_foreign_data_wrapper_statement()
			}


		case 11:
			{
				p.SetState(1340)
				p.Create_foreign_table_statement()
			}


		case 12:
			{
				p.SetState(1341)
				p.Create_fts_configuration_statement()
			}


		case 13:
			{
				p.SetState(1342)
				p.Create_fts_dictionary_statement()
			}


		case 14:
			{
				p.SetState(1343)
				p.Create_fts_parser_statement()
			}


		case 15:
			{
				p.SetState(1344)
				p.Create_fts_template_statement()
			}


		case 16:
			{
				p.SetState(1345)
				p.Create_function_statement()
			}


		case 17:
			{
				p.SetState(1346)
				p.Create_group_statement()
			}


		case 18:
			{
				p.SetState(1347)
				p.Create_index_statement()
			}


		case 19:
			{
				p.SetState(1348)
				p.Create_language_statement()
			}


		case 20:
			{
				p.SetState(1349)
				p.Create_operator_class_statement()
			}


		case 21:
			{
				p.SetState(1350)
				p.Create_operator_family_statement()
			}


		case 22:
			{
				p.SetState(1351)
				p.Create_operator_statement()
			}


		case 23:
			{
				p.SetState(1352)
				p.Create_policy_statement()
			}


		case 24:
			{
				p.SetState(1353)
				p.Create_publication_statement()
			}


		case 25:
			{
				p.SetState(1354)
				p.Create_rewrite_statement()
			}


		case 26:
			{
				p.SetState(1355)
				p.Create_schema_statement()
			}


		case 27:
			{
				p.SetState(1356)
				p.Create_sequence_statement()
			}


		case 28:
			{
				p.SetState(1357)
				p.Create_server_statement()
			}


		case 29:
			{
				p.SetState(1358)
				p.Create_statistics_statement()
			}


		case 30:
			{
				p.SetState(1359)
				p.Create_subscription_statement()
			}


		case 31:
			{
				p.SetState(1360)
				p.Create_table_as_statement()
			}


		case 32:
			{
				p.SetState(1361)
				p.Create_table_statement()
			}


		case 33:
			{
				p.SetState(1362)
				p.Create_tablespace_statement()
			}


		case 34:
			{
				p.SetState(1363)
				p.Create_transform_statement()
			}


		case 35:
			{
				p.SetState(1364)
				p.Create_trigger_statement()
			}


		case 36:
			{
				p.SetState(1365)
				p.Create_type_statement()
			}


		case 37:
			{
				p.SetState(1366)
				p.Create_user_mapping_statement()
			}


		case 38:
			{
				p.SetState(1367)
				p.Create_user_or_role_statement()
			}


		case 39:
			{
				p.SetState(1368)
				p.Create_view_statement()
			}

		}


	case SQLParserCOMMENT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1371)
			p.Comment_on_statement()
		}


	case SQLParserREVOKE, SQLParserGRANT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1372)
			p.Rule_common()
		}


	case SQLParserIMPORT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1373)
			p.Schema_import()
		}


	case SQLParserSECURITY:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1374)
			p.Security_label()
		}


	case SQLParserSET:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1375)
			p.Set_statement()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISchema_alterContext is an interface to support dynamic dispatch.
type ISchema_alterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_alterContext differentiates from other interfaces.
	IsSchema_alterContext()
}

type Schema_alterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_alterContext() *Schema_alterContext {
	var p = new(Schema_alterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_schema_alter
	return p
}

func (*Schema_alterContext) IsSchema_alterContext() {}

func NewSchema_alterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_alterContext {
	var p = new(Schema_alterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_schema_alter

	return p
}

func (s *Schema_alterContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_alterContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SQLParserALTER, 0)
}

func (s *Schema_alterContext) Alter_aggregate_statement() IAlter_aggregate_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_aggregate_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_aggregate_statementContext)
}

func (s *Schema_alterContext) Alter_collation_statement() IAlter_collation_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_collation_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_collation_statementContext)
}

func (s *Schema_alterContext) Alter_conversion_statement() IAlter_conversion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_conversion_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_conversion_statementContext)
}

func (s *Schema_alterContext) Alter_default_privileges_statement() IAlter_default_privileges_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_default_privileges_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_default_privileges_statementContext)
}

func (s *Schema_alterContext) Alter_database_statement() IAlter_database_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_database_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_database_statementContext)
}

func (s *Schema_alterContext) Alter_domain_statement() IAlter_domain_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_domain_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_domain_statementContext)
}

func (s *Schema_alterContext) Alter_event_trigger_statement() IAlter_event_trigger_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_event_trigger_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_event_trigger_statementContext)
}

func (s *Schema_alterContext) Alter_extension_statement() IAlter_extension_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_extension_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_extension_statementContext)
}

func (s *Schema_alterContext) Alter_foreign_data_wrapper() IAlter_foreign_data_wrapperContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_foreign_data_wrapperContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_foreign_data_wrapperContext)
}

func (s *Schema_alterContext) Alter_fts_statement() IAlter_fts_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_fts_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_fts_statementContext)
}

func (s *Schema_alterContext) Alter_function_statement() IAlter_function_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_function_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_function_statementContext)
}

func (s *Schema_alterContext) Alter_group_statement() IAlter_group_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_group_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_group_statementContext)
}

func (s *Schema_alterContext) Alter_index_statement() IAlter_index_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_index_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_index_statementContext)
}

func (s *Schema_alterContext) Alter_language_statement() IAlter_language_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_language_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_language_statementContext)
}

func (s *Schema_alterContext) Alter_materialized_view_statement() IAlter_materialized_view_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_materialized_view_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_materialized_view_statementContext)
}

func (s *Schema_alterContext) Alter_operator_class_statement() IAlter_operator_class_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_operator_class_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_operator_class_statementContext)
}

func (s *Schema_alterContext) Alter_operator_family_statement() IAlter_operator_family_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_operator_family_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_operator_family_statementContext)
}

func (s *Schema_alterContext) Alter_operator_statement() IAlter_operator_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_operator_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_operator_statementContext)
}

func (s *Schema_alterContext) Alter_owner_statement() IAlter_owner_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_owner_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_owner_statementContext)
}

func (s *Schema_alterContext) Alter_policy_statement() IAlter_policy_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_policy_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_policy_statementContext)
}

func (s *Schema_alterContext) Alter_publication_statement() IAlter_publication_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_publication_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_publication_statementContext)
}

func (s *Schema_alterContext) Alter_rule_statement() IAlter_rule_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_rule_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_rule_statementContext)
}

func (s *Schema_alterContext) Alter_schema_statement() IAlter_schema_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_schema_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_schema_statementContext)
}

func (s *Schema_alterContext) Alter_sequence_statement() IAlter_sequence_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_sequence_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_sequence_statementContext)
}

func (s *Schema_alterContext) Alter_server_statement() IAlter_server_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_statementContext)
}

func (s *Schema_alterContext) Alter_statistics_statement() IAlter_statistics_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_statistics_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_statistics_statementContext)
}

func (s *Schema_alterContext) Alter_subscription_statement() IAlter_subscription_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_subscription_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_subscription_statementContext)
}

func (s *Schema_alterContext) Alter_table_statement() IAlter_table_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_table_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_table_statementContext)
}

func (s *Schema_alterContext) Alter_tablespace_statement() IAlter_tablespace_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_tablespace_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_tablespace_statementContext)
}

func (s *Schema_alterContext) Alter_trigger_statement() IAlter_trigger_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_trigger_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_trigger_statementContext)
}

func (s *Schema_alterContext) Alter_type_statement() IAlter_type_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_type_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_type_statementContext)
}

func (s *Schema_alterContext) Alter_user_mapping_statement() IAlter_user_mapping_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_user_mapping_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_user_mapping_statementContext)
}

func (s *Schema_alterContext) Alter_user_or_role_statement() IAlter_user_or_role_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_user_or_role_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_user_or_role_statementContext)
}

func (s *Schema_alterContext) Alter_view_statement() IAlter_view_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_view_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_view_statementContext)
}

func (s *Schema_alterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_alterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_alterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSchema_alter(s)
	}
}

func (s *Schema_alterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSchema_alter(s)
	}
}




func (p *SQLParser) Schema_alter() (localctx ISchema_alterContext) {
	localctx = NewSchema_alterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SQLParserRULE_schema_alter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1378)
		p.Match(SQLParserALTER)
	}
	p.SetState(1413)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1379)
			p.Alter_aggregate_statement()
		}


	case 2:
		{
			p.SetState(1380)
			p.Alter_collation_statement()
		}


	case 3:
		{
			p.SetState(1381)
			p.Alter_conversion_statement()
		}


	case 4:
		{
			p.SetState(1382)
			p.Alter_default_privileges_statement()
		}


	case 5:
		{
			p.SetState(1383)
			p.Alter_database_statement()
		}


	case 6:
		{
			p.SetState(1384)
			p.Alter_domain_statement()
		}


	case 7:
		{
			p.SetState(1385)
			p.Alter_event_trigger_statement()
		}


	case 8:
		{
			p.SetState(1386)
			p.Alter_extension_statement()
		}


	case 9:
		{
			p.SetState(1387)
			p.Alter_foreign_data_wrapper()
		}


	case 10:
		{
			p.SetState(1388)
			p.Alter_fts_statement()
		}


	case 11:
		{
			p.SetState(1389)
			p.Alter_function_statement()
		}


	case 12:
		{
			p.SetState(1390)
			p.Alter_group_statement()
		}


	case 13:
		{
			p.SetState(1391)
			p.Alter_index_statement()
		}


	case 14:
		{
			p.SetState(1392)
			p.Alter_language_statement()
		}


	case 15:
		{
			p.SetState(1393)
			p.Alter_materialized_view_statement()
		}


	case 16:
		{
			p.SetState(1394)
			p.Alter_operator_class_statement()
		}


	case 17:
		{
			p.SetState(1395)
			p.Alter_operator_family_statement()
		}


	case 18:
		{
			p.SetState(1396)
			p.Alter_operator_statement()
		}


	case 19:
		{
			p.SetState(1397)
			p.Alter_owner_statement()
		}


	case 20:
		{
			p.SetState(1398)
			p.Alter_policy_statement()
		}


	case 21:
		{
			p.SetState(1399)
			p.Alter_publication_statement()
		}


	case 22:
		{
			p.SetState(1400)
			p.Alter_rule_statement()
		}


	case 23:
		{
			p.SetState(1401)
			p.Alter_schema_statement()
		}


	case 24:
		{
			p.SetState(1402)
			p.Alter_sequence_statement()
		}


	case 25:
		{
			p.SetState(1403)
			p.Alter_server_statement()
		}


	case 26:
		{
			p.SetState(1404)
			p.Alter_statistics_statement()
		}


	case 27:
		{
			p.SetState(1405)
			p.Alter_subscription_statement()
		}


	case 28:
		{
			p.SetState(1406)
			p.Alter_table_statement()
		}


	case 29:
		{
			p.SetState(1407)
			p.Alter_tablespace_statement()
		}


	case 30:
		{
			p.SetState(1408)
			p.Alter_trigger_statement()
		}


	case 31:
		{
			p.SetState(1409)
			p.Alter_type_statement()
		}


	case 32:
		{
			p.SetState(1410)
			p.Alter_user_mapping_statement()
		}


	case 33:
		{
			p.SetState(1411)
			p.Alter_user_or_role_statement()
		}


	case 34:
		{
			p.SetState(1412)
			p.Alter_view_statement()
		}

	}



	return localctx
}


// ISchema_dropContext is an interface to support dynamic dispatch.
type ISchema_dropContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_dropContext differentiates from other interfaces.
	IsSchema_dropContext()
}

type Schema_dropContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_dropContext() *Schema_dropContext {
	var p = new(Schema_dropContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_schema_drop
	return p
}

func (*Schema_dropContext) IsSchema_dropContext() {}

func NewSchema_dropContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_dropContext {
	var p = new(Schema_dropContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_schema_drop

	return p
}

func (s *Schema_dropContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_dropContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Schema_dropContext) Drop_cast_statement() IDrop_cast_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_cast_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_cast_statementContext)
}

func (s *Schema_dropContext) Drop_database_statement() IDrop_database_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_database_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_database_statementContext)
}

func (s *Schema_dropContext) Drop_function_statement() IDrop_function_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_function_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_function_statementContext)
}

func (s *Schema_dropContext) Drop_operator_class_statement() IDrop_operator_class_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_operator_class_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_operator_class_statementContext)
}

func (s *Schema_dropContext) Drop_operator_family_statement() IDrop_operator_family_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_operator_family_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_operator_family_statementContext)
}

func (s *Schema_dropContext) Drop_operator_statement() IDrop_operator_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_operator_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_operator_statementContext)
}

func (s *Schema_dropContext) Drop_owned_statement() IDrop_owned_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_owned_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_owned_statementContext)
}

func (s *Schema_dropContext) Drop_policy_statement() IDrop_policy_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_policy_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_policy_statementContext)
}

func (s *Schema_dropContext) Drop_rule_statement() IDrop_rule_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_rule_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_rule_statementContext)
}

func (s *Schema_dropContext) Drop_statements() IDrop_statementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_statementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_statementsContext)
}

func (s *Schema_dropContext) Drop_trigger_statement() IDrop_trigger_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_trigger_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_trigger_statementContext)
}

func (s *Schema_dropContext) Drop_user_mapping_statement() IDrop_user_mapping_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_user_mapping_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_user_mapping_statementContext)
}

func (s *Schema_dropContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_dropContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_dropContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSchema_drop(s)
	}
}

func (s *Schema_dropContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSchema_drop(s)
	}
}




func (p *SQLParser) Schema_drop() (localctx ISchema_dropContext) {
	localctx = NewSchema_dropContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SQLParserRULE_schema_drop)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1415)
		p.Match(SQLParserDROP)
	}
	p.SetState(1428)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1416)
			p.Drop_cast_statement()
		}


	case 2:
		{
			p.SetState(1417)
			p.Drop_database_statement()
		}


	case 3:
		{
			p.SetState(1418)
			p.Drop_function_statement()
		}


	case 4:
		{
			p.SetState(1419)
			p.Drop_operator_class_statement()
		}


	case 5:
		{
			p.SetState(1420)
			p.Drop_operator_family_statement()
		}


	case 6:
		{
			p.SetState(1421)
			p.Drop_operator_statement()
		}


	case 7:
		{
			p.SetState(1422)
			p.Drop_owned_statement()
		}


	case 8:
		{
			p.SetState(1423)
			p.Drop_policy_statement()
		}


	case 9:
		{
			p.SetState(1424)
			p.Drop_rule_statement()
		}


	case 10:
		{
			p.SetState(1425)
			p.Drop_statements()
		}


	case 11:
		{
			p.SetState(1426)
			p.Drop_trigger_statement()
		}


	case 12:
		{
			p.SetState(1427)
			p.Drop_user_mapping_statement()
		}

	}



	return localctx
}


// ISchema_importContext is an interface to support dynamic dispatch.
type ISchema_importContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsSchema_importContext differentiates from other interfaces.
	IsSchema_importContext()
}

type Schema_importContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptySchema_importContext() *Schema_importContext {
	var p = new(Schema_importContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_schema_import
	return p
}

func (*Schema_importContext) IsSchema_importContext() {}

func NewSchema_importContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_importContext {
	var p = new(Schema_importContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_schema_import

	return p
}

func (s *Schema_importContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_importContext) GetName() IIdentifierContext { return s.name }


func (s *Schema_importContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Schema_importContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(SQLParserIMPORT, 0)
}

func (s *Schema_importContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Schema_importContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Schema_importContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Schema_importContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Schema_importContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Schema_importContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Schema_importContext) INTO() antlr.TerminalNode {
	return s.GetToken(SQLParserINTO, 0)
}

func (s *Schema_importContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Schema_importContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Schema_importContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Schema_importContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Schema_importContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserLIMIT, 0)
}

func (s *Schema_importContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Schema_importContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCEPT, 0)
}

func (s *Schema_importContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_importContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_importContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSchema_import(s)
	}
}

func (s *Schema_importContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSchema_import(s)
	}
}




func (p *SQLParser) Schema_import() (localctx ISchema_importContext) {
	localctx = NewSchema_importContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SQLParserRULE_schema_import)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1430)
		p.Match(SQLParserIMPORT)
	}
	{
		p.SetState(1431)
		p.Match(SQLParserFOREIGN)
	}
	{
		p.SetState(1432)
		p.Match(SQLParserSCHEMA)
	}
	{
		p.SetState(1433)

		var _x = p.Identifier()


		localctx.(*Schema_importContext).name = _x
	}
	p.SetState(1443)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserEXCEPT || _la == SQLParserLIMIT {
		p.SetState(1437)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserLIMIT:
			{
				p.SetState(1434)
				p.Match(SQLParserLIMIT)
			}
			{
				p.SetState(1435)
				p.Match(SQLParserTO)
			}


		case SQLParserEXCEPT:
			{
				p.SetState(1436)
				p.Match(SQLParserEXCEPT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1439)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(1440)
			p.Identifier_list()
		}
		{
			p.SetState(1441)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}
	{
		p.SetState(1445)
		p.Match(SQLParserFROM)
	}
	{
		p.SetState(1446)
		p.Match(SQLParserSERVER)
	}
	{
		p.SetState(1447)
		p.Identifier()
	}
	{
		p.SetState(1448)
		p.Match(SQLParserINTO)
	}
	{
		p.SetState(1449)
		p.Identifier()
	}
	p.SetState(1451)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOPTIONS {
		{
			p.SetState(1450)
			p.Define_foreign_options()
		}

	}



	return localctx
}


// IAlter_function_statementContext is an interface to support dynamic dispatch.
type IAlter_function_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_function_statementContext differentiates from other interfaces.
	IsAlter_function_statementContext()
}

type Alter_function_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_function_statementContext() *Alter_function_statementContext {
	var p = new(Alter_function_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_function_statement
	return p
}

func (*Alter_function_statementContext) IsAlter_function_statementContext() {}

func NewAlter_function_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_function_statementContext {
	var p = new(Alter_function_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_function_statement

	return p
}

func (s *Alter_function_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_function_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Alter_function_statementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Alter_function_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_function_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_function_statementContext) DEPENDS() antlr.TerminalNode {
	return s.GetToken(SQLParserDEPENDS, 0)
}

func (s *Alter_function_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Alter_function_statementContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Alter_function_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_function_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_function_statementContext) Function_parameters() IFunction_parametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_parametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_parametersContext)
}

func (s *Alter_function_statementContext) AllFunction_actions_common() []IFunction_actions_commonContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_actions_commonContext)(nil)).Elem())
	var tst = make([]IFunction_actions_commonContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_actions_commonContext)
		}
	}

	return tst
}

func (s *Alter_function_statementContext) Function_actions_common(i int) IFunction_actions_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_actions_commonContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_actions_commonContext)
}

func (s *Alter_function_statementContext) AllRESET() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRESET)
}

func (s *Alter_function_statementContext) RESET(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, i)
}

func (s *Alter_function_statementContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICT, 0)
}

func (s *Alter_function_statementContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Alter_function_statementContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserALL)
}

func (s *Alter_function_statementContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserALL, i)
}

func (s *Alter_function_statementContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDOT)
}

func (s *Alter_function_statementContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, i)
}

func (s *Alter_function_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_function_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_function_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_function_statement(s)
	}
}

func (s *Alter_function_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_function_statement(s)
	}
}




func (p *SQLParser) Alter_function_statement() (localctx IAlter_function_statementContext) {
	localctx = NewAlter_function_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SQLParserRULE_alter_function_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1453)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserFUNCTION || _la == SQLParserPROCEDURE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1455)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1454)
			p.Function_parameters()
		}


	}
	p.SetState(1484)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1468)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserCALLED || _la == SQLParserCOST || _la == SQLParserEXTERNAL || _la == SQLParserIMMUTABLE || _la == SQLParserLANGUAGE || _la == SQLParserLEAKPROOF || _la == SQLParserPARALLEL || ((((_la - 210)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 210))) & ((1 << (SQLParserRESET - 210)) | (1 << (SQLParserRETURNS - 210)) | (1 << (SQLParserROWS - 210)) | (1 << (SQLParserSECURITY - 210)) | (1 << (SQLParserSET - 210)))) != 0) || ((((_la - 242)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 242))) & ((1 << (SQLParserSTABLE - 242)) | (1 << (SQLParserSTRICT - 242)) | (1 << (SQLParserSUPPORT - 242)) | (1 << (SQLParserTRANSFORM - 242)))) != 0) || _la == SQLParserVOLATILE || _la == SQLParserAS || _la == SQLParserNOT || _la == SQLParserWINDOW {
			p.SetState(1468)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserCALLED, SQLParserCOST, SQLParserEXTERNAL, SQLParserIMMUTABLE, SQLParserLANGUAGE, SQLParserLEAKPROOF, SQLParserPARALLEL, SQLParserRETURNS, SQLParserROWS, SQLParserSECURITY, SQLParserSET, SQLParserSTABLE, SQLParserSTRICT, SQLParserSUPPORT, SQLParserTRANSFORM, SQLParserVOLATILE, SQLParserAS, SQLParserNOT, SQLParserWINDOW:
				{
					p.SetState(1457)
					p.Function_actions_common()
				}


			case SQLParserRESET:
				{
					p.SetState(1458)
					p.Match(SQLParserRESET)
				}
				p.SetState(1466)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
					p.SetState(1462)
					p.GetErrorHandler().Sync(p)


					if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1459)
							p.Identifier()
						}
						{
							p.SetState(1460)
							p.Match(SQLParserDOT)
						}


					}
					{
						p.SetState(1464)
						p.Identifier()
					}


				case SQLParserALL:
					{
						p.SetState(1465)
						p.Match(SQLParserALL)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1470)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1473)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserRESTRICT {
			{
				p.SetState(1472)
				p.Match(SQLParserRESTRICT)
			}

		}


	case 2:
		{
			p.SetState(1475)
			p.Rename_to()
		}


	case 3:
		{
			p.SetState(1476)
			p.Set_schema()
		}


	case 4:
		p.SetState(1478)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(1477)
				p.Match(SQLParserNO)
			}

		}
		{
			p.SetState(1480)
			p.Match(SQLParserDEPENDS)
		}
		{
			p.SetState(1481)
			p.Match(SQLParserON)
		}
		{
			p.SetState(1482)
			p.Match(SQLParserEXTENSION)
		}
		{
			p.SetState(1483)
			p.Identifier()
		}

	}



	return localctx
}


// IAlter_aggregate_statementContext is an interface to support dynamic dispatch.
type IAlter_aggregate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_aggregate_statementContext differentiates from other interfaces.
	IsAlter_aggregate_statementContext()
}

type Alter_aggregate_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_aggregate_statementContext() *Alter_aggregate_statementContext {
	var p = new(Alter_aggregate_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_aggregate_statement
	return p
}

func (*Alter_aggregate_statementContext) IsAlter_aggregate_statementContext() {}

func NewAlter_aggregate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_aggregate_statementContext {
	var p = new(Alter_aggregate_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_aggregate_statement

	return p
}

func (s *Alter_aggregate_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_aggregate_statementContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(SQLParserAGGREGATE, 0)
}

func (s *Alter_aggregate_statementContext) Function_parameters() IFunction_parametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_parametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_parametersContext)
}

func (s *Alter_aggregate_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_aggregate_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_aggregate_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_aggregate_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_aggregate_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_aggregate_statement(s)
	}
}

func (s *Alter_aggregate_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_aggregate_statement(s)
	}
}




func (p *SQLParser) Alter_aggregate_statement() (localctx IAlter_aggregate_statementContext) {
	localctx = NewAlter_aggregate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SQLParserRULE_alter_aggregate_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1486)
		p.Match(SQLParserAGGREGATE)
	}
	{
		p.SetState(1487)
		p.Function_parameters()
	}
	p.SetState(1490)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserRENAME:
		{
			p.SetState(1488)
			p.Rename_to()
		}


	case SQLParserSET:
		{
			p.SetState(1489)
			p.Set_schema()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IAlter_extension_statementContext is an interface to support dynamic dispatch.
type IAlter_extension_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_extension_statementContext differentiates from other interfaces.
	IsAlter_extension_statementContext()
}

type Alter_extension_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_extension_statementContext() *Alter_extension_statementContext {
	var p = new(Alter_extension_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_extension_statement
	return p
}

func (*Alter_extension_statementContext) IsAlter_extension_statementContext() {}

func NewAlter_extension_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_extension_statementContext {
	var p = new(Alter_extension_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_extension_statement

	return p
}

func (s *Alter_extension_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_extension_statementContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Alter_extension_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_extension_statementContext) Alter_extension_action() IAlter_extension_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_extension_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_extension_actionContext)
}

func (s *Alter_extension_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_extension_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_extension_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_extension_statement(s)
	}
}

func (s *Alter_extension_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_extension_statement(s)
	}
}




func (p *SQLParser) Alter_extension_statement() (localctx IAlter_extension_statementContext) {
	localctx = NewAlter_extension_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SQLParserRULE_alter_extension_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1492)
		p.Match(SQLParserEXTENSION)
	}
	{
		p.SetState(1493)
		p.Identifier()
	}
	{
		p.SetState(1494)
		p.Alter_extension_action()
	}



	return localctx
}


// IAlter_extension_actionContext is an interface to support dynamic dispatch.
type IAlter_extension_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_extension_actionContext differentiates from other interfaces.
	IsAlter_extension_actionContext()
}

type Alter_extension_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_extension_actionContext() *Alter_extension_actionContext {
	var p = new(Alter_extension_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_extension_action
	return p
}

func (*Alter_extension_actionContext) IsAlter_extension_actionContext() {}

func NewAlter_extension_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_extension_actionContext {
	var p = new(Alter_extension_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_extension_action

	return p
}

func (s *Alter_extension_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_extension_actionContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_extension_actionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Alter_extension_actionContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Alter_extension_actionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_extension_actionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Alter_extension_actionContext) Extension_member_object() IExtension_member_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtension_member_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtension_member_objectContext)
}

func (s *Alter_extension_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Alter_extension_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Alter_extension_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_extension_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_extension_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_extension_action(s)
	}
}

func (s *Alter_extension_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_extension_action(s)
	}
}




func (p *SQLParser) Alter_extension_action() (localctx IAlter_extension_actionContext) {
	localctx = NewAlter_extension_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SQLParserRULE_alter_extension_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1507)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserSET:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1496)
			p.Set_schema()
		}


	case SQLParserUPDATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1497)
			p.Match(SQLParserUPDATE)
		}
		p.SetState(1503)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserTO {
			{
				p.SetState(1498)
				p.Match(SQLParserTO)
			}
			p.SetState(1501)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
				{
					p.SetState(1499)
					p.Identifier()
				}


			case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
				{
					p.SetState(1500)
					p.Character_string()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}


	case SQLParserADD, SQLParserDROP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1505)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserADD || _la == SQLParserDROP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1506)
			p.Extension_member_object()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IExtension_member_objectContext is an interface to support dynamic dispatch.
type IExtension_member_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtension_member_objectContext differentiates from other interfaces.
	IsExtension_member_objectContext()
}

type Extension_member_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtension_member_objectContext() *Extension_member_objectContext {
	var p = new(Extension_member_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_extension_member_object
	return p
}

func (*Extension_member_objectContext) IsExtension_member_objectContext() {}

func NewExtension_member_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extension_member_objectContext {
	var p = new(Extension_member_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_extension_member_object

	return p
}

func (s *Extension_member_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Extension_member_objectContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SQLParserACCESS, 0)
}

func (s *Extension_member_objectContext) METHOD() antlr.TerminalNode {
	return s.GetToken(SQLParserMETHOD, 0)
}

func (s *Extension_member_objectContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Extension_member_objectContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Extension_member_objectContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(SQLParserAGGREGATE, 0)
}

func (s *Extension_member_objectContext) Function_parameters() IFunction_parametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_parametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_parametersContext)
}

func (s *Extension_member_objectContext) CAST() antlr.TerminalNode {
	return s.GetToken(SQLParserCAST, 0)
}

func (s *Extension_member_objectContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Extension_member_objectContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Extension_member_objectContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Extension_member_objectContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATION, 0)
}

func (s *Extension_member_objectContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Extension_member_objectContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Extension_member_objectContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONVERSION, 0)
}

func (s *Extension_member_objectContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Extension_member_objectContext) EVENT() antlr.TerminalNode {
	return s.GetToken(SQLParserEVENT, 0)
}

func (s *Extension_member_objectContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Extension_member_objectContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Extension_member_objectContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Extension_member_objectContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(SQLParserWRAPPER, 0)
}

func (s *Extension_member_objectContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Extension_member_objectContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Extension_member_objectContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Extension_member_objectContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Extension_member_objectContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Extension_member_objectContext) Operator_name() IOperator_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_nameContext)
}

func (s *Extension_member_objectContext) CLASS() antlr.TerminalNode {
	return s.GetToken(SQLParserCLASS, 0)
}

func (s *Extension_member_objectContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Extension_member_objectContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(SQLParserFAMILY, 0)
}

func (s *Extension_member_objectContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Extension_member_objectContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURAL, 0)
}

func (s *Extension_member_objectContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Extension_member_objectContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(SQLParserROUTINE, 0)
}

func (s *Extension_member_objectContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Extension_member_objectContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Extension_member_objectContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Extension_member_objectContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Extension_member_objectContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Extension_member_objectContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFIGURATION, 0)
}

func (s *Extension_member_objectContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(SQLParserDICTIONARY, 0)
}

func (s *Extension_member_objectContext) PARSER() antlr.TerminalNode {
	return s.GetToken(SQLParserPARSER, 0)
}

func (s *Extension_member_objectContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPLATE, 0)
}

func (s *Extension_member_objectContext) TRANSFORM() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSFORM, 0)
}

func (s *Extension_member_objectContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Extension_member_objectContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Extension_member_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extension_member_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Extension_member_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterExtension_member_object(s)
	}
}

func (s *Extension_member_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitExtension_member_object(s)
	}
}




func (p *SQLParser) Extension_member_object() (localctx IExtension_member_objectContext) {
	localctx = NewExtension_member_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SQLParserRULE_extension_member_object)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1599)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1509)
			p.Match(SQLParserACCESS)
		}
		{
			p.SetState(1510)
			p.Match(SQLParserMETHOD)
		}
		{
			p.SetState(1511)
			p.Schema_qualified_name()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1512)
			p.Match(SQLParserAGGREGATE)
		}
		{
			p.SetState(1513)
			p.Function_parameters()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1514)
			p.Match(SQLParserCAST)
		}
		{
			p.SetState(1515)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(1516)
			p.Schema_qualified_name()
		}
		{
			p.SetState(1517)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(1518)
			p.Schema_qualified_name()
		}
		{
			p.SetState(1519)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1521)
			p.Match(SQLParserCOLLATION)
		}
		{
			p.SetState(1522)
			p.Identifier()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1523)
			p.Match(SQLParserCONVERSION)
		}
		{
			p.SetState(1524)
			p.Identifier()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1525)
			p.Match(SQLParserDOMAIN)
		}
		{
			p.SetState(1526)
			p.Schema_qualified_name()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1527)
			p.Match(SQLParserEVENT)
		}
		{
			p.SetState(1528)
			p.Match(SQLParserTRIGGER)
		}
		{
			p.SetState(1529)
			p.Identifier()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1530)
			p.Match(SQLParserFOREIGN)
		}
		{
			p.SetState(1531)
			p.Match(SQLParserDATA)
		}
		{
			p.SetState(1532)
			p.Match(SQLParserWRAPPER)
		}
		{
			p.SetState(1533)
			p.Identifier()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1534)
			p.Match(SQLParserFOREIGN)
		}
		{
			p.SetState(1535)
			p.Match(SQLParserTABLE)
		}
		{
			p.SetState(1536)
			p.Schema_qualified_name()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1537)
			p.Match(SQLParserFUNCTION)
		}
		{
			p.SetState(1538)
			p.Function_parameters()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		p.SetState(1540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserMATERIALIZED {
			{
				p.SetState(1539)
				p.Match(SQLParserMATERIALIZED)
			}

		}
		{
			p.SetState(1542)
			p.Match(SQLParserVIEW)
		}
		{
			p.SetState(1543)
			p.Schema_qualified_name()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1544)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(1545)
			p.Operator_name()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1546)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(1547)
			p.Match(SQLParserCLASS)
		}
		{
			p.SetState(1548)
			p.Schema_qualified_name()
		}
		{
			p.SetState(1549)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(1550)
			p.Identifier()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1552)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(1553)
			p.Match(SQLParserFAMILY)
		}
		{
			p.SetState(1554)
			p.Schema_qualified_name()
		}
		{
			p.SetState(1555)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(1556)
			p.Identifier()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		p.SetState(1559)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPROCEDURAL {
			{
				p.SetState(1558)
				p.Match(SQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(1561)
			p.Match(SQLParserLANGUAGE)
		}
		{
			p.SetState(1562)
			p.Identifier()
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1563)
			p.Match(SQLParserPROCEDURE)
		}
		{
			p.SetState(1564)
			p.Function_parameters()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1565)
			p.Match(SQLParserROUTINE)
		}
		{
			p.SetState(1566)
			p.Function_parameters()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1567)
			p.Match(SQLParserSCHEMA)
		}
		{
			p.SetState(1568)
			p.Identifier()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1569)
			p.Match(SQLParserSEQUENCE)
		}
		{
			p.SetState(1570)
			p.Schema_qualified_name()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1571)
			p.Match(SQLParserSERVER)
		}
		{
			p.SetState(1572)
			p.Identifier()
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1573)
			p.Match(SQLParserTABLE)
		}
		{
			p.SetState(1574)
			p.Schema_qualified_name()
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1575)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(1576)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(1577)
			p.Match(SQLParserCONFIGURATION)
		}
		{
			p.SetState(1578)
			p.Schema_qualified_name()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1579)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(1580)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(1581)
			p.Match(SQLParserDICTIONARY)
		}
		{
			p.SetState(1582)
			p.Schema_qualified_name()
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1583)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(1584)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(1585)
			p.Match(SQLParserPARSER)
		}
		{
			p.SetState(1586)
			p.Schema_qualified_name()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1587)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(1588)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(1589)
			p.Match(SQLParserTEMPLATE)
		}
		{
			p.SetState(1590)
			p.Schema_qualified_name()
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1591)
			p.Match(SQLParserTRANSFORM)
		}
		{
			p.SetState(1592)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(1593)
			p.Identifier()
		}
		{
			p.SetState(1594)
			p.Match(SQLParserLANGUAGE)
		}
		{
			p.SetState(1595)
			p.Identifier()
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(1597)
			p.Match(SQLParserTYPE)
		}
		{
			p.SetState(1598)
			p.Schema_qualified_name()
		}

	}


	return localctx
}


// IAlter_schema_statementContext is an interface to support dynamic dispatch.
type IAlter_schema_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_schema_statementContext differentiates from other interfaces.
	IsAlter_schema_statementContext()
}

type Alter_schema_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_schema_statementContext() *Alter_schema_statementContext {
	var p = new(Alter_schema_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_schema_statement
	return p
}

func (*Alter_schema_statementContext) IsAlter_schema_statementContext() {}

func NewAlter_schema_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_schema_statementContext {
	var p = new(Alter_schema_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_schema_statement

	return p
}

func (s *Alter_schema_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_schema_statementContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Alter_schema_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_schema_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_schema_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_schema_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_schema_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_schema_statement(s)
	}
}

func (s *Alter_schema_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_schema_statement(s)
	}
}




func (p *SQLParser) Alter_schema_statement() (localctx IAlter_schema_statementContext) {
	localctx = NewAlter_schema_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SQLParserRULE_alter_schema_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1601)
		p.Match(SQLParserSCHEMA)
	}
	{
		p.SetState(1602)
		p.Identifier()
	}
	{
		p.SetState(1603)
		p.Rename_to()
	}



	return localctx
}


// IAlter_language_statementContext is an interface to support dynamic dispatch.
type IAlter_language_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsAlter_language_statementContext differentiates from other interfaces.
	IsAlter_language_statementContext()
}

type Alter_language_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyAlter_language_statementContext() *Alter_language_statementContext {
	var p = new(Alter_language_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_language_statement
	return p
}

func (*Alter_language_statementContext) IsAlter_language_statementContext() {}

func NewAlter_language_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_language_statementContext {
	var p = new(Alter_language_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_language_statement

	return p
}

func (s *Alter_language_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_language_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Alter_language_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Alter_language_statementContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Alter_language_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_language_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_language_statementContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_language_statementContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURAL, 0)
}

func (s *Alter_language_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_language_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_language_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_language_statement(s)
	}
}

func (s *Alter_language_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_language_statement(s)
	}
}




func (p *SQLParser) Alter_language_statement() (localctx IAlter_language_statementContext) {
	localctx = NewAlter_language_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SQLParserRULE_alter_language_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1606)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserPROCEDURAL {
		{
			p.SetState(1605)
			p.Match(SQLParserPROCEDURAL)
		}

	}
	{
		p.SetState(1608)
		p.Match(SQLParserLANGUAGE)
	}
	{
		p.SetState(1609)

		var _x = p.Identifier()


		localctx.(*Alter_language_statementContext).name = _x
	}
	p.SetState(1612)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserRENAME:
		{
			p.SetState(1610)
			p.Rename_to()
		}


	case SQLParserOWNER:
		{
			p.SetState(1611)
			p.Owner_to()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IAlter_table_statementContext is an interface to support dynamic dispatch.
type IAlter_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetChild returns the child rule contexts.
	GetChild() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetChild sets the child rule contexts.
	SetChild(ISchema_qualified_nameContext)


	// IsAlter_table_statementContext differentiates from other interfaces.
	IsAlter_table_statementContext()
}

type Alter_table_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	child ISchema_qualified_nameContext 
}

func NewEmptyAlter_table_statementContext() *Alter_table_statementContext {
	var p = new(Alter_table_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_table_statement
	return p
}

func (*Alter_table_statementContext) IsAlter_table_statementContext() {}

func NewAlter_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_statementContext {
	var p = new(Alter_table_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_table_statement

	return p
}

func (s *Alter_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Alter_table_statementContext) GetChild() ISchema_qualified_nameContext { return s.child }


func (s *Alter_table_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Alter_table_statementContext) SetChild(v ISchema_qualified_nameContext) { s.child = v }


func (s *Alter_table_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Alter_table_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Alter_table_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_table_statementContext) AllTable_action() []ITable_actionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_actionContext)(nil)).Elem())
	var tst = make([]ITable_actionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_actionContext)
		}
	}

	return tst
}

func (s *Alter_table_statementContext) Table_action(i int) ITable_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_actionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_actionContext)
}

func (s *Alter_table_statementContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SQLParserRENAME, 0)
}

func (s *Alter_table_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_table_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_table_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Alter_table_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_table_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_table_statementContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Alter_table_statementContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(SQLParserATTACH, 0)
}

func (s *Alter_table_statementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SQLParserPARTITION, 0)
}

func (s *Alter_table_statementContext) For_values_bound() IFor_values_boundContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_values_boundContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_values_boundContext)
}

func (s *Alter_table_statementContext) DETACH() antlr.TerminalNode {
	return s.GetToken(SQLParserDETACH, 0)
}

func (s *Alter_table_statementContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Alter_table_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_table_statementContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *Alter_table_statementContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Alter_table_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alter_table_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alter_table_statementContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Alter_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_table_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_table_statement(s)
	}
}

func (s *Alter_table_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_table_statement(s)
	}
}




func (p *SQLParser) Alter_table_statement() (localctx IAlter_table_statementContext) {
	localctx = NewAlter_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SQLParserRULE_alter_table_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1615)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFOREIGN {
		{
			p.SetState(1614)
			p.Match(SQLParserFOREIGN)
		}

	}
	{
		p.SetState(1617)
		p.Match(SQLParserTABLE)
	}
	p.SetState(1619)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1618)
			p.If_exists()
		}


	}
	p.SetState(1622)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserONLY {
		{
			p.SetState(1621)
			p.Match(SQLParserONLY)
		}

	}
	{
		p.SetState(1624)

		var _x = p.Schema_qualified_name()


		localctx.(*Alter_table_statementContext).name = _x
	}
	p.SetState(1626)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserMULTIPLY {
		{
			p.SetState(1625)
			p.Match(SQLParserMULTIPLY)
		}

	}
	p.SetState(1660)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1628)
			p.Table_action()
		}
		p.SetState(1633)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(1629)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(1630)
				p.Table_action()
			}


			p.SetState(1635)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 2:
		{
			p.SetState(1636)
			p.Match(SQLParserRENAME)
		}
		p.SetState(1638)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(1637)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(1640)
			p.Identifier()
		}
		{
			p.SetState(1641)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(1642)
			p.Identifier()
		}


	case 3:
		{
			p.SetState(1644)
			p.Set_schema()
		}


	case 4:
		{
			p.SetState(1645)
			p.Rename_to()
		}


	case 5:
		{
			p.SetState(1646)
			p.Match(SQLParserRENAME)
		}
		{
			p.SetState(1647)
			p.Match(SQLParserCONSTRAINT)
		}
		{
			p.SetState(1648)
			p.Identifier()
		}
		{
			p.SetState(1649)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(1650)
			p.Identifier()
		}


	case 6:
		{
			p.SetState(1652)
			p.Match(SQLParserATTACH)
		}
		{
			p.SetState(1653)
			p.Match(SQLParserPARTITION)
		}
		{
			p.SetState(1654)

			var _x = p.Schema_qualified_name()


			localctx.(*Alter_table_statementContext).child = _x
		}
		{
			p.SetState(1655)
			p.For_values_bound()
		}


	case 7:
		{
			p.SetState(1657)
			p.Match(SQLParserDETACH)
		}
		{
			p.SetState(1658)
			p.Match(SQLParserPARTITION)
		}
		{
			p.SetState(1659)

			var _x = p.Schema_qualified_name()


			localctx.(*Alter_table_statementContext).child = _x
		}

	}



	return localctx
}


// ITable_actionContext is an interface to support dynamic dispatch.
type ITable_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNot_valid returns the not_valid token.
	GetNot_valid() antlr.Token 


	// SetNot_valid sets the not_valid token.
	SetNot_valid(antlr.Token) 


	// GetColumn returns the column rule contexts.
	GetColumn() IIdentifierContext

	// GetTabl_constraint returns the tabl_constraint rule contexts.
	GetTabl_constraint() IConstraint_commonContext

	// GetTrigger_name returns the trigger_name rule contexts.
	GetTrigger_name() ISchema_qualified_nameContext

	// GetRewrite_rule_name returns the rewrite_rule_name rule contexts.
	GetRewrite_rule_name() ISchema_qualified_nameContext

	// GetIndex_name returns the index_name rule contexts.
	GetIndex_name() ISchema_qualified_nameContext

	// GetParent_table returns the parent_table rule contexts.
	GetParent_table() ISchema_qualified_nameContext

	// GetType_name returns the type_name rule contexts.
	GetType_name() ISchema_qualified_nameContext


	// SetColumn sets the column rule contexts.
	SetColumn(IIdentifierContext)

	// SetTabl_constraint sets the tabl_constraint rule contexts.
	SetTabl_constraint(IConstraint_commonContext)

	// SetTrigger_name sets the trigger_name rule contexts.
	SetTrigger_name(ISchema_qualified_nameContext)

	// SetRewrite_rule_name sets the rewrite_rule_name rule contexts.
	SetRewrite_rule_name(ISchema_qualified_nameContext)

	// SetIndex_name sets the index_name rule contexts.
	SetIndex_name(ISchema_qualified_nameContext)

	// SetParent_table sets the parent_table rule contexts.
	SetParent_table(ISchema_qualified_nameContext)

	// SetType_name sets the type_name rule contexts.
	SetType_name(ISchema_qualified_nameContext)


	// IsTable_actionContext differentiates from other interfaces.
	IsTable_actionContext()
}

type Table_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	column IIdentifierContext 
	tabl_constraint IConstraint_commonContext 
	not_valid antlr.Token
	trigger_name ISchema_qualified_nameContext 
	rewrite_rule_name ISchema_qualified_nameContext 
	index_name ISchema_qualified_nameContext 
	parent_table ISchema_qualified_nameContext 
	type_name ISchema_qualified_nameContext 
}

func NewEmptyTable_actionContext() *Table_actionContext {
	var p = new(Table_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_action
	return p
}

func (*Table_actionContext) IsTable_actionContext() {}

func NewTable_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_actionContext {
	var p = new(Table_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_action

	return p
}

func (s *Table_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_actionContext) GetNot_valid() antlr.Token { return s.not_valid }


func (s *Table_actionContext) SetNot_valid(v antlr.Token) { s.not_valid = v }


func (s *Table_actionContext) GetColumn() IIdentifierContext { return s.column }

func (s *Table_actionContext) GetTabl_constraint() IConstraint_commonContext { return s.tabl_constraint }

func (s *Table_actionContext) GetTrigger_name() ISchema_qualified_nameContext { return s.trigger_name }

func (s *Table_actionContext) GetRewrite_rule_name() ISchema_qualified_nameContext { return s.rewrite_rule_name }

func (s *Table_actionContext) GetIndex_name() ISchema_qualified_nameContext { return s.index_name }

func (s *Table_actionContext) GetParent_table() ISchema_qualified_nameContext { return s.parent_table }

func (s *Table_actionContext) GetType_name() ISchema_qualified_nameContext { return s.type_name }


func (s *Table_actionContext) SetColumn(v IIdentifierContext) { s.column = v }

func (s *Table_actionContext) SetTabl_constraint(v IConstraint_commonContext) { s.tabl_constraint = v }

func (s *Table_actionContext) SetTrigger_name(v ISchema_qualified_nameContext) { s.trigger_name = v }

func (s *Table_actionContext) SetRewrite_rule_name(v ISchema_qualified_nameContext) { s.rewrite_rule_name = v }

func (s *Table_actionContext) SetIndex_name(v ISchema_qualified_nameContext) { s.index_name = v }

func (s *Table_actionContext) SetParent_table(v ISchema_qualified_nameContext) { s.parent_table = v }

func (s *Table_actionContext) SetType_name(v ISchema_qualified_nameContext) { s.type_name = v }


func (s *Table_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Table_actionContext) Table_column_definition() ITable_column_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_column_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_column_definitionContext)
}

func (s *Table_actionContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Table_actionContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Table_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Table_actionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_actionContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Table_actionContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Table_actionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SQLParserALTER, 0)
}

func (s *Table_actionContext) Column_action() IColumn_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_actionContext)
}

func (s *Table_actionContext) Constraint_common() IConstraint_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraint_commonContext)
}

func (s *Table_actionContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Table_actionContext) VALID() antlr.TerminalNode {
	return s.GetToken(SQLParserVALID, 0)
}

func (s *Table_actionContext) Validate_constraint() IValidate_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidate_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValidate_constraintContext)
}

func (s *Table_actionContext) Drop_constraint() IDrop_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_constraintContext)
}

func (s *Table_actionContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Table_actionContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDISABLE, 0)
}

func (s *Table_actionContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserENABLE, 0)
}

func (s *Table_actionContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Table_actionContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Table_actionContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Table_actionContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLICA, 0)
}

func (s *Table_actionContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(SQLParserALWAYS, 0)
}

func (s *Table_actionContext) RULE() antlr.TerminalNode {
	return s.GetToken(SQLParserRULE, 0)
}

func (s *Table_actionContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *Table_actionContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(SQLParserLEVEL, 0)
}

func (s *Table_actionContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SQLParserSECURITY, 0)
}

func (s *Table_actionContext) FORCE() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE, 0)
}

func (s *Table_actionContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Table_actionContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(SQLParserCLUSTER, 0)
}

func (s *Table_actionContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Table_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Table_actionContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHOUT, 0)
}

func (s *Table_actionContext) OIDS() antlr.TerminalNode {
	return s.GetToken(SQLParserOIDS, 0)
}

func (s *Table_actionContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Table_actionContext) LOGGED() antlr.TerminalNode {
	return s.GetToken(SQLParserLOGGED, 0)
}

func (s *Table_actionContext) UNLOGGED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNLOGGED, 0)
}

func (s *Table_actionContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Table_actionContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Table_actionContext) Names_in_parens() INames_in_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_in_parensContext)
}

func (s *Table_actionContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Table_actionContext) INHERIT() antlr.TerminalNode {
	return s.GetToken(SQLParserINHERIT, 0)
}

func (s *Table_actionContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *Table_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Table_actionContext) Set_tablespace() ISet_tablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_tablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_tablespaceContext)
}

func (s *Table_actionContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(SQLParserIDENTITY, 0)
}

func (s *Table_actionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Table_actionContext) FULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFULL, 0)
}

func (s *Table_actionContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTHING, 0)
}

func (s *Table_actionContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Table_actionContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Table_actionContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Table_actionContext) Table_deferrable() ITable_deferrableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_deferrableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_deferrableContext)
}

func (s *Table_actionContext) Table_initialy_immed() ITable_initialy_immedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_initialy_immedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_initialy_immedContext)
}

func (s *Table_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_action(s)
	}
}

func (s *Table_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_action(s)
	}
}




func (p *SQLParser) Table_action() (localctx ITable_actionContext) {
	localctx = NewTable_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SQLParserRULE_table_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1771)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1662)
			p.Match(SQLParserADD)
		}
		p.SetState(1664)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(1663)
				p.Match(SQLParserCOLUMN)
			}

		}
		p.SetState(1667)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1666)
				p.If_not_exists()
			}


		}
		{
			p.SetState(1669)
			p.Table_column_definition()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1670)
			p.Match(SQLParserDROP)
		}
		p.SetState(1672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(1671)
				p.Match(SQLParserCOLUMN)
			}

		}
		p.SetState(1675)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1674)
				p.If_exists()
			}


		}
		{
			p.SetState(1677)

			var _x = p.Identifier()


			localctx.(*Table_actionContext).column = _x
		}
		p.SetState(1679)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
			{
				p.SetState(1678)
				p.Cascade_restrict()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1681)
			p.Match(SQLParserALTER)
		}
		p.SetState(1683)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(1682)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(1685)

			var _x = p.Identifier()


			localctx.(*Table_actionContext).column = _x
		}
		{
			p.SetState(1686)
			p.Column_action()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1688)
			p.Match(SQLParserADD)
		}
		{
			p.SetState(1689)

			var _x = p.Constraint_common()


			localctx.(*Table_actionContext).tabl_constraint = _x
		}
		p.SetState(1692)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT {
			{
				p.SetState(1690)
				p.Match(SQLParserNOT)
			}
			{
				p.SetState(1691)

				var _m = p.Match(SQLParserVALID)

				localctx.(*Table_actionContext).not_valid = _m
			}

		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1694)
			p.Validate_constraint()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1695)
			p.Drop_constraint()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1696)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDISABLE || _la == SQLParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1697)
			p.Match(SQLParserTRIGGER)
		}
		p.SetState(1701)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(1698)

				var _x = p.Schema_qualified_name()


				localctx.(*Table_actionContext).trigger_name = _x
			}


		case SQLParserALL:
			{
				p.SetState(1699)
				p.Match(SQLParserALL)
			}


		case SQLParserUSER:
			{
				p.SetState(1700)
				p.Match(SQLParserUSER)
			}


		case SQLParserEOF, SQLParserSEMI_COLON, SQLParserCOMMA:



		default:
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1703)
			p.Match(SQLParserENABLE)
		}
		{
			p.SetState(1704)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserALWAYS || _la == SQLParserREPLICA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1705)
			p.Match(SQLParserTRIGGER)
		}
		{
			p.SetState(1706)

			var _x = p.Schema_qualified_name()


			localctx.(*Table_actionContext).trigger_name = _x
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1707)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDISABLE || _la == SQLParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1708)
			p.Match(SQLParserRULE)
		}
		{
			p.SetState(1709)

			var _x = p.Schema_qualified_name()


			localctx.(*Table_actionContext).rewrite_rule_name = _x
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1710)
			p.Match(SQLParserENABLE)
		}
		{
			p.SetState(1711)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserALWAYS || _la == SQLParserREPLICA) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1712)
			p.Match(SQLParserRULE)
		}
		{
			p.SetState(1713)

			var _x = p.Schema_qualified_name()


			localctx.(*Table_actionContext).rewrite_rule_name = _x
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1714)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDISABLE || _la == SQLParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1715)
			p.Match(SQLParserROW)
		}
		{
			p.SetState(1716)
			p.Match(SQLParserLEVEL)
		}
		{
			p.SetState(1717)
			p.Match(SQLParserSECURITY)
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		p.SetState(1719)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(1718)
				p.Match(SQLParserNO)
			}

		}
		{
			p.SetState(1721)
			p.Match(SQLParserFORCE)
		}
		{
			p.SetState(1722)
			p.Match(SQLParserROW)
		}
		{
			p.SetState(1723)
			p.Match(SQLParserLEVEL)
		}
		{
			p.SetState(1724)
			p.Match(SQLParserSECURITY)
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1725)
			p.Match(SQLParserCLUSTER)
		}
		{
			p.SetState(1726)
			p.Match(SQLParserON)
		}
		{
			p.SetState(1727)

			var _x = p.Schema_qualified_name()


			localctx.(*Table_actionContext).index_name = _x
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1728)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1729)
			p.Match(SQLParserWITHOUT)
		}
		{
			p.SetState(1730)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCLUSTER || _la == SQLParserOIDS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1731)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1732)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(1733)
			p.Match(SQLParserOIDS)
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1734)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1735)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserLOGGED || _la == SQLParserUNLOGGED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1736)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1737)
			p.Storage_parameter()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1738)
			p.Match(SQLParserRESET)
		}
		{
			p.SetState(1739)
			p.Names_in_parens()
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1740)
			p.Define_foreign_options()
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1741)
			p.Match(SQLParserINHERIT)
		}
		{
			p.SetState(1742)

			var _x = p.Schema_qualified_name()


			localctx.(*Table_actionContext).parent_table = _x
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1743)
			p.Match(SQLParserNO)
		}
		{
			p.SetState(1744)
			p.Match(SQLParserINHERIT)
		}
		{
			p.SetState(1745)

			var _x = p.Schema_qualified_name()


			localctx.(*Table_actionContext).parent_table = _x
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1746)
			p.Match(SQLParserOF)
		}
		{
			p.SetState(1747)

			var _x = p.Schema_qualified_name()


			localctx.(*Table_actionContext).type_name = _x
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1748)
			p.Match(SQLParserNOT)
		}
		{
			p.SetState(1749)
			p.Match(SQLParserOF)
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1750)
			p.Owner_to()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1751)
			p.Set_tablespace()
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1752)
			p.Match(SQLParserREPLICA)
		}
		{
			p.SetState(1753)
			p.Match(SQLParserIDENTITY)
		}
		p.SetState(1760)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserDEFAULT:
			{
				p.SetState(1754)
				p.Match(SQLParserDEFAULT)
			}


		case SQLParserFULL:
			{
				p.SetState(1755)
				p.Match(SQLParserFULL)
			}


		case SQLParserNOTHING:
			{
				p.SetState(1756)
				p.Match(SQLParserNOTHING)
			}


		case SQLParserUSING:
			{
				p.SetState(1757)
				p.Match(SQLParserUSING)
			}
			{
				p.SetState(1758)
				p.Match(SQLParserINDEX)
			}
			{
				p.SetState(1759)
				p.Identifier()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(1762)
			p.Match(SQLParserALTER)
		}
		{
			p.SetState(1763)
			p.Match(SQLParserCONSTRAINT)
		}
		{
			p.SetState(1764)
			p.Identifier()
		}
		p.SetState(1766)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserDEFERRABLE || _la == SQLParserNOT {
			{
				p.SetState(1765)
				p.Table_deferrable()
			}

		}
		p.SetState(1769)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserINITIALLY {
			{
				p.SetState(1768)
				p.Table_initialy_immed()
			}

		}

	}


	return localctx
}


// IColumn_actionContext is an interface to support dynamic dispatch.
type IColumn_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSet returns the set token.
	GetSet() antlr.Token 


	// SetSet sets the set token.
	SetSet(antlr.Token) 


	// IsColumn_actionContext differentiates from other interfaces.
	IsColumn_actionContext()
}

type Column_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	set antlr.Token
}

func NewEmptyColumn_actionContext() *Column_actionContext {
	var p = new(Column_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_column_action
	return p
}

func (*Column_actionContext) IsColumn_actionContext() {}

func NewColumn_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_actionContext {
	var p = new(Column_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_column_action

	return p
}

func (s *Column_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_actionContext) GetSet() antlr.Token { return s.set }


func (s *Column_actionContext) SetSet(v antlr.Token) { s.set = v }


func (s *Column_actionContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Column_actionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Column_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Column_actionContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Column_actionContext) Collate_identifier() ICollate_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollate_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollate_identifierContext)
}

func (s *Column_actionContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Column_actionContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Column_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Column_actionContext) Identity_body() IIdentity_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentity_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentity_bodyContext)
}

func (s *Column_actionContext) Set_def_column() ISet_def_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_def_columnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_def_columnContext)
}

func (s *Column_actionContext) Drop_def() IDrop_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_defContext)
}

func (s *Column_actionContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Column_actionContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Column_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Column_actionContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(SQLParserIDENTITY, 0)
}

func (s *Column_actionContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Column_actionContext) EXPRESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXPRESSION, 0)
}

func (s *Column_actionContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Column_actionContext) Set_statistics() ISet_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statisticsContext)
}

func (s *Column_actionContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTORAGE, 0)
}

func (s *Column_actionContext) Storage_option() IStorage_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_optionContext)
}

func (s *Column_actionContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Column_actionContext) Names_in_parens() INames_in_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_in_parensContext)
}

func (s *Column_actionContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Column_actionContext) AllAlter_identity() []IAlter_identityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlter_identityContext)(nil)).Elem())
	var tst = make([]IAlter_identityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlter_identityContext)
		}
	}

	return tst
}

func (s *Column_actionContext) Alter_identity(i int) IAlter_identityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_identityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlter_identityContext)
}

func (s *Column_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Column_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterColumn_action(s)
	}
}

func (s *Column_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitColumn_action(s)
	}
}




func (p *SQLParser) Column_action() (localctx IColumn_actionContext) {
	localctx = NewColumn_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SQLParserRULE_column_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1820)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserSET {
			{
				p.SetState(1773)
				p.Match(SQLParserSET)
			}
			{
				p.SetState(1774)
				p.Match(SQLParserDATA)
			}

		}
		{
			p.SetState(1777)
			p.Match(SQLParserTYPE)
		}
		{
			p.SetState(1778)
			p.Data_type()
		}
		p.SetState(1780)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLLATE {
			{
				p.SetState(1779)
				p.Collate_identifier()
			}

		}
		p.SetState(1784)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserUSING {
			{
				p.SetState(1782)
				p.Match(SQLParserUSING)
			}
			{
				p.SetState(1783)
				p.vex(0)
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1786)
			p.Match(SQLParserADD)
		}
		{
			p.SetState(1787)
			p.Identity_body()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1788)
			p.Set_def_column()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1789)
			p.Drop_def()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1792)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserSET:
			{
				p.SetState(1790)

				var _m = p.Match(SQLParserSET)

				localctx.(*Column_actionContext).set = _m
			}


		case SQLParserDROP:
			{
				p.SetState(1791)
				p.Match(SQLParserDROP)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1794)
			p.Match(SQLParserNOT)
		}
		{
			p.SetState(1795)
			p.Match(SQLParserNULL)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1796)
			p.Match(SQLParserDROP)
		}
		{
			p.SetState(1797)
			p.Match(SQLParserIDENTITY)
		}
		p.SetState(1799)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserIF {
			{
				p.SetState(1798)
				p.If_exists()
			}

		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1801)
			p.Match(SQLParserDROP)
		}
		{
			p.SetState(1802)
			p.Match(SQLParserEXPRESSION)
		}
		p.SetState(1804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserIF {
			{
				p.SetState(1803)
				p.If_exists()
			}

		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1806)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1807)
			p.Storage_parameter()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1808)
			p.Set_statistics()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1809)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1810)
			p.Match(SQLParserSTORAGE)
		}
		{
			p.SetState(1811)
			p.Storage_option()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1812)
			p.Match(SQLParserRESET)
		}
		{
			p.SetState(1813)
			p.Names_in_parens()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1814)
			p.Define_foreign_options()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		p.SetState(1816)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserRESTART || _la == SQLParserSET {
			{
				p.SetState(1815)
				p.Alter_identity()
			}


			p.SetState(1818)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IIdentity_bodyContext is an interface to support dynamic dispatch.
type IIdentity_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentity_bodyContext differentiates from other interfaces.
	IsIdentity_bodyContext()
}

type Identity_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentity_bodyContext() *Identity_bodyContext {
	var p = new(Identity_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_identity_body
	return p
}

func (*Identity_bodyContext) IsIdentity_bodyContext() {}

func NewIdentity_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identity_bodyContext {
	var p = new(Identity_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_identity_body

	return p
}

func (s *Identity_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Identity_bodyContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(SQLParserGENERATED, 0)
}

func (s *Identity_bodyContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Identity_bodyContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(SQLParserIDENTITY, 0)
}

func (s *Identity_bodyContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(SQLParserALWAYS, 0)
}

func (s *Identity_bodyContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Identity_bodyContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Identity_bodyContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Identity_bodyContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Identity_bodyContext) AllSequence_body() []ISequence_bodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_bodyContext)(nil)).Elem())
	var tst = make([]ISequence_bodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_bodyContext)
		}
	}

	return tst
}

func (s *Identity_bodyContext) Sequence_body(i int) ISequence_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_bodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_bodyContext)
}

func (s *Identity_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identity_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Identity_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIdentity_body(s)
	}
}

func (s *Identity_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIdentity_body(s)
	}
}




func (p *SQLParser) Identity_body() (localctx IIdentity_bodyContext) {
	localctx = NewIdentity_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SQLParserRULE_identity_body)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1822)
		p.Match(SQLParserGENERATED)
	}
	p.SetState(1826)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserALWAYS:
		{
			p.SetState(1823)
			p.Match(SQLParserALWAYS)
		}


	case SQLParserBY:
		{
			p.SetState(1824)
			p.Match(SQLParserBY)
		}
		{
			p.SetState(1825)
			p.Match(SQLParserDEFAULT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1828)
		p.Match(SQLParserAS)
	}
	{
		p.SetState(1829)
		p.Match(SQLParserIDENTITY)
	}
	p.SetState(1838)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(1830)
			p.Match(SQLParserLEFT_PAREN)
		}
		p.SetState(1832)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserCACHE || _la == SQLParserCYCLE || _la == SQLParserINCREMENT || _la == SQLParserMAXVALUE || ((((_la - 143)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 143))) & ((1 << (SQLParserMINVALUE - 143)) | (1 << (SQLParserNO - 143)) | (1 << (SQLParserOWNED - 143)))) != 0) || _la == SQLParserSEQUENCE || _la == SQLParserSTART || _la == SQLParserAS {
			{
				p.SetState(1831)
				p.Sequence_body()
			}


			p.SetState(1834)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1836)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}



	return localctx
}


// IAlter_identityContext is an interface to support dynamic dispatch.
type IAlter_identityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_identityContext differentiates from other interfaces.
	IsAlter_identityContext()
}

type Alter_identityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_identityContext() *Alter_identityContext {
	var p = new(Alter_identityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_identity
	return p
}

func (*Alter_identityContext) IsAlter_identityContext() {}

func NewAlter_identityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_identityContext {
	var p = new(Alter_identityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_identity

	return p
}

func (s *Alter_identityContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_identityContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Alter_identityContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(SQLParserGENERATED, 0)
}

func (s *Alter_identityContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(SQLParserALWAYS, 0)
}

func (s *Alter_identityContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Alter_identityContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Alter_identityContext) Sequence_body() ISequence_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISequence_bodyContext)
}

func (s *Alter_identityContext) RESTART() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTART, 0)
}

func (s *Alter_identityContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Alter_identityContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Alter_identityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_identityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_identityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_identity(s)
	}
}

func (s *Alter_identityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_identity(s)
	}
}




func (p *SQLParser) Alter_identity() (localctx IAlter_identityContext) {
	localctx = NewAlter_identityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SQLParserRULE_alter_identity)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1856)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1840)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1841)
			p.Match(SQLParserGENERATED)
		}
		p.SetState(1845)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserALWAYS:
			{
				p.SetState(1842)
				p.Match(SQLParserALWAYS)
			}


		case SQLParserBY:
			{
				p.SetState(1843)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(1844)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1847)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1848)
			p.Sequence_body()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1849)
			p.Match(SQLParserRESTART)
		}
		p.SetState(1854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH || _la == SQLParserNUMBER_LITERAL {
			p.SetState(1851)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserWITH {
				{
					p.SetState(1850)
					p.Match(SQLParserWITH)
				}

			}
			{
				p.SetState(1853)
				p.Match(SQLParserNUMBER_LITERAL)
			}

		}

	}


	return localctx
}


// IStorage_optionContext is an interface to support dynamic dispatch.
type IStorage_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorage_optionContext differentiates from other interfaces.
	IsStorage_optionContext()
}

type Storage_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorage_optionContext() *Storage_optionContext {
	var p = new(Storage_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_storage_option
	return p
}

func (*Storage_optionContext) IsStorage_optionContext() {}

func NewStorage_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Storage_optionContext {
	var p = new(Storage_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_storage_option

	return p
}

func (s *Storage_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Storage_optionContext) PLAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserPLAIN, 0)
}

func (s *Storage_optionContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTERNAL, 0)
}

func (s *Storage_optionContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENDED, 0)
}

func (s *Storage_optionContext) MAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserMAIN, 0)
}

func (s *Storage_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Storage_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Storage_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterStorage_option(s)
	}
}

func (s *Storage_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitStorage_option(s)
	}
}




func (p *SQLParser) Storage_option() (localctx IStorage_optionContext) {
	localctx = NewStorage_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SQLParserRULE_storage_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1858)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserEXTERNAL || _la == SQLParserEXTENDED || _la == SQLParserMAIN || _la == SQLParserPLAIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IValidate_constraintContext is an interface to support dynamic dispatch.
type IValidate_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraint_name returns the constraint_name rule contexts.
	GetConstraint_name() ISchema_qualified_nameContext


	// SetConstraint_name sets the constraint_name rule contexts.
	SetConstraint_name(ISchema_qualified_nameContext)


	// IsValidate_constraintContext differentiates from other interfaces.
	IsValidate_constraintContext()
}

type Validate_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	constraint_name ISchema_qualified_nameContext 
}

func NewEmptyValidate_constraintContext() *Validate_constraintContext {
	var p = new(Validate_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_validate_constraint
	return p
}

func (*Validate_constraintContext) IsValidate_constraintContext() {}

func NewValidate_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Validate_constraintContext {
	var p = new(Validate_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_validate_constraint

	return p
}

func (s *Validate_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Validate_constraintContext) GetConstraint_name() ISchema_qualified_nameContext { return s.constraint_name }


func (s *Validate_constraintContext) SetConstraint_name(v ISchema_qualified_nameContext) { s.constraint_name = v }


func (s *Validate_constraintContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserVALIDATE, 0)
}

func (s *Validate_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Validate_constraintContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Validate_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Validate_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Validate_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterValidate_constraint(s)
	}
}

func (s *Validate_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitValidate_constraint(s)
	}
}




func (p *SQLParser) Validate_constraint() (localctx IValidate_constraintContext) {
	localctx = NewValidate_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SQLParserRULE_validate_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1860)
		p.Match(SQLParserVALIDATE)
	}
	{
		p.SetState(1861)
		p.Match(SQLParserCONSTRAINT)
	}
	{
		p.SetState(1862)

		var _x = p.Schema_qualified_name()


		localctx.(*Validate_constraintContext).constraint_name = _x
	}



	return localctx
}


// IDrop_constraintContext is an interface to support dynamic dispatch.
type IDrop_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraint_name returns the constraint_name rule contexts.
	GetConstraint_name() IIdentifierContext


	// SetConstraint_name sets the constraint_name rule contexts.
	SetConstraint_name(IIdentifierContext)


	// IsDrop_constraintContext differentiates from other interfaces.
	IsDrop_constraintContext()
}

type Drop_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	constraint_name IIdentifierContext 
}

func NewEmptyDrop_constraintContext() *Drop_constraintContext {
	var p = new(Drop_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_constraint
	return p
}

func (*Drop_constraintContext) IsDrop_constraintContext() {}

func NewDrop_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_constraintContext {
	var p = new(Drop_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_constraint

	return p
}

func (s *Drop_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_constraintContext) GetConstraint_name() IIdentifierContext { return s.constraint_name }


func (s *Drop_constraintContext) SetConstraint_name(v IIdentifierContext) { s.constraint_name = v }


func (s *Drop_constraintContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Drop_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Drop_constraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_constraintContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_constraintContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_constraint(s)
	}
}

func (s *Drop_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_constraint(s)
	}
}




func (p *SQLParser) Drop_constraint() (localctx IDrop_constraintContext) {
	localctx = NewDrop_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SQLParserRULE_drop_constraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1864)
		p.Match(SQLParserDROP)
	}
	{
		p.SetState(1865)
		p.Match(SQLParserCONSTRAINT)
	}
	p.SetState(1867)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1866)
			p.If_exists()
		}


	}
	{
		p.SetState(1869)

		var _x = p.Identifier()


		localctx.(*Drop_constraintContext).constraint_name = _x
	}
	p.SetState(1871)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(1870)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// ITable_deferrableContext is an interface to support dynamic dispatch.
type ITable_deferrableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_deferrableContext differentiates from other interfaces.
	IsTable_deferrableContext()
}

type Table_deferrableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_deferrableContext() *Table_deferrableContext {
	var p = new(Table_deferrableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_deferrable
	return p
}

func (*Table_deferrableContext) IsTable_deferrableContext() {}

func NewTable_deferrableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_deferrableContext {
	var p = new(Table_deferrableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_deferrable

	return p
}

func (s *Table_deferrableContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_deferrableContext) DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFERRABLE, 0)
}

func (s *Table_deferrableContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Table_deferrableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_deferrableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_deferrableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_deferrable(s)
	}
}

func (s *Table_deferrableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_deferrable(s)
	}
}




func (p *SQLParser) Table_deferrable() (localctx ITable_deferrableContext) {
	localctx = NewTable_deferrableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SQLParserRULE_table_deferrable)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1874)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserNOT {
		{
			p.SetState(1873)
			p.Match(SQLParserNOT)
		}

	}
	{
		p.SetState(1876)
		p.Match(SQLParserDEFERRABLE)
	}



	return localctx
}


// ITable_initialy_immedContext is an interface to support dynamic dispatch.
type ITable_initialy_immedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_initialy_immedContext differentiates from other interfaces.
	IsTable_initialy_immedContext()
}

type Table_initialy_immedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_initialy_immedContext() *Table_initialy_immedContext {
	var p = new(Table_initialy_immedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_initialy_immed
	return p
}

func (*Table_initialy_immedContext) IsTable_initialy_immedContext() {}

func NewTable_initialy_immedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_initialy_immedContext {
	var p = new(Table_initialy_immedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_initialy_immed

	return p
}

func (s *Table_initialy_immedContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_initialy_immedContext) INITIALLY() antlr.TerminalNode {
	return s.GetToken(SQLParserINITIALLY, 0)
}

func (s *Table_initialy_immedContext) DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFERRED, 0)
}

func (s *Table_initialy_immedContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLParserIMMEDIATE, 0)
}

func (s *Table_initialy_immedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_initialy_immedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_initialy_immedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_initialy_immed(s)
	}
}

func (s *Table_initialy_immedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_initialy_immed(s)
	}
}




func (p *SQLParser) Table_initialy_immed() (localctx ITable_initialy_immedContext) {
	localctx = NewTable_initialy_immedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SQLParserRULE_table_initialy_immed)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1878)
		p.Match(SQLParserINITIALLY)
	}
	{
		p.SetState(1879)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserDEFERRED || _la == SQLParserIMMEDIATE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IFunction_actions_commonContext is an interface to support dynamic dispatch.
type IFunction_actions_commonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExecution_cost returns the execution_cost rule contexts.
	GetExecution_cost() IUnsigned_numeric_literalContext

	// GetResult_rows returns the result_rows rule contexts.
	GetResult_rows() IUnsigned_numeric_literalContext

	// GetConfig_scope returns the config_scope rule contexts.
	GetConfig_scope() IIdentifierContext

	// GetConfig_param returns the config_param rule contexts.
	GetConfig_param() IIdentifierContext

	// GetLang_name returns the lang_name rule contexts.
	GetLang_name() IIdentifierContext


	// SetExecution_cost sets the execution_cost rule contexts.
	SetExecution_cost(IUnsigned_numeric_literalContext)

	// SetResult_rows sets the result_rows rule contexts.
	SetResult_rows(IUnsigned_numeric_literalContext)

	// SetConfig_scope sets the config_scope rule contexts.
	SetConfig_scope(IIdentifierContext)

	// SetConfig_param sets the config_param rule contexts.
	SetConfig_param(IIdentifierContext)

	// SetLang_name sets the lang_name rule contexts.
	SetLang_name(IIdentifierContext)


	// IsFunction_actions_commonContext differentiates from other interfaces.
	IsFunction_actions_commonContext()
}

type Function_actions_commonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	execution_cost IUnsigned_numeric_literalContext 
	result_rows IUnsigned_numeric_literalContext 
	config_scope IIdentifierContext 
	config_param IIdentifierContext 
	lang_name IIdentifierContext 
}

func NewEmptyFunction_actions_commonContext() *Function_actions_commonContext {
	var p = new(Function_actions_commonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_actions_common
	return p
}

func (*Function_actions_commonContext) IsFunction_actions_commonContext() {}

func NewFunction_actions_commonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_actions_commonContext {
	var p = new(Function_actions_commonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_actions_common

	return p
}

func (s *Function_actions_commonContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_actions_commonContext) GetExecution_cost() IUnsigned_numeric_literalContext { return s.execution_cost }

func (s *Function_actions_commonContext) GetResult_rows() IUnsigned_numeric_literalContext { return s.result_rows }

func (s *Function_actions_commonContext) GetConfig_scope() IIdentifierContext { return s.config_scope }

func (s *Function_actions_commonContext) GetConfig_param() IIdentifierContext { return s.config_param }

func (s *Function_actions_commonContext) GetLang_name() IIdentifierContext { return s.lang_name }


func (s *Function_actions_commonContext) SetExecution_cost(v IUnsigned_numeric_literalContext) { s.execution_cost = v }

func (s *Function_actions_commonContext) SetResult_rows(v IUnsigned_numeric_literalContext) { s.result_rows = v }

func (s *Function_actions_commonContext) SetConfig_scope(v IIdentifierContext) { s.config_scope = v }

func (s *Function_actions_commonContext) SetConfig_param(v IIdentifierContext) { s.config_param = v }

func (s *Function_actions_commonContext) SetLang_name(v IIdentifierContext) { s.lang_name = v }


func (s *Function_actions_commonContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Function_actions_commonContext) AllNULL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNULL)
}

func (s *Function_actions_commonContext) NULL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, i)
}

func (s *Function_actions_commonContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SQLParserINPUT, 0)
}

func (s *Function_actions_commonContext) CALLED() antlr.TerminalNode {
	return s.GetToken(SQLParserCALLED, 0)
}

func (s *Function_actions_commonContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURNS, 0)
}

func (s *Function_actions_commonContext) TRANSFORM() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSFORM, 0)
}

func (s *Function_actions_commonContext) AllTransform_for_type() []ITransform_for_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransform_for_typeContext)(nil)).Elem())
	var tst = make([]ITransform_for_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransform_for_typeContext)
		}
	}

	return tst
}

func (s *Function_actions_commonContext) Transform_for_type(i int) ITransform_for_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransform_for_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransform_for_typeContext)
}

func (s *Function_actions_commonContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Function_actions_commonContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Function_actions_commonContext) STRICT() antlr.TerminalNode {
	return s.GetToken(SQLParserSTRICT, 0)
}

func (s *Function_actions_commonContext) IMMUTABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserIMMUTABLE, 0)
}

func (s *Function_actions_commonContext) VOLATILE() antlr.TerminalNode {
	return s.GetToken(SQLParserVOLATILE, 0)
}

func (s *Function_actions_commonContext) STABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTABLE, 0)
}

func (s *Function_actions_commonContext) LEAKPROOF() antlr.TerminalNode {
	return s.GetToken(SQLParserLEAKPROOF, 0)
}

func (s *Function_actions_commonContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Function_actions_commonContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SQLParserSECURITY, 0)
}

func (s *Function_actions_commonContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(SQLParserINVOKER, 0)
}

func (s *Function_actions_commonContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFINER, 0)
}

func (s *Function_actions_commonContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTERNAL, 0)
}

func (s *Function_actions_commonContext) PARALLEL() antlr.TerminalNode {
	return s.GetToken(SQLParserPARALLEL, 0)
}

func (s *Function_actions_commonContext) SAFE() antlr.TerminalNode {
	return s.GetToken(SQLParserSAFE, 0)
}

func (s *Function_actions_commonContext) UNSAFE() antlr.TerminalNode {
	return s.GetToken(SQLParserUNSAFE, 0)
}

func (s *Function_actions_commonContext) RESTRICTED() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICTED, 0)
}

func (s *Function_actions_commonContext) COST() antlr.TerminalNode {
	return s.GetToken(SQLParserCOST, 0)
}

func (s *Function_actions_commonContext) Unsigned_numeric_literal() IUnsigned_numeric_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnsigned_numeric_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnsigned_numeric_literalContext)
}

func (s *Function_actions_commonContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SQLParserROWS, 0)
}

func (s *Function_actions_commonContext) SUPPORT() antlr.TerminalNode {
	return s.GetToken(SQLParserSUPPORT, 0)
}

func (s *Function_actions_commonContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Function_actions_commonContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Function_actions_commonContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Function_actions_commonContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_actions_commonContext) Set_statement_value() ISet_statement_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statement_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statement_valueContext)
}

func (s *Function_actions_commonContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Function_actions_commonContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT, 0)
}

func (s *Function_actions_commonContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Function_actions_commonContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Function_actions_commonContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Function_actions_commonContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Function_actions_commonContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(SQLParserWINDOW, 0)
}

func (s *Function_actions_commonContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Function_actions_commonContext) Function_def() IFunction_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_defContext)
}

func (s *Function_actions_commonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_actions_commonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_actions_commonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_actions_common(s)
	}
}

func (s *Function_actions_commonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_actions_common(s)
	}
}




func (p *SQLParser) Function_actions_common() (localctx IFunction_actions_commonContext) {
	localctx = NewFunction_actions_commonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SQLParserRULE_function_actions_common)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1937)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCALLED, SQLParserRETURNS:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1884)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCALLED:
			{
				p.SetState(1881)
				p.Match(SQLParserCALLED)
			}


		case SQLParserRETURNS:
			{
				p.SetState(1882)
				p.Match(SQLParserRETURNS)
			}
			{
				p.SetState(1883)
				p.Match(SQLParserNULL)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1886)
			p.Match(SQLParserON)
		}
		{
			p.SetState(1887)
			p.Match(SQLParserNULL)
		}
		{
			p.SetState(1888)
			p.Match(SQLParserINPUT)
		}


	case SQLParserTRANSFORM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1889)
			p.Match(SQLParserTRANSFORM)
		}
		{
			p.SetState(1890)
			p.Transform_for_type()
		}
		p.SetState(1895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(1891)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(1892)
				p.Transform_for_type()
			}


			p.SetState(1897)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case SQLParserSTRICT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1898)
			p.Match(SQLParserSTRICT)
		}


	case SQLParserIMMUTABLE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1899)
			p.Match(SQLParserIMMUTABLE)
		}


	case SQLParserVOLATILE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1900)
			p.Match(SQLParserVOLATILE)
		}


	case SQLParserSTABLE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1901)
			p.Match(SQLParserSTABLE)
		}


	case SQLParserLEAKPROOF, SQLParserNOT:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(1903)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT {
			{
				p.SetState(1902)
				p.Match(SQLParserNOT)
			}

		}
		{
			p.SetState(1905)
			p.Match(SQLParserLEAKPROOF)
		}


	case SQLParserEXTERNAL, SQLParserSECURITY:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(1907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserEXTERNAL {
			{
				p.SetState(1906)
				p.Match(SQLParserEXTERNAL)
			}

		}
		{
			p.SetState(1909)
			p.Match(SQLParserSECURITY)
		}
		{
			p.SetState(1910)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDEFINER || _la == SQLParserINVOKER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserPARALLEL:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1911)
			p.Match(SQLParserPARALLEL)
		}
		{
			p.SetState(1912)
			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 526)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 526))) & ((1 << (SQLParserRESTRICTED - 526)) | (1 << (SQLParserSAFE - 526)) | (1 << (SQLParserUNSAFE - 526)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserCOST:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1913)
			p.Match(SQLParserCOST)
		}
		{
			p.SetState(1914)

			var _x = p.Unsigned_numeric_literal()


			localctx.(*Function_actions_commonContext).execution_cost = _x
		}


	case SQLParserROWS:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1915)
			p.Match(SQLParserROWS)
		}
		{
			p.SetState(1916)

			var _x = p.Unsigned_numeric_literal()


			localctx.(*Function_actions_commonContext).result_rows = _x
		}


	case SQLParserSUPPORT:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1917)
			p.Match(SQLParserSUPPORT)
		}
		{
			p.SetState(1918)
			p.Schema_qualified_name()
		}


	case SQLParserSET:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1919)
			p.Match(SQLParserSET)
		}
		p.SetState(1923)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1920)

				var _x = p.Identifier()


				localctx.(*Function_actions_commonContext).config_scope = _x
			}
			{
				p.SetState(1921)
				p.Match(SQLParserDOT)
			}


		}
		{
			p.SetState(1925)

			var _x = p.Identifier()


			localctx.(*Function_actions_commonContext).config_param = _x
		}
		p.SetState(1930)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserTO, SQLParserEQUAL:
			{
				p.SetState(1926)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserTO || _la == SQLParserEQUAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(1927)
				p.Set_statement_value()
			}


		case SQLParserFROM:
			{
				p.SetState(1928)
				p.Match(SQLParserFROM)
			}
			{
				p.SetState(1929)
				p.Match(SQLParserCURRENT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserLANGUAGE:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1932)
			p.Match(SQLParserLANGUAGE)
		}
		{
			p.SetState(1933)

			var _x = p.Identifier()


			localctx.(*Function_actions_commonContext).lang_name = _x
		}


	case SQLParserWINDOW:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1934)
			p.Match(SQLParserWINDOW)
		}


	case SQLParserAS:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1935)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(1936)
			p.Function_def()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IFunction_defContext is an interface to support dynamic dispatch.
type IFunction_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDefinition returns the definition rule contexts.
	GetDefinition() ICharacter_stringContext

	// GetSymbol returns the symbol rule contexts.
	GetSymbol() ICharacter_stringContext


	// SetDefinition sets the definition rule contexts.
	SetDefinition(ICharacter_stringContext)

	// SetSymbol sets the symbol rule contexts.
	SetSymbol(ICharacter_stringContext)


	// IsFunction_defContext differentiates from other interfaces.
	IsFunction_defContext()
}

type Function_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	definition ICharacter_stringContext 
	symbol ICharacter_stringContext 
}

func NewEmptyFunction_defContext() *Function_defContext {
	var p = new(Function_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_def
	return p
}

func (*Function_defContext) IsFunction_defContext() {}

func NewFunction_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_defContext {
	var p = new(Function_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_def

	return p
}

func (s *Function_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_defContext) GetDefinition() ICharacter_stringContext { return s.definition }

func (s *Function_defContext) GetSymbol() ICharacter_stringContext { return s.symbol }


func (s *Function_defContext) SetDefinition(v ICharacter_stringContext) { s.definition = v }

func (s *Function_defContext) SetSymbol(v ICharacter_stringContext) { s.symbol = v }


func (s *Function_defContext) AllCharacter_string() []ICharacter_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem())
	var tst = make([]ICharacter_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICharacter_stringContext)
		}
	}

	return tst
}

func (s *Function_defContext) Character_string(i int) ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Function_defContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Function_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_def(s)
	}
}

func (s *Function_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_def(s)
	}
}




func (p *SQLParser) Function_def() (localctx IFunction_defContext) {
	localctx = NewFunction_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SQLParserRULE_function_def)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1939)

		var _x = p.Character_string()


		localctx.(*Function_defContext).definition = _x
	}
	p.SetState(1942)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCOMMA {
		{
			p.SetState(1940)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(1941)

			var _x = p.Character_string()


			localctx.(*Function_defContext).symbol = _x
		}

	}



	return localctx
}


// IAlter_index_statementContext is an interface to support dynamic dispatch.
type IAlter_index_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_index_statementContext differentiates from other interfaces.
	IsAlter_index_statementContext()
}

type Alter_index_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_index_statementContext() *Alter_index_statementContext {
	var p = new(Alter_index_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_index_statement
	return p
}

func (*Alter_index_statementContext) IsAlter_index_statementContext() {}

func NewAlter_index_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_index_statementContext {
	var p = new(Alter_index_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_index_statement

	return p
}

func (s *Alter_index_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_index_statementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Alter_index_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_index_statementContext) Index_def_action() IIndex_def_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_def_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_def_actionContext)
}

func (s *Alter_index_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_index_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Alter_index_statementContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Alter_index_statementContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Alter_index_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_index_statementContext) Set_tablespace() ISet_tablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_tablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_tablespaceContext)
}

func (s *Alter_index_statementContext) OWNED() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNED, 0)
}

func (s *Alter_index_statementContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Alter_index_statementContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_index_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_index_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_index_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_index_statement(s)
	}
}

func (s *Alter_index_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_index_statement(s)
	}
}




func (p *SQLParser) Alter_index_statement() (localctx IAlter_index_statementContext) {
	localctx = NewAlter_index_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SQLParserRULE_alter_index_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1963)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1944)
			p.Match(SQLParserINDEX)
		}
		p.SetState(1946)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1945)
				p.If_exists()
			}


		}
		{
			p.SetState(1948)
			p.Schema_qualified_name()
		}
		{
			p.SetState(1949)
			p.Index_def_action()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1951)
			p.Match(SQLParserINDEX)
		}
		{
			p.SetState(1952)
			p.Match(SQLParserALL)
		}
		{
			p.SetState(1953)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(1954)
			p.Match(SQLParserTABLESPACE)
		}
		{
			p.SetState(1955)
			p.Identifier()
		}
		p.SetState(1959)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserOWNED {
			{
				p.SetState(1956)
				p.Match(SQLParserOWNED)
			}
			{
				p.SetState(1957)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(1958)
				p.Identifier_list()
			}

		}
		{
			p.SetState(1961)
			p.Set_tablespace()
		}

	}


	return localctx
}


// IIndex_def_actionContext is an interface to support dynamic dispatch.
type IIndex_def_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndex returns the index rule contexts.
	GetIndex() ISchema_qualified_nameContext


	// SetIndex sets the index rule contexts.
	SetIndex(ISchema_qualified_nameContext)


	// IsIndex_def_actionContext differentiates from other interfaces.
	IsIndex_def_actionContext()
}

type Index_def_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	index ISchema_qualified_nameContext 
}

func NewEmptyIndex_def_actionContext() *Index_def_actionContext {
	var p = new(Index_def_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_index_def_action
	return p
}

func (*Index_def_actionContext) IsIndex_def_actionContext() {}

func NewIndex_def_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_def_actionContext {
	var p = new(Index_def_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_index_def_action

	return p
}

func (s *Index_def_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_def_actionContext) GetIndex() ISchema_qualified_nameContext { return s.index }


func (s *Index_def_actionContext) SetIndex(v ISchema_qualified_nameContext) { s.index = v }


func (s *Index_def_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Index_def_actionContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(SQLParserATTACH, 0)
}

func (s *Index_def_actionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SQLParserPARTITION, 0)
}

func (s *Index_def_actionContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Index_def_actionContext) DEPENDS() antlr.TerminalNode {
	return s.GetToken(SQLParserDEPENDS, 0)
}

func (s *Index_def_actionContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Index_def_actionContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Index_def_actionContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Index_def_actionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SQLParserALTER, 0)
}

func (s *Index_def_actionContext) Set_statistics() ISet_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statisticsContext)
}

func (s *Index_def_actionContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Index_def_actionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Index_def_actionContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Index_def_actionContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Index_def_actionContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Index_def_actionContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Index_def_actionContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Index_def_actionContext) Set_tablespace() ISet_tablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_tablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_tablespaceContext)
}

func (s *Index_def_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Index_def_actionContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Index_def_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_def_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Index_def_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndex_def_action(s)
	}
}

func (s *Index_def_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndex_def_action(s)
	}
}




func (p *SQLParser) Index_def_action() (localctx IIndex_def_actionContext) {
	localctx = NewIndex_def_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SQLParserRULE_index_def_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1993)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1965)
			p.Rename_to()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1966)
			p.Match(SQLParserATTACH)
		}
		{
			p.SetState(1967)
			p.Match(SQLParserPARTITION)
		}
		{
			p.SetState(1968)

			var _x = p.Schema_qualified_name()


			localctx.(*Index_def_actionContext).index = _x
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1970)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(1969)
				p.Match(SQLParserNO)
			}

		}
		{
			p.SetState(1972)
			p.Match(SQLParserDEPENDS)
		}
		{
			p.SetState(1973)
			p.Match(SQLParserON)
		}
		{
			p.SetState(1974)
			p.Match(SQLParserEXTENSION)
		}
		{
			p.SetState(1975)
			p.Schema_qualified_name()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1976)
			p.Match(SQLParserALTER)
		}
		p.SetState(1978)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(1977)
				p.Match(SQLParserCOLUMN)
			}

		}
		p.SetState(1982)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserNUMBER_LITERAL:
			{
				p.SetState(1980)
				p.Match(SQLParserNUMBER_LITERAL)
			}


		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(1981)
				p.Identifier()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1984)
			p.Set_statistics()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1985)
			p.Match(SQLParserRESET)
		}
		{
			p.SetState(1986)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(1987)
			p.Identifier_list()
		}
		{
			p.SetState(1988)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1990)
			p.Set_tablespace()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1991)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(1992)
			p.Storage_parameter()
		}

	}


	return localctx
}


// IAlter_default_privileges_statementContext is an interface to support dynamic dispatch.
type IAlter_default_privileges_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_default_privileges_statementContext differentiates from other interfaces.
	IsAlter_default_privileges_statementContext()
}

type Alter_default_privileges_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_default_privileges_statementContext() *Alter_default_privileges_statementContext {
	var p = new(Alter_default_privileges_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_default_privileges_statement
	return p
}

func (*Alter_default_privileges_statementContext) IsAlter_default_privileges_statementContext() {}

func NewAlter_default_privileges_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_default_privileges_statementContext {
	var p = new(Alter_default_privileges_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_default_privileges_statement

	return p
}

func (s *Alter_default_privileges_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_default_privileges_statementContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Alter_default_privileges_statementContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIVILEGES, 0)
}

func (s *Alter_default_privileges_statementContext) Abbreviated_grant_or_revoke() IAbbreviated_grant_or_revokeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbbreviated_grant_or_revokeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbbreviated_grant_or_revokeContext)
}

func (s *Alter_default_privileges_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Alter_default_privileges_statementContext) AllIdentifier_list() []IIdentifier_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem())
	var tst = make([]IIdentifier_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_listContext)
		}
	}

	return tst
}

func (s *Alter_default_privileges_statementContext) Identifier_list(i int) IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_default_privileges_statementContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Alter_default_privileges_statementContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Alter_default_privileges_statementContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *Alter_default_privileges_statementContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Alter_default_privileges_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_default_privileges_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_default_privileges_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_default_privileges_statement(s)
	}
}

func (s *Alter_default_privileges_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_default_privileges_statement(s)
	}
}




func (p *SQLParser) Alter_default_privileges_statement() (localctx IAlter_default_privileges_statementContext) {
	localctx = NewAlter_default_privileges_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SQLParserRULE_alter_default_privileges_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1995)
		p.Match(SQLParserDEFAULT)
	}
	{
		p.SetState(1996)
		p.Match(SQLParserPRIVILEGES)
	}
	p.SetState(2000)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFOR {
		{
			p.SetState(1997)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(1998)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserROLE || _la == SQLParserUSER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1999)
			p.Identifier_list()
		}

	}
	p.SetState(2005)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserIN {
		{
			p.SetState(2002)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(2003)
			p.Match(SQLParserSCHEMA)
		}
		{
			p.SetState(2004)
			p.Identifier_list()
		}

	}
	{
		p.SetState(2007)
		p.Abbreviated_grant_or_revoke()
	}



	return localctx
}


// IAbbreviated_grant_or_revokeContext is an interface to support dynamic dispatch.
type IAbbreviated_grant_or_revokeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbbreviated_grant_or_revokeContext differentiates from other interfaces.
	IsAbbreviated_grant_or_revokeContext()
}

type Abbreviated_grant_or_revokeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbbreviated_grant_or_revokeContext() *Abbreviated_grant_or_revokeContext {
	var p = new(Abbreviated_grant_or_revokeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_abbreviated_grant_or_revoke
	return p
}

func (*Abbreviated_grant_or_revokeContext) IsAbbreviated_grant_or_revokeContext() {}

func NewAbbreviated_grant_or_revokeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Abbreviated_grant_or_revokeContext {
	var p = new(Abbreviated_grant_or_revokeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_abbreviated_grant_or_revoke

	return p
}

func (s *Abbreviated_grant_or_revokeContext) GetParser() antlr.Parser { return s.parser }

func (s *Abbreviated_grant_or_revokeContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SQLParserGRANT, 0)
}

func (s *Abbreviated_grant_or_revokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SQLParserREVOKE, 0)
}

func (s *Abbreviated_grant_or_revokeContext) AllTable_column_privilege() []ITable_column_privilegeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_column_privilegeContext)(nil)).Elem())
	var tst = make([]ITable_column_privilegeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_column_privilegeContext)
		}
	}

	return tst
}

func (s *Abbreviated_grant_or_revokeContext) Table_column_privilege(i int) ITable_column_privilegeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_column_privilegeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_column_privilegeContext)
}

func (s *Abbreviated_grant_or_revokeContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Abbreviated_grant_or_revokeContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLES, 0)
}

func (s *Abbreviated_grant_or_revokeContext) SEQUENCES() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCES, 0)
}

func (s *Abbreviated_grant_or_revokeContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTIONS, 0)
}

func (s *Abbreviated_grant_or_revokeContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMAS, 0)
}

func (s *Abbreviated_grant_or_revokeContext) TYPES() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPES, 0)
}

func (s *Abbreviated_grant_or_revokeContext) Grant_to_rule() IGrant_to_ruleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_to_ruleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_to_ruleContext)
}

func (s *Abbreviated_grant_or_revokeContext) Revoke_from_cascade_restrict() IRevoke_from_cascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevoke_from_cascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevoke_from_cascade_restrictContext)
}

func (s *Abbreviated_grant_or_revokeContext) AllUsage_select_update() []IUsage_select_updateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUsage_select_updateContext)(nil)).Elem())
	var tst = make([]IUsage_select_updateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUsage_select_updateContext)
		}
	}

	return tst
}

func (s *Abbreviated_grant_or_revokeContext) Usage_select_update(i int) IUsage_select_updateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsage_select_updateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUsage_select_updateContext)
}

func (s *Abbreviated_grant_or_revokeContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Abbreviated_grant_or_revokeContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXECUTE, 0)
}

func (s *Abbreviated_grant_or_revokeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserUSAGE, 0)
}

func (s *Abbreviated_grant_or_revokeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATE, 0)
}

func (s *Abbreviated_grant_or_revokeContext) Grant_option_for() IGrant_option_forContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_option_forContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_option_forContext)
}

func (s *Abbreviated_grant_or_revokeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Abbreviated_grant_or_revokeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Abbreviated_grant_or_revokeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIVILEGES, 0)
}

func (s *Abbreviated_grant_or_revokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Abbreviated_grant_or_revokeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Abbreviated_grant_or_revokeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAbbreviated_grant_or_revoke(s)
	}
}

func (s *Abbreviated_grant_or_revokeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAbbreviated_grant_or_revoke(s)
	}
}




func (p *SQLParser) Abbreviated_grant_or_revoke() (localctx IAbbreviated_grant_or_revokeContext) {
	localctx = NewAbbreviated_grant_or_revokeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SQLParserRULE_abbreviated_grant_or_revoke)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2014)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserGRANT:
		{
			p.SetState(2009)
			p.Match(SQLParserGRANT)
		}


	case SQLParserREVOKE:
		{
			p.SetState(2010)
			p.Match(SQLParserREVOKE)
		}
		p.SetState(2012)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserGRANT {
			{
				p.SetState(2011)
				p.Grant_option_for()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2071)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2016)
			p.Table_column_privilege()
		}
		p.SetState(2021)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(2017)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(2018)
				p.Table_column_privilege()
			}


			p.SetState(2023)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2024)
			p.Match(SQLParserON)
		}
		{
			p.SetState(2025)
			p.Match(SQLParserTABLES)
		}


	case 2:
		p.SetState(2039)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserUPDATE, SQLParserSELECT, SQLParserUSAGE:
			{
				p.SetState(2027)
				p.Usage_select_update()
			}
			p.SetState(2032)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(2028)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(2029)
					p.Usage_select_update()
				}


				p.SetState(2034)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}


		case SQLParserALL:
			{
				p.SetState(2035)
				p.Match(SQLParserALL)
			}
			p.SetState(2037)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserPRIVILEGES {
				{
					p.SetState(2036)
					p.Match(SQLParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2041)
			p.Match(SQLParserON)
		}
		{
			p.SetState(2042)
			p.Match(SQLParserSEQUENCES)
		}


	case 3:
		p.SetState(2048)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserEXECUTE:
			{
				p.SetState(2043)
				p.Match(SQLParserEXECUTE)
			}


		case SQLParserALL:
			{
				p.SetState(2044)
				p.Match(SQLParserALL)
			}
			p.SetState(2046)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserPRIVILEGES {
				{
					p.SetState(2045)
					p.Match(SQLParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2050)
			p.Match(SQLParserON)
		}
		{
			p.SetState(2051)
			p.Match(SQLParserFUNCTIONS)
		}


	case 4:
		p.SetState(2058)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserUSAGE:
			{
				p.SetState(2052)
				p.Match(SQLParserUSAGE)
			}


		case SQLParserCREATE:
			{
				p.SetState(2053)
				p.Match(SQLParserCREATE)
			}


		case SQLParserALL:
			{
				p.SetState(2054)
				p.Match(SQLParserALL)
			}
			p.SetState(2056)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserPRIVILEGES {
				{
					p.SetState(2055)
					p.Match(SQLParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2060)
			p.Match(SQLParserON)
		}
		{
			p.SetState(2061)
			p.Match(SQLParserSCHEMAS)
		}


	case 5:
		p.SetState(2067)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserUSAGE:
			{
				p.SetState(2062)
				p.Match(SQLParserUSAGE)
			}


		case SQLParserALL:
			{
				p.SetState(2063)
				p.Match(SQLParserALL)
			}
			p.SetState(2065)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserPRIVILEGES {
				{
					p.SetState(2064)
					p.Match(SQLParserPRIVILEGES)
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2069)
			p.Match(SQLParserON)
		}
		{
			p.SetState(2070)
			p.Match(SQLParserTYPES)
		}

	}
	p.SetState(2075)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserTO:
		{
			p.SetState(2073)
			p.Grant_to_rule()
		}


	case SQLParserFROM:
		{
			p.SetState(2074)
			p.Revoke_from_cascade_restrict()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IGrant_option_forContext is an interface to support dynamic dispatch.
type IGrant_option_forContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_option_forContext differentiates from other interfaces.
	IsGrant_option_forContext()
}

type Grant_option_forContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_option_forContext() *Grant_option_forContext {
	var p = new(Grant_option_forContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_grant_option_for
	return p
}

func (*Grant_option_forContext) IsGrant_option_forContext() {}

func NewGrant_option_forContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_option_forContext {
	var p = new(Grant_option_forContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_grant_option_for

	return p
}

func (s *Grant_option_forContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_option_forContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SQLParserGRANT, 0)
}

func (s *Grant_option_forContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTION, 0)
}

func (s *Grant_option_forContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Grant_option_forContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_option_forContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Grant_option_forContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterGrant_option_for(s)
	}
}

func (s *Grant_option_forContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitGrant_option_for(s)
	}
}




func (p *SQLParser) Grant_option_for() (localctx IGrant_option_forContext) {
	localctx = NewGrant_option_forContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SQLParserRULE_grant_option_for)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2077)
		p.Match(SQLParserGRANT)
	}
	{
		p.SetState(2078)
		p.Match(SQLParserOPTION)
	}
	{
		p.SetState(2079)
		p.Match(SQLParserFOR)
	}



	return localctx
}


// IAlter_sequence_statementContext is an interface to support dynamic dispatch.
type IAlter_sequence_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsAlter_sequence_statementContext differentiates from other interfaces.
	IsAlter_sequence_statementContext()
}

type Alter_sequence_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyAlter_sequence_statementContext() *Alter_sequence_statementContext {
	var p = new(Alter_sequence_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_sequence_statement
	return p
}

func (*Alter_sequence_statementContext) IsAlter_sequence_statementContext() {}

func NewAlter_sequence_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_sequence_statementContext {
	var p = new(Alter_sequence_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_sequence_statement

	return p
}

func (s *Alter_sequence_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_sequence_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Alter_sequence_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Alter_sequence_statementContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Alter_sequence_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_sequence_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_sequence_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_sequence_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_sequence_statementContext) AllSequence_body() []ISequence_bodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_bodyContext)(nil)).Elem())
	var tst = make([]ISequence_bodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_bodyContext)
		}
	}

	return tst
}

func (s *Alter_sequence_statementContext) Sequence_body(i int) ISequence_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_bodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_bodyContext)
}

func (s *Alter_sequence_statementContext) AllRESTART() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRESTART)
}

func (s *Alter_sequence_statementContext) RESTART(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRESTART, i)
}

func (s *Alter_sequence_statementContext) AllSigned_number_literal() []ISigned_number_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISigned_number_literalContext)(nil)).Elem())
	var tst = make([]ISigned_number_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISigned_number_literalContext)
		}
	}

	return tst
}

func (s *Alter_sequence_statementContext) Signed_number_literal(i int) ISigned_number_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_number_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISigned_number_literalContext)
}

func (s *Alter_sequence_statementContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(SQLParserWITH)
}

func (s *Alter_sequence_statementContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, i)
}

func (s *Alter_sequence_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_sequence_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_sequence_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_sequence_statement(s)
	}
}

func (s *Alter_sequence_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_sequence_statement(s)
	}
}




func (p *SQLParser) Alter_sequence_statement() (localctx IAlter_sequence_statementContext) {
	localctx = NewAlter_sequence_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SQLParserRULE_alter_sequence_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2081)
		p.Match(SQLParserSEQUENCE)
	}
	p.SetState(2083)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2082)
			p.If_exists()
		}


	}
	{
		p.SetState(2085)

		var _x = p.Schema_qualified_name()


		localctx.(*Alter_sequence_statementContext).name = _x
	}
	p.SetState(2101)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserEOF, SQLParserCACHE, SQLParserCYCLE, SQLParserINCREMENT, SQLParserMAXVALUE, SQLParserMINVALUE, SQLParserNO, SQLParserOWNED, SQLParserRESTART, SQLParserSEQUENCE, SQLParserSTART, SQLParserAS, SQLParserSEMI_COLON:
		p.SetState(2096)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCACHE || _la == SQLParserCYCLE || _la == SQLParserINCREMENT || _la == SQLParserMAXVALUE || ((((_la - 143)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 143))) & ((1 << (SQLParserMINVALUE - 143)) | (1 << (SQLParserNO - 143)) | (1 << (SQLParserOWNED - 143)))) != 0) || _la == SQLParserRESTART || _la == SQLParserSEQUENCE || _la == SQLParserSTART || _la == SQLParserAS {
			p.SetState(2094)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserCACHE, SQLParserCYCLE, SQLParserINCREMENT, SQLParserMAXVALUE, SQLParserMINVALUE, SQLParserNO, SQLParserOWNED, SQLParserSEQUENCE, SQLParserSTART, SQLParserAS:
				{
					p.SetState(2086)
					p.Sequence_body()
				}


			case SQLParserRESTART:
				{
					p.SetState(2087)
					p.Match(SQLParserRESTART)
				}
				p.SetState(2092)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserWITH || ((((_la - 597)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 597))) & ((1 << (SQLParserPLUS - 597)) | (1 << (SQLParserMINUS - 597)) | (1 << (SQLParserNUMBER_LITERAL - 597)))) != 0) {
					p.SetState(2089)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					if _la == SQLParserWITH {
						{
							p.SetState(2088)
							p.Match(SQLParserWITH)
						}

					}
					{
						p.SetState(2091)
						p.Signed_number_literal()
					}

				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2098)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case SQLParserSET:
		{
			p.SetState(2099)
			p.Set_schema()
		}


	case SQLParserRENAME:
		{
			p.SetState(2100)
			p.Rename_to()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IAlter_view_statementContext is an interface to support dynamic dispatch.
type IAlter_view_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsAlter_view_statementContext differentiates from other interfaces.
	IsAlter_view_statementContext()
}

type Alter_view_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyAlter_view_statementContext() *Alter_view_statementContext {
	var p = new(Alter_view_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_view_statement
	return p
}

func (*Alter_view_statementContext) IsAlter_view_statementContext() {}

func NewAlter_view_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_view_statementContext {
	var p = new(Alter_view_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_view_statement

	return p
}

func (s *Alter_view_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_view_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Alter_view_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Alter_view_statementContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Alter_view_statementContext) Alter_view_action() IAlter_view_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_view_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_view_actionContext)
}

func (s *Alter_view_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_view_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_view_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_view_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_view_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_view_statement(s)
	}
}

func (s *Alter_view_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_view_statement(s)
	}
}




func (p *SQLParser) Alter_view_statement() (localctx IAlter_view_statementContext) {
	localctx = NewAlter_view_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SQLParserRULE_alter_view_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2103)
		p.Match(SQLParserVIEW)
	}
	p.SetState(2105)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2104)
			p.If_exists()
		}


	}
	{
		p.SetState(2107)

		var _x = p.Schema_qualified_name()


		localctx.(*Alter_view_statementContext).name = _x
	}
	{
		p.SetState(2108)
		p.Alter_view_action()
	}



	return localctx
}


// IAlter_view_actionContext is an interface to support dynamic dispatch.
type IAlter_view_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn_name returns the column_name rule contexts.
	GetColumn_name() IIdentifierContext


	// SetColumn_name sets the column_name rule contexts.
	SetColumn_name(IIdentifierContext)


	// IsAlter_view_actionContext differentiates from other interfaces.
	IsAlter_view_actionContext()
}

type Alter_view_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	column_name IIdentifierContext 
}

func NewEmptyAlter_view_actionContext() *Alter_view_actionContext {
	var p = new(Alter_view_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_view_action
	return p
}

func (*Alter_view_actionContext) IsAlter_view_actionContext() {}

func NewAlter_view_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_view_actionContext {
	var p = new(Alter_view_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_view_action

	return p
}

func (s *Alter_view_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_view_actionContext) GetColumn_name() IIdentifierContext { return s.column_name }


func (s *Alter_view_actionContext) SetColumn_name(v IIdentifierContext) { s.column_name = v }


func (s *Alter_view_actionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SQLParserALTER, 0)
}

func (s *Alter_view_actionContext) Set_def_column() ISet_def_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_def_columnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_def_columnContext)
}

func (s *Alter_view_actionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_view_actionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_view_actionContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Alter_view_actionContext) Drop_def() IDrop_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_defContext)
}

func (s *Alter_view_actionContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SQLParserRENAME, 0)
}

func (s *Alter_view_actionContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Alter_view_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_view_actionContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_view_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Alter_view_actionContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Alter_view_actionContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Alter_view_actionContext) Names_in_parens() INames_in_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_in_parensContext)
}

func (s *Alter_view_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_view_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_view_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_view_action(s)
	}
}

func (s *Alter_view_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_view_action(s)
	}
}




func (p *SQLParser) Alter_view_action() (localctx IAlter_view_actionContext) {
	localctx = NewAlter_view_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SQLParserRULE_alter_view_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2138)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2110)
			p.Match(SQLParserALTER)
		}
		p.SetState(2112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(2111)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(2114)

			var _x = p.Identifier()


			localctx.(*Alter_view_actionContext).column_name = _x
		}
		{
			p.SetState(2115)
			p.Set_def_column()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2117)
			p.Match(SQLParserALTER)
		}
		p.SetState(2119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(2118)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(2121)

			var _x = p.Identifier()


			localctx.(*Alter_view_actionContext).column_name = _x
		}
		{
			p.SetState(2122)
			p.Drop_def()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2124)
			p.Match(SQLParserRENAME)
		}
		p.SetState(2126)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(2125)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(2128)
			p.Identifier()
		}
		{
			p.SetState(2129)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(2130)
			p.Identifier()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2132)
			p.Rename_to()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2133)
			p.Set_schema()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2134)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(2135)
			p.Storage_parameter()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2136)
			p.Match(SQLParserRESET)
		}
		{
			p.SetState(2137)
			p.Names_in_parens()
		}

	}


	return localctx
}


// IAlter_materialized_view_statementContext is an interface to support dynamic dispatch.
type IAlter_materialized_view_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_materialized_view_statementContext differentiates from other interfaces.
	IsAlter_materialized_view_statementContext()
}

type Alter_materialized_view_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_materialized_view_statementContext() *Alter_materialized_view_statementContext {
	var p = new(Alter_materialized_view_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_materialized_view_statement
	return p
}

func (*Alter_materialized_view_statementContext) IsAlter_materialized_view_statementContext() {}

func NewAlter_materialized_view_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_materialized_view_statementContext {
	var p = new(Alter_materialized_view_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_materialized_view_statement

	return p
}

func (s *Alter_materialized_view_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_materialized_view_statementContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Alter_materialized_view_statementContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Alter_materialized_view_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_materialized_view_statementContext) Alter_materialized_view_action() IAlter_materialized_view_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_materialized_view_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_materialized_view_actionContext)
}

func (s *Alter_materialized_view_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_materialized_view_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Alter_materialized_view_statementContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Alter_materialized_view_statementContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Alter_materialized_view_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_materialized_view_statementContext) Set_tablespace() ISet_tablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_tablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_tablespaceContext)
}

func (s *Alter_materialized_view_statementContext) OWNED() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNED, 0)
}

func (s *Alter_materialized_view_statementContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Alter_materialized_view_statementContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_materialized_view_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_materialized_view_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_materialized_view_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_materialized_view_statement(s)
	}
}

func (s *Alter_materialized_view_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_materialized_view_statement(s)
	}
}




func (p *SQLParser) Alter_materialized_view_statement() (localctx IAlter_materialized_view_statementContext) {
	localctx = NewAlter_materialized_view_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SQLParserRULE_alter_materialized_view_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2161)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2140)
			p.Match(SQLParserMATERIALIZED)
		}
		{
			p.SetState(2141)
			p.Match(SQLParserVIEW)
		}
		p.SetState(2143)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2142)
				p.If_exists()
			}


		}
		{
			p.SetState(2145)
			p.Schema_qualified_name()
		}
		{
			p.SetState(2146)
			p.Alter_materialized_view_action()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2148)
			p.Match(SQLParserMATERIALIZED)
		}
		{
			p.SetState(2149)
			p.Match(SQLParserVIEW)
		}
		{
			p.SetState(2150)
			p.Match(SQLParserALL)
		}
		{
			p.SetState(2151)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(2152)
			p.Match(SQLParserTABLESPACE)
		}
		{
			p.SetState(2153)
			p.Identifier()
		}
		p.SetState(2157)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserOWNED {
			{
				p.SetState(2154)
				p.Match(SQLParserOWNED)
			}
			{
				p.SetState(2155)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(2156)
				p.Identifier_list()
			}

		}
		{
			p.SetState(2159)
			p.Set_tablespace()
		}

	}


	return localctx
}


// IAlter_materialized_view_actionContext is an interface to support dynamic dispatch.
type IAlter_materialized_view_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_materialized_view_actionContext differentiates from other interfaces.
	IsAlter_materialized_view_actionContext()
}

type Alter_materialized_view_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_materialized_view_actionContext() *Alter_materialized_view_actionContext {
	var p = new(Alter_materialized_view_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_materialized_view_action
	return p
}

func (*Alter_materialized_view_actionContext) IsAlter_materialized_view_actionContext() {}

func NewAlter_materialized_view_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_materialized_view_actionContext {
	var p = new(Alter_materialized_view_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_materialized_view_action

	return p
}

func (s *Alter_materialized_view_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_materialized_view_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_materialized_view_actionContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_materialized_view_actionContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SQLParserRENAME, 0)
}

func (s *Alter_materialized_view_actionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_materialized_view_actionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_materialized_view_actionContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Alter_materialized_view_actionContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Alter_materialized_view_actionContext) DEPENDS() antlr.TerminalNode {
	return s.GetToken(SQLParserDEPENDS, 0)
}

func (s *Alter_materialized_view_actionContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Alter_materialized_view_actionContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Alter_materialized_view_actionContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Alter_materialized_view_actionContext) AllMaterialized_view_action() []IMaterialized_view_actionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMaterialized_view_actionContext)(nil)).Elem())
	var tst = make([]IMaterialized_view_actionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMaterialized_view_actionContext)
		}
	}

	return tst
}

func (s *Alter_materialized_view_actionContext) Materialized_view_action(i int) IMaterialized_view_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMaterialized_view_actionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMaterialized_view_actionContext)
}

func (s *Alter_materialized_view_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alter_materialized_view_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alter_materialized_view_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_materialized_view_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_materialized_view_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_materialized_view_action(s)
	}
}

func (s *Alter_materialized_view_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_materialized_view_action(s)
	}
}




func (p *SQLParser) Alter_materialized_view_action() (localctx IAlter_materialized_view_actionContext) {
	localctx = NewAlter_materialized_view_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SQLParserRULE_alter_materialized_view_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2188)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2163)
			p.Rename_to()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2164)
			p.Set_schema()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2165)
			p.Match(SQLParserRENAME)
		}
		p.SetState(2167)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(2166)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(2169)
			p.Identifier()
		}
		{
			p.SetState(2170)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(2171)
			p.Identifier()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(2174)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(2173)
				p.Match(SQLParserNO)
			}

		}
		{
			p.SetState(2176)
			p.Match(SQLParserDEPENDS)
		}
		{
			p.SetState(2177)
			p.Match(SQLParserON)
		}
		{
			p.SetState(2178)
			p.Match(SQLParserEXTENSION)
		}
		{
			p.SetState(2179)
			p.Identifier()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2180)
			p.Materialized_view_action()
		}
		p.SetState(2185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(2181)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(2182)
				p.Materialized_view_action()
			}


			p.SetState(2187)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IMaterialized_view_actionContext is an interface to support dynamic dispatch.
type IMaterialized_view_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndex_name returns the index_name rule contexts.
	GetIndex_name() ISchema_qualified_nameContext


	// SetIndex_name sets the index_name rule contexts.
	SetIndex_name(ISchema_qualified_nameContext)


	// IsMaterialized_view_actionContext differentiates from other interfaces.
	IsMaterialized_view_actionContext()
}

type Materialized_view_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	index_name ISchema_qualified_nameContext 
}

func NewEmptyMaterialized_view_actionContext() *Materialized_view_actionContext {
	var p = new(Materialized_view_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_materialized_view_action
	return p
}

func (*Materialized_view_actionContext) IsMaterialized_view_actionContext() {}

func NewMaterialized_view_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Materialized_view_actionContext {
	var p = new(Materialized_view_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_materialized_view_action

	return p
}

func (s *Materialized_view_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Materialized_view_actionContext) GetIndex_name() ISchema_qualified_nameContext { return s.index_name }


func (s *Materialized_view_actionContext) SetIndex_name(v ISchema_qualified_nameContext) { s.index_name = v }


func (s *Materialized_view_actionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SQLParserALTER, 0)
}

func (s *Materialized_view_actionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Materialized_view_actionContext) Set_statistics() ISet_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statisticsContext)
}

func (s *Materialized_view_actionContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Materialized_view_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Materialized_view_actionContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Materialized_view_actionContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Materialized_view_actionContext) Names_in_parens() INames_in_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_in_parensContext)
}

func (s *Materialized_view_actionContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTORAGE, 0)
}

func (s *Materialized_view_actionContext) Storage_option() IStorage_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_optionContext)
}

func (s *Materialized_view_actionContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(SQLParserCLUSTER, 0)
}

func (s *Materialized_view_actionContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Materialized_view_actionContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Materialized_view_actionContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHOUT, 0)
}

func (s *Materialized_view_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Materialized_view_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Materialized_view_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterMaterialized_view_action(s)
	}
}

func (s *Materialized_view_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitMaterialized_view_action(s)
	}
}




func (p *SQLParser) Materialized_view_action() (localctx IMaterialized_view_actionContext) {
	localctx = NewMaterialized_view_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SQLParserRULE_materialized_view_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2232)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2190)
			p.Match(SQLParserALTER)
		}
		p.SetState(2192)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(2191)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(2194)
			p.Identifier()
		}
		{
			p.SetState(2195)
			p.Set_statistics()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2197)
			p.Match(SQLParserALTER)
		}
		p.SetState(2199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(2198)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(2201)
			p.Identifier()
		}
		{
			p.SetState(2202)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(2203)
			p.Storage_parameter()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2205)
			p.Match(SQLParserALTER)
		}
		p.SetState(2207)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(2206)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(2209)
			p.Identifier()
		}
		{
			p.SetState(2210)
			p.Match(SQLParserRESET)
		}
		{
			p.SetState(2211)
			p.Names_in_parens()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2213)
			p.Match(SQLParserALTER)
		}
		p.SetState(2215)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLUMN {
			{
				p.SetState(2214)
				p.Match(SQLParserCOLUMN)
			}

		}
		{
			p.SetState(2217)
			p.Identifier()
		}
		{
			p.SetState(2218)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(2219)
			p.Match(SQLParserSTORAGE)
		}
		{
			p.SetState(2220)
			p.Storage_option()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2222)
			p.Match(SQLParserCLUSTER)
		}
		{
			p.SetState(2223)
			p.Match(SQLParserON)
		}
		{
			p.SetState(2224)

			var _x = p.Schema_qualified_name()


			localctx.(*Materialized_view_actionContext).index_name = _x
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2225)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(2226)
			p.Match(SQLParserWITHOUT)
		}
		{
			p.SetState(2227)
			p.Match(SQLParserCLUSTER)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2228)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(2229)
			p.Storage_parameter()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2230)
			p.Match(SQLParserRESET)
		}
		{
			p.SetState(2231)
			p.Names_in_parens()
		}

	}


	return localctx
}


// IAlter_event_trigger_statementContext is an interface to support dynamic dispatch.
type IAlter_event_trigger_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsAlter_event_trigger_statementContext differentiates from other interfaces.
	IsAlter_event_trigger_statementContext()
}

type Alter_event_trigger_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyAlter_event_trigger_statementContext() *Alter_event_trigger_statementContext {
	var p = new(Alter_event_trigger_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_event_trigger_statement
	return p
}

func (*Alter_event_trigger_statementContext) IsAlter_event_trigger_statementContext() {}

func NewAlter_event_trigger_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_event_trigger_statementContext {
	var p = new(Alter_event_trigger_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_event_trigger_statement

	return p
}

func (s *Alter_event_trigger_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_event_trigger_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Alter_event_trigger_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Alter_event_trigger_statementContext) EVENT() antlr.TerminalNode {
	return s.GetToken(SQLParserEVENT, 0)
}

func (s *Alter_event_trigger_statementContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Alter_event_trigger_statementContext) Alter_event_trigger_action() IAlter_event_trigger_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_event_trigger_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_event_trigger_actionContext)
}

func (s *Alter_event_trigger_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_event_trigger_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_event_trigger_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_event_trigger_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_event_trigger_statement(s)
	}
}

func (s *Alter_event_trigger_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_event_trigger_statement(s)
	}
}




func (p *SQLParser) Alter_event_trigger_statement() (localctx IAlter_event_trigger_statementContext) {
	localctx = NewAlter_event_trigger_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SQLParserRULE_alter_event_trigger_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2234)
		p.Match(SQLParserEVENT)
	}
	{
		p.SetState(2235)
		p.Match(SQLParserTRIGGER)
	}
	{
		p.SetState(2236)

		var _x = p.Identifier()


		localctx.(*Alter_event_trigger_statementContext).name = _x
	}
	{
		p.SetState(2237)
		p.Alter_event_trigger_action()
	}



	return localctx
}


// IAlter_event_trigger_actionContext is an interface to support dynamic dispatch.
type IAlter_event_trigger_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_event_trigger_actionContext differentiates from other interfaces.
	IsAlter_event_trigger_actionContext()
}

type Alter_event_trigger_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_event_trigger_actionContext() *Alter_event_trigger_actionContext {
	var p = new(Alter_event_trigger_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_event_trigger_action
	return p
}

func (*Alter_event_trigger_actionContext) IsAlter_event_trigger_actionContext() {}

func NewAlter_event_trigger_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_event_trigger_actionContext {
	var p = new(Alter_event_trigger_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_event_trigger_action

	return p
}

func (s *Alter_event_trigger_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_event_trigger_actionContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDISABLE, 0)
}

func (s *Alter_event_trigger_actionContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserENABLE, 0)
}

func (s *Alter_event_trigger_actionContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLICA, 0)
}

func (s *Alter_event_trigger_actionContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(SQLParserALWAYS, 0)
}

func (s *Alter_event_trigger_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_event_trigger_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_event_trigger_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_event_trigger_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_event_trigger_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_event_trigger_action(s)
	}
}

func (s *Alter_event_trigger_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_event_trigger_action(s)
	}
}




func (p *SQLParser) Alter_event_trigger_action() (localctx IAlter_event_trigger_actionContext) {
	localctx = NewAlter_event_trigger_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SQLParserRULE_alter_event_trigger_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2246)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserDISABLE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2239)
			p.Match(SQLParserDISABLE)
		}


	case SQLParserENABLE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2240)
			p.Match(SQLParserENABLE)
		}
		p.SetState(2242)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserALWAYS || _la == SQLParserREPLICA {
			{
				p.SetState(2241)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserALWAYS || _la == SQLParserREPLICA) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}


	case SQLParserOWNER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2244)
			p.Owner_to()
		}


	case SQLParserRENAME:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2245)
			p.Rename_to()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlter_type_statementContext is an interface to support dynamic dispatch.
type IAlter_type_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetNew_enum_value returns the new_enum_value rule contexts.
	GetNew_enum_value() ICharacter_stringContext

	// GetExisting_enum_value returns the existing_enum_value rule contexts.
	GetExisting_enum_value() ICharacter_stringContext

	// GetAttribute_name returns the attribute_name rule contexts.
	GetAttribute_name() IIdentifierContext

	// GetNew_attribute_name returns the new_attribute_name rule contexts.
	GetNew_attribute_name() IIdentifierContext

	// GetExisting_enum_name returns the existing_enum_name rule contexts.
	GetExisting_enum_name() ICharacter_stringContext

	// GetNew_enum_name returns the new_enum_name rule contexts.
	GetNew_enum_name() ICharacter_stringContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetNew_enum_value sets the new_enum_value rule contexts.
	SetNew_enum_value(ICharacter_stringContext)

	// SetExisting_enum_value sets the existing_enum_value rule contexts.
	SetExisting_enum_value(ICharacter_stringContext)

	// SetAttribute_name sets the attribute_name rule contexts.
	SetAttribute_name(IIdentifierContext)

	// SetNew_attribute_name sets the new_attribute_name rule contexts.
	SetNew_attribute_name(IIdentifierContext)

	// SetExisting_enum_name sets the existing_enum_name rule contexts.
	SetExisting_enum_name(ICharacter_stringContext)

	// SetNew_enum_name sets the new_enum_name rule contexts.
	SetNew_enum_name(ICharacter_stringContext)


	// IsAlter_type_statementContext differentiates from other interfaces.
	IsAlter_type_statementContext()
}

type Alter_type_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	new_enum_value ICharacter_stringContext 
	existing_enum_value ICharacter_stringContext 
	attribute_name IIdentifierContext 
	new_attribute_name IIdentifierContext 
	existing_enum_name ICharacter_stringContext 
	new_enum_name ICharacter_stringContext 
}

func NewEmptyAlter_type_statementContext() *Alter_type_statementContext {
	var p = new(Alter_type_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_type_statement
	return p
}

func (*Alter_type_statementContext) IsAlter_type_statementContext() {}

func NewAlter_type_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_type_statementContext {
	var p = new(Alter_type_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_type_statement

	return p
}

func (s *Alter_type_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_type_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Alter_type_statementContext) GetNew_enum_value() ICharacter_stringContext { return s.new_enum_value }

func (s *Alter_type_statementContext) GetExisting_enum_value() ICharacter_stringContext { return s.existing_enum_value }

func (s *Alter_type_statementContext) GetAttribute_name() IIdentifierContext { return s.attribute_name }

func (s *Alter_type_statementContext) GetNew_attribute_name() IIdentifierContext { return s.new_attribute_name }

func (s *Alter_type_statementContext) GetExisting_enum_name() ICharacter_stringContext { return s.existing_enum_name }

func (s *Alter_type_statementContext) GetNew_enum_name() ICharacter_stringContext { return s.new_enum_name }


func (s *Alter_type_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Alter_type_statementContext) SetNew_enum_value(v ICharacter_stringContext) { s.new_enum_value = v }

func (s *Alter_type_statementContext) SetExisting_enum_value(v ICharacter_stringContext) { s.existing_enum_value = v }

func (s *Alter_type_statementContext) SetAttribute_name(v IIdentifierContext) { s.attribute_name = v }

func (s *Alter_type_statementContext) SetNew_attribute_name(v IIdentifierContext) { s.new_attribute_name = v }

func (s *Alter_type_statementContext) SetExisting_enum_name(v ICharacter_stringContext) { s.existing_enum_name = v }

func (s *Alter_type_statementContext) SetNew_enum_name(v ICharacter_stringContext) { s.new_enum_name = v }


func (s *Alter_type_statementContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Alter_type_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_type_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_type_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_type_statementContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Alter_type_statementContext) VALUE() antlr.TerminalNode {
	return s.GetToken(SQLParserVALUE, 0)
}

func (s *Alter_type_statementContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SQLParserRENAME, 0)
}

func (s *Alter_type_statementContext) ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserATTRIBUTE, 0)
}

func (s *Alter_type_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Alter_type_statementContext) AllType_action() []IType_actionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_actionContext)(nil)).Elem())
	var tst = make([]IType_actionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_actionContext)
		}
	}

	return tst
}

func (s *Alter_type_statementContext) Type_action(i int) IType_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_actionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_actionContext)
}

func (s *Alter_type_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Alter_type_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Alter_type_statementContext) AllType_property() []IType_propertyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_propertyContext)(nil)).Elem())
	var tst = make([]IType_propertyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_propertyContext)
		}
	}

	return tst
}

func (s *Alter_type_statementContext) Type_property(i int) IType_propertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_propertyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_propertyContext)
}

func (s *Alter_type_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Alter_type_statementContext) AllCharacter_string() []ICharacter_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem())
	var tst = make([]ICharacter_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICharacter_stringContext)
		}
	}

	return tst
}

func (s *Alter_type_statementContext) Character_string(i int) ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Alter_type_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_type_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_type_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Alter_type_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Alter_type_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alter_type_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alter_type_statementContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(SQLParserBEFORE, 0)
}

func (s *Alter_type_statementContext) AFTER() antlr.TerminalNode {
	return s.GetToken(SQLParserAFTER, 0)
}

func (s *Alter_type_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_type_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_type_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_type_statement(s)
	}
}

func (s *Alter_type_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_type_statement(s)
	}
}




func (p *SQLParser) Alter_type_statement() (localctx IAlter_type_statementContext) {
	localctx = NewAlter_type_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SQLParserRULE_alter_type_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2248)
		p.Match(SQLParserTYPE)
	}
	{
		p.SetState(2249)

		var _x = p.Schema_qualified_name()


		localctx.(*Alter_type_statementContext).name = _x
	}
	p.SetState(2296)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2250)
			p.Set_schema()
		}


	case 2:
		{
			p.SetState(2251)
			p.Rename_to()
		}


	case 3:
		{
			p.SetState(2252)
			p.Match(SQLParserADD)
		}
		{
			p.SetState(2253)
			p.Match(SQLParserVALUE)
		}
		p.SetState(2255)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserIF {
			{
				p.SetState(2254)
				p.If_not_exists()
			}

		}
		{
			p.SetState(2257)

			var _x = p.Character_string()


			localctx.(*Alter_type_statementContext).new_enum_value = _x
		}
		p.SetState(2260)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAFTER || _la == SQLParserBEFORE {
			{
				p.SetState(2258)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserAFTER || _la == SQLParserBEFORE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(2259)

				var _x = p.Character_string()


				localctx.(*Alter_type_statementContext).existing_enum_value = _x
			}

		}


	case 4:
		{
			p.SetState(2262)
			p.Match(SQLParserRENAME)
		}
		{
			p.SetState(2263)
			p.Match(SQLParserATTRIBUTE)
		}
		{
			p.SetState(2264)

			var _x = p.Identifier()


			localctx.(*Alter_type_statementContext).attribute_name = _x
		}
		{
			p.SetState(2265)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(2266)

			var _x = p.Identifier()


			localctx.(*Alter_type_statementContext).new_attribute_name = _x
		}
		p.SetState(2268)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
			{
				p.SetState(2267)
				p.Cascade_restrict()
			}

		}


	case 5:
		{
			p.SetState(2270)
			p.Match(SQLParserRENAME)
		}
		{
			p.SetState(2271)
			p.Match(SQLParserVALUE)
		}
		{
			p.SetState(2272)

			var _x = p.Character_string()


			localctx.(*Alter_type_statementContext).existing_enum_name = _x
		}
		{
			p.SetState(2273)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(2274)

			var _x = p.Character_string()


			localctx.(*Alter_type_statementContext).new_enum_name = _x
		}


	case 6:
		{
			p.SetState(2276)
			p.Type_action()
		}
		p.SetState(2281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(2277)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(2278)
				p.Type_action()
			}


			p.SetState(2283)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 7:
		{
			p.SetState(2284)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(2285)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(2286)
			p.Type_property()
		}
		p.SetState(2291)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(2287)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(2288)
				p.Type_property()
			}


			p.SetState(2293)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2294)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}



	return localctx
}


// IAlter_domain_statementContext is an interface to support dynamic dispatch.
type IAlter_domain_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNot_valid returns the not_valid token.
	GetNot_valid() antlr.Token 


	// SetNot_valid sets the not_valid token.
	SetNot_valid(antlr.Token) 


	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetDom_constraint returns the dom_constraint rule contexts.
	GetDom_constraint() IDomain_constraintContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetDom_constraint sets the dom_constraint rule contexts.
	SetDom_constraint(IDomain_constraintContext)


	// IsAlter_domain_statementContext differentiates from other interfaces.
	IsAlter_domain_statementContext()
}

type Alter_domain_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	dom_constraint IDomain_constraintContext 
	not_valid antlr.Token
}

func NewEmptyAlter_domain_statementContext() *Alter_domain_statementContext {
	var p = new(Alter_domain_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_domain_statement
	return p
}

func (*Alter_domain_statementContext) IsAlter_domain_statementContext() {}

func NewAlter_domain_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_domain_statementContext {
	var p = new(Alter_domain_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_domain_statement

	return p
}

func (s *Alter_domain_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_domain_statementContext) GetNot_valid() antlr.Token { return s.not_valid }


func (s *Alter_domain_statementContext) SetNot_valid(v antlr.Token) { s.not_valid = v }


func (s *Alter_domain_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Alter_domain_statementContext) GetDom_constraint() IDomain_constraintContext { return s.dom_constraint }


func (s *Alter_domain_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Alter_domain_statementContext) SetDom_constraint(v IDomain_constraintContext) { s.dom_constraint = v }


func (s *Alter_domain_statementContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Alter_domain_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Alter_domain_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_domain_statementContext) Set_def_column() ISet_def_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_def_columnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_def_columnContext)
}

func (s *Alter_domain_statementContext) Drop_def() IDrop_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_defContext)
}

func (s *Alter_domain_statementContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Alter_domain_statementContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Alter_domain_statementContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Alter_domain_statementContext) Drop_constraint() IDrop_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_constraintContext)
}

func (s *Alter_domain_statementContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SQLParserRENAME, 0)
}

func (s *Alter_domain_statementContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Alter_domain_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Alter_domain_statementContext) Validate_constraint() IValidate_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValidate_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValidate_constraintContext)
}

func (s *Alter_domain_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_domain_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_domain_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Alter_domain_statementContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Alter_domain_statementContext) Domain_constraint() IDomain_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDomain_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDomain_constraintContext)
}

func (s *Alter_domain_statementContext) VALID() antlr.TerminalNode {
	return s.GetToken(SQLParserVALID, 0)
}

func (s *Alter_domain_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_domain_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_domain_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_domain_statement(s)
	}
}

func (s *Alter_domain_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_domain_statement(s)
	}
}




func (p *SQLParser) Alter_domain_statement() (localctx IAlter_domain_statementContext) {
	localctx = NewAlter_domain_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SQLParserRULE_alter_domain_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2298)
		p.Match(SQLParserDOMAIN)
	}
	{
		p.SetState(2299)

		var _x = p.Schema_qualified_name()


		localctx.(*Alter_domain_statementContext).name = _x
	}
	p.SetState(2321)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2300)
			p.Set_def_column()
		}


	case 2:
		{
			p.SetState(2301)
			p.Drop_def()
		}


	case 3:
		{
			p.SetState(2302)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDROP || _la == SQLParserSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2303)
			p.Match(SQLParserNOT)
		}
		{
			p.SetState(2304)
			p.Match(SQLParserNULL)
		}


	case 4:
		{
			p.SetState(2305)
			p.Match(SQLParserADD)
		}
		{
			p.SetState(2306)

			var _x = p.Domain_constraint()


			localctx.(*Alter_domain_statementContext).dom_constraint = _x
		}
		p.SetState(2309)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT {
			{
				p.SetState(2307)
				p.Match(SQLParserNOT)
			}
			{
				p.SetState(2308)

				var _m = p.Match(SQLParserVALID)

				localctx.(*Alter_domain_statementContext).not_valid = _m
			}

		}


	case 5:
		{
			p.SetState(2311)
			p.Drop_constraint()
		}


	case 6:
		{
			p.SetState(2312)
			p.Match(SQLParserRENAME)
		}
		{
			p.SetState(2313)
			p.Match(SQLParserCONSTRAINT)
		}
		{
			p.SetState(2314)
			p.Schema_qualified_name()
		}
		{
			p.SetState(2315)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(2316)
			p.Schema_qualified_name()
		}


	case 7:
		{
			p.SetState(2318)
			p.Validate_constraint()
		}


	case 8:
		{
			p.SetState(2319)
			p.Rename_to()
		}


	case 9:
		{
			p.SetState(2320)
			p.Set_schema()
		}

	}



	return localctx
}


// IAlter_server_statementContext is an interface to support dynamic dispatch.
type IAlter_server_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_server_statementContext differentiates from other interfaces.
	IsAlter_server_statementContext()
}

type Alter_server_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_server_statementContext() *Alter_server_statementContext {
	var p = new(Alter_server_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_server_statement
	return p
}

func (*Alter_server_statementContext) IsAlter_server_statementContext() {}

func NewAlter_server_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_statementContext {
	var p = new(Alter_server_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_server_statement

	return p
}

func (s *Alter_server_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_statementContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Alter_server_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_server_statementContext) Alter_server_action() IAlter_server_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_actionContext)
}

func (s *Alter_server_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_server_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_server_statement(s)
	}
}

func (s *Alter_server_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_server_statement(s)
	}
}




func (p *SQLParser) Alter_server_statement() (localctx IAlter_server_statementContext) {
	localctx = NewAlter_server_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SQLParserRULE_alter_server_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2323)
		p.Match(SQLParserSERVER)
	}
	{
		p.SetState(2324)
		p.Identifier()
	}
	{
		p.SetState(2325)
		p.Alter_server_action()
	}



	return localctx
}


// IAlter_server_actionContext is an interface to support dynamic dispatch.
type IAlter_server_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_server_actionContext differentiates from other interfaces.
	IsAlter_server_actionContext()
}

type Alter_server_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_server_actionContext() *Alter_server_actionContext {
	var p = new(Alter_server_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_server_action
	return p
}

func (*Alter_server_actionContext) IsAlter_server_actionContext() {}

func NewAlter_server_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_actionContext {
	var p = new(Alter_server_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_server_action

	return p
}

func (s *Alter_server_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_actionContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Alter_server_actionContext) VERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserVERSION, 0)
}

func (s *Alter_server_actionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Alter_server_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_server_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_server_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_server_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_server_action(s)
	}
}

func (s *Alter_server_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_server_action(s)
	}
}




func (p *SQLParser) Alter_server_action() (localctx IAlter_server_actionContext) {
	localctx = NewAlter_server_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SQLParserRULE_alter_server_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2336)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2329)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserVERSION {
			{
				p.SetState(2327)
				p.Match(SQLParserVERSION)
			}
			{
				p.SetState(2328)
				p.Character_string()
			}

		}
		{
			p.SetState(2331)
			p.Define_foreign_options()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2332)
			p.Match(SQLParserVERSION)
		}
		{
			p.SetState(2333)
			p.Character_string()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2334)
			p.Owner_to()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2335)
			p.Rename_to()
		}

	}


	return localctx
}


// IAlter_fts_statementContext is an interface to support dynamic dispatch.
type IAlter_fts_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsAlter_fts_statementContext differentiates from other interfaces.
	IsAlter_fts_statementContext()
}

type Alter_fts_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyAlter_fts_statementContext() *Alter_fts_statementContext {
	var p = new(Alter_fts_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_fts_statement
	return p
}

func (*Alter_fts_statementContext) IsAlter_fts_statementContext() {}

func NewAlter_fts_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_fts_statementContext {
	var p = new(Alter_fts_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_fts_statement

	return p
}

func (s *Alter_fts_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_fts_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Alter_fts_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Alter_fts_statementContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Alter_fts_statementContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Alter_fts_statementContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(SQLParserDICTIONARY, 0)
}

func (s *Alter_fts_statementContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Alter_fts_statementContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFIGURATION, 0)
}

func (s *Alter_fts_statementContext) Alter_fts_configuration() IAlter_fts_configurationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_fts_configurationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_fts_configurationContext)
}

func (s *Alter_fts_statementContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPLATE, 0)
}

func (s *Alter_fts_statementContext) PARSER() antlr.TerminalNode {
	return s.GetToken(SQLParserPARSER, 0)
}

func (s *Alter_fts_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_fts_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_fts_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_fts_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_fts_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_fts_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_fts_statement(s)
	}
}

func (s *Alter_fts_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_fts_statement(s)
	}
}




func (p *SQLParser) Alter_fts_statement() (localctx IAlter_fts_statementContext) {
	localctx = NewAlter_fts_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SQLParserRULE_alter_fts_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2338)
		p.Match(SQLParserTEXT)
	}
	{
		p.SetState(2339)
		p.Match(SQLParserSEARCH)
	}
	p.SetState(2354)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2340)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCONFIGURATION || _la == SQLParserDICTIONARY || _la == SQLParserPARSER || _la == SQLParserTEMPLATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2341)

			var _x = p.Schema_qualified_name()


			localctx.(*Alter_fts_statementContext).name = _x
		}
		p.SetState(2344)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserRENAME:
			{
				p.SetState(2342)
				p.Rename_to()
			}


		case SQLParserSET:
			{
				p.SetState(2343)
				p.Set_schema()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 2:
		{
			p.SetState(2346)
			p.Match(SQLParserDICTIONARY)
		}
		{
			p.SetState(2347)

			var _x = p.Schema_qualified_name()


			localctx.(*Alter_fts_statementContext).name = _x
		}
		{
			p.SetState(2348)
			p.Storage_parameter()
		}


	case 3:
		{
			p.SetState(2350)
			p.Match(SQLParserCONFIGURATION)
		}
		{
			p.SetState(2351)

			var _x = p.Schema_qualified_name()


			localctx.(*Alter_fts_statementContext).name = _x
		}
		{
			p.SetState(2352)
			p.Alter_fts_configuration()
		}

	}



	return localctx
}


// IAlter_fts_configurationContext is an interface to support dynamic dispatch.
type IAlter_fts_configurationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_fts_configurationContext differentiates from other interfaces.
	IsAlter_fts_configurationContext()
}

type Alter_fts_configurationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_fts_configurationContext() *Alter_fts_configurationContext {
	var p = new(Alter_fts_configurationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_fts_configuration
	return p
}

func (*Alter_fts_configurationContext) IsAlter_fts_configurationContext() {}

func NewAlter_fts_configurationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_fts_configurationContext {
	var p = new(Alter_fts_configurationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_fts_configuration

	return p
}

func (s *Alter_fts_configurationContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_fts_configurationContext) MAPPING() antlr.TerminalNode {
	return s.GetToken(SQLParserMAPPING, 0)
}

func (s *Alter_fts_configurationContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Alter_fts_configurationContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_fts_configurationContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Alter_fts_configurationContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Alter_fts_configurationContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_fts_configurationContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Alter_fts_configurationContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SQLParserALTER, 0)
}

func (s *Alter_fts_configurationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alter_fts_configurationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alter_fts_configurationContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLACE, 0)
}

func (s *Alter_fts_configurationContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Alter_fts_configurationContext) IF() antlr.TerminalNode {
	return s.GetToken(SQLParserIF, 0)
}

func (s *Alter_fts_configurationContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLParserEXISTS, 0)
}

func (s *Alter_fts_configurationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_fts_configurationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_fts_configurationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_fts_configuration(s)
	}
}

func (s *Alter_fts_configurationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_fts_configuration(s)
	}
}




func (p *SQLParser) Alter_fts_configuration() (localctx IAlter_fts_configurationContext) {
	localctx = NewAlter_fts_configurationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SQLParserRULE_alter_fts_configuration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2388)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2356)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserADD || _la == SQLParserALTER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2357)
			p.Match(SQLParserMAPPING)
		}
		{
			p.SetState(2358)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(2359)
			p.Identifier_list()
		}
		{
			p.SetState(2360)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(2361)
			p.Schema_qualified_name()
		}
		p.SetState(2366)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(2362)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(2363)
				p.Schema_qualified_name()
			}


			p.SetState(2368)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2369)
			p.Match(SQLParserALTER)
		}
		{
			p.SetState(2370)
			p.Match(SQLParserMAPPING)
		}
		p.SetState(2373)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFOR {
			{
				p.SetState(2371)
				p.Match(SQLParserFOR)
			}
			{
				p.SetState(2372)
				p.Identifier_list()
			}

		}
		{
			p.SetState(2375)
			p.Match(SQLParserREPLACE)
		}
		{
			p.SetState(2376)
			p.Schema_qualified_name()
		}
		{
			p.SetState(2377)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(2378)
			p.Schema_qualified_name()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2380)
			p.Match(SQLParserDROP)
		}
		{
			p.SetState(2381)
			p.Match(SQLParserMAPPING)
		}
		p.SetState(2384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserIF {
			{
				p.SetState(2382)
				p.Match(SQLParserIF)
			}
			{
				p.SetState(2383)
				p.Match(SQLParserEXISTS)
			}

		}
		{
			p.SetState(2386)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(2387)
			p.Identifier_list()
		}

	}


	return localctx
}


// IType_actionContext is an interface to support dynamic dispatch.
type IType_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_actionContext differentiates from other interfaces.
	IsType_actionContext()
}

type Type_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_actionContext() *Type_actionContext {
	var p = new(Type_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_type_action
	return p
}

func (*Type_actionContext) IsType_actionContext() {}

func NewType_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_actionContext {
	var p = new(Type_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_type_action

	return p
}

func (s *Type_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Type_actionContext) ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserATTRIBUTE, 0)
}

func (s *Type_actionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Type_actionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Type_actionContext) Collate_identifier() ICollate_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollate_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollate_identifierContext)
}

func (s *Type_actionContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Type_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Type_actionContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Type_actionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SQLParserALTER, 0)
}

func (s *Type_actionContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Type_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Type_actionContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Type_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterType_action(s)
	}
}

func (s *Type_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitType_action(s)
	}
}




func (p *SQLParser) Type_action() (localctx IType_actionContext) {
	localctx = NewType_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SQLParserRULE_type_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2424)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserADD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2390)
			p.Match(SQLParserADD)
		}
		{
			p.SetState(2391)
			p.Match(SQLParserATTRIBUTE)
		}
		{
			p.SetState(2392)
			p.Identifier()
		}
		{
			p.SetState(2393)
			p.Data_type()
		}
		p.SetState(2395)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLLATE {
			{
				p.SetState(2394)
				p.Collate_identifier()
			}

		}
		p.SetState(2398)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
			{
				p.SetState(2397)
				p.Cascade_restrict()
			}

		}


	case SQLParserDROP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2400)
			p.Match(SQLParserDROP)
		}
		{
			p.SetState(2401)
			p.Match(SQLParserATTRIBUTE)
		}
		p.SetState(2403)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2402)
				p.If_exists()
			}


		}
		{
			p.SetState(2405)
			p.Identifier()
		}
		p.SetState(2407)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
			{
				p.SetState(2406)
				p.Cascade_restrict()
			}

		}


	case SQLParserALTER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2409)
			p.Match(SQLParserALTER)
		}
		{
			p.SetState(2410)
			p.Match(SQLParserATTRIBUTE)
		}
		{
			p.SetState(2411)
			p.Identifier()
		}
		p.SetState(2414)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserSET {
			{
				p.SetState(2412)
				p.Match(SQLParserSET)
			}
			{
				p.SetState(2413)
				p.Match(SQLParserDATA)
			}

		}
		{
			p.SetState(2416)
			p.Match(SQLParserTYPE)
		}
		{
			p.SetState(2417)
			p.Data_type()
		}
		p.SetState(2419)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLLATE {
			{
				p.SetState(2418)
				p.Collate_identifier()
			}

		}
		p.SetState(2422)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
			{
				p.SetState(2421)
				p.Cascade_restrict()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IType_propertyContext is an interface to support dynamic dispatch.
type IType_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStorage returns the storage rule contexts.
	GetStorage() IStorage_optionContext


	// SetStorage sets the storage rule contexts.
	SetStorage(IStorage_optionContext)


	// IsType_propertyContext differentiates from other interfaces.
	IsType_propertyContext()
}

type Type_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	storage IStorage_optionContext 
}

func NewEmptyType_propertyContext() *Type_propertyContext {
	var p = new(Type_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_type_property
	return p
}

func (*Type_propertyContext) IsType_propertyContext() {}

func NewType_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_propertyContext {
	var p = new(Type_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_type_property

	return p
}

func (s *Type_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_propertyContext) GetStorage() IStorage_optionContext { return s.storage }


func (s *Type_propertyContext) SetStorage(v IStorage_optionContext) { s.storage = v }


func (s *Type_propertyContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Type_propertyContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Type_propertyContext) RECEIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRECEIVE, 0)
}

func (s *Type_propertyContext) SEND() antlr.TerminalNode {
	return s.GetToken(SQLParserSEND, 0)
}

func (s *Type_propertyContext) TYPMOD_IN() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPMOD_IN, 0)
}

func (s *Type_propertyContext) TYPMOD_OUT() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPMOD_OUT, 0)
}

func (s *Type_propertyContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLParserANALYZE, 0)
}

func (s *Type_propertyContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTORAGE, 0)
}

func (s *Type_propertyContext) Storage_option() IStorage_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_optionContext)
}

func (s *Type_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterType_property(s)
	}
}

func (s *Type_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitType_property(s)
	}
}




func (p *SQLParser) Type_property() (localctx IType_propertyContext) {
	localctx = NewType_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SQLParserRULE_type_property)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2432)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserANALYZE, SQLParserRECEIVE, SQLParserSEND, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2426)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserANALYZE || ((((_la - 523)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 523))) & ((1 << (SQLParserRECEIVE - 523)) | (1 << (SQLParserSEND - 523)) | (1 << (SQLParserTYPMOD_IN - 523)) | (1 << (SQLParserTYPMOD_OUT - 523)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2427)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2428)
			p.Schema_qualified_name()
		}


	case SQLParserSTORAGE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2429)
			p.Match(SQLParserSTORAGE)
		}
		{
			p.SetState(2430)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2431)

			var _x = p.Storage_option()


			localctx.(*Type_propertyContext).storage = _x
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISet_def_columnContext is an interface to support dynamic dispatch.
type ISet_def_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_def_columnContext differentiates from other interfaces.
	IsSet_def_columnContext()
}

type Set_def_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_def_columnContext() *Set_def_columnContext {
	var p = new(Set_def_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_def_column
	return p
}

func (*Set_def_columnContext) IsSet_def_columnContext() {}

func NewSet_def_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_def_columnContext {
	var p = new(Set_def_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_def_column

	return p
}

func (s *Set_def_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_def_columnContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Set_def_columnContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Set_def_columnContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Set_def_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_def_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_def_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_def_column(s)
	}
}

func (s *Set_def_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_def_column(s)
	}
}




func (p *SQLParser) Set_def_column() (localctx ISet_def_columnContext) {
	localctx = NewSet_def_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SQLParserRULE_set_def_column)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2434)
		p.Match(SQLParserSET)
	}
	{
		p.SetState(2435)
		p.Match(SQLParserDEFAULT)
	}
	{
		p.SetState(2436)
		p.vex(0)
	}



	return localctx
}


// IDrop_defContext is an interface to support dynamic dispatch.
type IDrop_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_defContext differentiates from other interfaces.
	IsDrop_defContext()
}

type Drop_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_defContext() *Drop_defContext {
	var p = new(Drop_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_def
	return p
}

func (*Drop_defContext) IsDrop_defContext() {}

func NewDrop_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_defContext {
	var p = new(Drop_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_def

	return p
}

func (s *Drop_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_defContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Drop_defContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Drop_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_def(s)
	}
}

func (s *Drop_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_def(s)
	}
}




func (p *SQLParser) Drop_def() (localctx IDrop_defContext) {
	localctx = NewDrop_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SQLParserRULE_drop_def)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2438)
		p.Match(SQLParserDROP)
	}
	{
		p.SetState(2439)
		p.Match(SQLParserDEFAULT)
	}



	return localctx
}


// ICreate_index_statementContext is an interface to support dynamic dispatch.
type ICreate_index_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(ISchema_qualified_nameContext)


	// IsCreate_index_statementContext differentiates from other interfaces.
	IsCreate_index_statementContext()
}

type Create_index_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
	table_name ISchema_qualified_nameContext 
}

func NewEmptyCreate_index_statementContext() *Create_index_statementContext {
	var p = new(Create_index_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_index_statement
	return p
}

func (*Create_index_statementContext) IsCreate_index_statementContext() {}

func NewCreate_index_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_statementContext {
	var p = new(Create_index_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_index_statement

	return p
}

func (s *Create_index_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_statementContext) GetName() IIdentifierContext { return s.name }

func (s *Create_index_statementContext) GetTable_name() ISchema_qualified_nameContext { return s.table_name }


func (s *Create_index_statementContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_index_statementContext) SetTable_name(v ISchema_qualified_nameContext) { s.table_name = v }


func (s *Create_index_statementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Create_index_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Create_index_statementContext) Index_rest() IIndex_restContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_restContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_restContext)
}

func (s *Create_index_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_index_statementContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLParserUNIQUE, 0)
}

func (s *Create_index_statementContext) CONCURRENTLY() antlr.TerminalNode {
	return s.GetToken(SQLParserCONCURRENTLY, 0)
}

func (s *Create_index_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_index_statementContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *Create_index_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_index_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_index_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_index_statement(s)
	}
}

func (s *Create_index_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_index_statement(s)
	}
}




func (p *SQLParser) Create_index_statement() (localctx ICreate_index_statementContext) {
	localctx = NewCreate_index_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SQLParserRULE_create_index_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2442)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUNIQUE {
		{
			p.SetState(2441)
			p.Match(SQLParserUNIQUE)
		}

	}
	{
		p.SetState(2444)
		p.Match(SQLParserINDEX)
	}
	p.SetState(2446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCONCURRENTLY {
		{
			p.SetState(2445)
			p.Match(SQLParserCONCURRENTLY)
		}

	}
	p.SetState(2449)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2448)
			p.If_not_exists()
		}


	}
	p.SetState(2452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
		{
			p.SetState(2451)

			var _x = p.Identifier()


			localctx.(*Create_index_statementContext).name = _x
		}

	}
	{
		p.SetState(2454)
		p.Match(SQLParserON)
	}
	p.SetState(2456)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserONLY {
		{
			p.SetState(2455)
			p.Match(SQLParserONLY)
		}

	}
	{
		p.SetState(2458)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_index_statementContext).table_name = _x
	}
	{
		p.SetState(2459)
		p.Index_rest()
	}



	return localctx
}


// IIndex_restContext is an interface to support dynamic dispatch.
type IIndex_restContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMethod returns the method rule contexts.
	GetMethod() IIdentifierContext


	// SetMethod sets the method rule contexts.
	SetMethod(IIdentifierContext)


	// IsIndex_restContext differentiates from other interfaces.
	IsIndex_restContext()
}

type Index_restContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	method IIdentifierContext 
}

func NewEmptyIndex_restContext() *Index_restContext {
	var p = new(Index_restContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_index_rest
	return p
}

func (*Index_restContext) IsIndex_restContext() {}

func NewIndex_restContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_restContext {
	var p = new(Index_restContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_index_rest

	return p
}

func (s *Index_restContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_restContext) GetMethod() IIdentifierContext { return s.method }


func (s *Index_restContext) SetMethod(v IIdentifierContext) { s.method = v }


func (s *Index_restContext) Index_sort() IIndex_sortContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_sortContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_sortContext)
}

func (s *Index_restContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Index_restContext) Including_index() IIncluding_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncluding_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncluding_indexContext)
}

func (s *Index_restContext) With_storage_parameter() IWith_storage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_storage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_storage_parameterContext)
}

func (s *Index_restContext) Table_space() ITable_spaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_spaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_spaceContext)
}

func (s *Index_restContext) Index_where() IIndex_whereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_whereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_whereContext)
}

func (s *Index_restContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Index_restContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_restContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Index_restContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndex_rest(s)
	}
}

func (s *Index_restContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndex_rest(s)
	}
}




func (p *SQLParser) Index_rest() (localctx IIndex_restContext) {
	localctx = NewIndex_restContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SQLParserRULE_index_rest)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2463)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUSING {
		{
			p.SetState(2461)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(2462)

			var _x = p.Identifier()


			localctx.(*Index_restContext).method = _x
		}

	}
	{
		p.SetState(2465)
		p.Index_sort()
	}
	p.SetState(2467)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserINCLUDE {
		{
			p.SetState(2466)
			p.Including_index()
		}

	}
	p.SetState(2470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(2469)
			p.With_storage_parameter()
		}

	}
	p.SetState(2473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTABLESPACE {
		{
			p.SetState(2472)
			p.Table_space()
		}

	}
	p.SetState(2476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWHERE {
		{
			p.SetState(2475)
			p.Index_where()
		}

	}



	return localctx
}


// IIndex_sortContext is an interface to support dynamic dispatch.
type IIndex_sortContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_sortContext differentiates from other interfaces.
	IsIndex_sortContext()
}

type Index_sortContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_sortContext() *Index_sortContext {
	var p = new(Index_sortContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_index_sort
	return p
}

func (*Index_sortContext) IsIndex_sortContext() {}

func NewIndex_sortContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_sortContext {
	var p = new(Index_sortContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_index_sort

	return p
}

func (s *Index_sortContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_sortContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Index_sortContext) AllIndex_column() []IIndex_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_columnContext)(nil)).Elem())
	var tst = make([]IIndex_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_columnContext)
		}
	}

	return tst
}

func (s *Index_sortContext) Index_column(i int) IIndex_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_columnContext)
}

func (s *Index_sortContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Index_sortContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Index_sortContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Index_sortContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_sortContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Index_sortContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndex_sort(s)
	}
}

func (s *Index_sortContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndex_sort(s)
	}
}




func (p *SQLParser) Index_sort() (localctx IIndex_sortContext) {
	localctx = NewIndex_sortContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SQLParserRULE_index_sort)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2478)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(2479)
		p.Index_column()
	}
	p.SetState(2484)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(2480)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(2481)
			p.Index_column()
		}


		p.SetState(2486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2487)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IIndex_columnContext is an interface to support dynamic dispatch.
type IIndex_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn returns the column rule contexts.
	GetColumn() IVexContext

	// GetOperator_class returns the operator_class rule contexts.
	GetOperator_class() ISchema_qualified_nameContext


	// SetColumn sets the column rule contexts.
	SetColumn(IVexContext)

	// SetOperator_class sets the operator_class rule contexts.
	SetOperator_class(ISchema_qualified_nameContext)


	// IsIndex_columnContext differentiates from other interfaces.
	IsIndex_columnContext()
}

type Index_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	column IVexContext 
	operator_class ISchema_qualified_nameContext 
}

func NewEmptyIndex_columnContext() *Index_columnContext {
	var p = new(Index_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_index_column
	return p
}

func (*Index_columnContext) IsIndex_columnContext() {}

func NewIndex_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_columnContext {
	var p = new(Index_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_index_column

	return p
}

func (s *Index_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_columnContext) GetColumn() IVexContext { return s.column }

func (s *Index_columnContext) GetOperator_class() ISchema_qualified_nameContext { return s.operator_class }


func (s *Index_columnContext) SetColumn(v IVexContext) { s.column = v }

func (s *Index_columnContext) SetOperator_class(v ISchema_qualified_nameContext) { s.operator_class = v }


func (s *Index_columnContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Index_columnContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Index_columnContext) AllOption_with_value() []IOption_with_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOption_with_valueContext)(nil)).Elem())
	var tst = make([]IOption_with_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOption_with_valueContext)
		}
	}

	return tst
}

func (s *Index_columnContext) Option_with_value(i int) IOption_with_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_with_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOption_with_valueContext)
}

func (s *Index_columnContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Index_columnContext) Order_specification() IOrder_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_specificationContext)
}

func (s *Index_columnContext) Null_ordering() INull_orderingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_orderingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_orderingContext)
}

func (s *Index_columnContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Index_columnContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Index_columnContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Index_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Index_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndex_column(s)
	}
}

func (s *Index_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndex_column(s)
	}
}




func (p *SQLParser) Index_column() (localctx IIndex_columnContext) {
	localctx = NewIndex_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SQLParserRULE_index_column)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2489)

		var _x = p.vex(0)

		localctx.(*Index_columnContext).column = _x
	}
	p.SetState(2491)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2490)

			var _x = p.Schema_qualified_name()


			localctx.(*Index_columnContext).operator_class = _x
		}


	}
	p.SetState(2504)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(2493)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(2494)
			p.Option_with_value()
		}
		p.SetState(2499)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(2495)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(2496)
				p.Option_with_value()
			}


			p.SetState(2501)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2502)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}
	p.SetState(2507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserASC || _la == SQLParserDESC || _la == SQLParserUSING {
		{
			p.SetState(2506)
			p.Order_specification()
		}

	}
	p.SetState(2510)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserNULLS {
		{
			p.SetState(2509)
			p.Null_ordering()
		}

	}



	return localctx
}


// IIncluding_indexContext is an interface to support dynamic dispatch.
type IIncluding_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncluding_indexContext differentiates from other interfaces.
	IsIncluding_indexContext()
}

type Including_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncluding_indexContext() *Including_indexContext {
	var p = new(Including_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_including_index
	return p
}

func (*Including_indexContext) IsIncluding_indexContext() {}

func NewIncluding_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Including_indexContext {
	var p = new(Including_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_including_index

	return p
}

func (s *Including_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Including_indexContext) INCLUDE() antlr.TerminalNode {
	return s.GetToken(SQLParserINCLUDE, 0)
}

func (s *Including_indexContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Including_indexContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Including_indexContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Including_indexContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Including_indexContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Including_indexContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Including_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Including_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Including_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIncluding_index(s)
	}
}

func (s *Including_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIncluding_index(s)
	}
}




func (p *SQLParser) Including_index() (localctx IIncluding_indexContext) {
	localctx = NewIncluding_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SQLParserRULE_including_index)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2512)
		p.Match(SQLParserINCLUDE)
	}
	{
		p.SetState(2513)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(2514)
		p.Identifier()
	}
	p.SetState(2519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(2515)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(2516)
			p.Identifier()
		}


		p.SetState(2521)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2522)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IIndex_whereContext is an interface to support dynamic dispatch.
type IIndex_whereContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_whereContext differentiates from other interfaces.
	IsIndex_whereContext()
}

type Index_whereContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_whereContext() *Index_whereContext {
	var p = new(Index_whereContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_index_where
	return p
}

func (*Index_whereContext) IsIndex_whereContext() {}

func NewIndex_whereContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_whereContext {
	var p = new(Index_whereContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_index_where

	return p
}

func (s *Index_whereContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_whereContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Index_whereContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Index_whereContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_whereContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Index_whereContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndex_where(s)
	}
}

func (s *Index_whereContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndex_where(s)
	}
}




func (p *SQLParser) Index_where() (localctx IIndex_whereContext) {
	localctx = NewIndex_whereContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SQLParserRULE_index_where)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2524)
		p.Match(SQLParserWHERE)
	}
	{
		p.SetState(2525)
		p.vex(0)
	}



	return localctx
}


// ICreate_extension_statementContext is an interface to support dynamic dispatch.
type ICreate_extension_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdentifierContext)


	// IsCreate_extension_statementContext differentiates from other interfaces.
	IsCreate_extension_statementContext()
}

type Create_extension_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
	schema IIdentifierContext 
}

func NewEmptyCreate_extension_statementContext() *Create_extension_statementContext {
	var p = new(Create_extension_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_extension_statement
	return p
}

func (*Create_extension_statementContext) IsCreate_extension_statementContext() {}

func NewCreate_extension_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_extension_statementContext {
	var p = new(Create_extension_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_extension_statement

	return p
}

func (s *Create_extension_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_extension_statementContext) GetName() IIdentifierContext { return s.name }

func (s *Create_extension_statementContext) GetSchema() IIdentifierContext { return s.schema }


func (s *Create_extension_statementContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_extension_statementContext) SetSchema(v IIdentifierContext) { s.schema = v }


func (s *Create_extension_statementContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Create_extension_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_extension_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_extension_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_extension_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Create_extension_statementContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Create_extension_statementContext) VERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserVERSION, 0)
}

func (s *Create_extension_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Create_extension_statementContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(SQLParserCASCADE, 0)
}

func (s *Create_extension_statementContext) AllCharacter_string() []ICharacter_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem())
	var tst = make([]ICharacter_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICharacter_stringContext)
		}
	}

	return tst
}

func (s *Create_extension_statementContext) Character_string(i int) ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Create_extension_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_extension_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_extension_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_extension_statement(s)
	}
}

func (s *Create_extension_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_extension_statement(s)
	}
}




func (p *SQLParser) Create_extension_statement() (localctx ICreate_extension_statementContext) {
	localctx = NewCreate_extension_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SQLParserRULE_create_extension_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2527)
		p.Match(SQLParserEXTENSION)
	}
	p.SetState(2529)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2528)
			p.If_not_exists()
		}


	}
	{
		p.SetState(2531)

		var _x = p.Identifier()


		localctx.(*Create_extension_statementContext).name = _x
	}
	p.SetState(2533)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(2532)
			p.Match(SQLParserWITH)
		}

	}
	p.SetState(2537)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserSCHEMA {
		{
			p.SetState(2535)
			p.Match(SQLParserSCHEMA)
		}
		{
			p.SetState(2536)

			var _x = p.Identifier()


			localctx.(*Create_extension_statementContext).schema = _x
		}

	}
	p.SetState(2544)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserVERSION {
		{
			p.SetState(2539)
			p.Match(SQLParserVERSION)
		}
		p.SetState(2542)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(2540)
				p.Identifier()
			}


		case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(2541)
				p.Character_string()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(2551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFROM {
		{
			p.SetState(2546)
			p.Match(SQLParserFROM)
		}
		p.SetState(2549)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(2547)
				p.Identifier()
			}


		case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(2548)
				p.Character_string()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(2554)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE {
		{
			p.SetState(2553)
			p.Match(SQLParserCASCADE)
		}

	}



	return localctx
}


// ICreate_language_statementContext is an interface to support dynamic dispatch.
type ICreate_language_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsCreate_language_statementContext differentiates from other interfaces.
	IsCreate_language_statementContext()
}

type Create_language_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyCreate_language_statementContext() *Create_language_statementContext {
	var p = new(Create_language_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_language_statement
	return p
}

func (*Create_language_statementContext) IsCreate_language_statementContext() {}

func NewCreate_language_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_language_statementContext {
	var p = new(Create_language_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_language_statement

	return p
}

func (s *Create_language_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_language_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Create_language_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Create_language_statementContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Create_language_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_language_statementContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLParserOR, 0)
}

func (s *Create_language_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLACE, 0)
}

func (s *Create_language_statementContext) TRUSTED() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUSTED, 0)
}

func (s *Create_language_statementContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURAL, 0)
}

func (s *Create_language_statementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(SQLParserHANDLER, 0)
}

func (s *Create_language_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_language_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_language_statementContext) INLINE() antlr.TerminalNode {
	return s.GetToken(SQLParserINLINE, 0)
}

func (s *Create_language_statementContext) VALIDATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserVALIDATOR, 0)
}

func (s *Create_language_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_language_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_language_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_language_statement(s)
	}
}

func (s *Create_language_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_language_statement(s)
	}
}




func (p *SQLParser) Create_language_statement() (localctx ICreate_language_statementContext) {
	localctx = NewCreate_language_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SQLParserRULE_create_language_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2558)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOR {
		{
			p.SetState(2556)
			p.Match(SQLParserOR)
		}
		{
			p.SetState(2557)
			p.Match(SQLParserREPLACE)
		}

	}
	p.SetState(2561)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTRUSTED {
		{
			p.SetState(2560)
			p.Match(SQLParserTRUSTED)
		}

	}
	p.SetState(2564)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserPROCEDURAL {
		{
			p.SetState(2563)
			p.Match(SQLParserPROCEDURAL)
		}

	}
	{
		p.SetState(2566)
		p.Match(SQLParserLANGUAGE)
	}
	{
		p.SetState(2567)

		var _x = p.Identifier()


		localctx.(*Create_language_statementContext).name = _x
	}
	p.SetState(2578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserHANDLER {
		{
			p.SetState(2568)
			p.Match(SQLParserHANDLER)
		}
		{
			p.SetState(2569)
			p.Schema_qualified_name()
		}
		p.SetState(2572)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserINLINE {
			{
				p.SetState(2570)
				p.Match(SQLParserINLINE)
			}
			{
				p.SetState(2571)
				p.Schema_qualified_name()
			}

		}
		p.SetState(2576)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserVALIDATOR {
			{
				p.SetState(2574)
				p.Match(SQLParserVALIDATOR)
			}
			{
				p.SetState(2575)
				p.Schema_qualified_name()
			}

		}

	}



	return localctx
}


// ICreate_event_trigger_statementContext is an interface to support dynamic dispatch.
type ICreate_event_trigger_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsCreate_event_trigger_statementContext differentiates from other interfaces.
	IsCreate_event_trigger_statementContext()
}

type Create_event_trigger_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyCreate_event_trigger_statementContext() *Create_event_trigger_statementContext {
	var p = new(Create_event_trigger_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_event_trigger_statement
	return p
}

func (*Create_event_trigger_statementContext) IsCreate_event_trigger_statementContext() {}

func NewCreate_event_trigger_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_event_trigger_statementContext {
	var p = new(Create_event_trigger_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_event_trigger_statement

	return p
}

func (s *Create_event_trigger_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_event_trigger_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Create_event_trigger_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Create_event_trigger_statementContext) EVENT() antlr.TerminalNode {
	return s.GetToken(SQLParserEVENT, 0)
}

func (s *Create_event_trigger_statementContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Create_event_trigger_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Create_event_trigger_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_event_trigger_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_event_trigger_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXECUTE, 0)
}

func (s *Create_event_trigger_statementContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Create_event_trigger_statementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Create_event_trigger_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Create_event_trigger_statementContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SQLParserWHEN, 0)
}

func (s *Create_event_trigger_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_event_trigger_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_event_trigger_statementContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserIN)
}

func (s *Create_event_trigger_statementContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserIN, i)
}

func (s *Create_event_trigger_statementContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_PAREN)
}

func (s *Create_event_trigger_statementContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, i)
}

func (s *Create_event_trigger_statementContext) AllCharacter_string() []ICharacter_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem())
	var tst = make([]ICharacter_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICharacter_stringContext)
		}
	}

	return tst
}

func (s *Create_event_trigger_statementContext) Character_string(i int) ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Create_event_trigger_statementContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_PAREN)
}

func (s *Create_event_trigger_statementContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, i)
}

func (s *Create_event_trigger_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_event_trigger_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_event_trigger_statementContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(SQLParserAND)
}

func (s *Create_event_trigger_statementContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserAND, i)
}

func (s *Create_event_trigger_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_event_trigger_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_event_trigger_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_event_trigger_statement(s)
	}
}

func (s *Create_event_trigger_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_event_trigger_statement(s)
	}
}




func (p *SQLParser) Create_event_trigger_statement() (localctx ICreate_event_trigger_statementContext) {
	localctx = NewCreate_event_trigger_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SQLParserRULE_create_event_trigger_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2580)
		p.Match(SQLParserEVENT)
	}
	{
		p.SetState(2581)
		p.Match(SQLParserTRIGGER)
	}
	{
		p.SetState(2582)

		var _x = p.Identifier()


		localctx.(*Create_event_trigger_statementContext).name = _x
	}
	{
		p.SetState(2583)
		p.Match(SQLParserON)
	}
	{
		p.SetState(2584)
		p.Identifier()
	}
	p.SetState(2605)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWHEN {
		{
			p.SetState(2585)
			p.Match(SQLParserWHEN)
		}
		p.SetState(2601)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					{
						p.SetState(2586)
						p.Schema_qualified_name()
					}
					{
						p.SetState(2587)
						p.Match(SQLParserIN)
					}
					{
						p.SetState(2588)
						p.Match(SQLParserLEFT_PAREN)
					}
					{
						p.SetState(2589)
						p.Character_string()
					}
					p.SetState(2594)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					for _la == SQLParserCOMMA {
						{
							p.SetState(2590)
							p.Match(SQLParserCOMMA)
						}
						{
							p.SetState(2591)
							p.Character_string()
						}


						p.SetState(2596)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}
					{
						p.SetState(2597)
						p.Match(SQLParserRIGHT_PAREN)
					}
					p.SetState(2599)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					if _la == SQLParserAND {
						{
							p.SetState(2598)
							p.Match(SQLParserAND)
						}

					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2603)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())
		}

	}
	{
		p.SetState(2607)
		p.Match(SQLParserEXECUTE)
	}
	{
		p.SetState(2608)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserFUNCTION || _la == SQLParserPROCEDURE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(2609)
		p.vex(0)
	}



	return localctx
}


// ICreate_type_statementContext is an interface to support dynamic dispatch.
type ICreate_type_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// Get_table_column_definition returns the _table_column_definition rule contexts.
	Get_table_column_definition() ITable_column_definitionContext

	// Get_character_string returns the _character_string rule contexts.
	Get_character_string() ICharacter_stringContext

	// GetSubtype_name returns the subtype_name rule contexts.
	GetSubtype_name() IData_typeContext

	// GetSubtype_operator_class returns the subtype_operator_class rule contexts.
	GetSubtype_operator_class() IIdentifierContext

	// GetCollation returns the collation rule contexts.
	GetCollation() ISchema_qualified_nameContext

	// GetCanonical_function returns the canonical_function rule contexts.
	GetCanonical_function() ISchema_qualified_nameContext

	// GetSubtype_diff_function returns the subtype_diff_function rule contexts.
	GetSubtype_diff_function() ISchema_qualified_nameContext

	// GetInternallength returns the internallength rule contexts.
	GetInternallength() ISigned_numerical_literalContext

	// GetInput_function returns the input_function rule contexts.
	GetInput_function() ISchema_qualified_nameContext

	// GetOutput_function returns the output_function rule contexts.
	GetOutput_function() ISchema_qualified_nameContext

	// GetReceive_function returns the receive_function rule contexts.
	GetReceive_function() ISchema_qualified_nameContext

	// GetSend_function returns the send_function rule contexts.
	GetSend_function() ISchema_qualified_nameContext

	// GetType_modifier_input_function returns the type_modifier_input_function rule contexts.
	GetType_modifier_input_function() ISchema_qualified_nameContext

	// GetType_modifier_output_function returns the type_modifier_output_function rule contexts.
	GetType_modifier_output_function() ISchema_qualified_nameContext

	// GetAnalyze_function returns the analyze_function rule contexts.
	GetAnalyze_function() ISchema_qualified_nameContext

	// GetAlignment returns the alignment rule contexts.
	GetAlignment() IData_typeContext

	// GetStorage returns the storage rule contexts.
	GetStorage() IStorage_optionContext

	// GetLike_type returns the like_type rule contexts.
	GetLike_type() IData_typeContext

	// GetCategory returns the category rule contexts.
	GetCategory() ICharacter_stringContext

	// GetPreferred returns the preferred rule contexts.
	GetPreferred() ITruth_valueContext

	// GetDefault_value returns the default_value rule contexts.
	GetDefault_value() IVexContext

	// GetElement returns the element rule contexts.
	GetElement() IData_typeContext

	// GetDelimiter returns the delimiter rule contexts.
	GetDelimiter() ICharacter_stringContext

	// GetCollatable returns the collatable rule contexts.
	GetCollatable() ITruth_valueContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// Set_table_column_definition sets the _table_column_definition rule contexts.
	Set_table_column_definition(ITable_column_definitionContext)

	// Set_character_string sets the _character_string rule contexts.
	Set_character_string(ICharacter_stringContext)

	// SetSubtype_name sets the subtype_name rule contexts.
	SetSubtype_name(IData_typeContext)

	// SetSubtype_operator_class sets the subtype_operator_class rule contexts.
	SetSubtype_operator_class(IIdentifierContext)

	// SetCollation sets the collation rule contexts.
	SetCollation(ISchema_qualified_nameContext)

	// SetCanonical_function sets the canonical_function rule contexts.
	SetCanonical_function(ISchema_qualified_nameContext)

	// SetSubtype_diff_function sets the subtype_diff_function rule contexts.
	SetSubtype_diff_function(ISchema_qualified_nameContext)

	// SetInternallength sets the internallength rule contexts.
	SetInternallength(ISigned_numerical_literalContext)

	// SetInput_function sets the input_function rule contexts.
	SetInput_function(ISchema_qualified_nameContext)

	// SetOutput_function sets the output_function rule contexts.
	SetOutput_function(ISchema_qualified_nameContext)

	// SetReceive_function sets the receive_function rule contexts.
	SetReceive_function(ISchema_qualified_nameContext)

	// SetSend_function sets the send_function rule contexts.
	SetSend_function(ISchema_qualified_nameContext)

	// SetType_modifier_input_function sets the type_modifier_input_function rule contexts.
	SetType_modifier_input_function(ISchema_qualified_nameContext)

	// SetType_modifier_output_function sets the type_modifier_output_function rule contexts.
	SetType_modifier_output_function(ISchema_qualified_nameContext)

	// SetAnalyze_function sets the analyze_function rule contexts.
	SetAnalyze_function(ISchema_qualified_nameContext)

	// SetAlignment sets the alignment rule contexts.
	SetAlignment(IData_typeContext)

	// SetStorage sets the storage rule contexts.
	SetStorage(IStorage_optionContext)

	// SetLike_type sets the like_type rule contexts.
	SetLike_type(IData_typeContext)

	// SetCategory sets the category rule contexts.
	SetCategory(ICharacter_stringContext)

	// SetPreferred sets the preferred rule contexts.
	SetPreferred(ITruth_valueContext)

	// SetDefault_value sets the default_value rule contexts.
	SetDefault_value(IVexContext)

	// SetElement sets the element rule contexts.
	SetElement(IData_typeContext)

	// SetDelimiter sets the delimiter rule contexts.
	SetDelimiter(ICharacter_stringContext)

	// SetCollatable sets the collatable rule contexts.
	SetCollatable(ITruth_valueContext)


	// GetAttrs returns the attrs rule context list.
	GetAttrs() []ITable_column_definitionContext

	// GetEnums returns the enums rule context list.
	GetEnums() []ICharacter_stringContext


	// SetAttrs sets the attrs rule context list.
	SetAttrs([]ITable_column_definitionContext) 

	// SetEnums sets the enums rule context list.
	SetEnums([]ICharacter_stringContext) 


	// IsCreate_type_statementContext differentiates from other interfaces.
	IsCreate_type_statementContext()
}

type Create_type_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	_table_column_definition ITable_column_definitionContext 
	attrs []ITable_column_definitionContext
	_character_string ICharacter_stringContext 
	enums []ICharacter_stringContext
	subtype_name IData_typeContext 
	subtype_operator_class IIdentifierContext 
	collation ISchema_qualified_nameContext 
	canonical_function ISchema_qualified_nameContext 
	subtype_diff_function ISchema_qualified_nameContext 
	internallength ISigned_numerical_literalContext 
	input_function ISchema_qualified_nameContext 
	output_function ISchema_qualified_nameContext 
	receive_function ISchema_qualified_nameContext 
	send_function ISchema_qualified_nameContext 
	type_modifier_input_function ISchema_qualified_nameContext 
	type_modifier_output_function ISchema_qualified_nameContext 
	analyze_function ISchema_qualified_nameContext 
	alignment IData_typeContext 
	storage IStorage_optionContext 
	like_type IData_typeContext 
	category ICharacter_stringContext 
	preferred ITruth_valueContext 
	default_value IVexContext 
	element IData_typeContext 
	delimiter ICharacter_stringContext 
	collatable ITruth_valueContext 
}

func NewEmptyCreate_type_statementContext() *Create_type_statementContext {
	var p = new(Create_type_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_type_statement
	return p
}

func (*Create_type_statementContext) IsCreate_type_statementContext() {}

func NewCreate_type_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_type_statementContext {
	var p = new(Create_type_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_type_statement

	return p
}

func (s *Create_type_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_type_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Create_type_statementContext) Get_table_column_definition() ITable_column_definitionContext { return s._table_column_definition }

func (s *Create_type_statementContext) Get_character_string() ICharacter_stringContext { return s._character_string }

func (s *Create_type_statementContext) GetSubtype_name() IData_typeContext { return s.subtype_name }

func (s *Create_type_statementContext) GetSubtype_operator_class() IIdentifierContext { return s.subtype_operator_class }

func (s *Create_type_statementContext) GetCollation() ISchema_qualified_nameContext { return s.collation }

func (s *Create_type_statementContext) GetCanonical_function() ISchema_qualified_nameContext { return s.canonical_function }

func (s *Create_type_statementContext) GetSubtype_diff_function() ISchema_qualified_nameContext { return s.subtype_diff_function }

func (s *Create_type_statementContext) GetInternallength() ISigned_numerical_literalContext { return s.internallength }

func (s *Create_type_statementContext) GetInput_function() ISchema_qualified_nameContext { return s.input_function }

func (s *Create_type_statementContext) GetOutput_function() ISchema_qualified_nameContext { return s.output_function }

func (s *Create_type_statementContext) GetReceive_function() ISchema_qualified_nameContext { return s.receive_function }

func (s *Create_type_statementContext) GetSend_function() ISchema_qualified_nameContext { return s.send_function }

func (s *Create_type_statementContext) GetType_modifier_input_function() ISchema_qualified_nameContext { return s.type_modifier_input_function }

func (s *Create_type_statementContext) GetType_modifier_output_function() ISchema_qualified_nameContext { return s.type_modifier_output_function }

func (s *Create_type_statementContext) GetAnalyze_function() ISchema_qualified_nameContext { return s.analyze_function }

func (s *Create_type_statementContext) GetAlignment() IData_typeContext { return s.alignment }

func (s *Create_type_statementContext) GetStorage() IStorage_optionContext { return s.storage }

func (s *Create_type_statementContext) GetLike_type() IData_typeContext { return s.like_type }

func (s *Create_type_statementContext) GetCategory() ICharacter_stringContext { return s.category }

func (s *Create_type_statementContext) GetPreferred() ITruth_valueContext { return s.preferred }

func (s *Create_type_statementContext) GetDefault_value() IVexContext { return s.default_value }

func (s *Create_type_statementContext) GetElement() IData_typeContext { return s.element }

func (s *Create_type_statementContext) GetDelimiter() ICharacter_stringContext { return s.delimiter }

func (s *Create_type_statementContext) GetCollatable() ITruth_valueContext { return s.collatable }


func (s *Create_type_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Create_type_statementContext) Set_table_column_definition(v ITable_column_definitionContext) { s._table_column_definition = v }

func (s *Create_type_statementContext) Set_character_string(v ICharacter_stringContext) { s._character_string = v }

func (s *Create_type_statementContext) SetSubtype_name(v IData_typeContext) { s.subtype_name = v }

func (s *Create_type_statementContext) SetSubtype_operator_class(v IIdentifierContext) { s.subtype_operator_class = v }

func (s *Create_type_statementContext) SetCollation(v ISchema_qualified_nameContext) { s.collation = v }

func (s *Create_type_statementContext) SetCanonical_function(v ISchema_qualified_nameContext) { s.canonical_function = v }

func (s *Create_type_statementContext) SetSubtype_diff_function(v ISchema_qualified_nameContext) { s.subtype_diff_function = v }

func (s *Create_type_statementContext) SetInternallength(v ISigned_numerical_literalContext) { s.internallength = v }

func (s *Create_type_statementContext) SetInput_function(v ISchema_qualified_nameContext) { s.input_function = v }

func (s *Create_type_statementContext) SetOutput_function(v ISchema_qualified_nameContext) { s.output_function = v }

func (s *Create_type_statementContext) SetReceive_function(v ISchema_qualified_nameContext) { s.receive_function = v }

func (s *Create_type_statementContext) SetSend_function(v ISchema_qualified_nameContext) { s.send_function = v }

func (s *Create_type_statementContext) SetType_modifier_input_function(v ISchema_qualified_nameContext) { s.type_modifier_input_function = v }

func (s *Create_type_statementContext) SetType_modifier_output_function(v ISchema_qualified_nameContext) { s.type_modifier_output_function = v }

func (s *Create_type_statementContext) SetAnalyze_function(v ISchema_qualified_nameContext) { s.analyze_function = v }

func (s *Create_type_statementContext) SetAlignment(v IData_typeContext) { s.alignment = v }

func (s *Create_type_statementContext) SetStorage(v IStorage_optionContext) { s.storage = v }

func (s *Create_type_statementContext) SetLike_type(v IData_typeContext) { s.like_type = v }

func (s *Create_type_statementContext) SetCategory(v ICharacter_stringContext) { s.category = v }

func (s *Create_type_statementContext) SetPreferred(v ITruth_valueContext) { s.preferred = v }

func (s *Create_type_statementContext) SetDefault_value(v IVexContext) { s.default_value = v }

func (s *Create_type_statementContext) SetElement(v IData_typeContext) { s.element = v }

func (s *Create_type_statementContext) SetDelimiter(v ICharacter_stringContext) { s.delimiter = v }

func (s *Create_type_statementContext) SetCollatable(v ITruth_valueContext) { s.collatable = v }


func (s *Create_type_statementContext) GetAttrs() []ITable_column_definitionContext { return s.attrs }

func (s *Create_type_statementContext) GetEnums() []ICharacter_stringContext { return s.enums }


func (s *Create_type_statementContext) SetAttrs(v []ITable_column_definitionContext) { s.attrs = v }

func (s *Create_type_statementContext) SetEnums(v []ICharacter_stringContext) { s.enums = v }


func (s *Create_type_statementContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Create_type_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_type_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Create_type_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_type_statementContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SQLParserINPUT, 0)
}

func (s *Create_type_statementContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserEQUAL)
}

func (s *Create_type_statementContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, i)
}

func (s *Create_type_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_type_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_type_statementContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(SQLParserOUTPUT, 0)
}

func (s *Create_type_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_type_statementContext) ENUM() antlr.TerminalNode {
	return s.GetToken(SQLParserENUM, 0)
}

func (s *Create_type_statementContext) RANGE() antlr.TerminalNode {
	return s.GetToken(SQLParserRANGE, 0)
}

func (s *Create_type_statementContext) AllINTERNALLENGTH() []antlr.TerminalNode {
	return s.GetTokens(SQLParserINTERNALLENGTH)
}

func (s *Create_type_statementContext) INTERNALLENGTH(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserINTERNALLENGTH, i)
}

func (s *Create_type_statementContext) AllSUBTYPE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSUBTYPE)
}

func (s *Create_type_statementContext) SUBTYPE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSUBTYPE, i)
}

func (s *Create_type_statementContext) AllSUBTYPE_OPCLASS() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSUBTYPE_OPCLASS)
}

func (s *Create_type_statementContext) SUBTYPE_OPCLASS(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSUBTYPE_OPCLASS, i)
}

func (s *Create_type_statementContext) AllCOLLATION() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOLLATION)
}

func (s *Create_type_statementContext) COLLATION(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATION, i)
}

func (s *Create_type_statementContext) AllCANONICAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCANONICAL)
}

func (s *Create_type_statementContext) CANONICAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCANONICAL, i)
}

func (s *Create_type_statementContext) AllSUBTYPE_DIFF() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSUBTYPE_DIFF)
}

func (s *Create_type_statementContext) SUBTYPE_DIFF(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSUBTYPE_DIFF, i)
}

func (s *Create_type_statementContext) AllVARIABLE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserVARIABLE)
}

func (s *Create_type_statementContext) VARIABLE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserVARIABLE, i)
}

func (s *Create_type_statementContext) AllRECEIVE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRECEIVE)
}

func (s *Create_type_statementContext) RECEIVE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRECEIVE, i)
}

func (s *Create_type_statementContext) AllSEND() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSEND)
}

func (s *Create_type_statementContext) SEND(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSEND, i)
}

func (s *Create_type_statementContext) AllTYPMOD_IN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserTYPMOD_IN)
}

func (s *Create_type_statementContext) TYPMOD_IN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserTYPMOD_IN, i)
}

func (s *Create_type_statementContext) AllTYPMOD_OUT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserTYPMOD_OUT)
}

func (s *Create_type_statementContext) TYPMOD_OUT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserTYPMOD_OUT, i)
}

func (s *Create_type_statementContext) AllANALYZE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserANALYZE)
}

func (s *Create_type_statementContext) ANALYZE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserANALYZE, i)
}

func (s *Create_type_statementContext) AllPASSEDBYVALUE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserPASSEDBYVALUE)
}

func (s *Create_type_statementContext) PASSEDBYVALUE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserPASSEDBYVALUE, i)
}

func (s *Create_type_statementContext) AllALIGNMENT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserALIGNMENT)
}

func (s *Create_type_statementContext) ALIGNMENT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserALIGNMENT, i)
}

func (s *Create_type_statementContext) AllSTORAGE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSTORAGE)
}

func (s *Create_type_statementContext) STORAGE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSTORAGE, i)
}

func (s *Create_type_statementContext) AllLIKE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLIKE)
}

func (s *Create_type_statementContext) LIKE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLIKE, i)
}

func (s *Create_type_statementContext) AllCATEGORY() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCATEGORY)
}

func (s *Create_type_statementContext) CATEGORY(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCATEGORY, i)
}

func (s *Create_type_statementContext) AllPREFERRED() []antlr.TerminalNode {
	return s.GetTokens(SQLParserPREFERRED)
}

func (s *Create_type_statementContext) PREFERRED(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserPREFERRED, i)
}

func (s *Create_type_statementContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDEFAULT)
}

func (s *Create_type_statementContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, i)
}

func (s *Create_type_statementContext) AllELEMENT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserELEMENT)
}

func (s *Create_type_statementContext) ELEMENT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserELEMENT, i)
}

func (s *Create_type_statementContext) AllDELIMITER() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDELIMITER)
}

func (s *Create_type_statementContext) DELIMITER(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDELIMITER, i)
}

func (s *Create_type_statementContext) AllCOLLATABLE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOLLATABLE)
}

func (s *Create_type_statementContext) COLLATABLE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATABLE, i)
}

func (s *Create_type_statementContext) AllTable_column_definition() []ITable_column_definitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_column_definitionContext)(nil)).Elem())
	var tst = make([]ITable_column_definitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_column_definitionContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Table_column_definition(i int) ITable_column_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_column_definitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_column_definitionContext)
}

func (s *Create_type_statementContext) AllCharacter_string() []ICharacter_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem())
	var tst = make([]ICharacter_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICharacter_stringContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Character_string(i int) ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Create_type_statementContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_type_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_type_statementContext) AllSigned_numerical_literal() []ISigned_numerical_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISigned_numerical_literalContext)(nil)).Elem())
	var tst = make([]ISigned_numerical_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISigned_numerical_literalContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Signed_numerical_literal(i int) ISigned_numerical_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numerical_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISigned_numerical_literalContext)
}

func (s *Create_type_statementContext) AllStorage_option() []IStorage_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStorage_optionContext)(nil)).Elem())
	var tst = make([]IStorage_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStorage_optionContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Storage_option(i int) IStorage_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStorage_optionContext)
}

func (s *Create_type_statementContext) AllTruth_value() []ITruth_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITruth_valueContext)(nil)).Elem())
	var tst = make([]ITruth_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITruth_valueContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Truth_value(i int) ITruth_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruth_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITruth_valueContext)
}

func (s *Create_type_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Create_type_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Create_type_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_type_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_type_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_type_statement(s)
	}
}

func (s *Create_type_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_type_statement(s)
	}
}




func (p *SQLParser) Create_type_statement() (localctx ICreate_type_statementContext) {
	localctx = NewCreate_type_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, SQLParserRULE_create_type_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2611)
		p.Match(SQLParserTYPE)
	}
	{
		p.SetState(2612)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_type_statementContext).name = _x
	}
	p.SetState(2760)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserAS:
		{
			p.SetState(2613)
			p.Match(SQLParserAS)
		}
		p.SetState(2682)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserLEFT_PAREN:
			{
				p.SetState(2614)
				p.Match(SQLParserLEFT_PAREN)
			}
			p.SetState(2623)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
				{
					p.SetState(2615)

					var _x = p.Table_column_definition()


					localctx.(*Create_type_statementContext)._table_column_definition = _x
				}
				localctx.(*Create_type_statementContext).attrs = append(localctx.(*Create_type_statementContext).attrs, localctx.(*Create_type_statementContext)._table_column_definition)
				p.SetState(2620)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SQLParserCOMMA {
					{
						p.SetState(2616)
						p.Match(SQLParserCOMMA)
					}
					{
						p.SetState(2617)

						var _x = p.Table_column_definition()


						localctx.(*Create_type_statementContext)._table_column_definition = _x
					}
					localctx.(*Create_type_statementContext).attrs = append(localctx.(*Create_type_statementContext).attrs, localctx.(*Create_type_statementContext)._table_column_definition)


					p.SetState(2622)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			}
			{
				p.SetState(2625)
				p.Match(SQLParserRIGHT_PAREN)
			}


		case SQLParserENUM:
			{
				p.SetState(2626)
				p.Match(SQLParserENUM)
			}
			{
				p.SetState(2627)
				p.Match(SQLParserLEFT_PAREN)
			}
			p.SetState(2636)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserCharacter_String_Literal || _la == SQLParserBeginDollarStringConstant {
				{
					p.SetState(2628)

					var _x = p.Character_string()


					localctx.(*Create_type_statementContext)._character_string = _x
				}
				localctx.(*Create_type_statementContext).enums = append(localctx.(*Create_type_statementContext).enums, localctx.(*Create_type_statementContext)._character_string)
				p.SetState(2633)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SQLParserCOMMA {
					{
						p.SetState(2629)
						p.Match(SQLParserCOMMA)
					}
					{
						p.SetState(2630)

						var _x = p.Character_string()


						localctx.(*Create_type_statementContext)._character_string = _x
					}
					localctx.(*Create_type_statementContext).enums = append(localctx.(*Create_type_statementContext).enums, localctx.(*Create_type_statementContext)._character_string)


					p.SetState(2635)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			}
			{
				p.SetState(2638)
				p.Match(SQLParserRIGHT_PAREN)
			}


		case SQLParserRANGE:
			{
				p.SetState(2639)
				p.Match(SQLParserRANGE)
			}
			{
				p.SetState(2640)
				p.Match(SQLParserLEFT_PAREN)
			}
			p.SetState(2656)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserSUBTYPE:
				{
					p.SetState(2641)
					p.Match(SQLParserSUBTYPE)
				}
				{
					p.SetState(2642)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2643)

					var _x = p.Data_type()


					localctx.(*Create_type_statementContext).subtype_name = _x
				}


			case SQLParserSUBTYPE_OPCLASS:
				{
					p.SetState(2644)
					p.Match(SQLParserSUBTYPE_OPCLASS)
				}
				{
					p.SetState(2645)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2646)

					var _x = p.Identifier()


					localctx.(*Create_type_statementContext).subtype_operator_class = _x
				}


			case SQLParserCOLLATION:
				{
					p.SetState(2647)
					p.Match(SQLParserCOLLATION)
				}
				{
					p.SetState(2648)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2649)

					var _x = p.Schema_qualified_name()


					localctx.(*Create_type_statementContext).collation = _x
				}


			case SQLParserCANONICAL:
				{
					p.SetState(2650)
					p.Match(SQLParserCANONICAL)
				}
				{
					p.SetState(2651)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2652)

					var _x = p.Schema_qualified_name()


					localctx.(*Create_type_statementContext).canonical_function = _x
				}


			case SQLParserSUBTYPE_DIFF:
				{
					p.SetState(2653)
					p.Match(SQLParserSUBTYPE_DIFF)
				}
				{
					p.SetState(2654)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2655)

					var _x = p.Schema_qualified_name()


					localctx.(*Create_type_statementContext).subtype_diff_function = _x
				}


			case SQLParserCOMMA, SQLParserRIGHT_PAREN:



			default:
			}
			p.SetState(2678)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(2658)
					p.Match(SQLParserCOMMA)
				}
				p.SetState(2674)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserSUBTYPE:
					{
						p.SetState(2659)
						p.Match(SQLParserSUBTYPE)
					}
					{
						p.SetState(2660)
						p.Match(SQLParserEQUAL)
					}
					{
						p.SetState(2661)

						var _x = p.Data_type()


						localctx.(*Create_type_statementContext).subtype_name = _x
					}


				case SQLParserSUBTYPE_OPCLASS:
					{
						p.SetState(2662)
						p.Match(SQLParserSUBTYPE_OPCLASS)
					}
					{
						p.SetState(2663)
						p.Match(SQLParserEQUAL)
					}
					{
						p.SetState(2664)

						var _x = p.Identifier()


						localctx.(*Create_type_statementContext).subtype_operator_class = _x
					}


				case SQLParserCOLLATION:
					{
						p.SetState(2665)
						p.Match(SQLParserCOLLATION)
					}
					{
						p.SetState(2666)
						p.Match(SQLParserEQUAL)
					}
					{
						p.SetState(2667)

						var _x = p.Schema_qualified_name()


						localctx.(*Create_type_statementContext).collation = _x
					}


				case SQLParserCANONICAL:
					{
						p.SetState(2668)
						p.Match(SQLParserCANONICAL)
					}
					{
						p.SetState(2669)
						p.Match(SQLParserEQUAL)
					}
					{
						p.SetState(2670)

						var _x = p.Schema_qualified_name()


						localctx.(*Create_type_statementContext).canonical_function = _x
					}


				case SQLParserSUBTYPE_DIFF:
					{
						p.SetState(2671)
						p.Match(SQLParserSUBTYPE_DIFF)
					}
					{
						p.SetState(2672)
						p.Match(SQLParserEQUAL)
					}
					{
						p.SetState(2673)

						var _x = p.Schema_qualified_name()


						localctx.(*Create_type_statementContext).subtype_diff_function = _x
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}


				p.SetState(2680)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2681)
				p.Match(SQLParserRIGHT_PAREN)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserLEFT_PAREN:
		{
			p.SetState(2684)
			p.Match(SQLParserLEFT_PAREN)
		}
		p.SetState(2692)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserINTERNALLENGTH {
			{
				p.SetState(2685)
				p.Match(SQLParserINTERNALLENGTH)
			}
			{
				p.SetState(2686)
				p.Match(SQLParserEQUAL)
			}
			p.SetState(2689)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserPLUS, SQLParserMINUS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER:
				{
					p.SetState(2687)

					var _x = p.Signed_numerical_literal()


					localctx.(*Create_type_statementContext).internallength = _x
				}


			case SQLParserVARIABLE:
				{
					p.SetState(2688)
					p.Match(SQLParserVARIABLE)
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(2691)
				p.Match(SQLParserCOMMA)
			}

		}
		{
			p.SetState(2694)
			p.Match(SQLParserINPUT)
		}
		{
			p.SetState(2695)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2696)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_type_statementContext).input_function = _x
		}
		{
			p.SetState(2697)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(2698)
			p.Match(SQLParserOUTPUT)
		}
		{
			p.SetState(2699)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2700)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_type_statementContext).output_function = _x
		}
		p.SetState(2755)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(2701)
				p.Match(SQLParserCOMMA)
			}
			p.SetState(2751)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserRECEIVE:
				{
					p.SetState(2702)
					p.Match(SQLParserRECEIVE)
				}
				{
					p.SetState(2703)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2704)

					var _x = p.Schema_qualified_name()


					localctx.(*Create_type_statementContext).receive_function = _x
				}


			case SQLParserSEND:
				{
					p.SetState(2705)
					p.Match(SQLParserSEND)
				}
				{
					p.SetState(2706)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2707)

					var _x = p.Schema_qualified_name()


					localctx.(*Create_type_statementContext).send_function = _x
				}


			case SQLParserTYPMOD_IN:
				{
					p.SetState(2708)
					p.Match(SQLParserTYPMOD_IN)
				}
				{
					p.SetState(2709)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2710)

					var _x = p.Schema_qualified_name()


					localctx.(*Create_type_statementContext).type_modifier_input_function = _x
				}


			case SQLParserTYPMOD_OUT:
				{
					p.SetState(2711)
					p.Match(SQLParserTYPMOD_OUT)
				}
				{
					p.SetState(2712)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2713)

					var _x = p.Schema_qualified_name()


					localctx.(*Create_type_statementContext).type_modifier_output_function = _x
				}


			case SQLParserANALYZE:
				{
					p.SetState(2714)
					p.Match(SQLParserANALYZE)
				}
				{
					p.SetState(2715)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2716)

					var _x = p.Schema_qualified_name()


					localctx.(*Create_type_statementContext).analyze_function = _x
				}


			case SQLParserINTERNALLENGTH:
				{
					p.SetState(2717)
					p.Match(SQLParserINTERNALLENGTH)
				}
				{
					p.SetState(2718)
					p.Match(SQLParserEQUAL)
				}
				p.SetState(2721)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserPLUS, SQLParserMINUS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER:
					{
						p.SetState(2719)

						var _x = p.Signed_numerical_literal()


						localctx.(*Create_type_statementContext).internallength = _x
					}


				case SQLParserVARIABLE:
					{
						p.SetState(2720)
						p.Match(SQLParserVARIABLE)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}


			case SQLParserPASSEDBYVALUE:
				{
					p.SetState(2723)
					p.Match(SQLParserPASSEDBYVALUE)
				}


			case SQLParserALIGNMENT:
				{
					p.SetState(2724)
					p.Match(SQLParserALIGNMENT)
				}
				{
					p.SetState(2725)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2726)

					var _x = p.Data_type()


					localctx.(*Create_type_statementContext).alignment = _x
				}


			case SQLParserSTORAGE:
				{
					p.SetState(2727)
					p.Match(SQLParserSTORAGE)
				}
				{
					p.SetState(2728)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2729)

					var _x = p.Storage_option()


					localctx.(*Create_type_statementContext).storage = _x
				}


			case SQLParserLIKE:
				{
					p.SetState(2730)
					p.Match(SQLParserLIKE)
				}
				{
					p.SetState(2731)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2732)

					var _x = p.Data_type()


					localctx.(*Create_type_statementContext).like_type = _x
				}


			case SQLParserCATEGORY:
				{
					p.SetState(2733)
					p.Match(SQLParserCATEGORY)
				}
				{
					p.SetState(2734)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2735)

					var _x = p.Character_string()


					localctx.(*Create_type_statementContext).category = _x
				}


			case SQLParserPREFERRED:
				{
					p.SetState(2736)
					p.Match(SQLParserPREFERRED)
				}
				{
					p.SetState(2737)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2738)

					var _x = p.Truth_value()


					localctx.(*Create_type_statementContext).preferred = _x
				}


			case SQLParserDEFAULT:
				{
					p.SetState(2739)
					p.Match(SQLParserDEFAULT)
				}
				{
					p.SetState(2740)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2741)

					var _x = p.vex(0)

					localctx.(*Create_type_statementContext).default_value = _x
				}


			case SQLParserELEMENT:
				{
					p.SetState(2742)
					p.Match(SQLParserELEMENT)
				}
				{
					p.SetState(2743)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2744)

					var _x = p.Data_type()


					localctx.(*Create_type_statementContext).element = _x
				}


			case SQLParserDELIMITER:
				{
					p.SetState(2745)
					p.Match(SQLParserDELIMITER)
				}
				{
					p.SetState(2746)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2747)

					var _x = p.Character_string()


					localctx.(*Create_type_statementContext).delimiter = _x
				}


			case SQLParserCOLLATABLE:
				{
					p.SetState(2748)
					p.Match(SQLParserCOLLATABLE)
				}
				{
					p.SetState(2749)
					p.Match(SQLParserEQUAL)
				}
				{
					p.SetState(2750)

					var _x = p.Truth_value()


					localctx.(*Create_type_statementContext).collatable = _x
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}


			p.SetState(2757)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2758)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserEOF, SQLParserSEMI_COLON:



	default:
	}



	return localctx
}


// ICreate_domain_statementContext is an interface to support dynamic dispatch.
type ICreate_domain_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetDat_type returns the dat_type rule contexts.
	GetDat_type() IData_typeContext

	// GetDef_value returns the def_value rule contexts.
	GetDef_value() IVexContext

	// Get_domain_constraint returns the _domain_constraint rule contexts.
	Get_domain_constraint() IDomain_constraintContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetDat_type sets the dat_type rule contexts.
	SetDat_type(IData_typeContext)

	// SetDef_value sets the def_value rule contexts.
	SetDef_value(IVexContext)

	// Set_domain_constraint sets the _domain_constraint rule contexts.
	Set_domain_constraint(IDomain_constraintContext)


	// GetDom_constraint returns the dom_constraint rule context list.
	GetDom_constraint() []IDomain_constraintContext


	// SetDom_constraint sets the dom_constraint rule context list.
	SetDom_constraint([]IDomain_constraintContext) 


	// IsCreate_domain_statementContext differentiates from other interfaces.
	IsCreate_domain_statementContext()
}

type Create_domain_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	dat_type IData_typeContext 
	def_value IVexContext 
	_domain_constraint IDomain_constraintContext 
	dom_constraint []IDomain_constraintContext
}

func NewEmptyCreate_domain_statementContext() *Create_domain_statementContext {
	var p = new(Create_domain_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_domain_statement
	return p
}

func (*Create_domain_statementContext) IsCreate_domain_statementContext() {}

func NewCreate_domain_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_domain_statementContext {
	var p = new(Create_domain_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_domain_statement

	return p
}

func (s *Create_domain_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_domain_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Create_domain_statementContext) GetDat_type() IData_typeContext { return s.dat_type }

func (s *Create_domain_statementContext) GetDef_value() IVexContext { return s.def_value }

func (s *Create_domain_statementContext) Get_domain_constraint() IDomain_constraintContext { return s._domain_constraint }


func (s *Create_domain_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Create_domain_statementContext) SetDat_type(v IData_typeContext) { s.dat_type = v }

func (s *Create_domain_statementContext) SetDef_value(v IVexContext) { s.def_value = v }

func (s *Create_domain_statementContext) Set_domain_constraint(v IDomain_constraintContext) { s._domain_constraint = v }


func (s *Create_domain_statementContext) GetDom_constraint() []IDomain_constraintContext { return s.dom_constraint }


func (s *Create_domain_statementContext) SetDom_constraint(v []IDomain_constraintContext) { s.dom_constraint = v }


func (s *Create_domain_statementContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Create_domain_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_domain_statementContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_domain_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Create_domain_statementContext) AllCollate_identifier() []ICollate_identifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICollate_identifierContext)(nil)).Elem())
	var tst = make([]ICollate_identifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICollate_identifierContext)
		}
	}

	return tst
}

func (s *Create_domain_statementContext) Collate_identifier(i int) ICollate_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollate_identifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICollate_identifierContext)
}

func (s *Create_domain_statementContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDEFAULT)
}

func (s *Create_domain_statementContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, i)
}

func (s *Create_domain_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Create_domain_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Create_domain_statementContext) AllDomain_constraint() []IDomain_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDomain_constraintContext)(nil)).Elem())
	var tst = make([]IDomain_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDomain_constraintContext)
		}
	}

	return tst
}

func (s *Create_domain_statementContext) Domain_constraint(i int) IDomain_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDomain_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDomain_constraintContext)
}

func (s *Create_domain_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_domain_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_domain_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_domain_statement(s)
	}
}

func (s *Create_domain_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_domain_statement(s)
	}
}




func (p *SQLParser) Create_domain_statement() (localctx ICreate_domain_statementContext) {
	localctx = NewCreate_domain_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, SQLParserRULE_create_domain_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2762)
		p.Match(SQLParserDOMAIN)
	}
	{
		p.SetState(2763)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_domain_statementContext).name = _x
	}
	p.SetState(2765)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserAS {
		{
			p.SetState(2764)
			p.Match(SQLParserAS)
		}

	}
	{
		p.SetState(2767)

		var _x = p.Data_type()


		localctx.(*Create_domain_statementContext).dat_type = _x
	}
	p.SetState(2774)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ((((_la - 385)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 385))) & ((1 << (SQLParserCHECK - 385)) | (1 << (SQLParserCOLLATE - 385)) | (1 << (SQLParserCONSTRAINT - 385)) | (1 << (SQLParserDEFAULT - 385)))) != 0) || _la == SQLParserNOT || _la == SQLParserNULL {
		p.SetState(2772)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCOLLATE:
			{
				p.SetState(2768)
				p.Collate_identifier()
			}


		case SQLParserDEFAULT:
			{
				p.SetState(2769)
				p.Match(SQLParserDEFAULT)
			}
			{
				p.SetState(2770)

				var _x = p.vex(0)

				localctx.(*Create_domain_statementContext).def_value = _x
			}


		case SQLParserCHECK, SQLParserCONSTRAINT, SQLParserNOT, SQLParserNULL:
			{
				p.SetState(2771)

				var _x = p.Domain_constraint()


				localctx.(*Create_domain_statementContext)._domain_constraint = _x
			}
			localctx.(*Create_domain_statementContext).dom_constraint = append(localctx.(*Create_domain_statementContext).dom_constraint, localctx.(*Create_domain_statementContext)._domain_constraint)



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2776)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ICreate_server_statementContext is an interface to support dynamic dispatch.
type ICreate_server_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_server_statementContext differentiates from other interfaces.
	IsCreate_server_statementContext()
}

type Create_server_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_server_statementContext() *Create_server_statementContext {
	var p = new(Create_server_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_server_statement
	return p
}

func (*Create_server_statementContext) IsCreate_server_statementContext() {}

func NewCreate_server_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_server_statementContext {
	var p = new(Create_server_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_server_statement

	return p
}

func (s *Create_server_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_server_statementContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Create_server_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Create_server_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_server_statementContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Create_server_statementContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Create_server_statementContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(SQLParserWRAPPER, 0)
}

func (s *Create_server_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_server_statementContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Create_server_statementContext) AllCharacter_string() []ICharacter_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem())
	var tst = make([]ICharacter_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICharacter_stringContext)
		}
	}

	return tst
}

func (s *Create_server_statementContext) Character_string(i int) ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Create_server_statementContext) VERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserVERSION, 0)
}

func (s *Create_server_statementContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Create_server_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_server_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_server_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_server_statement(s)
	}
}

func (s *Create_server_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_server_statement(s)
	}
}




func (p *SQLParser) Create_server_statement() (localctx ICreate_server_statementContext) {
	localctx = NewCreate_server_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, SQLParserRULE_create_server_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2777)
		p.Match(SQLParserSERVER)
	}
	p.SetState(2779)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 292, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2778)
			p.If_not_exists()
		}


	}
	{
		p.SetState(2781)
		p.Identifier()
	}
	p.SetState(2784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTYPE {
		{
			p.SetState(2782)
			p.Match(SQLParserTYPE)
		}
		{
			p.SetState(2783)
			p.Character_string()
		}

	}
	p.SetState(2788)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserVERSION {
		{
			p.SetState(2786)
			p.Match(SQLParserVERSION)
		}
		{
			p.SetState(2787)
			p.Character_string()
		}

	}
	{
		p.SetState(2790)
		p.Match(SQLParserFOREIGN)
	}
	{
		p.SetState(2791)
		p.Match(SQLParserDATA)
	}
	{
		p.SetState(2792)
		p.Match(SQLParserWRAPPER)
	}
	{
		p.SetState(2793)
		p.Identifier()
	}
	p.SetState(2795)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOPTIONS {
		{
			p.SetState(2794)
			p.Define_foreign_options()
		}

	}



	return localctx
}


// ICreate_fts_dictionary_statementContext is an interface to support dynamic dispatch.
type ICreate_fts_dictionary_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetTemplate returns the template rule contexts.
	GetTemplate() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetTemplate sets the template rule contexts.
	SetTemplate(ISchema_qualified_nameContext)


	// IsCreate_fts_dictionary_statementContext differentiates from other interfaces.
	IsCreate_fts_dictionary_statementContext()
}

type Create_fts_dictionary_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	template ISchema_qualified_nameContext 
}

func NewEmptyCreate_fts_dictionary_statementContext() *Create_fts_dictionary_statementContext {
	var p = new(Create_fts_dictionary_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_fts_dictionary_statement
	return p
}

func (*Create_fts_dictionary_statementContext) IsCreate_fts_dictionary_statementContext() {}

func NewCreate_fts_dictionary_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_fts_dictionary_statementContext {
	var p = new(Create_fts_dictionary_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_fts_dictionary_statement

	return p
}

func (s *Create_fts_dictionary_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_fts_dictionary_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Create_fts_dictionary_statementContext) GetTemplate() ISchema_qualified_nameContext { return s.template }


func (s *Create_fts_dictionary_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Create_fts_dictionary_statementContext) SetTemplate(v ISchema_qualified_nameContext) { s.template = v }


func (s *Create_fts_dictionary_statementContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Create_fts_dictionary_statementContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Create_fts_dictionary_statementContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(SQLParserDICTIONARY, 0)
}

func (s *Create_fts_dictionary_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_fts_dictionary_statementContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPLATE, 0)
}

func (s *Create_fts_dictionary_statementContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Create_fts_dictionary_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_fts_dictionary_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_fts_dictionary_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_fts_dictionary_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_fts_dictionary_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_fts_dictionary_statementContext) AllOption_with_value() []IOption_with_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOption_with_valueContext)(nil)).Elem())
	var tst = make([]IOption_with_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOption_with_valueContext)
		}
	}

	return tst
}

func (s *Create_fts_dictionary_statementContext) Option_with_value(i int) IOption_with_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_with_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOption_with_valueContext)
}

func (s *Create_fts_dictionary_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_fts_dictionary_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_fts_dictionary_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_fts_dictionary_statement(s)
	}
}

func (s *Create_fts_dictionary_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_fts_dictionary_statement(s)
	}
}




func (p *SQLParser) Create_fts_dictionary_statement() (localctx ICreate_fts_dictionary_statementContext) {
	localctx = NewCreate_fts_dictionary_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, SQLParserRULE_create_fts_dictionary_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2797)
		p.Match(SQLParserTEXT)
	}
	{
		p.SetState(2798)
		p.Match(SQLParserSEARCH)
	}
	{
		p.SetState(2799)
		p.Match(SQLParserDICTIONARY)
	}
	{
		p.SetState(2800)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_dictionary_statementContext).name = _x
	}
	{
		p.SetState(2801)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(2802)
		p.Match(SQLParserTEMPLATE)
	}
	{
		p.SetState(2803)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(2804)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_dictionary_statementContext).template = _x
	}
	p.SetState(2809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(2805)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(2806)
			p.Option_with_value()
		}


		p.SetState(2811)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2812)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IOption_with_valueContext is an interface to support dynamic dispatch.
type IOption_with_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOption_with_valueContext differentiates from other interfaces.
	IsOption_with_valueContext()
}

type Option_with_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOption_with_valueContext() *Option_with_valueContext {
	var p = new(Option_with_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_option_with_value
	return p
}

func (*Option_with_valueContext) IsOption_with_valueContext() {}

func NewOption_with_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Option_with_valueContext {
	var p = new(Option_with_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_option_with_value

	return p
}

func (s *Option_with_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Option_with_valueContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Option_with_valueContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Option_with_valueContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Option_with_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Option_with_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Option_with_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOption_with_value(s)
	}
}

func (s *Option_with_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOption_with_value(s)
	}
}




func (p *SQLParser) Option_with_value() (localctx IOption_with_valueContext) {
	localctx = NewOption_with_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, SQLParserRULE_option_with_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2814)
		p.Identifier()
	}
	{
		p.SetState(2815)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(2816)
		p.vex(0)
	}



	return localctx
}


// ICreate_fts_configuration_statementContext is an interface to support dynamic dispatch.
type ICreate_fts_configuration_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetParser_name returns the parser_name rule contexts.
	GetParser_name() ISchema_qualified_nameContext

	// GetConfig_name returns the config_name rule contexts.
	GetConfig_name() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetParser_name sets the parser_name rule contexts.
	SetParser_name(ISchema_qualified_nameContext)

	// SetConfig_name sets the config_name rule contexts.
	SetConfig_name(ISchema_qualified_nameContext)


	// IsCreate_fts_configuration_statementContext differentiates from other interfaces.
	IsCreate_fts_configuration_statementContext()
}

type Create_fts_configuration_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	parser_name ISchema_qualified_nameContext 
	config_name ISchema_qualified_nameContext 
}

func NewEmptyCreate_fts_configuration_statementContext() *Create_fts_configuration_statementContext {
	var p = new(Create_fts_configuration_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_fts_configuration_statement
	return p
}

func (*Create_fts_configuration_statementContext) IsCreate_fts_configuration_statementContext() {}

func NewCreate_fts_configuration_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_fts_configuration_statementContext {
	var p = new(Create_fts_configuration_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_fts_configuration_statement

	return p
}

func (s *Create_fts_configuration_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_fts_configuration_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Create_fts_configuration_statementContext) GetParser_name() ISchema_qualified_nameContext { return s.parser_name }

func (s *Create_fts_configuration_statementContext) GetConfig_name() ISchema_qualified_nameContext { return s.config_name }


func (s *Create_fts_configuration_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Create_fts_configuration_statementContext) SetParser_name(v ISchema_qualified_nameContext) { s.parser_name = v }

func (s *Create_fts_configuration_statementContext) SetConfig_name(v ISchema_qualified_nameContext) { s.config_name = v }


func (s *Create_fts_configuration_statementContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Create_fts_configuration_statementContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Create_fts_configuration_statementContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFIGURATION, 0)
}

func (s *Create_fts_configuration_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_fts_configuration_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_fts_configuration_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_fts_configuration_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_fts_configuration_statementContext) PARSER() antlr.TerminalNode {
	return s.GetToken(SQLParserPARSER, 0)
}

func (s *Create_fts_configuration_statementContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Create_fts_configuration_statementContext) COPY() antlr.TerminalNode {
	return s.GetToken(SQLParserCOPY, 0)
}

func (s *Create_fts_configuration_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_fts_configuration_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_fts_configuration_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_fts_configuration_statement(s)
	}
}

func (s *Create_fts_configuration_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_fts_configuration_statement(s)
	}
}




func (p *SQLParser) Create_fts_configuration_statement() (localctx ICreate_fts_configuration_statementContext) {
	localctx = NewCreate_fts_configuration_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, SQLParserRULE_create_fts_configuration_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2818)
		p.Match(SQLParserTEXT)
	}
	{
		p.SetState(2819)
		p.Match(SQLParserSEARCH)
	}
	{
		p.SetState(2820)
		p.Match(SQLParserCONFIGURATION)
	}
	{
		p.SetState(2821)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_configuration_statementContext).name = _x
	}
	{
		p.SetState(2822)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(2829)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserPARSER:
		{
			p.SetState(2823)
			p.Match(SQLParserPARSER)
		}
		{
			p.SetState(2824)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2825)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_fts_configuration_statementContext).parser_name = _x
		}


	case SQLParserCOPY:
		{
			p.SetState(2826)
			p.Match(SQLParserCOPY)
		}
		{
			p.SetState(2827)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2828)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_fts_configuration_statementContext).config_name = _x
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2831)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// ICreate_fts_template_statementContext is an interface to support dynamic dispatch.
type ICreate_fts_template_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetInit_name returns the init_name rule contexts.
	GetInit_name() ISchema_qualified_nameContext

	// GetLexize_name returns the lexize_name rule contexts.
	GetLexize_name() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetInit_name sets the init_name rule contexts.
	SetInit_name(ISchema_qualified_nameContext)

	// SetLexize_name sets the lexize_name rule contexts.
	SetLexize_name(ISchema_qualified_nameContext)


	// IsCreate_fts_template_statementContext differentiates from other interfaces.
	IsCreate_fts_template_statementContext()
}

type Create_fts_template_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	init_name ISchema_qualified_nameContext 
	lexize_name ISchema_qualified_nameContext 
}

func NewEmptyCreate_fts_template_statementContext() *Create_fts_template_statementContext {
	var p = new(Create_fts_template_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_fts_template_statement
	return p
}

func (*Create_fts_template_statementContext) IsCreate_fts_template_statementContext() {}

func NewCreate_fts_template_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_fts_template_statementContext {
	var p = new(Create_fts_template_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_fts_template_statement

	return p
}

func (s *Create_fts_template_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_fts_template_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Create_fts_template_statementContext) GetInit_name() ISchema_qualified_nameContext { return s.init_name }

func (s *Create_fts_template_statementContext) GetLexize_name() ISchema_qualified_nameContext { return s.lexize_name }


func (s *Create_fts_template_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Create_fts_template_statementContext) SetInit_name(v ISchema_qualified_nameContext) { s.init_name = v }

func (s *Create_fts_template_statementContext) SetLexize_name(v ISchema_qualified_nameContext) { s.lexize_name = v }


func (s *Create_fts_template_statementContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Create_fts_template_statementContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Create_fts_template_statementContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPLATE, 0)
}

func (s *Create_fts_template_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_fts_template_statementContext) LEXIZE() antlr.TerminalNode {
	return s.GetToken(SQLParserLEXIZE, 0)
}

func (s *Create_fts_template_statementContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserEQUAL)
}

func (s *Create_fts_template_statementContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, i)
}

func (s *Create_fts_template_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_fts_template_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_fts_template_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_fts_template_statementContext) AllINIT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserINIT)
}

func (s *Create_fts_template_statementContext) INIT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserINIT, i)
}

func (s *Create_fts_template_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_fts_template_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_fts_template_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_fts_template_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_fts_template_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_fts_template_statement(s)
	}
}

func (s *Create_fts_template_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_fts_template_statement(s)
	}
}




func (p *SQLParser) Create_fts_template_statement() (localctx ICreate_fts_template_statementContext) {
	localctx = NewCreate_fts_template_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, SQLParserRULE_create_fts_template_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2833)
		p.Match(SQLParserTEXT)
	}
	{
		p.SetState(2834)
		p.Match(SQLParserSEARCH)
	}
	{
		p.SetState(2835)
		p.Match(SQLParserTEMPLATE)
	}
	{
		p.SetState(2836)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_template_statementContext).name = _x
	}
	{
		p.SetState(2837)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(2843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserINIT {
		{
			p.SetState(2838)
			p.Match(SQLParserINIT)
		}
		{
			p.SetState(2839)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2840)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_fts_template_statementContext).init_name = _x
		}
		{
			p.SetState(2841)
			p.Match(SQLParserCOMMA)
		}

	}
	{
		p.SetState(2845)
		p.Match(SQLParserLEXIZE)
	}
	{
		p.SetState(2846)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(2847)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_template_statementContext).lexize_name = _x
	}
	p.SetState(2852)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCOMMA {
		{
			p.SetState(2848)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(2849)
			p.Match(SQLParserINIT)
		}
		{
			p.SetState(2850)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2851)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_fts_template_statementContext).init_name = _x
		}

	}
	{
		p.SetState(2854)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// ICreate_fts_parser_statementContext is an interface to support dynamic dispatch.
type ICreate_fts_parser_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetStart_func returns the start_func rule contexts.
	GetStart_func() ISchema_qualified_nameContext

	// GetGettoken_func returns the gettoken_func rule contexts.
	GetGettoken_func() ISchema_qualified_nameContext

	// GetEnd_func returns the end_func rule contexts.
	GetEnd_func() ISchema_qualified_nameContext

	// GetHeadline_func returns the headline_func rule contexts.
	GetHeadline_func() ISchema_qualified_nameContext

	// GetLextypes_func returns the lextypes_func rule contexts.
	GetLextypes_func() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetStart_func sets the start_func rule contexts.
	SetStart_func(ISchema_qualified_nameContext)

	// SetGettoken_func sets the gettoken_func rule contexts.
	SetGettoken_func(ISchema_qualified_nameContext)

	// SetEnd_func sets the end_func rule contexts.
	SetEnd_func(ISchema_qualified_nameContext)

	// SetHeadline_func sets the headline_func rule contexts.
	SetHeadline_func(ISchema_qualified_nameContext)

	// SetLextypes_func sets the lextypes_func rule contexts.
	SetLextypes_func(ISchema_qualified_nameContext)


	// IsCreate_fts_parser_statementContext differentiates from other interfaces.
	IsCreate_fts_parser_statementContext()
}

type Create_fts_parser_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	start_func ISchema_qualified_nameContext 
	gettoken_func ISchema_qualified_nameContext 
	end_func ISchema_qualified_nameContext 
	headline_func ISchema_qualified_nameContext 
	lextypes_func ISchema_qualified_nameContext 
}

func NewEmptyCreate_fts_parser_statementContext() *Create_fts_parser_statementContext {
	var p = new(Create_fts_parser_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_fts_parser_statement
	return p
}

func (*Create_fts_parser_statementContext) IsCreate_fts_parser_statementContext() {}

func NewCreate_fts_parser_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_fts_parser_statementContext {
	var p = new(Create_fts_parser_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_fts_parser_statement

	return p
}

func (s *Create_fts_parser_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_fts_parser_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Create_fts_parser_statementContext) GetStart_func() ISchema_qualified_nameContext { return s.start_func }

func (s *Create_fts_parser_statementContext) GetGettoken_func() ISchema_qualified_nameContext { return s.gettoken_func }

func (s *Create_fts_parser_statementContext) GetEnd_func() ISchema_qualified_nameContext { return s.end_func }

func (s *Create_fts_parser_statementContext) GetHeadline_func() ISchema_qualified_nameContext { return s.headline_func }

func (s *Create_fts_parser_statementContext) GetLextypes_func() ISchema_qualified_nameContext { return s.lextypes_func }


func (s *Create_fts_parser_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Create_fts_parser_statementContext) SetStart_func(v ISchema_qualified_nameContext) { s.start_func = v }

func (s *Create_fts_parser_statementContext) SetGettoken_func(v ISchema_qualified_nameContext) { s.gettoken_func = v }

func (s *Create_fts_parser_statementContext) SetEnd_func(v ISchema_qualified_nameContext) { s.end_func = v }

func (s *Create_fts_parser_statementContext) SetHeadline_func(v ISchema_qualified_nameContext) { s.headline_func = v }

func (s *Create_fts_parser_statementContext) SetLextypes_func(v ISchema_qualified_nameContext) { s.lextypes_func = v }


func (s *Create_fts_parser_statementContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Create_fts_parser_statementContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Create_fts_parser_statementContext) PARSER() antlr.TerminalNode {
	return s.GetToken(SQLParserPARSER, 0)
}

func (s *Create_fts_parser_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_fts_parser_statementContext) START() antlr.TerminalNode {
	return s.GetToken(SQLParserSTART, 0)
}

func (s *Create_fts_parser_statementContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserEQUAL)
}

func (s *Create_fts_parser_statementContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, i)
}

func (s *Create_fts_parser_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_fts_parser_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_fts_parser_statementContext) GETTOKEN() antlr.TerminalNode {
	return s.GetToken(SQLParserGETTOKEN, 0)
}

func (s *Create_fts_parser_statementContext) END() antlr.TerminalNode {
	return s.GetToken(SQLParserEND, 0)
}

func (s *Create_fts_parser_statementContext) LEXTYPES() antlr.TerminalNode {
	return s.GetToken(SQLParserLEXTYPES, 0)
}

func (s *Create_fts_parser_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_fts_parser_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_fts_parser_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_fts_parser_statementContext) AllHEADLINE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserHEADLINE)
}

func (s *Create_fts_parser_statementContext) HEADLINE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserHEADLINE, i)
}

func (s *Create_fts_parser_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_fts_parser_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_fts_parser_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_fts_parser_statement(s)
	}
}

func (s *Create_fts_parser_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_fts_parser_statement(s)
	}
}




func (p *SQLParser) Create_fts_parser_statement() (localctx ICreate_fts_parser_statementContext) {
	localctx = NewCreate_fts_parser_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, SQLParserRULE_create_fts_parser_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2856)
		p.Match(SQLParserTEXT)
	}
	{
		p.SetState(2857)
		p.Match(SQLParserSEARCH)
	}
	{
		p.SetState(2858)
		p.Match(SQLParserPARSER)
	}
	{
		p.SetState(2859)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_parser_statementContext).name = _x
	}
	{
		p.SetState(2860)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(2861)
		p.Match(SQLParserSTART)
	}
	{
		p.SetState(2862)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(2863)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_parser_statementContext).start_func = _x
	}
	{
		p.SetState(2864)
		p.Match(SQLParserCOMMA)
	}
	{
		p.SetState(2865)
		p.Match(SQLParserGETTOKEN)
	}
	{
		p.SetState(2866)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(2867)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_parser_statementContext).gettoken_func = _x
	}
	{
		p.SetState(2868)
		p.Match(SQLParserCOMMA)
	}
	{
		p.SetState(2869)
		p.Match(SQLParserEND)
	}
	{
		p.SetState(2870)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(2871)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_parser_statementContext).end_func = _x
	}
	{
		p.SetState(2872)
		p.Match(SQLParserCOMMA)
	}
	p.SetState(2878)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserHEADLINE {
		{
			p.SetState(2873)
			p.Match(SQLParserHEADLINE)
		}
		{
			p.SetState(2874)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2875)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_fts_parser_statementContext).headline_func = _x
		}
		{
			p.SetState(2876)
			p.Match(SQLParserCOMMA)
		}

	}
	{
		p.SetState(2880)
		p.Match(SQLParserLEXTYPES)
	}
	{
		p.SetState(2881)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(2882)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_fts_parser_statementContext).lextypes_func = _x
	}
	p.SetState(2887)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCOMMA {
		{
			p.SetState(2883)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(2884)
			p.Match(SQLParserHEADLINE)
		}
		{
			p.SetState(2885)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2886)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_fts_parser_statementContext).headline_func = _x
		}

	}
	{
		p.SetState(2889)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// ICreate_collation_statementContext is an interface to support dynamic dispatch.
type ICreate_collation_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsCreate_collation_statementContext differentiates from other interfaces.
	IsCreate_collation_statementContext()
}

type Create_collation_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyCreate_collation_statementContext() *Create_collation_statementContext {
	var p = new(Create_collation_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_collation_statement
	return p
}

func (*Create_collation_statementContext) IsCreate_collation_statementContext() {}

func NewCreate_collation_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_collation_statementContext {
	var p = new(Create_collation_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_collation_statement

	return p
}

func (s *Create_collation_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_collation_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Create_collation_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Create_collation_statementContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATION, 0)
}

func (s *Create_collation_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_collation_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_collation_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Create_collation_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_collation_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_collation_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_collation_statementContext) AllCollation_option() []ICollation_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICollation_optionContext)(nil)).Elem())
	var tst = make([]ICollation_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICollation_optionContext)
		}
	}

	return tst
}

func (s *Create_collation_statementContext) Collation_option(i int) ICollation_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICollation_optionContext)
}

func (s *Create_collation_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_collation_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_collation_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_collation_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_collation_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_collation_statement(s)
	}
}

func (s *Create_collation_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_collation_statement(s)
	}
}




func (p *SQLParser) Create_collation_statement() (localctx ICreate_collation_statementContext) {
	localctx = NewCreate_collation_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, SQLParserRULE_create_collation_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2891)
		p.Match(SQLParserCOLLATION)
	}
	p.SetState(2893)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 302, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2892)
			p.If_not_exists()
		}


	}
	{
		p.SetState(2895)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_collation_statementContext).name = _x
	}
	p.SetState(2910)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserFROM:
		{
			p.SetState(2896)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(2897)
			p.Schema_qualified_name()
		}


	case SQLParserLEFT_PAREN:
		{
			p.SetState(2898)
			p.Match(SQLParserLEFT_PAREN)
		}
		p.SetState(2907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserVERSION || ((((_la - 465)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 465))) & ((1 << (SQLParserDETERMINISTIC - 465)) | (1 << (SQLParserLC_COLLATE - 465)) | (1 << (SQLParserLC_CTYPE - 465)) | (1 << (SQLParserLOCALE - 465)))) != 0) || _la == SQLParserPROVIDER {
			{
				p.SetState(2899)
				p.Collation_option()
			}
			p.SetState(2904)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(2900)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(2901)
					p.Collation_option()
				}


				p.SetState(2906)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(2909)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IAlter_collation_statementContext is an interface to support dynamic dispatch.
type IAlter_collation_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsAlter_collation_statementContext differentiates from other interfaces.
	IsAlter_collation_statementContext()
}

type Alter_collation_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyAlter_collation_statementContext() *Alter_collation_statementContext {
	var p = new(Alter_collation_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_collation_statement
	return p
}

func (*Alter_collation_statementContext) IsAlter_collation_statementContext() {}

func NewAlter_collation_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_collation_statementContext {
	var p = new(Alter_collation_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_collation_statement

	return p
}

func (s *Alter_collation_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_collation_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Alter_collation_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Alter_collation_statementContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATION, 0)
}

func (s *Alter_collation_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_collation_statementContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SQLParserREFRESH, 0)
}

func (s *Alter_collation_statementContext) VERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserVERSION, 0)
}

func (s *Alter_collation_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_collation_statementContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_collation_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_collation_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_collation_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_collation_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_collation_statement(s)
	}
}

func (s *Alter_collation_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_collation_statement(s)
	}
}




func (p *SQLParser) Alter_collation_statement() (localctx IAlter_collation_statementContext) {
	localctx = NewAlter_collation_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, SQLParserRULE_alter_collation_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2912)
		p.Match(SQLParserCOLLATION)
	}
	{
		p.SetState(2913)

		var _x = p.Schema_qualified_name()


		localctx.(*Alter_collation_statementContext).name = _x
	}
	p.SetState(2919)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserREFRESH:
		{
			p.SetState(2914)
			p.Match(SQLParserREFRESH)
		}
		{
			p.SetState(2915)
			p.Match(SQLParserVERSION)
		}


	case SQLParserRENAME:
		{
			p.SetState(2916)
			p.Rename_to()
		}


	case SQLParserOWNER:
		{
			p.SetState(2917)
			p.Owner_to()
		}


	case SQLParserSET:
		{
			p.SetState(2918)
			p.Set_schema()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// ICollation_optionContext is an interface to support dynamic dispatch.
type ICollation_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollation_optionContext differentiates from other interfaces.
	IsCollation_optionContext()
}

type Collation_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollation_optionContext() *Collation_optionContext {
	var p = new(Collation_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_collation_option
	return p
}

func (*Collation_optionContext) IsCollation_optionContext() {}

func NewCollation_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collation_optionContext {
	var p = new(Collation_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_collation_option

	return p
}

func (s *Collation_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Collation_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Collation_optionContext) LOCALE() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCALE, 0)
}

func (s *Collation_optionContext) LC_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserLC_COLLATE, 0)
}

func (s *Collation_optionContext) LC_CTYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserLC_CTYPE, 0)
}

func (s *Collation_optionContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(SQLParserPROVIDER, 0)
}

func (s *Collation_optionContext) VERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserVERSION, 0)
}

func (s *Collation_optionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Collation_optionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Collation_optionContext) DETERMINISTIC() antlr.TerminalNode {
	return s.GetToken(SQLParserDETERMINISTIC, 0)
}

func (s *Collation_optionContext) Boolean_value() IBoolean_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_valueContext)
}

func (s *Collation_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collation_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Collation_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCollation_option(s)
	}
}

func (s *Collation_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCollation_option(s)
	}
}




func (p *SQLParser) Collation_option() (localctx ICollation_optionContext) {
	localctx = NewCollation_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, SQLParserRULE_collation_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2930)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserVERSION, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLOCALE, SQLParserPROVIDER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2921)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserVERSION || ((((_la - 487)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 487))) & ((1 << (SQLParserLC_COLLATE - 487)) | (1 << (SQLParserLC_CTYPE - 487)) | (1 << (SQLParserLOCALE - 487)))) != 0) || _la == SQLParserPROVIDER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2922)
			p.Match(SQLParserEQUAL)
		}
		p.SetState(2925)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(2923)
				p.Character_string()
			}


		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(2924)
				p.Identifier()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserDETERMINISTIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2927)
			p.Match(SQLParserDETERMINISTIC)
		}
		{
			p.SetState(2928)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(2929)
			p.Boolean_value()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_user_mapping_statementContext is an interface to support dynamic dispatch.
type ICreate_user_mapping_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_user_mapping_statementContext differentiates from other interfaces.
	IsCreate_user_mapping_statementContext()
}

type Create_user_mapping_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_user_mapping_statementContext() *Create_user_mapping_statementContext {
	var p = new(Create_user_mapping_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_user_mapping_statement
	return p
}

func (*Create_user_mapping_statementContext) IsCreate_user_mapping_statementContext() {}

func NewCreate_user_mapping_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_user_mapping_statementContext {
	var p = new(Create_user_mapping_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_user_mapping_statement

	return p
}

func (s *Create_user_mapping_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_user_mapping_statementContext) AllUSER() []antlr.TerminalNode {
	return s.GetTokens(SQLParserUSER)
}

func (s *Create_user_mapping_statementContext) USER(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, i)
}

func (s *Create_user_mapping_statementContext) MAPPING() antlr.TerminalNode {
	return s.GetToken(SQLParserMAPPING, 0)
}

func (s *Create_user_mapping_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Create_user_mapping_statementContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Create_user_mapping_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_user_mapping_statementContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Create_user_mapping_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_user_mapping_statementContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Create_user_mapping_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_user_mapping_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_user_mapping_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_user_mapping_statement(s)
	}
}

func (s *Create_user_mapping_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_user_mapping_statement(s)
	}
}




func (p *SQLParser) Create_user_mapping_statement() (localctx ICreate_user_mapping_statementContext) {
	localctx = NewCreate_user_mapping_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, SQLParserRULE_create_user_mapping_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2932)
		p.Match(SQLParserUSER)
	}
	{
		p.SetState(2933)
		p.Match(SQLParserMAPPING)
	}
	p.SetState(2935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserIF {
		{
			p.SetState(2934)
			p.If_not_exists()
		}

	}
	{
		p.SetState(2937)
		p.Match(SQLParserFOR)
	}
	p.SetState(2940)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserCURRENT_USER, SQLParserSESSION_USER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(2938)
			p.User_name()
		}


	case SQLParserUSER:
		{
			p.SetState(2939)
			p.Match(SQLParserUSER)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2942)
		p.Match(SQLParserSERVER)
	}
	{
		p.SetState(2943)
		p.Identifier()
	}
	p.SetState(2945)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOPTIONS {
		{
			p.SetState(2944)
			p.Define_foreign_options()
		}

	}



	return localctx
}


// IAlter_user_mapping_statementContext is an interface to support dynamic dispatch.
type IAlter_user_mapping_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_user_mapping_statementContext differentiates from other interfaces.
	IsAlter_user_mapping_statementContext()
}

type Alter_user_mapping_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_user_mapping_statementContext() *Alter_user_mapping_statementContext {
	var p = new(Alter_user_mapping_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_user_mapping_statement
	return p
}

func (*Alter_user_mapping_statementContext) IsAlter_user_mapping_statementContext() {}

func NewAlter_user_mapping_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_user_mapping_statementContext {
	var p = new(Alter_user_mapping_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_user_mapping_statement

	return p
}

func (s *Alter_user_mapping_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_user_mapping_statementContext) AllUSER() []antlr.TerminalNode {
	return s.GetTokens(SQLParserUSER)
}

func (s *Alter_user_mapping_statementContext) USER(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, i)
}

func (s *Alter_user_mapping_statementContext) MAPPING() antlr.TerminalNode {
	return s.GetToken(SQLParserMAPPING, 0)
}

func (s *Alter_user_mapping_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Alter_user_mapping_statementContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Alter_user_mapping_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_user_mapping_statementContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Alter_user_mapping_statementContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Alter_user_mapping_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_user_mapping_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_user_mapping_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_user_mapping_statement(s)
	}
}

func (s *Alter_user_mapping_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_user_mapping_statement(s)
	}
}




func (p *SQLParser) Alter_user_mapping_statement() (localctx IAlter_user_mapping_statementContext) {
	localctx = NewAlter_user_mapping_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, SQLParserRULE_alter_user_mapping_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2947)
		p.Match(SQLParserUSER)
	}
	{
		p.SetState(2948)
		p.Match(SQLParserMAPPING)
	}
	{
		p.SetState(2949)
		p.Match(SQLParserFOR)
	}
	p.SetState(2952)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserCURRENT_USER, SQLParserSESSION_USER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(2950)
			p.User_name()
		}


	case SQLParserUSER:
		{
			p.SetState(2951)
			p.Match(SQLParserUSER)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2954)
		p.Match(SQLParserSERVER)
	}
	{
		p.SetState(2955)
		p.Identifier()
	}
	p.SetState(2957)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOPTIONS {
		{
			p.SetState(2956)
			p.Define_foreign_options()
		}

	}



	return localctx
}


// IAlter_user_or_role_statementContext is an interface to support dynamic dispatch.
type IAlter_user_or_role_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_user_or_role_statementContext differentiates from other interfaces.
	IsAlter_user_or_role_statementContext()
}

type Alter_user_or_role_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_user_or_role_statementContext() *Alter_user_or_role_statementContext {
	var p = new(Alter_user_or_role_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_user_or_role_statement
	return p
}

func (*Alter_user_or_role_statementContext) IsAlter_user_or_role_statementContext() {}

func NewAlter_user_or_role_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_user_or_role_statementContext {
	var p = new(Alter_user_or_role_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_user_or_role_statement

	return p
}

func (s *Alter_user_or_role_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_user_or_role_statementContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Alter_user_or_role_statementContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *Alter_user_or_role_statementContext) Alter_user_or_role_set_reset() IAlter_user_or_role_set_resetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_user_or_role_set_resetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_user_or_role_set_resetContext)
}

func (s *Alter_user_or_role_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_user_or_role_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_user_or_role_statementContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Alter_user_or_role_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Alter_user_or_role_statementContext) AllUser_or_role_option_for_alter() []IUser_or_role_option_for_alterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_or_role_option_for_alterContext)(nil)).Elem())
	var tst = make([]IUser_or_role_option_for_alterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_or_role_option_for_alterContext)
		}
	}

	return tst
}

func (s *Alter_user_or_role_statementContext) User_or_role_option_for_alter(i int) IUser_or_role_option_for_alterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_option_for_alterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_option_for_alterContext)
}

func (s *Alter_user_or_role_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_user_or_role_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_user_or_role_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_user_or_role_statement(s)
	}
}

func (s *Alter_user_or_role_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_user_or_role_statement(s)
	}
}




func (p *SQLParser) Alter_user_or_role_statement() (localctx IAlter_user_or_role_statementContext) {
	localctx = NewAlter_user_or_role_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, SQLParserRULE_alter_user_or_role_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2959)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserROLE || _la == SQLParserUSER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2973)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 316, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2960)
			p.Alter_user_or_role_set_reset()
		}


	case 2:
		{
			p.SetState(2961)
			p.Identifier()
		}
		{
			p.SetState(2962)
			p.Rename_to()
		}


	case 3:
		{
			p.SetState(2964)
			p.User_name()
		}
		p.SetState(2966)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(2965)
				p.Match(SQLParserWITH)
			}

		}
		p.SetState(2969)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserCONNECTION || _la == SQLParserENCRYPTED || _la == SQLParserINHERIT || _la == SQLParserPASSWORD || _la == SQLParserVALID || ((((_la - 454)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 454))) & ((1 << (SQLParserBYPASSRLS - 454)) | (1 << (SQLParserCREATEDB - 454)) | (1 << (SQLParserCREATEROLE - 454)))) != 0) || ((((_la - 494)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 494))) & ((1 << (SQLParserLOGIN - 494)) | (1 << (SQLParserNOBYPASSRLS - 494)) | (1 << (SQLParserNOCREATEDB - 494)) | (1 << (SQLParserNOCREATEROLE - 494)) | (1 << (SQLParserNOINHERIT - 494)) | (1 << (SQLParserNOLOGIN - 494)) | (1 << (SQLParserNOREPLICATION - 494)) | (1 << (SQLParserNOSUPERUSER - 494)) | (1 << (SQLParserREPLICATION - 494)))) != 0) || _la == SQLParserSUPERUSER {
			{
				p.SetState(2968)
				p.User_or_role_option_for_alter()
			}


			p.SetState(2971)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}



	return localctx
}


// IAlter_user_or_role_set_resetContext is an interface to support dynamic dispatch.
type IAlter_user_or_role_set_resetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_user_or_role_set_resetContext differentiates from other interfaces.
	IsAlter_user_or_role_set_resetContext()
}

type Alter_user_or_role_set_resetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_user_or_role_set_resetContext() *Alter_user_or_role_set_resetContext {
	var p = new(Alter_user_or_role_set_resetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_user_or_role_set_reset
	return p
}

func (*Alter_user_or_role_set_resetContext) IsAlter_user_or_role_set_resetContext() {}

func NewAlter_user_or_role_set_resetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_user_or_role_set_resetContext {
	var p = new(Alter_user_or_role_set_resetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_user_or_role_set_reset

	return p
}

func (s *Alter_user_or_role_set_resetContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_user_or_role_set_resetContext) Set_reset_parameter() ISet_reset_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_reset_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_reset_parameterContext)
}

func (s *Alter_user_or_role_set_resetContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Alter_user_or_role_set_resetContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Alter_user_or_role_set_resetContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Alter_user_or_role_set_resetContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Alter_user_or_role_set_resetContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_user_or_role_set_resetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_user_or_role_set_resetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_user_or_role_set_resetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_user_or_role_set_reset(s)
	}
}

func (s *Alter_user_or_role_set_resetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_user_or_role_set_reset(s)
	}
}




func (p *SQLParser) Alter_user_or_role_set_reset() (localctx IAlter_user_or_role_set_resetContext) {
	localctx = NewAlter_user_or_role_set_resetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, SQLParserRULE_alter_user_or_role_set_reset)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2977)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserCURRENT_USER, SQLParserSESSION_USER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(2975)
			p.User_name()
		}


	case SQLParserALL:
		{
			p.SetState(2976)
			p.Match(SQLParserALL)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2982)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserIN {
		{
			p.SetState(2979)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(2980)
			p.Match(SQLParserDATABASE)
		}
		{
			p.SetState(2981)
			p.Identifier()
		}

	}
	{
		p.SetState(2984)
		p.Set_reset_parameter()
	}



	return localctx
}


// ISet_reset_parameterContext is an interface to support dynamic dispatch.
type ISet_reset_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_reset_parameterContext differentiates from other interfaces.
	IsSet_reset_parameterContext()
}

type Set_reset_parameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_reset_parameterContext() *Set_reset_parameterContext {
	var p = new(Set_reset_parameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_reset_parameter
	return p
}

func (*Set_reset_parameterContext) IsSet_reset_parameterContext() {}

func NewSet_reset_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_reset_parameterContext {
	var p = new(Set_reset_parameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_reset_parameter

	return p
}

func (s *Set_reset_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_reset_parameterContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Set_reset_parameterContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Set_reset_parameterContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Set_reset_parameterContext) Set_statement_value() ISet_statement_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statement_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statement_valueContext)
}

func (s *Set_reset_parameterContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Set_reset_parameterContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Set_reset_parameterContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Set_reset_parameterContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Set_reset_parameterContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT, 0)
}

func (s *Set_reset_parameterContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Set_reset_parameterContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Set_reset_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_reset_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_reset_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_reset_parameter(s)
	}
}

func (s *Set_reset_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_reset_parameter(s)
	}
}




func (p *SQLParser) Set_reset_parameter() (localctx ISet_reset_parameterContext) {
	localctx = NewSet_reset_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, SQLParserRULE_set_reset_parameter)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3015)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 322, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2986)
			p.Match(SQLParserSET)
		}
		p.SetState(2990)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 319, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2987)
				p.Identifier()
			}
			{
				p.SetState(2988)
				p.Match(SQLParserDOT)
			}


		}
		{
			p.SetState(2992)
			p.Identifier()
		}
		{
			p.SetState(2993)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserTO || _la == SQLParserEQUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2994)
			p.Set_statement_value()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2996)
			p.Match(SQLParserSET)
		}
		p.SetState(3000)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 320, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2997)
				p.Identifier()
			}
			{
				p.SetState(2998)
				p.Match(SQLParserDOT)
			}


		}
		{
			p.SetState(3002)
			p.Identifier()
		}
		{
			p.SetState(3003)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(3004)
			p.Match(SQLParserCURRENT)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3006)
			p.Match(SQLParserRESET)
		}
		p.SetState(3010)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 321, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3007)
				p.Identifier()
			}
			{
				p.SetState(3008)
				p.Match(SQLParserDOT)
			}


		}
		{
			p.SetState(3012)
			p.Identifier()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3013)
			p.Match(SQLParserRESET)
		}
		{
			p.SetState(3014)
			p.Match(SQLParserALL)
		}

	}


	return localctx
}


// IAlter_group_statementContext is an interface to support dynamic dispatch.
type IAlter_group_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_group_statementContext differentiates from other interfaces.
	IsAlter_group_statementContext()
}

type Alter_group_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_group_statementContext() *Alter_group_statementContext {
	var p = new(Alter_group_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_group_statement
	return p
}

func (*Alter_group_statementContext) IsAlter_group_statementContext() {}

func NewAlter_group_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_group_statementContext {
	var p = new(Alter_group_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_group_statement

	return p
}

func (s *Alter_group_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_group_statementContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *Alter_group_statementContext) Alter_group_action() IAlter_group_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_group_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_group_actionContext)
}

func (s *Alter_group_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_group_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_group_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_group_statement(s)
	}
}

func (s *Alter_group_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_group_statement(s)
	}
}




func (p *SQLParser) Alter_group_statement() (localctx IAlter_group_statementContext) {
	localctx = NewAlter_group_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, SQLParserRULE_alter_group_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3017)
		p.Match(SQLParserGROUP)
	}
	{
		p.SetState(3018)
		p.Alter_group_action()
	}



	return localctx
}


// IAlter_group_actionContext is an interface to support dynamic dispatch.
type IAlter_group_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsAlter_group_actionContext differentiates from other interfaces.
	IsAlter_group_actionContext()
}

type Alter_group_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyAlter_group_actionContext() *Alter_group_actionContext {
	var p = new(Alter_group_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_group_action
	return p
}

func (*Alter_group_actionContext) IsAlter_group_actionContext() {}

func NewAlter_group_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_group_actionContext {
	var p = new(Alter_group_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_group_action

	return p
}

func (s *Alter_group_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_group_actionContext) GetName() IIdentifierContext { return s.name }


func (s *Alter_group_actionContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Alter_group_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_group_actionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_group_actionContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Alter_group_actionContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Alter_group_actionContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_group_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Alter_group_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Alter_group_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_group_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_group_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_group_action(s)
	}
}

func (s *Alter_group_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_group_action(s)
	}
}




func (p *SQLParser) Alter_group_action() (localctx IAlter_group_actionContext) {
	localctx = NewAlter_group_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, SQLParserRULE_alter_group_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3028)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 323, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3020)

			var _x = p.Identifier()


			localctx.(*Alter_group_actionContext).name = _x
		}
		{
			p.SetState(3021)
			p.Rename_to()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3023)
			p.User_name()
		}
		{
			p.SetState(3024)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserADD || _la == SQLParserDROP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3025)
			p.Match(SQLParserUSER)
		}
		{
			p.SetState(3026)
			p.Identifier_list()
		}

	}


	return localctx
}


// IAlter_tablespace_statementContext is an interface to support dynamic dispatch.
type IAlter_tablespace_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsAlter_tablespace_statementContext differentiates from other interfaces.
	IsAlter_tablespace_statementContext()
}

type Alter_tablespace_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyAlter_tablespace_statementContext() *Alter_tablespace_statementContext {
	var p = new(Alter_tablespace_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_tablespace_statement
	return p
}

func (*Alter_tablespace_statementContext) IsAlter_tablespace_statementContext() {}

func NewAlter_tablespace_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tablespace_statementContext {
	var p = new(Alter_tablespace_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_tablespace_statement

	return p
}

func (s *Alter_tablespace_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tablespace_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Alter_tablespace_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Alter_tablespace_statementContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Alter_tablespace_statementContext) Alter_tablespace_action() IAlter_tablespace_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_tablespace_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_tablespace_actionContext)
}

func (s *Alter_tablespace_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_tablespace_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tablespace_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_tablespace_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_tablespace_statement(s)
	}
}

func (s *Alter_tablespace_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_tablespace_statement(s)
	}
}




func (p *SQLParser) Alter_tablespace_statement() (localctx IAlter_tablespace_statementContext) {
	localctx = NewAlter_tablespace_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, SQLParserRULE_alter_tablespace_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3030)
		p.Match(SQLParserTABLESPACE)
	}
	{
		p.SetState(3031)

		var _x = p.Identifier()


		localctx.(*Alter_tablespace_statementContext).name = _x
	}
	{
		p.SetState(3032)
		p.Alter_tablespace_action()
	}



	return localctx
}


// IAlter_owner_statementContext is an interface to support dynamic dispatch.
type IAlter_owner_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsAlter_owner_statementContext differentiates from other interfaces.
	IsAlter_owner_statementContext()
}

type Alter_owner_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyAlter_owner_statementContext() *Alter_owner_statementContext {
	var p = new(Alter_owner_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_owner_statement
	return p
}

func (*Alter_owner_statementContext) IsAlter_owner_statementContext() {}

func NewAlter_owner_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_owner_statementContext {
	var p = new(Alter_owner_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_owner_statement

	return p
}

func (s *Alter_owner_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_owner_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Alter_owner_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Alter_owner_statementContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_owner_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Alter_owner_statementContext) Target_operator() ITarget_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITarget_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITarget_operatorContext)
}

func (s *Alter_owner_statementContext) LARGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLARGE, 0)
}

func (s *Alter_owner_statementContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(SQLParserOBJECT, 0)
}

func (s *Alter_owner_statementContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Alter_owner_statementContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Alter_owner_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Alter_owner_statementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Alter_owner_statementContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(SQLParserAGGREGATE, 0)
}

func (s *Alter_owner_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_owner_statementContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Alter_owner_statementContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Alter_owner_statementContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(SQLParserDICTIONARY, 0)
}

func (s *Alter_owner_statementContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFIGURATION, 0)
}

func (s *Alter_owner_statementContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Alter_owner_statementContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Alter_owner_statementContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Alter_owner_statementContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Alter_owner_statementContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Alter_owner_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Alter_owner_statementContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Alter_owner_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_owner_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_owner_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_owner_statement(s)
	}
}

func (s *Alter_owner_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_owner_statement(s)
	}
}




func (p *SQLParser) Alter_owner_statement() (localctx IAlter_owner_statementContext) {
	localctx = NewAlter_owner_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, SQLParserRULE_alter_owner_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3063)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserOPERATOR:
		{
			p.SetState(3034)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(3035)
			p.Target_operator()
		}


	case SQLParserLARGE:
		{
			p.SetState(3036)
			p.Match(SQLParserLARGE)
		}
		{
			p.SetState(3037)
			p.Match(SQLParserOBJECT)
		}
		{
			p.SetState(3038)
			p.Match(SQLParserNUMBER_LITERAL)
		}


	case SQLParserAGGREGATE, SQLParserFUNCTION, SQLParserPROCEDURE:
		{
			p.SetState(3039)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserAGGREGATE || _la == SQLParserFUNCTION || _la == SQLParserPROCEDURE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3040)

			var _x = p.Schema_qualified_name()


			localctx.(*Alter_owner_statementContext).name = _x
		}
		{
			p.SetState(3041)
			p.Function_args()
		}


	case SQLParserDOMAIN, SQLParserMATERIALIZED, SQLParserSCHEMA, SQLParserSEQUENCE, SQLParserTEXT, SQLParserTYPE, SQLParserVIEW:
		p.SetState(3057)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 325, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3043)
				p.Match(SQLParserTEXT)
			}
			{
				p.SetState(3044)
				p.Match(SQLParserSEARCH)
			}
			{
				p.SetState(3045)
				p.Match(SQLParserDICTIONARY)
			}


		case 2:
			{
				p.SetState(3046)
				p.Match(SQLParserTEXT)
			}
			{
				p.SetState(3047)
				p.Match(SQLParserSEARCH)
			}
			{
				p.SetState(3048)
				p.Match(SQLParserCONFIGURATION)
			}


		case 3:
			{
				p.SetState(3049)
				p.Match(SQLParserDOMAIN)
			}


		case 4:
			{
				p.SetState(3050)
				p.Match(SQLParserSCHEMA)
			}


		case 5:
			{
				p.SetState(3051)
				p.Match(SQLParserSEQUENCE)
			}


		case 6:
			{
				p.SetState(3052)
				p.Match(SQLParserTYPE)
			}


		case 7:
			p.SetState(3054)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserMATERIALIZED {
				{
					p.SetState(3053)
					p.Match(SQLParserMATERIALIZED)
				}

			}
			{
				p.SetState(3056)
				p.Match(SQLParserVIEW)
			}

		}
		p.SetState(3060)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 326, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3059)
				p.If_exists()
			}


		}
		{
			p.SetState(3062)

			var _x = p.Schema_qualified_name()


			localctx.(*Alter_owner_statementContext).name = _x
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3065)
		p.Owner_to()
	}



	return localctx
}


// IAlter_tablespace_actionContext is an interface to support dynamic dispatch.
type IAlter_tablespace_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_tablespace_actionContext differentiates from other interfaces.
	IsAlter_tablespace_actionContext()
}

type Alter_tablespace_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_tablespace_actionContext() *Alter_tablespace_actionContext {
	var p = new(Alter_tablespace_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_tablespace_action
	return p
}

func (*Alter_tablespace_actionContext) IsAlter_tablespace_actionContext() {}

func NewAlter_tablespace_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tablespace_actionContext {
	var p = new(Alter_tablespace_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_tablespace_action

	return p
}

func (s *Alter_tablespace_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tablespace_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_tablespace_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_tablespace_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Alter_tablespace_actionContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Alter_tablespace_actionContext) AllOption_with_value() []IOption_with_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOption_with_valueContext)(nil)).Elem())
	var tst = make([]IOption_with_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOption_with_valueContext)
		}
	}

	return tst
}

func (s *Alter_tablespace_actionContext) Option_with_value(i int) IOption_with_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_with_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOption_with_valueContext)
}

func (s *Alter_tablespace_actionContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Alter_tablespace_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alter_tablespace_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alter_tablespace_actionContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Alter_tablespace_actionContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_tablespace_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tablespace_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_tablespace_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_tablespace_action(s)
	}
}

func (s *Alter_tablespace_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_tablespace_action(s)
	}
}




func (p *SQLParser) Alter_tablespace_action() (localctx IAlter_tablespace_actionContext) {
	localctx = NewAlter_tablespace_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, SQLParserRULE_alter_tablespace_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3086)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserRENAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3067)
			p.Rename_to()
		}


	case SQLParserOWNER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3068)
			p.Owner_to()
		}


	case SQLParserSET:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3069)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(3070)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(3071)
			p.Option_with_value()
		}
		p.SetState(3076)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3072)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3073)
				p.Option_with_value()
			}


			p.SetState(3078)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3079)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserRESET:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3081)
			p.Match(SQLParserRESET)
		}
		{
			p.SetState(3082)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(3083)
			p.Identifier_list()
		}
		{
			p.SetState(3084)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlter_statistics_statementContext is an interface to support dynamic dispatch.
type IAlter_statistics_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsAlter_statistics_statementContext differentiates from other interfaces.
	IsAlter_statistics_statementContext()
}

type Alter_statistics_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyAlter_statistics_statementContext() *Alter_statistics_statementContext {
	var p = new(Alter_statistics_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_statistics_statement
	return p
}

func (*Alter_statistics_statementContext) IsAlter_statistics_statementContext() {}

func NewAlter_statistics_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_statistics_statementContext {
	var p = new(Alter_statistics_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_statistics_statement

	return p
}

func (s *Alter_statistics_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_statistics_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Alter_statistics_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Alter_statistics_statementContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserSTATISTICS, 0)
}

func (s *Alter_statistics_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_statistics_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_statistics_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_statistics_statementContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_statistics_statementContext) Set_statistics() ISet_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statisticsContext)
}

func (s *Alter_statistics_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_statistics_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_statistics_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_statistics_statement(s)
	}
}

func (s *Alter_statistics_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_statistics_statement(s)
	}
}




func (p *SQLParser) Alter_statistics_statement() (localctx IAlter_statistics_statementContext) {
	localctx = NewAlter_statistics_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, SQLParserRULE_alter_statistics_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3088)
		p.Match(SQLParserSTATISTICS)
	}
	{
		p.SetState(3089)

		var _x = p.Schema_qualified_name()


		localctx.(*Alter_statistics_statementContext).name = _x
	}
	p.SetState(3094)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 330, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3090)
			p.Rename_to()
		}


	case 2:
		{
			p.SetState(3091)
			p.Set_schema()
		}


	case 3:
		{
			p.SetState(3092)
			p.Owner_to()
		}


	case 4:
		{
			p.SetState(3093)
			p.Set_statistics()
		}

	}



	return localctx
}


// ISet_statisticsContext is an interface to support dynamic dispatch.
type ISet_statisticsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_statisticsContext differentiates from other interfaces.
	IsSet_statisticsContext()
}

type Set_statisticsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_statisticsContext() *Set_statisticsContext {
	var p = new(Set_statisticsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_statistics
	return p
}

func (*Set_statisticsContext) IsSet_statisticsContext() {}

func NewSet_statisticsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_statisticsContext {
	var p = new(Set_statisticsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_statistics

	return p
}

func (s *Set_statisticsContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_statisticsContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Set_statisticsContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserSTATISTICS, 0)
}

func (s *Set_statisticsContext) Signed_number_literal() ISigned_number_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_number_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_number_literalContext)
}

func (s *Set_statisticsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_statisticsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_statisticsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_statistics(s)
	}
}

func (s *Set_statisticsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_statistics(s)
	}
}




func (p *SQLParser) Set_statistics() (localctx ISet_statisticsContext) {
	localctx = NewSet_statisticsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, SQLParserRULE_set_statistics)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3096)
		p.Match(SQLParserSET)
	}
	{
		p.SetState(3097)
		p.Match(SQLParserSTATISTICS)
	}
	{
		p.SetState(3098)
		p.Signed_number_literal()
	}



	return localctx
}


// IAlter_foreign_data_wrapperContext is an interface to support dynamic dispatch.
type IAlter_foreign_data_wrapperContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsAlter_foreign_data_wrapperContext differentiates from other interfaces.
	IsAlter_foreign_data_wrapperContext()
}

type Alter_foreign_data_wrapperContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyAlter_foreign_data_wrapperContext() *Alter_foreign_data_wrapperContext {
	var p = new(Alter_foreign_data_wrapperContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_foreign_data_wrapper
	return p
}

func (*Alter_foreign_data_wrapperContext) IsAlter_foreign_data_wrapperContext() {}

func NewAlter_foreign_data_wrapperContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_foreign_data_wrapperContext {
	var p = new(Alter_foreign_data_wrapperContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_foreign_data_wrapper

	return p
}

func (s *Alter_foreign_data_wrapperContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_foreign_data_wrapperContext) GetName() IIdentifierContext { return s.name }


func (s *Alter_foreign_data_wrapperContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Alter_foreign_data_wrapperContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Alter_foreign_data_wrapperContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Alter_foreign_data_wrapperContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(SQLParserWRAPPER, 0)
}

func (s *Alter_foreign_data_wrapperContext) Alter_foreign_data_wrapper_action() IAlter_foreign_data_wrapper_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_foreign_data_wrapper_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_foreign_data_wrapper_actionContext)
}

func (s *Alter_foreign_data_wrapperContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_foreign_data_wrapperContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_foreign_data_wrapperContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_foreign_data_wrapperContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_foreign_data_wrapper(s)
	}
}

func (s *Alter_foreign_data_wrapperContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_foreign_data_wrapper(s)
	}
}




func (p *SQLParser) Alter_foreign_data_wrapper() (localctx IAlter_foreign_data_wrapperContext) {
	localctx = NewAlter_foreign_data_wrapperContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, SQLParserRULE_alter_foreign_data_wrapper)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3100)
		p.Match(SQLParserFOREIGN)
	}
	{
		p.SetState(3101)
		p.Match(SQLParserDATA)
	}
	{
		p.SetState(3102)
		p.Match(SQLParserWRAPPER)
	}
	{
		p.SetState(3103)

		var _x = p.Identifier()


		localctx.(*Alter_foreign_data_wrapperContext).name = _x
	}
	{
		p.SetState(3104)
		p.Alter_foreign_data_wrapper_action()
	}



	return localctx
}


// IAlter_foreign_data_wrapper_actionContext is an interface to support dynamic dispatch.
type IAlter_foreign_data_wrapper_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_foreign_data_wrapper_actionContext differentiates from other interfaces.
	IsAlter_foreign_data_wrapper_actionContext()
}

type Alter_foreign_data_wrapper_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_foreign_data_wrapper_actionContext() *Alter_foreign_data_wrapper_actionContext {
	var p = new(Alter_foreign_data_wrapper_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_foreign_data_wrapper_action
	return p
}

func (*Alter_foreign_data_wrapper_actionContext) IsAlter_foreign_data_wrapper_actionContext() {}

func NewAlter_foreign_data_wrapper_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_foreign_data_wrapper_actionContext {
	var p = new(Alter_foreign_data_wrapper_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_foreign_data_wrapper_action

	return p
}

func (s *Alter_foreign_data_wrapper_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_foreign_data_wrapper_actionContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(SQLParserHANDLER, 0)
}

func (s *Alter_foreign_data_wrapper_actionContext) AllSchema_qualified_name_nontype() []ISchema_qualified_name_nontypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_name_nontypeContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_name_nontypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_name_nontypeContext)
		}
	}

	return tst
}

func (s *Alter_foreign_data_wrapper_actionContext) Schema_qualified_name_nontype(i int) ISchema_qualified_name_nontypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_name_nontypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_name_nontypeContext)
}

func (s *Alter_foreign_data_wrapper_actionContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNO)
}

func (s *Alter_foreign_data_wrapper_actionContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNO, i)
}

func (s *Alter_foreign_data_wrapper_actionContext) VALIDATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserVALIDATOR, 0)
}

func (s *Alter_foreign_data_wrapper_actionContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Alter_foreign_data_wrapper_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_foreign_data_wrapper_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_foreign_data_wrapper_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_foreign_data_wrapper_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_foreign_data_wrapper_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_foreign_data_wrapper_action(s)
	}
}

func (s *Alter_foreign_data_wrapper_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_foreign_data_wrapper_action(s)
	}
}




func (p *SQLParser) Alter_foreign_data_wrapper_action() (localctx IAlter_foreign_data_wrapper_actionContext) {
	localctx = NewAlter_foreign_data_wrapper_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, SQLParserRULE_alter_foreign_data_wrapper_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3123)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserEOF, SQLParserHANDLER, SQLParserNO, SQLParserOPTIONS, SQLParserVALIDATOR, SQLParserSEMI_COLON:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3110)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 331, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3106)
				p.Match(SQLParserHANDLER)
			}
			{
				p.SetState(3107)
				p.Schema_qualified_name_nontype()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 331, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3108)
				p.Match(SQLParserNO)
			}
			{
				p.SetState(3109)
				p.Match(SQLParserHANDLER)
			}


		}
		p.SetState(3116)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserVALIDATOR:
			{
				p.SetState(3112)
				p.Match(SQLParserVALIDATOR)
			}
			{
				p.SetState(3113)
				p.Schema_qualified_name_nontype()
			}


		case SQLParserNO:
			{
				p.SetState(3114)
				p.Match(SQLParserNO)
			}
			{
				p.SetState(3115)
				p.Match(SQLParserVALIDATOR)
			}


		case SQLParserEOF, SQLParserOPTIONS, SQLParserSEMI_COLON:



		default:
		}
		p.SetState(3119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserOPTIONS {
			{
				p.SetState(3118)
				p.Define_foreign_options()
			}

		}


	case SQLParserOWNER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3121)
			p.Owner_to()
		}


	case SQLParserRENAME:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3122)
			p.Rename_to()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlter_operator_statementContext is an interface to support dynamic dispatch.
type IAlter_operator_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_operator_statementContext differentiates from other interfaces.
	IsAlter_operator_statementContext()
}

type Alter_operator_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_operator_statementContext() *Alter_operator_statementContext {
	var p = new(Alter_operator_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_operator_statement
	return p
}

func (*Alter_operator_statementContext) IsAlter_operator_statementContext() {}

func NewAlter_operator_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_operator_statementContext {
	var p = new(Alter_operator_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_operator_statement

	return p
}

func (s *Alter_operator_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_operator_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Alter_operator_statementContext) Target_operator() ITarget_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITarget_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITarget_operatorContext)
}

func (s *Alter_operator_statementContext) Alter_operator_action() IAlter_operator_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_operator_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_operator_actionContext)
}

func (s *Alter_operator_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_operator_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_operator_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_operator_statement(s)
	}
}

func (s *Alter_operator_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_operator_statement(s)
	}
}




func (p *SQLParser) Alter_operator_statement() (localctx IAlter_operator_statementContext) {
	localctx = NewAlter_operator_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, SQLParserRULE_alter_operator_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3125)
		p.Match(SQLParserOPERATOR)
	}
	{
		p.SetState(3126)
		p.Target_operator()
	}
	{
		p.SetState(3127)
		p.Alter_operator_action()
	}



	return localctx
}


// IAlter_operator_actionContext is an interface to support dynamic dispatch.
type IAlter_operator_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_operator_actionContext differentiates from other interfaces.
	IsAlter_operator_actionContext()
}

type Alter_operator_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_operator_actionContext() *Alter_operator_actionContext {
	var p = new(Alter_operator_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_operator_action
	return p
}

func (*Alter_operator_actionContext) IsAlter_operator_actionContext() {}

func NewAlter_operator_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_operator_actionContext {
	var p = new(Alter_operator_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_operator_action

	return p
}

func (s *Alter_operator_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_operator_actionContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_operator_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Alter_operator_actionContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Alter_operator_actionContext) AllOperator_set_restrict_join() []IOperator_set_restrict_joinContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOperator_set_restrict_joinContext)(nil)).Elem())
	var tst = make([]IOperator_set_restrict_joinContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOperator_set_restrict_joinContext)
		}
	}

	return tst
}

func (s *Alter_operator_actionContext) Operator_set_restrict_join(i int) IOperator_set_restrict_joinContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_set_restrict_joinContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOperator_set_restrict_joinContext)
}

func (s *Alter_operator_actionContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Alter_operator_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alter_operator_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alter_operator_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_operator_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_operator_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_operator_action(s)
	}
}

func (s *Alter_operator_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_operator_action(s)
	}
}




func (p *SQLParser) Alter_operator_action() (localctx IAlter_operator_actionContext) {
	localctx = NewAlter_operator_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, SQLParserRULE_alter_operator_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3142)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3129)
			p.Set_schema()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3130)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(3131)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(3132)
			p.Operator_set_restrict_join()
		}
		p.SetState(3137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3133)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3134)
				p.Operator_set_restrict_join()
			}


			p.SetState(3139)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3140)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}


	return localctx
}


// IOperator_set_restrict_joinContext is an interface to support dynamic dispatch.
type IOperator_set_restrict_joinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_set_restrict_joinContext differentiates from other interfaces.
	IsOperator_set_restrict_joinContext()
}

type Operator_set_restrict_joinContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_set_restrict_joinContext() *Operator_set_restrict_joinContext {
	var p = new(Operator_set_restrict_joinContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_operator_set_restrict_join
	return p
}

func (*Operator_set_restrict_joinContext) IsOperator_set_restrict_joinContext() {}

func NewOperator_set_restrict_joinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_set_restrict_joinContext {
	var p = new(Operator_set_restrict_joinContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_operator_set_restrict_join

	return p
}

func (s *Operator_set_restrict_joinContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_set_restrict_joinContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Operator_set_restrict_joinContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Operator_set_restrict_joinContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICT, 0)
}

func (s *Operator_set_restrict_joinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(SQLParserJOIN, 0)
}

func (s *Operator_set_restrict_joinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_set_restrict_joinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Operator_set_restrict_joinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOperator_set_restrict_join(s)
	}
}

func (s *Operator_set_restrict_joinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOperator_set_restrict_join(s)
	}
}




func (p *SQLParser) Operator_set_restrict_join() (localctx IOperator_set_restrict_joinContext) {
	localctx = NewOperator_set_restrict_joinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, SQLParserRULE_operator_set_restrict_join)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3144)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserRESTRICT || _la == SQLParserJOIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3145)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(3146)
		p.Schema_qualified_name()
	}



	return localctx
}


// IDrop_user_mapping_statementContext is an interface to support dynamic dispatch.
type IDrop_user_mapping_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_user_mapping_statementContext differentiates from other interfaces.
	IsDrop_user_mapping_statementContext()
}

type Drop_user_mapping_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_user_mapping_statementContext() *Drop_user_mapping_statementContext {
	var p = new(Drop_user_mapping_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_user_mapping_statement
	return p
}

func (*Drop_user_mapping_statementContext) IsDrop_user_mapping_statementContext() {}

func NewDrop_user_mapping_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_user_mapping_statementContext {
	var p = new(Drop_user_mapping_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_user_mapping_statement

	return p
}

func (s *Drop_user_mapping_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_user_mapping_statementContext) AllUSER() []antlr.TerminalNode {
	return s.GetTokens(SQLParserUSER)
}

func (s *Drop_user_mapping_statementContext) USER(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, i)
}

func (s *Drop_user_mapping_statementContext) MAPPING() antlr.TerminalNode {
	return s.GetToken(SQLParserMAPPING, 0)
}

func (s *Drop_user_mapping_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Drop_user_mapping_statementContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Drop_user_mapping_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_user_mapping_statementContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Drop_user_mapping_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_user_mapping_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_user_mapping_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_user_mapping_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_user_mapping_statement(s)
	}
}

func (s *Drop_user_mapping_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_user_mapping_statement(s)
	}
}




func (p *SQLParser) Drop_user_mapping_statement() (localctx IDrop_user_mapping_statementContext) {
	localctx = NewDrop_user_mapping_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, SQLParserRULE_drop_user_mapping_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3148)
		p.Match(SQLParserUSER)
	}
	{
		p.SetState(3149)
		p.Match(SQLParserMAPPING)
	}
	p.SetState(3151)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserIF {
		{
			p.SetState(3150)
			p.If_exists()
		}

	}
	{
		p.SetState(3153)
		p.Match(SQLParserFOR)
	}
	p.SetState(3156)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserCURRENT_USER, SQLParserSESSION_USER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(3154)
			p.User_name()
		}


	case SQLParserUSER:
		{
			p.SetState(3155)
			p.Match(SQLParserUSER)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3158)
		p.Match(SQLParserSERVER)
	}
	{
		p.SetState(3159)
		p.Identifier()
	}



	return localctx
}


// IDrop_owned_statementContext is an interface to support dynamic dispatch.
type IDrop_owned_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_owned_statementContext differentiates from other interfaces.
	IsDrop_owned_statementContext()
}

type Drop_owned_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_owned_statementContext() *Drop_owned_statementContext {
	var p = new(Drop_owned_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_owned_statement
	return p
}

func (*Drop_owned_statementContext) IsDrop_owned_statementContext() {}

func NewDrop_owned_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_owned_statementContext {
	var p = new(Drop_owned_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_owned_statement

	return p
}

func (s *Drop_owned_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_owned_statementContext) OWNED() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNED, 0)
}

func (s *Drop_owned_statementContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Drop_owned_statementContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *Drop_owned_statementContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Drop_owned_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Drop_owned_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Drop_owned_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_owned_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_owned_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_owned_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_owned_statement(s)
	}
}

func (s *Drop_owned_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_owned_statement(s)
	}
}




func (p *SQLParser) Drop_owned_statement() (localctx IDrop_owned_statementContext) {
	localctx = NewDrop_owned_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, SQLParserRULE_drop_owned_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3161)
		p.Match(SQLParserOWNED)
	}
	{
		p.SetState(3162)
		p.Match(SQLParserBY)
	}
	{
		p.SetState(3163)
		p.User_name()
	}
	p.SetState(3168)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(3164)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(3165)
			p.User_name()
		}


		p.SetState(3170)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3172)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(3171)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_operator_statementContext is an interface to support dynamic dispatch.
type IDrop_operator_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_operator_statementContext differentiates from other interfaces.
	IsDrop_operator_statementContext()
}

type Drop_operator_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_operator_statementContext() *Drop_operator_statementContext {
	var p = new(Drop_operator_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_operator_statement
	return p
}

func (*Drop_operator_statementContext) IsDrop_operator_statementContext() {}

func NewDrop_operator_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_operator_statementContext {
	var p = new(Drop_operator_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_operator_statement

	return p
}

func (s *Drop_operator_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_operator_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Drop_operator_statementContext) AllTarget_operator() []ITarget_operatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITarget_operatorContext)(nil)).Elem())
	var tst = make([]ITarget_operatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITarget_operatorContext)
		}
	}

	return tst
}

func (s *Drop_operator_statementContext) Target_operator(i int) ITarget_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITarget_operatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITarget_operatorContext)
}

func (s *Drop_operator_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_operator_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Drop_operator_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Drop_operator_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_operator_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_operator_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_operator_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_operator_statement(s)
	}
}

func (s *Drop_operator_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_operator_statement(s)
	}
}




func (p *SQLParser) Drop_operator_statement() (localctx IDrop_operator_statementContext) {
	localctx = NewDrop_operator_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, SQLParserRULE_drop_operator_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3174)
		p.Match(SQLParserOPERATOR)
	}
	p.SetState(3176)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 341, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3175)
			p.If_exists()
		}


	}
	{
		p.SetState(3178)
		p.Target_operator()
	}
	p.SetState(3183)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(3179)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(3180)
			p.Target_operator()
		}


		p.SetState(3185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3187)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(3186)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// ITarget_operatorContext is an interface to support dynamic dispatch.
type ITarget_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IOperator_nameContext

	// GetLeft_type returns the left_type rule contexts.
	GetLeft_type() IData_typeContext

	// GetRight_type returns the right_type rule contexts.
	GetRight_type() IData_typeContext


	// SetName sets the name rule contexts.
	SetName(IOperator_nameContext)

	// SetLeft_type sets the left_type rule contexts.
	SetLeft_type(IData_typeContext)

	// SetRight_type sets the right_type rule contexts.
	SetRight_type(IData_typeContext)


	// IsTarget_operatorContext differentiates from other interfaces.
	IsTarget_operatorContext()
}

type Target_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IOperator_nameContext 
	left_type IData_typeContext 
	right_type IData_typeContext 
}

func NewEmptyTarget_operatorContext() *Target_operatorContext {
	var p = new(Target_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_target_operator
	return p
}

func (*Target_operatorContext) IsTarget_operatorContext() {}

func NewTarget_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Target_operatorContext {
	var p = new(Target_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_target_operator

	return p
}

func (s *Target_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Target_operatorContext) GetName() IOperator_nameContext { return s.name }

func (s *Target_operatorContext) GetLeft_type() IData_typeContext { return s.left_type }

func (s *Target_operatorContext) GetRight_type() IData_typeContext { return s.right_type }


func (s *Target_operatorContext) SetName(v IOperator_nameContext) { s.name = v }

func (s *Target_operatorContext) SetLeft_type(v IData_typeContext) { s.left_type = v }

func (s *Target_operatorContext) SetRight_type(v IData_typeContext) { s.right_type = v }


func (s *Target_operatorContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Target_operatorContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Target_operatorContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Target_operatorContext) Operator_name() IOperator_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_nameContext)
}

func (s *Target_operatorContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNONE)
}

func (s *Target_operatorContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNONE, i)
}

func (s *Target_operatorContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Target_operatorContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Target_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Target_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Target_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTarget_operator(s)
	}
}

func (s *Target_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTarget_operator(s)
	}
}




func (p *SQLParser) Target_operator() (localctx ITarget_operatorContext) {
	localctx = NewTarget_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, SQLParserRULE_target_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3189)

		var _x = p.Operator_name()


		localctx.(*Target_operatorContext).name = _x
	}
	{
		p.SetState(3190)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(3193)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 344, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3191)

			var _x = p.Data_type()


			localctx.(*Target_operatorContext).left_type = _x
		}


	case 2:
		{
			p.SetState(3192)
			p.Match(SQLParserNONE)
		}

	}
	{
		p.SetState(3195)
		p.Match(SQLParserCOMMA)
	}
	p.SetState(3198)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 345, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3196)

			var _x = p.Data_type()


			localctx.(*Target_operatorContext).right_type = _x
		}


	case 2:
		{
			p.SetState(3197)
			p.Match(SQLParserNONE)
		}

	}
	{
		p.SetState(3200)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IDomain_constraintContext is an interface to support dynamic dispatch.
type IDomain_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsDomain_constraintContext differentiates from other interfaces.
	IsDomain_constraintContext()
}

type Domain_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyDomain_constraintContext() *Domain_constraintContext {
	var p = new(Domain_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_domain_constraint
	return p
}

func (*Domain_constraintContext) IsDomain_constraintContext() {}

func NewDomain_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Domain_constraintContext {
	var p = new(Domain_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_domain_constraint

	return p
}

func (s *Domain_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Domain_constraintContext) GetName() IIdentifierContext { return s.name }


func (s *Domain_constraintContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Domain_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SQLParserCHECK, 0)
}

func (s *Domain_constraintContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Domain_constraintContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Domain_constraintContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Domain_constraintContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Domain_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Domain_constraintContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Domain_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Domain_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Domain_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Domain_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDomain_constraint(s)
	}
}

func (s *Domain_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDomain_constraint(s)
	}
}




func (p *SQLParser) Domain_constraint() (localctx IDomain_constraintContext) {
	localctx = NewDomain_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, SQLParserRULE_domain_constraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCONSTRAINT {
		{
			p.SetState(3202)
			p.Match(SQLParserCONSTRAINT)
		}
		{
			p.SetState(3203)

			var _x = p.Identifier()


			localctx.(*Domain_constraintContext).name = _x
		}

	}
	p.SetState(3215)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCHECK:
		{
			p.SetState(3206)
			p.Match(SQLParserCHECK)
		}
		{
			p.SetState(3207)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(3208)
			p.vex(0)
		}
		{
			p.SetState(3209)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserNOT, SQLParserNULL:
		p.SetState(3212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT {
			{
				p.SetState(3211)
				p.Match(SQLParserNOT)
			}

		}
		{
			p.SetState(3214)
			p.Match(SQLParserNULL)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// ICreate_transform_statementContext is an interface to support dynamic dispatch.
type ICreate_transform_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_transform_statementContext differentiates from other interfaces.
	IsCreate_transform_statementContext()
}

type Create_transform_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_transform_statementContext() *Create_transform_statementContext {
	var p = new(Create_transform_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_transform_statement
	return p
}

func (*Create_transform_statementContext) IsCreate_transform_statementContext() {}

func NewCreate_transform_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_transform_statementContext {
	var p = new(Create_transform_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_transform_statement

	return p
}

func (s *Create_transform_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_transform_statementContext) TRANSFORM() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSFORM, 0)
}

func (s *Create_transform_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Create_transform_statementContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_transform_statementContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Create_transform_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_transform_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_transform_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Create_transform_statementContext) AllSQL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSQL)
}

func (s *Create_transform_statementContext) SQL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSQL, i)
}

func (s *Create_transform_statementContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(SQLParserWITH)
}

func (s *Create_transform_statementContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, i)
}

func (s *Create_transform_statementContext) AllFUNCTION() []antlr.TerminalNode {
	return s.GetTokens(SQLParserFUNCTION)
}

func (s *Create_transform_statementContext) FUNCTION(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, i)
}

func (s *Create_transform_statementContext) AllFunction_parameters() []IFunction_parametersContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_parametersContext)(nil)).Elem())
	var tst = make([]IFunction_parametersContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_parametersContext)
		}
	}

	return tst
}

func (s *Create_transform_statementContext) Function_parameters(i int) IFunction_parametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_parametersContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_parametersContext)
}

func (s *Create_transform_statementContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Create_transform_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Create_transform_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_transform_statementContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLParserOR, 0)
}

func (s *Create_transform_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLACE, 0)
}

func (s *Create_transform_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_transform_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_transform_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_transform_statement(s)
	}
}

func (s *Create_transform_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_transform_statement(s)
	}
}




func (p *SQLParser) Create_transform_statement() (localctx ICreate_transform_statementContext) {
	localctx = NewCreate_transform_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, SQLParserRULE_create_transform_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3219)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOR {
		{
			p.SetState(3217)
			p.Match(SQLParserOR)
		}
		{
			p.SetState(3218)
			p.Match(SQLParserREPLACE)
		}

	}
	{
		p.SetState(3221)
		p.Match(SQLParserTRANSFORM)
	}
	{
		p.SetState(3222)
		p.Match(SQLParserFOR)
	}
	{
		p.SetState(3223)
		p.Data_type()
	}
	{
		p.SetState(3224)
		p.Match(SQLParserLANGUAGE)
	}
	{
		p.SetState(3225)
		p.Identifier()
	}
	{
		p.SetState(3226)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(3227)
		p.Match(SQLParserFROM)
	}
	{
		p.SetState(3228)
		p.Match(SQLParserSQL)
	}
	{
		p.SetState(3229)
		p.Match(SQLParserWITH)
	}
	{
		p.SetState(3230)
		p.Match(SQLParserFUNCTION)
	}
	{
		p.SetState(3231)
		p.Function_parameters()
	}
	{
		p.SetState(3232)
		p.Match(SQLParserCOMMA)
	}
	{
		p.SetState(3233)
		p.Match(SQLParserTO)
	}
	{
		p.SetState(3234)
		p.Match(SQLParserSQL)
	}
	{
		p.SetState(3235)
		p.Match(SQLParserWITH)
	}
	{
		p.SetState(3236)
		p.Match(SQLParserFUNCTION)
	}
	{
		p.SetState(3237)
		p.Function_parameters()
	}
	{
		p.SetState(3238)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// ICreate_access_method_statementContext is an interface to support dynamic dispatch.
type ICreate_access_method_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_access_method_statementContext differentiates from other interfaces.
	IsCreate_access_method_statementContext()
}

type Create_access_method_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_access_method_statementContext() *Create_access_method_statementContext {
	var p = new(Create_access_method_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_access_method_statement
	return p
}

func (*Create_access_method_statementContext) IsCreate_access_method_statementContext() {}

func NewCreate_access_method_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_access_method_statementContext {
	var p = new(Create_access_method_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_access_method_statement

	return p
}

func (s *Create_access_method_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_access_method_statementContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SQLParserACCESS, 0)
}

func (s *Create_access_method_statementContext) METHOD() antlr.TerminalNode {
	return s.GetToken(SQLParserMETHOD, 0)
}

func (s *Create_access_method_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_access_method_statementContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Create_access_method_statementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(SQLParserHANDLER, 0)
}

func (s *Create_access_method_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_access_method_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Create_access_method_statementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Create_access_method_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_access_method_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_access_method_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_access_method_statement(s)
	}
}

func (s *Create_access_method_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_access_method_statement(s)
	}
}




func (p *SQLParser) Create_access_method_statement() (localctx ICreate_access_method_statementContext) {
	localctx = NewCreate_access_method_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, SQLParserRULE_create_access_method_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3240)
		p.Match(SQLParserACCESS)
	}
	{
		p.SetState(3241)
		p.Match(SQLParserMETHOD)
	}
	{
		p.SetState(3242)
		p.Identifier()
	}
	{
		p.SetState(3243)
		p.Match(SQLParserTYPE)
	}
	{
		p.SetState(3244)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserINDEX || _la == SQLParserTABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3245)
		p.Match(SQLParserHANDLER)
	}
	{
		p.SetState(3246)
		p.Schema_qualified_name()
	}



	return localctx
}


// ICreate_user_or_role_statementContext is an interface to support dynamic dispatch.
type ICreate_user_or_role_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsCreate_user_or_role_statementContext differentiates from other interfaces.
	IsCreate_user_or_role_statementContext()
}

type Create_user_or_role_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyCreate_user_or_role_statementContext() *Create_user_or_role_statementContext {
	var p = new(Create_user_or_role_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_user_or_role_statement
	return p
}

func (*Create_user_or_role_statementContext) IsCreate_user_or_role_statementContext() {}

func NewCreate_user_or_role_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_user_or_role_statementContext {
	var p = new(Create_user_or_role_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_user_or_role_statement

	return p
}

func (s *Create_user_or_role_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_user_or_role_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Create_user_or_role_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Create_user_or_role_statementContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Create_user_or_role_statementContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *Create_user_or_role_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_user_or_role_statementContext) AllUser_or_role_option() []IUser_or_role_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_or_role_optionContext)(nil)).Elem())
	var tst = make([]IUser_or_role_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_or_role_optionContext)
		}
	}

	return tst
}

func (s *Create_user_or_role_statementContext) User_or_role_option(i int) IUser_or_role_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_optionContext)
}

func (s *Create_user_or_role_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Create_user_or_role_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_user_or_role_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_user_or_role_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_user_or_role_statement(s)
	}
}

func (s *Create_user_or_role_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_user_or_role_statement(s)
	}
}




func (p *SQLParser) Create_user_or_role_statement() (localctx ICreate_user_or_role_statementContext) {
	localctx = NewCreate_user_or_role_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, SQLParserRULE_create_user_or_role_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3248)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserROLE || _la == SQLParserUSER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3249)

		var _x = p.Identifier()


		localctx.(*Create_user_or_role_statementContext).name = _x
	}
	p.SetState(3260)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserADMIN || _la == SQLParserCONNECTION || _la == SQLParserENCRYPTED || _la == SQLParserINHERIT || _la == SQLParserPASSWORD || _la == SQLParserROLE || _la == SQLParserSYSID || _la == SQLParserVALID || _la == SQLParserIN || _la == SQLParserUSER || ((((_la - 449)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 449))) & ((1 << (SQLParserWITH - 449)) | (1 << (SQLParserBYPASSRLS - 449)) | (1 << (SQLParserCREATEDB - 449)) | (1 << (SQLParserCREATEROLE - 449)))) != 0) || ((((_la - 494)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 494))) & ((1 << (SQLParserLOGIN - 494)) | (1 << (SQLParserNOBYPASSRLS - 494)) | (1 << (SQLParserNOCREATEDB - 494)) | (1 << (SQLParserNOCREATEROLE - 494)) | (1 << (SQLParserNOINHERIT - 494)) | (1 << (SQLParserNOLOGIN - 494)) | (1 << (SQLParserNOREPLICATION - 494)) | (1 << (SQLParserNOSUPERUSER - 494)) | (1 << (SQLParserREPLICATION - 494)))) != 0) || _la == SQLParserSUPERUSER {
		p.SetState(3251)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(3250)
				p.Match(SQLParserWITH)
			}

		}
		{
			p.SetState(3253)
			p.User_or_role_option()
		}
		p.SetState(3257)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserADMIN || _la == SQLParserCONNECTION || _la == SQLParserENCRYPTED || _la == SQLParserINHERIT || _la == SQLParserPASSWORD || _la == SQLParserROLE || _la == SQLParserSYSID || _la == SQLParserVALID || _la == SQLParserIN || _la == SQLParserUSER || ((((_la - 454)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 454))) & ((1 << (SQLParserBYPASSRLS - 454)) | (1 << (SQLParserCREATEDB - 454)) | (1 << (SQLParserCREATEROLE - 454)))) != 0) || ((((_la - 494)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 494))) & ((1 << (SQLParserLOGIN - 494)) | (1 << (SQLParserNOBYPASSRLS - 494)) | (1 << (SQLParserNOCREATEDB - 494)) | (1 << (SQLParserNOCREATEROLE - 494)) | (1 << (SQLParserNOINHERIT - 494)) | (1 << (SQLParserNOLOGIN - 494)) | (1 << (SQLParserNOREPLICATION - 494)) | (1 << (SQLParserNOSUPERUSER - 494)) | (1 << (SQLParserREPLICATION - 494)))) != 0) || _la == SQLParserSUPERUSER {
			{
				p.SetState(3254)
				p.User_or_role_option()
			}


			p.SetState(3259)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}



	return localctx
}


// IUser_or_role_optionContext is an interface to support dynamic dispatch.
type IUser_or_role_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_or_role_optionContext differentiates from other interfaces.
	IsUser_or_role_optionContext()
}

type User_or_role_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_or_role_optionContext() *User_or_role_optionContext {
	var p = new(User_or_role_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_user_or_role_option
	return p
}

func (*User_or_role_optionContext) IsUser_or_role_optionContext() {}

func NewUser_or_role_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_or_role_optionContext {
	var p = new(User_or_role_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_user_or_role_option

	return p
}

func (s *User_or_role_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *User_or_role_optionContext) User_or_role_or_group_common_option() IUser_or_role_or_group_common_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_or_group_common_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_or_group_common_optionContext)
}

func (s *User_or_role_optionContext) User_or_role_common_option() IUser_or_role_common_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_common_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_common_optionContext)
}

func (s *User_or_role_optionContext) User_or_role_or_group_option_for_create() IUser_or_role_or_group_option_for_createContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_or_group_option_for_createContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_or_group_option_for_createContext)
}

func (s *User_or_role_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_or_role_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *User_or_role_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUser_or_role_option(s)
	}
}

func (s *User_or_role_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUser_or_role_option(s)
	}
}




func (p *SQLParser) User_or_role_option() (localctx IUser_or_role_optionContext) {
	localctx = NewUser_or_role_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, SQLParserRULE_user_or_role_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3265)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserENCRYPTED, SQLParserINHERIT, SQLParserPASSWORD, SQLParserVALID, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserLOGIN, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOSUPERUSER, SQLParserSUPERUSER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3262)
			p.User_or_role_or_group_common_option()
		}


	case SQLParserCONNECTION, SQLParserBYPASSRLS, SQLParserNOBYPASSRLS, SQLParserNOREPLICATION, SQLParserREPLICATION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3263)
			p.User_or_role_common_option()
		}


	case SQLParserADMIN, SQLParserROLE, SQLParserSYSID, SQLParserIN, SQLParserUSER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3264)
			p.User_or_role_or_group_option_for_create()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IUser_or_role_option_for_alterContext is an interface to support dynamic dispatch.
type IUser_or_role_option_for_alterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_or_role_option_for_alterContext differentiates from other interfaces.
	IsUser_or_role_option_for_alterContext()
}

type User_or_role_option_for_alterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_or_role_option_for_alterContext() *User_or_role_option_for_alterContext {
	var p = new(User_or_role_option_for_alterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_user_or_role_option_for_alter
	return p
}

func (*User_or_role_option_for_alterContext) IsUser_or_role_option_for_alterContext() {}

func NewUser_or_role_option_for_alterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_or_role_option_for_alterContext {
	var p = new(User_or_role_option_for_alterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_user_or_role_option_for_alter

	return p
}

func (s *User_or_role_option_for_alterContext) GetParser() antlr.Parser { return s.parser }

func (s *User_or_role_option_for_alterContext) User_or_role_or_group_common_option() IUser_or_role_or_group_common_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_or_group_common_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_or_group_common_optionContext)
}

func (s *User_or_role_option_for_alterContext) User_or_role_common_option() IUser_or_role_common_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_common_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_common_optionContext)
}

func (s *User_or_role_option_for_alterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_or_role_option_for_alterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *User_or_role_option_for_alterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUser_or_role_option_for_alter(s)
	}
}

func (s *User_or_role_option_for_alterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUser_or_role_option_for_alter(s)
	}
}




func (p *SQLParser) User_or_role_option_for_alter() (localctx IUser_or_role_option_for_alterContext) {
	localctx = NewUser_or_role_option_for_alterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, SQLParserRULE_user_or_role_option_for_alter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3269)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserENCRYPTED, SQLParserINHERIT, SQLParserPASSWORD, SQLParserVALID, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserLOGIN, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOSUPERUSER, SQLParserSUPERUSER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3267)
			p.User_or_role_or_group_common_option()
		}


	case SQLParserCONNECTION, SQLParserBYPASSRLS, SQLParserNOBYPASSRLS, SQLParserNOREPLICATION, SQLParserREPLICATION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3268)
			p.User_or_role_common_option()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IUser_or_role_or_group_common_optionContext is an interface to support dynamic dispatch.
type IUser_or_role_or_group_common_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token 

	// GetDate_time returns the date_time token.
	GetDate_time() antlr.Token 


	// SetPassword sets the password token.
	SetPassword(antlr.Token) 

	// SetDate_time sets the date_time token.
	SetDate_time(antlr.Token) 


	// IsUser_or_role_or_group_common_optionContext differentiates from other interfaces.
	IsUser_or_role_or_group_common_optionContext()
}

type User_or_role_or_group_common_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	password antlr.Token
	date_time antlr.Token
}

func NewEmptyUser_or_role_or_group_common_optionContext() *User_or_role_or_group_common_optionContext {
	var p = new(User_or_role_or_group_common_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_user_or_role_or_group_common_option
	return p
}

func (*User_or_role_or_group_common_optionContext) IsUser_or_role_or_group_common_optionContext() {}

func NewUser_or_role_or_group_common_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_or_role_or_group_common_optionContext {
	var p = new(User_or_role_or_group_common_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_user_or_role_or_group_common_option

	return p
}

func (s *User_or_role_or_group_common_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *User_or_role_or_group_common_optionContext) GetPassword() antlr.Token { return s.password }

func (s *User_or_role_or_group_common_optionContext) GetDate_time() antlr.Token { return s.date_time }


func (s *User_or_role_or_group_common_optionContext) SetPassword(v antlr.Token) { s.password = v }

func (s *User_or_role_or_group_common_optionContext) SetDate_time(v antlr.Token) { s.date_time = v }


func (s *User_or_role_or_group_common_optionContext) SUPERUSER() antlr.TerminalNode {
	return s.GetToken(SQLParserSUPERUSER, 0)
}

func (s *User_or_role_or_group_common_optionContext) NOSUPERUSER() antlr.TerminalNode {
	return s.GetToken(SQLParserNOSUPERUSER, 0)
}

func (s *User_or_role_or_group_common_optionContext) CREATEDB() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATEDB, 0)
}

func (s *User_or_role_or_group_common_optionContext) NOCREATEDB() antlr.TerminalNode {
	return s.GetToken(SQLParserNOCREATEDB, 0)
}

func (s *User_or_role_or_group_common_optionContext) CREATEROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATEROLE, 0)
}

func (s *User_or_role_or_group_common_optionContext) NOCREATEROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserNOCREATEROLE, 0)
}

func (s *User_or_role_or_group_common_optionContext) INHERIT() antlr.TerminalNode {
	return s.GetToken(SQLParserINHERIT, 0)
}

func (s *User_or_role_or_group_common_optionContext) NOINHERIT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOINHERIT, 0)
}

func (s *User_or_role_or_group_common_optionContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(SQLParserLOGIN, 0)
}

func (s *User_or_role_or_group_common_optionContext) NOLOGIN() antlr.TerminalNode {
	return s.GetToken(SQLParserNOLOGIN, 0)
}

func (s *User_or_role_or_group_common_optionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(SQLParserPASSWORD, 0)
}

func (s *User_or_role_or_group_common_optionContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *User_or_role_or_group_common_optionContext) ENCRYPTED() antlr.TerminalNode {
	return s.GetToken(SQLParserENCRYPTED, 0)
}

func (s *User_or_role_or_group_common_optionContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *User_or_role_or_group_common_optionContext) VALID() antlr.TerminalNode {
	return s.GetToken(SQLParserVALID, 0)
}

func (s *User_or_role_or_group_common_optionContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(SQLParserUNTIL, 0)
}

func (s *User_or_role_or_group_common_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_or_role_or_group_common_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *User_or_role_or_group_common_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUser_or_role_or_group_common_option(s)
	}
}

func (s *User_or_role_or_group_common_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUser_or_role_or_group_common_option(s)
	}
}




func (p *SQLParser) User_or_role_or_group_common_option() (localctx IUser_or_role_or_group_common_optionContext) {
	localctx = NewUser_or_role_or_group_common_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, SQLParserRULE_user_or_role_or_group_common_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3292)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserSUPERUSER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3271)
			p.Match(SQLParserSUPERUSER)
		}


	case SQLParserNOSUPERUSER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3272)
			p.Match(SQLParserNOSUPERUSER)
		}


	case SQLParserCREATEDB:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3273)
			p.Match(SQLParserCREATEDB)
		}


	case SQLParserNOCREATEDB:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3274)
			p.Match(SQLParserNOCREATEDB)
		}


	case SQLParserCREATEROLE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3275)
			p.Match(SQLParserCREATEROLE)
		}


	case SQLParserNOCREATEROLE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3276)
			p.Match(SQLParserNOCREATEROLE)
		}


	case SQLParserINHERIT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3277)
			p.Match(SQLParserINHERIT)
		}


	case SQLParserNOINHERIT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3278)
			p.Match(SQLParserNOINHERIT)
		}


	case SQLParserLOGIN:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3279)
			p.Match(SQLParserLOGIN)
		}


	case SQLParserNOLOGIN:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3280)
			p.Match(SQLParserNOLOGIN)
		}


	case SQLParserENCRYPTED, SQLParserPASSWORD:
		p.EnterOuterAlt(localctx, 11)
		p.SetState(3282)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserENCRYPTED {
			{
				p.SetState(3281)
				p.Match(SQLParserENCRYPTED)
			}

		}
		{
			p.SetState(3284)
			p.Match(SQLParserPASSWORD)
		}
		p.SetState(3287)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCharacter_String_Literal:
			{
				p.SetState(3285)

				var _m = p.Match(SQLParserCharacter_String_Literal)

				localctx.(*User_or_role_or_group_common_optionContext).password = _m
			}


		case SQLParserNULL:
			{
				p.SetState(3286)
				p.Match(SQLParserNULL)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserVALID:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3289)
			p.Match(SQLParserVALID)
		}
		{
			p.SetState(3290)
			p.Match(SQLParserUNTIL)
		}
		{
			p.SetState(3291)

			var _m = p.Match(SQLParserCharacter_String_Literal)

			localctx.(*User_or_role_or_group_common_optionContext).date_time = _m
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IUser_or_role_common_optionContext is an interface to support dynamic dispatch.
type IUser_or_role_common_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_or_role_common_optionContext differentiates from other interfaces.
	IsUser_or_role_common_optionContext()
}

type User_or_role_common_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_or_role_common_optionContext() *User_or_role_common_optionContext {
	var p = new(User_or_role_common_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_user_or_role_common_option
	return p
}

func (*User_or_role_common_optionContext) IsUser_or_role_common_optionContext() {}

func NewUser_or_role_common_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_or_role_common_optionContext {
	var p = new(User_or_role_common_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_user_or_role_common_option

	return p
}

func (s *User_or_role_common_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *User_or_role_common_optionContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLICATION, 0)
}

func (s *User_or_role_common_optionContext) NOREPLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserNOREPLICATION, 0)
}

func (s *User_or_role_common_optionContext) BYPASSRLS() antlr.TerminalNode {
	return s.GetToken(SQLParserBYPASSRLS, 0)
}

func (s *User_or_role_common_optionContext) NOBYPASSRLS() antlr.TerminalNode {
	return s.GetToken(SQLParserNOBYPASSRLS, 0)
}

func (s *User_or_role_common_optionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONNECTION, 0)
}

func (s *User_or_role_common_optionContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserLIMIT, 0)
}

func (s *User_or_role_common_optionContext) Signed_number_literal() ISigned_number_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_number_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_number_literalContext)
}

func (s *User_or_role_common_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_or_role_common_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *User_or_role_common_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUser_or_role_common_option(s)
	}
}

func (s *User_or_role_common_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUser_or_role_common_option(s)
	}
}




func (p *SQLParser) User_or_role_common_option() (localctx IUser_or_role_common_optionContext) {
	localctx = NewUser_or_role_common_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, SQLParserRULE_user_or_role_common_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3301)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserREPLICATION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3294)
			p.Match(SQLParserREPLICATION)
		}


	case SQLParserNOREPLICATION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3295)
			p.Match(SQLParserNOREPLICATION)
		}


	case SQLParserBYPASSRLS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3296)
			p.Match(SQLParserBYPASSRLS)
		}


	case SQLParserNOBYPASSRLS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3297)
			p.Match(SQLParserNOBYPASSRLS)
		}


	case SQLParserCONNECTION:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3298)
			p.Match(SQLParserCONNECTION)
		}
		{
			p.SetState(3299)
			p.Match(SQLParserLIMIT)
		}
		{
			p.SetState(3300)
			p.Signed_number_literal()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IUser_or_role_or_group_option_for_createContext is an interface to support dynamic dispatch.
type IUser_or_role_or_group_option_for_createContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_or_role_or_group_option_for_createContext differentiates from other interfaces.
	IsUser_or_role_or_group_option_for_createContext()
}

type User_or_role_or_group_option_for_createContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_or_role_or_group_option_for_createContext() *User_or_role_or_group_option_for_createContext {
	var p = new(User_or_role_or_group_option_for_createContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_user_or_role_or_group_option_for_create
	return p
}

func (*User_or_role_or_group_option_for_createContext) IsUser_or_role_or_group_option_for_createContext() {}

func NewUser_or_role_or_group_option_for_createContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_or_role_or_group_option_for_createContext {
	var p = new(User_or_role_or_group_option_for_createContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_user_or_role_or_group_option_for_create

	return p
}

func (s *User_or_role_or_group_option_for_createContext) GetParser() antlr.Parser { return s.parser }

func (s *User_or_role_or_group_option_for_createContext) SYSID() antlr.TerminalNode {
	return s.GetToken(SQLParserSYSID, 0)
}

func (s *User_or_role_or_group_option_for_createContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *User_or_role_or_group_option_for_createContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *User_or_role_or_group_option_for_createContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *User_or_role_or_group_option_for_createContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *User_or_role_or_group_option_for_createContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *User_or_role_or_group_option_for_createContext) ADMIN() antlr.TerminalNode {
	return s.GetToken(SQLParserADMIN, 0)
}

func (s *User_or_role_or_group_option_for_createContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *User_or_role_or_group_option_for_createContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_or_role_or_group_option_for_createContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *User_or_role_or_group_option_for_createContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUser_or_role_or_group_option_for_create(s)
	}
}

func (s *User_or_role_or_group_option_for_createContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUser_or_role_or_group_option_for_create(s)
	}
}




func (p *SQLParser) User_or_role_or_group_option_for_create() (localctx IUser_or_role_or_group_option_for_createContext) {
	localctx = NewUser_or_role_or_group_option_for_createContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, SQLParserRULE_user_or_role_or_group_option_for_create)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3315)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserSYSID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3303)
			p.Match(SQLParserSYSID)
		}
		{
			p.SetState(3304)
			p.vex(0)
		}


	case SQLParserADMIN, SQLParserROLE, SQLParserIN, SQLParserUSER:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3312)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 359, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3305)
				p.Match(SQLParserIN)
			}
			{
				p.SetState(3306)
				p.Match(SQLParserROLE)
			}


		case 2:
			{
				p.SetState(3307)
				p.Match(SQLParserIN)
			}
			{
				p.SetState(3308)
				p.Match(SQLParserGROUP)
			}


		case 3:
			{
				p.SetState(3309)
				p.Match(SQLParserROLE)
			}


		case 4:
			{
				p.SetState(3310)
				p.Match(SQLParserADMIN)
			}


		case 5:
			{
				p.SetState(3311)
				p.Match(SQLParserUSER)
			}

		}
		{
			p.SetState(3314)
			p.Identifier_list()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_group_statementContext is an interface to support dynamic dispatch.
type ICreate_group_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsCreate_group_statementContext differentiates from other interfaces.
	IsCreate_group_statementContext()
}

type Create_group_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyCreate_group_statementContext() *Create_group_statementContext {
	var p = new(Create_group_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_group_statement
	return p
}

func (*Create_group_statementContext) IsCreate_group_statementContext() {}

func NewCreate_group_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_group_statementContext {
	var p = new(Create_group_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_group_statement

	return p
}

func (s *Create_group_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_group_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Create_group_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Create_group_statementContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *Create_group_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_group_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Create_group_statementContext) AllGroup_option() []IGroup_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroup_optionContext)(nil)).Elem())
	var tst = make([]IGroup_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroup_optionContext)
		}
	}

	return tst
}

func (s *Create_group_statementContext) Group_option(i int) IGroup_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroup_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroup_optionContext)
}

func (s *Create_group_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_group_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_group_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_group_statement(s)
	}
}

func (s *Create_group_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_group_statement(s)
	}
}




func (p *SQLParser) Create_group_statement() (localctx ICreate_group_statementContext) {
	localctx = NewCreate_group_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, SQLParserRULE_create_group_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3317)
		p.Match(SQLParserGROUP)
	}
	{
		p.SetState(3318)

		var _x = p.Identifier()


		localctx.(*Create_group_statementContext).name = _x
	}
	p.SetState(3327)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserADMIN || _la == SQLParserENCRYPTED || _la == SQLParserINHERIT || _la == SQLParserPASSWORD || _la == SQLParserROLE || _la == SQLParserSYSID || _la == SQLParserVALID || _la == SQLParserIN || _la == SQLParserUSER || ((((_la - 449)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 449))) & ((1 << (SQLParserWITH - 449)) | (1 << (SQLParserCREATEDB - 449)) | (1 << (SQLParserCREATEROLE - 449)))) != 0) || ((((_la - 494)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 494))) & ((1 << (SQLParserLOGIN - 494)) | (1 << (SQLParserNOCREATEDB - 494)) | (1 << (SQLParserNOCREATEROLE - 494)) | (1 << (SQLParserNOINHERIT - 494)) | (1 << (SQLParserNOLOGIN - 494)) | (1 << (SQLParserNOSUPERUSER - 494)))) != 0) || _la == SQLParserSUPERUSER {
		p.SetState(3320)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(3319)
				p.Match(SQLParserWITH)
			}

		}
		p.SetState(3323)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserADMIN || _la == SQLParserENCRYPTED || _la == SQLParserINHERIT || _la == SQLParserPASSWORD || _la == SQLParserROLE || _la == SQLParserSYSID || _la == SQLParserVALID || _la == SQLParserIN || _la == SQLParserUSER || _la == SQLParserCREATEDB || _la == SQLParserCREATEROLE || ((((_la - 494)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 494))) & ((1 << (SQLParserLOGIN - 494)) | (1 << (SQLParserNOCREATEDB - 494)) | (1 << (SQLParserNOCREATEROLE - 494)) | (1 << (SQLParserNOINHERIT - 494)) | (1 << (SQLParserNOLOGIN - 494)) | (1 << (SQLParserNOSUPERUSER - 494)))) != 0) || _la == SQLParserSUPERUSER {
			{
				p.SetState(3322)
				p.Group_option()
			}


			p.SetState(3325)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}



	return localctx
}


// IGroup_optionContext is an interface to support dynamic dispatch.
type IGroup_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_optionContext differentiates from other interfaces.
	IsGroup_optionContext()
}

type Group_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_optionContext() *Group_optionContext {
	var p = new(Group_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_group_option
	return p
}

func (*Group_optionContext) IsGroup_optionContext() {}

func NewGroup_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_optionContext {
	var p = new(Group_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_group_option

	return p
}

func (s *Group_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_optionContext) User_or_role_or_group_common_option() IUser_or_role_or_group_common_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_or_group_common_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_or_group_common_optionContext)
}

func (s *Group_optionContext) User_or_role_or_group_option_for_create() IUser_or_role_or_group_option_for_createContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_or_role_or_group_option_for_createContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_or_role_or_group_option_for_createContext)
}

func (s *Group_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Group_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterGroup_option(s)
	}
}

func (s *Group_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitGroup_option(s)
	}
}




func (p *SQLParser) Group_option() (localctx IGroup_optionContext) {
	localctx = NewGroup_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, SQLParserRULE_group_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3331)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserENCRYPTED, SQLParserINHERIT, SQLParserPASSWORD, SQLParserVALID, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserLOGIN, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOSUPERUSER, SQLParserSUPERUSER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3329)
			p.User_or_role_or_group_common_option()
		}


	case SQLParserADMIN, SQLParserROLE, SQLParserSYSID, SQLParserIN, SQLParserUSER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3330)
			p.User_or_role_or_group_option_for_create()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_tablespace_statementContext is an interface to support dynamic dispatch.
type ICreate_tablespace_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDirectory returns the directory token.
	GetDirectory() antlr.Token 


	// SetDirectory sets the directory token.
	SetDirectory(antlr.Token) 


	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsCreate_tablespace_statementContext differentiates from other interfaces.
	IsCreate_tablespace_statementContext()
}

type Create_tablespace_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
	directory antlr.Token
}

func NewEmptyCreate_tablespace_statementContext() *Create_tablespace_statementContext {
	var p = new(Create_tablespace_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_tablespace_statement
	return p
}

func (*Create_tablespace_statementContext) IsCreate_tablespace_statementContext() {}

func NewCreate_tablespace_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tablespace_statementContext {
	var p = new(Create_tablespace_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_tablespace_statement

	return p
}

func (s *Create_tablespace_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tablespace_statementContext) GetDirectory() antlr.Token { return s.directory }


func (s *Create_tablespace_statementContext) SetDirectory(v antlr.Token) { s.directory = v }


func (s *Create_tablespace_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Create_tablespace_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Create_tablespace_statementContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Create_tablespace_statementContext) LOCATION() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCATION, 0)
}

func (s *Create_tablespace_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_tablespace_statementContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Create_tablespace_statementContext) OWNER() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNER, 0)
}

func (s *Create_tablespace_statementContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Create_tablespace_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Create_tablespace_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_tablespace_statementContext) AllOption_with_value() []IOption_with_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOption_with_valueContext)(nil)).Elem())
	var tst = make([]IOption_with_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOption_with_valueContext)
		}
	}

	return tst
}

func (s *Create_tablespace_statementContext) Option_with_value(i int) IOption_with_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_with_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOption_with_valueContext)
}

func (s *Create_tablespace_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_tablespace_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_tablespace_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_tablespace_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tablespace_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_tablespace_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_tablespace_statement(s)
	}
}

func (s *Create_tablespace_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_tablespace_statement(s)
	}
}




func (p *SQLParser) Create_tablespace_statement() (localctx ICreate_tablespace_statementContext) {
	localctx = NewCreate_tablespace_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, SQLParserRULE_create_tablespace_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3333)
		p.Match(SQLParserTABLESPACE)
	}
	{
		p.SetState(3334)

		var _x = p.Identifier()


		localctx.(*Create_tablespace_statementContext).name = _x
	}
	p.SetState(3337)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOWNER {
		{
			p.SetState(3335)
			p.Match(SQLParserOWNER)
		}
		{
			p.SetState(3336)
			p.User_name()
		}

	}
	{
		p.SetState(3339)
		p.Match(SQLParserLOCATION)
	}
	{
		p.SetState(3340)

		var _m = p.Match(SQLParserCharacter_String_Literal)

		localctx.(*Create_tablespace_statementContext).directory = _m
	}
	p.SetState(3353)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(3341)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(3342)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(3343)
			p.Option_with_value()
		}
		p.SetState(3348)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3344)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3345)
				p.Option_with_value()
			}


			p.SetState(3350)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3351)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}



	return localctx
}


// ICreate_statistics_statementContext is an interface to support dynamic dispatch.
type ICreate_statistics_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsCreate_statistics_statementContext differentiates from other interfaces.
	IsCreate_statistics_statementContext()
}

type Create_statistics_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyCreate_statistics_statementContext() *Create_statistics_statementContext {
	var p = new(Create_statistics_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_statistics_statement
	return p
}

func (*Create_statistics_statementContext) IsCreate_statistics_statementContext() {}

func NewCreate_statistics_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_statistics_statementContext {
	var p = new(Create_statistics_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_statistics_statement

	return p
}

func (s *Create_statistics_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_statistics_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Create_statistics_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Create_statistics_statementContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserSTATISTICS, 0)
}

func (s *Create_statistics_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Create_statistics_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_statistics_statementContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Create_statistics_statementContext) AllIdentifier_list() []IIdentifier_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem())
	var tst = make([]IIdentifier_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_listContext)
		}
	}

	return tst
}

func (s *Create_statistics_statementContext) Identifier_list(i int) IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Create_statistics_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Create_statistics_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_statistics_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_statistics_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_statistics_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_statistics_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_statistics_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_statistics_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_statistics_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_statistics_statement(s)
	}
}

func (s *Create_statistics_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_statistics_statement(s)
	}
}




func (p *SQLParser) Create_statistics_statement() (localctx ICreate_statistics_statementContext) {
	localctx = NewCreate_statistics_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, SQLParserRULE_create_statistics_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3355)
		p.Match(SQLParserSTATISTICS)
	}
	p.SetState(3357)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 368, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3356)
			p.If_not_exists()
		}


	}
	{
		p.SetState(3359)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_statistics_statementContext).name = _x
	}
	p.SetState(3364)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(3360)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(3361)
			p.Identifier_list()
		}
		{
			p.SetState(3362)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}
	{
		p.SetState(3366)
		p.Match(SQLParserON)
	}
	{
		p.SetState(3367)
		p.Identifier()
	}
	{
		p.SetState(3368)
		p.Match(SQLParserCOMMA)
	}
	{
		p.SetState(3369)
		p.Identifier_list()
	}
	{
		p.SetState(3370)
		p.Match(SQLParserFROM)
	}
	{
		p.SetState(3371)
		p.Schema_qualified_name()
	}



	return localctx
}


// ICreate_foreign_data_wrapper_statementContext is an interface to support dynamic dispatch.
type ICreate_foreign_data_wrapper_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsCreate_foreign_data_wrapper_statementContext differentiates from other interfaces.
	IsCreate_foreign_data_wrapper_statementContext()
}

type Create_foreign_data_wrapper_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyCreate_foreign_data_wrapper_statementContext() *Create_foreign_data_wrapper_statementContext {
	var p = new(Create_foreign_data_wrapper_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_foreign_data_wrapper_statement
	return p
}

func (*Create_foreign_data_wrapper_statementContext) IsCreate_foreign_data_wrapper_statementContext() {}

func NewCreate_foreign_data_wrapper_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_foreign_data_wrapper_statementContext {
	var p = new(Create_foreign_data_wrapper_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_foreign_data_wrapper_statement

	return p
}

func (s *Create_foreign_data_wrapper_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_foreign_data_wrapper_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Create_foreign_data_wrapper_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Create_foreign_data_wrapper_statementContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Create_foreign_data_wrapper_statementContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Create_foreign_data_wrapper_statementContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(SQLParserWRAPPER, 0)
}

func (s *Create_foreign_data_wrapper_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_foreign_data_wrapper_statementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(SQLParserHANDLER, 0)
}

func (s *Create_foreign_data_wrapper_statementContext) AllSchema_qualified_name_nontype() []ISchema_qualified_name_nontypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_name_nontypeContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_name_nontypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_name_nontypeContext)
		}
	}

	return tst
}

func (s *Create_foreign_data_wrapper_statementContext) Schema_qualified_name_nontype(i int) ISchema_qualified_name_nontypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_name_nontypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_name_nontypeContext)
}

func (s *Create_foreign_data_wrapper_statementContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNO)
}

func (s *Create_foreign_data_wrapper_statementContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNO, i)
}

func (s *Create_foreign_data_wrapper_statementContext) VALIDATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserVALIDATOR, 0)
}

func (s *Create_foreign_data_wrapper_statementContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTIONS, 0)
}

func (s *Create_foreign_data_wrapper_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_foreign_data_wrapper_statementContext) AllOption_without_equal() []IOption_without_equalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOption_without_equalContext)(nil)).Elem())
	var tst = make([]IOption_without_equalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOption_without_equalContext)
		}
	}

	return tst
}

func (s *Create_foreign_data_wrapper_statementContext) Option_without_equal(i int) IOption_without_equalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_without_equalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOption_without_equalContext)
}

func (s *Create_foreign_data_wrapper_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_foreign_data_wrapper_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_foreign_data_wrapper_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_foreign_data_wrapper_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_foreign_data_wrapper_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_foreign_data_wrapper_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_foreign_data_wrapper_statement(s)
	}
}

func (s *Create_foreign_data_wrapper_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_foreign_data_wrapper_statement(s)
	}
}




func (p *SQLParser) Create_foreign_data_wrapper_statement() (localctx ICreate_foreign_data_wrapper_statementContext) {
	localctx = NewCreate_foreign_data_wrapper_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, SQLParserRULE_create_foreign_data_wrapper_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3373)
		p.Match(SQLParserFOREIGN)
	}
	{
		p.SetState(3374)
		p.Match(SQLParserDATA)
	}
	{
		p.SetState(3375)
		p.Match(SQLParserWRAPPER)
	}
	{
		p.SetState(3376)

		var _x = p.Identifier()


		localctx.(*Create_foreign_data_wrapper_statementContext).name = _x
	}
	p.SetState(3381)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 370, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3377)
			p.Match(SQLParserHANDLER)
		}
		{
			p.SetState(3378)
			p.Schema_qualified_name_nontype()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 370, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(3379)
			p.Match(SQLParserNO)
		}
		{
			p.SetState(3380)
			p.Match(SQLParserHANDLER)
		}


	}
	p.SetState(3387)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserVALIDATOR:
		{
			p.SetState(3383)
			p.Match(SQLParserVALIDATOR)
		}
		{
			p.SetState(3384)
			p.Schema_qualified_name_nontype()
		}


	case SQLParserNO:
		{
			p.SetState(3385)
			p.Match(SQLParserNO)
		}
		{
			p.SetState(3386)
			p.Match(SQLParserVALIDATOR)
		}


	case SQLParserEOF, SQLParserOPTIONS, SQLParserSEMI_COLON:



	default:
	}
	p.SetState(3401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOPTIONS {
		{
			p.SetState(3389)
			p.Match(SQLParserOPTIONS)
		}
		{
			p.SetState(3390)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(3391)
			p.Option_without_equal()
		}
		p.SetState(3396)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3392)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3393)
				p.Option_without_equal()
			}


			p.SetState(3398)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3399)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}



	return localctx
}


// IOption_without_equalContext is an interface to support dynamic dispatch.
type IOption_without_equalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOption_without_equalContext differentiates from other interfaces.
	IsOption_without_equalContext()
}

type Option_without_equalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOption_without_equalContext() *Option_without_equalContext {
	var p = new(Option_without_equalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_option_without_equal
	return p
}

func (*Option_without_equalContext) IsOption_without_equalContext() {}

func NewOption_without_equalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Option_without_equalContext {
	var p = new(Option_without_equalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_option_without_equal

	return p
}

func (s *Option_without_equalContext) GetParser() antlr.Parser { return s.parser }

func (s *Option_without_equalContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Option_without_equalContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Option_without_equalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Option_without_equalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Option_without_equalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOption_without_equal(s)
	}
}

func (s *Option_without_equalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOption_without_equal(s)
	}
}




func (p *SQLParser) Option_without_equal() (localctx IOption_without_equalContext) {
	localctx = NewOption_without_equalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, SQLParserRULE_option_without_equal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3403)
		p.Identifier()
	}
	{
		p.SetState(3404)
		p.Match(SQLParserCharacter_String_Literal)
	}



	return localctx
}


// ICreate_operator_statementContext is an interface to support dynamic dispatch.
type ICreate_operator_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IOperator_nameContext


	// SetName sets the name rule contexts.
	SetName(IOperator_nameContext)


	// IsCreate_operator_statementContext differentiates from other interfaces.
	IsCreate_operator_statementContext()
}

type Create_operator_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IOperator_nameContext 
}

func NewEmptyCreate_operator_statementContext() *Create_operator_statementContext {
	var p = new(Create_operator_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_operator_statement
	return p
}

func (*Create_operator_statementContext) IsCreate_operator_statementContext() {}

func NewCreate_operator_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_operator_statementContext {
	var p = new(Create_operator_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_operator_statement

	return p
}

func (s *Create_operator_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_operator_statementContext) GetName() IOperator_nameContext { return s.name }


func (s *Create_operator_statementContext) SetName(v IOperator_nameContext) { s.name = v }


func (s *Create_operator_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Create_operator_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_operator_statementContext) AllOperator_option() []IOperator_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOperator_optionContext)(nil)).Elem())
	var tst = make([]IOperator_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOperator_optionContext)
		}
	}

	return tst
}

func (s *Create_operator_statementContext) Operator_option(i int) IOperator_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOperator_optionContext)
}

func (s *Create_operator_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_operator_statementContext) Operator_name() IOperator_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_nameContext)
}

func (s *Create_operator_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_operator_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_operator_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_operator_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_operator_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_operator_statement(s)
	}
}

func (s *Create_operator_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_operator_statement(s)
	}
}




func (p *SQLParser) Create_operator_statement() (localctx ICreate_operator_statementContext) {
	localctx = NewCreate_operator_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, SQLParserRULE_create_operator_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3406)
		p.Match(SQLParserOPERATOR)
	}
	{
		p.SetState(3407)

		var _x = p.Operator_name()


		localctx.(*Create_operator_statementContext).name = _x
	}
	{
		p.SetState(3408)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(3409)
		p.Operator_option()
	}
	p.SetState(3414)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(3410)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(3411)
			p.Operator_option()
		}


		p.SetState(3416)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3417)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IOperator_nameContext is an interface to support dynamic dispatch.
type IOperator_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdentifierContext

	// GetOperator returns the operator rule contexts.
	GetOperator() IAll_simple_opContext


	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdentifierContext)

	// SetOperator sets the operator rule contexts.
	SetOperator(IAll_simple_opContext)


	// IsOperator_nameContext differentiates from other interfaces.
	IsOperator_nameContext()
}

type Operator_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	schema_name IIdentifierContext 
	operator IAll_simple_opContext 
}

func NewEmptyOperator_nameContext() *Operator_nameContext {
	var p = new(Operator_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_operator_name
	return p
}

func (*Operator_nameContext) IsOperator_nameContext() {}

func NewOperator_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_nameContext {
	var p = new(Operator_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_operator_name

	return p
}

func (s *Operator_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_nameContext) GetSchema_name() IIdentifierContext { return s.schema_name }

func (s *Operator_nameContext) GetOperator() IAll_simple_opContext { return s.operator }


func (s *Operator_nameContext) SetSchema_name(v IIdentifierContext) { s.schema_name = v }

func (s *Operator_nameContext) SetOperator(v IAll_simple_opContext) { s.operator = v }


func (s *Operator_nameContext) All_simple_op() IAll_simple_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_simple_opContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_simple_opContext)
}

func (s *Operator_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Operator_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Operator_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Operator_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOperator_name(s)
	}
}

func (s *Operator_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOperator_name(s)
	}
}




func (p *SQLParser) Operator_name() (localctx IOperator_nameContext) {
	localctx = NewOperator_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, SQLParserRULE_operator_name)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3422)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
		{
			p.SetState(3419)

			var _x = p.Identifier()


			localctx.(*Operator_nameContext).schema_name = _x
		}
		{
			p.SetState(3420)
			p.Match(SQLParserDOT)
		}

	}
	{
		p.SetState(3424)

		var _x = p.All_simple_op()


		localctx.(*Operator_nameContext).operator = _x
	}



	return localctx
}


// IOperator_optionContext is an interface to support dynamic dispatch.
type IOperator_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFunc_name returns the func_name rule contexts.
	GetFunc_name() ISchema_qualified_nameContext

	// GetRestr_name returns the restr_name rule contexts.
	GetRestr_name() ISchema_qualified_nameContext

	// GetJoin_name returns the join_name rule contexts.
	GetJoin_name() ISchema_qualified_nameContext

	// GetX_type returns the x_type rule contexts.
	GetX_type() IData_typeContext

	// GetAddition_oper_name returns the addition_oper_name rule contexts.
	GetAddition_oper_name() IAll_op_refContext


	// SetFunc_name sets the func_name rule contexts.
	SetFunc_name(ISchema_qualified_nameContext)

	// SetRestr_name sets the restr_name rule contexts.
	SetRestr_name(ISchema_qualified_nameContext)

	// SetJoin_name sets the join_name rule contexts.
	SetJoin_name(ISchema_qualified_nameContext)

	// SetX_type sets the x_type rule contexts.
	SetX_type(IData_typeContext)

	// SetAddition_oper_name sets the addition_oper_name rule contexts.
	SetAddition_oper_name(IAll_op_refContext)


	// IsOperator_optionContext differentiates from other interfaces.
	IsOperator_optionContext()
}

type Operator_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	func_name ISchema_qualified_nameContext 
	restr_name ISchema_qualified_nameContext 
	join_name ISchema_qualified_nameContext 
	x_type IData_typeContext 
	addition_oper_name IAll_op_refContext 
}

func NewEmptyOperator_optionContext() *Operator_optionContext {
	var p = new(Operator_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_operator_option
	return p
}

func (*Operator_optionContext) IsOperator_optionContext() {}

func NewOperator_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_optionContext {
	var p = new(Operator_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_operator_option

	return p
}

func (s *Operator_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_optionContext) GetFunc_name() ISchema_qualified_nameContext { return s.func_name }

func (s *Operator_optionContext) GetRestr_name() ISchema_qualified_nameContext { return s.restr_name }

func (s *Operator_optionContext) GetJoin_name() ISchema_qualified_nameContext { return s.join_name }

func (s *Operator_optionContext) GetX_type() IData_typeContext { return s.x_type }

func (s *Operator_optionContext) GetAddition_oper_name() IAll_op_refContext { return s.addition_oper_name }


func (s *Operator_optionContext) SetFunc_name(v ISchema_qualified_nameContext) { s.func_name = v }

func (s *Operator_optionContext) SetRestr_name(v ISchema_qualified_nameContext) { s.restr_name = v }

func (s *Operator_optionContext) SetJoin_name(v ISchema_qualified_nameContext) { s.join_name = v }

func (s *Operator_optionContext) SetX_type(v IData_typeContext) { s.x_type = v }

func (s *Operator_optionContext) SetAddition_oper_name(v IAll_op_refContext) { s.addition_oper_name = v }


func (s *Operator_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Operator_optionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Operator_optionContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Operator_optionContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Operator_optionContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICT, 0)
}

func (s *Operator_optionContext) JOIN() antlr.TerminalNode {
	return s.GetToken(SQLParserJOIN, 0)
}

func (s *Operator_optionContext) LEFTARG() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFTARG, 0)
}

func (s *Operator_optionContext) RIGHTARG() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHTARG, 0)
}

func (s *Operator_optionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Operator_optionContext) COMMUTATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMUTATOR, 0)
}

func (s *Operator_optionContext) NEGATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserNEGATOR, 0)
}

func (s *Operator_optionContext) All_op_ref() IAll_op_refContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_op_refContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_op_refContext)
}

func (s *Operator_optionContext) HASHES() antlr.TerminalNode {
	return s.GetToken(SQLParserHASHES, 0)
}

func (s *Operator_optionContext) MERGES() antlr.TerminalNode {
	return s.GetToken(SQLParserMERGES, 0)
}

func (s *Operator_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Operator_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOperator_option(s)
	}
}

func (s *Operator_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOperator_option(s)
	}
}




func (p *SQLParser) Operator_option() (localctx IOperator_optionContext) {
	localctx = NewOperator_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, SQLParserRULE_operator_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3443)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserFUNCTION, SQLParserPROCEDURE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3426)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserFUNCTION || _la == SQLParserPROCEDURE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3427)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3428)

			var _x = p.Schema_qualified_name()


			localctx.(*Operator_optionContext).func_name = _x
		}


	case SQLParserRESTRICT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3429)
			p.Match(SQLParserRESTRICT)
		}
		{
			p.SetState(3430)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3431)

			var _x = p.Schema_qualified_name()


			localctx.(*Operator_optionContext).restr_name = _x
		}


	case SQLParserJOIN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3432)
			p.Match(SQLParserJOIN)
		}
		{
			p.SetState(3433)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3434)

			var _x = p.Schema_qualified_name()


			localctx.(*Operator_optionContext).join_name = _x
		}


	case SQLParserLEFTARG, SQLParserRIGHTARG:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3435)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserLEFTARG || _la == SQLParserRIGHTARG) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3436)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3437)

			var _x = p.Data_type()


			localctx.(*Operator_optionContext).x_type = _x
		}


	case SQLParserCOMMUTATOR, SQLParserNEGATOR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3438)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCOMMUTATOR || _la == SQLParserNEGATOR) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3439)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3440)

			var _x = p.All_op_ref()


			localctx.(*Operator_optionContext).addition_oper_name = _x
		}


	case SQLParserHASHES:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3441)
			p.Match(SQLParserHASHES)
		}


	case SQLParserMERGES:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3442)
			p.Match(SQLParserMERGES)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_aggregate_statementContext is an interface to support dynamic dispatch.
type ICreate_aggregate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetBase_type returns the base_type rule contexts.
	GetBase_type() IData_typeContext

	// GetSfunc_name returns the sfunc_name rule contexts.
	GetSfunc_name() ISchema_qualified_nameContext

	// GetX_type returns the x_type rule contexts.
	GetX_type() IData_typeContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetBase_type sets the base_type rule contexts.
	SetBase_type(IData_typeContext)

	// SetSfunc_name sets the sfunc_name rule contexts.
	SetSfunc_name(ISchema_qualified_nameContext)

	// SetX_type sets the x_type rule contexts.
	SetX_type(IData_typeContext)


	// IsCreate_aggregate_statementContext differentiates from other interfaces.
	IsCreate_aggregate_statementContext()
}

type Create_aggregate_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	base_type IData_typeContext 
	sfunc_name ISchema_qualified_nameContext 
	x_type IData_typeContext 
}

func NewEmptyCreate_aggregate_statementContext() *Create_aggregate_statementContext {
	var p = new(Create_aggregate_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_aggregate_statement
	return p
}

func (*Create_aggregate_statementContext) IsCreate_aggregate_statementContext() {}

func NewCreate_aggregate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_aggregate_statementContext {
	var p = new(Create_aggregate_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_aggregate_statement

	return p
}

func (s *Create_aggregate_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_aggregate_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Create_aggregate_statementContext) GetBase_type() IData_typeContext { return s.base_type }

func (s *Create_aggregate_statementContext) GetSfunc_name() ISchema_qualified_nameContext { return s.sfunc_name }

func (s *Create_aggregate_statementContext) GetX_type() IData_typeContext { return s.x_type }


func (s *Create_aggregate_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Create_aggregate_statementContext) SetBase_type(v IData_typeContext) { s.base_type = v }

func (s *Create_aggregate_statementContext) SetSfunc_name(v ISchema_qualified_nameContext) { s.sfunc_name = v }

func (s *Create_aggregate_statementContext) SetX_type(v IData_typeContext) { s.x_type = v }


func (s *Create_aggregate_statementContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(SQLParserAGGREGATE, 0)
}

func (s *Create_aggregate_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_aggregate_statementContext) SFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserSFUNC, 0)
}

func (s *Create_aggregate_statementContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserEQUAL)
}

func (s *Create_aggregate_statementContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, i)
}

func (s *Create_aggregate_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_aggregate_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_aggregate_statementContext) STYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTYPE, 0)
}

func (s *Create_aggregate_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_aggregate_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_aggregate_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_aggregate_statementContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Create_aggregate_statementContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_aggregate_statementContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLParserOR, 0)
}

func (s *Create_aggregate_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLACE, 0)
}

func (s *Create_aggregate_statementContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Create_aggregate_statementContext) BASETYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserBASETYPE, 0)
}

func (s *Create_aggregate_statementContext) AllAggregate_param() []IAggregate_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAggregate_paramContext)(nil)).Elem())
	var tst = make([]IAggregate_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAggregate_paramContext)
		}
	}

	return tst
}

func (s *Create_aggregate_statementContext) Aggregate_param(i int) IAggregate_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAggregate_paramContext)
}

func (s *Create_aggregate_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_aggregate_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_aggregate_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_aggregate_statement(s)
	}
}

func (s *Create_aggregate_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_aggregate_statement(s)
	}
}




func (p *SQLParser) Create_aggregate_statement() (localctx ICreate_aggregate_statementContext) {
	localctx = NewCreate_aggregate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, SQLParserRULE_create_aggregate_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOR {
		{
			p.SetState(3445)
			p.Match(SQLParserOR)
		}
		{
			p.SetState(3446)
			p.Match(SQLParserREPLACE)
		}

	}
	{
		p.SetState(3449)
		p.Match(SQLParserAGGREGATE)
	}
	{
		p.SetState(3450)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_aggregate_statementContext).name = _x
	}
	p.SetState(3452)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 378, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3451)
			p.Function_args()
		}


	}
	{
		p.SetState(3454)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(3460)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserBASETYPE {
		{
			p.SetState(3455)
			p.Match(SQLParserBASETYPE)
		}
		{
			p.SetState(3456)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3457)

			var _x = p.Data_type()


			localctx.(*Create_aggregate_statementContext).base_type = _x
		}
		{
			p.SetState(3458)
			p.Match(SQLParserCOMMA)
		}

	}
	{
		p.SetState(3462)
		p.Match(SQLParserSFUNC)
	}
	{
		p.SetState(3463)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(3464)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_aggregate_statementContext).sfunc_name = _x
	}
	{
		p.SetState(3465)
		p.Match(SQLParserCOMMA)
	}
	{
		p.SetState(3466)
		p.Match(SQLParserSTYPE)
	}
	{
		p.SetState(3467)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(3468)

		var _x = p.Data_type()


		localctx.(*Create_aggregate_statementContext).x_type = _x
	}
	p.SetState(3473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(3469)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(3470)
			p.Aggregate_param()
		}


		p.SetState(3475)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3476)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IAggregate_paramContext is an interface to support dynamic dispatch.
type IAggregate_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetS_space returns the s_space token.
	GetS_space() antlr.Token 

	// GetMs_space returns the ms_space token.
	GetMs_space() antlr.Token 


	// SetS_space sets the s_space token.
	SetS_space(antlr.Token) 

	// SetMs_space sets the ms_space token.
	SetMs_space(antlr.Token) 


	// GetFinal_func returns the final_func rule contexts.
	GetFinal_func() ISchema_qualified_nameContext

	// GetCombine_func returns the combine_func rule contexts.
	GetCombine_func() ISchema_qualified_nameContext

	// GetSerial_func returns the serial_func rule contexts.
	GetSerial_func() ISchema_qualified_nameContext

	// GetDeserial_func returns the deserial_func rule contexts.
	GetDeserial_func() ISchema_qualified_nameContext

	// GetInit_cond returns the init_cond rule contexts.
	GetInit_cond() IVexContext

	// GetMs_func returns the ms_func rule contexts.
	GetMs_func() ISchema_qualified_nameContext

	// GetMinv_func returns the minv_func rule contexts.
	GetMinv_func() ISchema_qualified_nameContext

	// GetMs_type returns the ms_type rule contexts.
	GetMs_type() IData_typeContext

	// GetMfinal_func returns the mfinal_func rule contexts.
	GetMfinal_func() ISchema_qualified_nameContext

	// GetMinit_cond returns the minit_cond rule contexts.
	GetMinit_cond() IVexContext


	// SetFinal_func sets the final_func rule contexts.
	SetFinal_func(ISchema_qualified_nameContext)

	// SetCombine_func sets the combine_func rule contexts.
	SetCombine_func(ISchema_qualified_nameContext)

	// SetSerial_func sets the serial_func rule contexts.
	SetSerial_func(ISchema_qualified_nameContext)

	// SetDeserial_func sets the deserial_func rule contexts.
	SetDeserial_func(ISchema_qualified_nameContext)

	// SetInit_cond sets the init_cond rule contexts.
	SetInit_cond(IVexContext)

	// SetMs_func sets the ms_func rule contexts.
	SetMs_func(ISchema_qualified_nameContext)

	// SetMinv_func sets the minv_func rule contexts.
	SetMinv_func(ISchema_qualified_nameContext)

	// SetMs_type sets the ms_type rule contexts.
	SetMs_type(IData_typeContext)

	// SetMfinal_func sets the mfinal_func rule contexts.
	SetMfinal_func(ISchema_qualified_nameContext)

	// SetMinit_cond sets the minit_cond rule contexts.
	SetMinit_cond(IVexContext)


	// IsAggregate_paramContext differentiates from other interfaces.
	IsAggregate_paramContext()
}

type Aggregate_paramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	s_space antlr.Token
	final_func ISchema_qualified_nameContext 
	combine_func ISchema_qualified_nameContext 
	serial_func ISchema_qualified_nameContext 
	deserial_func ISchema_qualified_nameContext 
	init_cond IVexContext 
	ms_func ISchema_qualified_nameContext 
	minv_func ISchema_qualified_nameContext 
	ms_type IData_typeContext 
	ms_space antlr.Token
	mfinal_func ISchema_qualified_nameContext 
	minit_cond IVexContext 
}

func NewEmptyAggregate_paramContext() *Aggregate_paramContext {
	var p = new(Aggregate_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_aggregate_param
	return p
}

func (*Aggregate_paramContext) IsAggregate_paramContext() {}

func NewAggregate_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_paramContext {
	var p = new(Aggregate_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_aggregate_param

	return p
}

func (s *Aggregate_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_paramContext) GetS_space() antlr.Token { return s.s_space }

func (s *Aggregate_paramContext) GetMs_space() antlr.Token { return s.ms_space }


func (s *Aggregate_paramContext) SetS_space(v antlr.Token) { s.s_space = v }

func (s *Aggregate_paramContext) SetMs_space(v antlr.Token) { s.ms_space = v }


func (s *Aggregate_paramContext) GetFinal_func() ISchema_qualified_nameContext { return s.final_func }

func (s *Aggregate_paramContext) GetCombine_func() ISchema_qualified_nameContext { return s.combine_func }

func (s *Aggregate_paramContext) GetSerial_func() ISchema_qualified_nameContext { return s.serial_func }

func (s *Aggregate_paramContext) GetDeserial_func() ISchema_qualified_nameContext { return s.deserial_func }

func (s *Aggregate_paramContext) GetInit_cond() IVexContext { return s.init_cond }

func (s *Aggregate_paramContext) GetMs_func() ISchema_qualified_nameContext { return s.ms_func }

func (s *Aggregate_paramContext) GetMinv_func() ISchema_qualified_nameContext { return s.minv_func }

func (s *Aggregate_paramContext) GetMs_type() IData_typeContext { return s.ms_type }

func (s *Aggregate_paramContext) GetMfinal_func() ISchema_qualified_nameContext { return s.mfinal_func }

func (s *Aggregate_paramContext) GetMinit_cond() IVexContext { return s.minit_cond }


func (s *Aggregate_paramContext) SetFinal_func(v ISchema_qualified_nameContext) { s.final_func = v }

func (s *Aggregate_paramContext) SetCombine_func(v ISchema_qualified_nameContext) { s.combine_func = v }

func (s *Aggregate_paramContext) SetSerial_func(v ISchema_qualified_nameContext) { s.serial_func = v }

func (s *Aggregate_paramContext) SetDeserial_func(v ISchema_qualified_nameContext) { s.deserial_func = v }

func (s *Aggregate_paramContext) SetInit_cond(v IVexContext) { s.init_cond = v }

func (s *Aggregate_paramContext) SetMs_func(v ISchema_qualified_nameContext) { s.ms_func = v }

func (s *Aggregate_paramContext) SetMinv_func(v ISchema_qualified_nameContext) { s.minv_func = v }

func (s *Aggregate_paramContext) SetMs_type(v IData_typeContext) { s.ms_type = v }

func (s *Aggregate_paramContext) SetMfinal_func(v ISchema_qualified_nameContext) { s.mfinal_func = v }

func (s *Aggregate_paramContext) SetMinit_cond(v IVexContext) { s.minit_cond = v }


func (s *Aggregate_paramContext) SSPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserSSPACE, 0)
}

func (s *Aggregate_paramContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Aggregate_paramContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Aggregate_paramContext) FINALFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserFINALFUNC, 0)
}

func (s *Aggregate_paramContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Aggregate_paramContext) FINALFUNC_EXTRA() antlr.TerminalNode {
	return s.GetToken(SQLParserFINALFUNC_EXTRA, 0)
}

func (s *Aggregate_paramContext) FINALFUNC_MODIFY() antlr.TerminalNode {
	return s.GetToken(SQLParserFINALFUNC_MODIFY, 0)
}

func (s *Aggregate_paramContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserREAD_ONLY, 0)
}

func (s *Aggregate_paramContext) SHAREABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserSHAREABLE, 0)
}

func (s *Aggregate_paramContext) READ_WRITE() antlr.TerminalNode {
	return s.GetToken(SQLParserREAD_WRITE, 0)
}

func (s *Aggregate_paramContext) COMBINEFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMBINEFUNC, 0)
}

func (s *Aggregate_paramContext) SERIALFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserSERIALFUNC, 0)
}

func (s *Aggregate_paramContext) DESERIALFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserDESERIALFUNC, 0)
}

func (s *Aggregate_paramContext) INITCOND() antlr.TerminalNode {
	return s.GetToken(SQLParserINITCOND, 0)
}

func (s *Aggregate_paramContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Aggregate_paramContext) MSFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserMSFUNC, 0)
}

func (s *Aggregate_paramContext) MINVFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserMINVFUNC, 0)
}

func (s *Aggregate_paramContext) MSTYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserMSTYPE, 0)
}

func (s *Aggregate_paramContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Aggregate_paramContext) MSSPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserMSSPACE, 0)
}

func (s *Aggregate_paramContext) MFINALFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserMFINALFUNC, 0)
}

func (s *Aggregate_paramContext) MFINALFUNC_EXTRA() antlr.TerminalNode {
	return s.GetToken(SQLParserMFINALFUNC_EXTRA, 0)
}

func (s *Aggregate_paramContext) MFINALFUNC_MODIFY() antlr.TerminalNode {
	return s.GetToken(SQLParserMFINALFUNC_MODIFY, 0)
}

func (s *Aggregate_paramContext) MINITCOND() antlr.TerminalNode {
	return s.GetToken(SQLParserMINITCOND, 0)
}

func (s *Aggregate_paramContext) SORTOP() antlr.TerminalNode {
	return s.GetToken(SQLParserSORTOP, 0)
}

func (s *Aggregate_paramContext) All_op_ref() IAll_op_refContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_op_refContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_op_refContext)
}

func (s *Aggregate_paramContext) PARALLEL() antlr.TerminalNode {
	return s.GetToken(SQLParserPARALLEL, 0)
}

func (s *Aggregate_paramContext) SAFE() antlr.TerminalNode {
	return s.GetToken(SQLParserSAFE, 0)
}

func (s *Aggregate_paramContext) RESTRICTED() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICTED, 0)
}

func (s *Aggregate_paramContext) UNSAFE() antlr.TerminalNode {
	return s.GetToken(SQLParserUNSAFE, 0)
}

func (s *Aggregate_paramContext) HYPOTHETICAL() antlr.TerminalNode {
	return s.GetToken(SQLParserHYPOTHETICAL, 0)
}

func (s *Aggregate_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Aggregate_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAggregate_param(s)
	}
}

func (s *Aggregate_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAggregate_param(s)
	}
}




func (p *SQLParser) Aggregate_param() (localctx IAggregate_paramContext) {
	localctx = NewAggregate_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, SQLParserRULE_aggregate_param)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3529)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserSSPACE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3478)
			p.Match(SQLParserSSPACE)
		}
		{
			p.SetState(3479)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3480)

			var _m = p.Match(SQLParserNUMBER_LITERAL)

			localctx.(*Aggregate_paramContext).s_space = _m
		}


	case SQLParserFINALFUNC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3481)
			p.Match(SQLParserFINALFUNC)
		}
		{
			p.SetState(3482)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3483)

			var _x = p.Schema_qualified_name()


			localctx.(*Aggregate_paramContext).final_func = _x
		}


	case SQLParserFINALFUNC_EXTRA:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3484)
			p.Match(SQLParserFINALFUNC_EXTRA)
		}


	case SQLParserFINALFUNC_MODIFY:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3485)
			p.Match(SQLParserFINALFUNC_MODIFY)
		}
		{
			p.SetState(3486)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3487)
			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 521)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 521))) & ((1 << (SQLParserREAD_ONLY - 521)) | (1 << (SQLParserREAD_WRITE - 521)) | (1 << (SQLParserSHAREABLE - 521)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserCOMBINEFUNC:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3488)
			p.Match(SQLParserCOMBINEFUNC)
		}
		{
			p.SetState(3489)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3490)

			var _x = p.Schema_qualified_name()


			localctx.(*Aggregate_paramContext).combine_func = _x
		}


	case SQLParserSERIALFUNC:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3491)
			p.Match(SQLParserSERIALFUNC)
		}
		{
			p.SetState(3492)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3493)

			var _x = p.Schema_qualified_name()


			localctx.(*Aggregate_paramContext).serial_func = _x
		}


	case SQLParserDESERIALFUNC:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3494)
			p.Match(SQLParserDESERIALFUNC)
		}
		{
			p.SetState(3495)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3496)

			var _x = p.Schema_qualified_name()


			localctx.(*Aggregate_paramContext).deserial_func = _x
		}


	case SQLParserINITCOND:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3497)
			p.Match(SQLParserINITCOND)
		}
		{
			p.SetState(3498)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3499)

			var _x = p.vex(0)

			localctx.(*Aggregate_paramContext).init_cond = _x
		}


	case SQLParserMSFUNC:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3500)
			p.Match(SQLParserMSFUNC)
		}
		{
			p.SetState(3501)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3502)

			var _x = p.Schema_qualified_name()


			localctx.(*Aggregate_paramContext).ms_func = _x
		}


	case SQLParserMINVFUNC:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3503)
			p.Match(SQLParserMINVFUNC)
		}
		{
			p.SetState(3504)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3505)

			var _x = p.Schema_qualified_name()


			localctx.(*Aggregate_paramContext).minv_func = _x
		}


	case SQLParserMSTYPE:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3506)
			p.Match(SQLParserMSTYPE)
		}
		{
			p.SetState(3507)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3508)

			var _x = p.Data_type()


			localctx.(*Aggregate_paramContext).ms_type = _x
		}


	case SQLParserMSSPACE:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3509)
			p.Match(SQLParserMSSPACE)
		}
		{
			p.SetState(3510)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3511)

			var _m = p.Match(SQLParserNUMBER_LITERAL)

			localctx.(*Aggregate_paramContext).ms_space = _m
		}


	case SQLParserMFINALFUNC:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3512)
			p.Match(SQLParserMFINALFUNC)
		}
		{
			p.SetState(3513)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3514)

			var _x = p.Schema_qualified_name()


			localctx.(*Aggregate_paramContext).mfinal_func = _x
		}


	case SQLParserMFINALFUNC_EXTRA:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3515)
			p.Match(SQLParserMFINALFUNC_EXTRA)
		}


	case SQLParserMFINALFUNC_MODIFY:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(3516)
			p.Match(SQLParserMFINALFUNC_MODIFY)
		}
		{
			p.SetState(3517)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3518)
			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 521)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 521))) & ((1 << (SQLParserREAD_ONLY - 521)) | (1 << (SQLParserREAD_WRITE - 521)) | (1 << (SQLParserSHAREABLE - 521)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserMINITCOND:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(3519)
			p.Match(SQLParserMINITCOND)
		}
		{
			p.SetState(3520)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3521)

			var _x = p.vex(0)

			localctx.(*Aggregate_paramContext).minit_cond = _x
		}


	case SQLParserSORTOP:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(3522)
			p.Match(SQLParserSORTOP)
		}
		{
			p.SetState(3523)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3524)
			p.All_op_ref()
		}


	case SQLParserPARALLEL:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(3525)
			p.Match(SQLParserPARALLEL)
		}
		{
			p.SetState(3526)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(3527)
			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 526)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 526))) & ((1 << (SQLParserRESTRICTED - 526)) | (1 << (SQLParserSAFE - 526)) | (1 << (SQLParserUNSAFE - 526)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserHYPOTHETICAL:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(3528)
			p.Match(SQLParserHYPOTHETICAL)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISet_statementContext is an interface to support dynamic dispatch.
type ISet_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_statementContext differentiates from other interfaces.
	IsSet_statementContext()
}

type Set_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_statementContext() *Set_statementContext {
	var p = new(Set_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_statement
	return p
}

func (*Set_statementContext) IsSet_statementContext() {}

func NewSet_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_statementContext {
	var p = new(Set_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_statement

	return p
}

func (s *Set_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Set_statementContext) Set_action() ISet_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_actionContext)
}

func (s *Set_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_statement(s)
	}
}

func (s *Set_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_statement(s)
	}
}




func (p *SQLParser) Set_statement() (localctx ISet_statementContext) {
	localctx = NewSet_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, SQLParserRULE_set_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3531)
		p.Match(SQLParserSET)
	}
	{
		p.SetState(3532)
		p.Set_action()
	}



	return localctx
}


// ISet_actionContext is an interface to support dynamic dispatch.
type ISet_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_actionContext differentiates from other interfaces.
	IsSet_actionContext()
}

type Set_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_actionContext() *Set_actionContext {
	var p = new(Set_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_action
	return p
}

func (*Set_actionContext) IsSet_actionContext() {}

func NewSet_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_actionContext {
	var p = new(Set_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_action

	return p
}

func (s *Set_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_actionContext) CONSTRAINTS() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINTS, 0)
}

func (s *Set_actionContext) DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFERRED, 0)
}

func (s *Set_actionContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLParserIMMEDIATE, 0)
}

func (s *Set_actionContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Set_actionContext) Names_references() INames_referencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_referencesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_referencesContext)
}

func (s *Set_actionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSACTION, 0)
}

func (s *Set_actionContext) AllTransaction_mode() []ITransaction_modeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransaction_modeContext)(nil)).Elem())
	var tst = make([]ITransaction_modeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransaction_modeContext)
		}
	}

	return tst
}

func (s *Set_actionContext) Transaction_mode(i int) ITransaction_modeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_modeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransaction_modeContext)
}

func (s *Set_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Set_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Set_actionContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(SQLParserSNAPSHOT, 0)
}

func (s *Set_actionContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Set_actionContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION, 0)
}

func (s *Set_actionContext) CHARACTERISTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserCHARACTERISTICS, 0)
}

func (s *Set_actionContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Set_actionContext) Session_local_option() ISession_local_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISession_local_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISession_local_optionContext)
}

func (s *Set_actionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCAL, 0)
}

func (s *Set_actionContext) XML() antlr.TerminalNode {
	return s.GetToken(SQLParserXML, 0)
}

func (s *Set_actionContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTION, 0)
}

func (s *Set_actionContext) DOCUMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOCUMENT, 0)
}

func (s *Set_actionContext) CONTENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONTENT, 0)
}

func (s *Set_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_action(s)
	}
}

func (s *Set_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_action(s)
	}
}




func (p *SQLParser) Set_action() (localctx ISet_actionContext) {
	localctx = NewSet_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, SQLParserRULE_set_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3571)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 386, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3534)
			p.Match(SQLParserCONSTRAINTS)
		}
		p.SetState(3537)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserALL:
			{
				p.SetState(3535)
				p.Match(SQLParserALL)
			}


		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(3536)
				p.Names_references()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(3539)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDEFERRED || _la == SQLParserIMMEDIATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3540)
			p.Match(SQLParserTRANSACTION)
		}
		{
			p.SetState(3541)
			p.Transaction_mode()
		}
		p.SetState(3546)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3542)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3543)
				p.Transaction_mode()
			}


			p.SetState(3548)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3549)
			p.Match(SQLParserTRANSACTION)
		}
		{
			p.SetState(3550)
			p.Match(SQLParserSNAPSHOT)
		}
		{
			p.SetState(3551)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3552)
			p.Match(SQLParserSESSION)
		}
		{
			p.SetState(3553)
			p.Match(SQLParserCHARACTERISTICS)
		}
		{
			p.SetState(3554)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(3555)
			p.Match(SQLParserTRANSACTION)
		}
		{
			p.SetState(3556)
			p.Transaction_mode()
		}
		p.SetState(3561)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3557)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3558)
				p.Transaction_mode()
			}


			p.SetState(3563)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(3565)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 385, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3564)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserLOCAL || _la == SQLParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}


		}
		{
			p.SetState(3567)
			p.Session_local_option()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3568)
			p.Match(SQLParserXML)
		}
		{
			p.SetState(3569)
			p.Match(SQLParserOPTION)
		}
		{
			p.SetState(3570)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCONTENT || _la == SQLParserDOCUMENT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}


	return localctx
}


// ISession_local_optionContext is an interface to support dynamic dispatch.
type ISession_local_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConfig_param returns the config_param rule contexts.
	GetConfig_param() IIdentifierContext


	// SetConfig_param sets the config_param rule contexts.
	SetConfig_param(IIdentifierContext)


	// IsSession_local_optionContext differentiates from other interfaces.
	IsSession_local_optionContext()
}

type Session_local_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	config_param IIdentifierContext 
}

func NewEmptySession_local_optionContext() *Session_local_optionContext {
	var p = new(Session_local_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_session_local_option
	return p
}

func (*Session_local_optionContext) IsSession_local_optionContext() {}

func NewSession_local_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Session_local_optionContext {
	var p = new(Session_local_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_session_local_option

	return p
}

func (s *Session_local_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Session_local_optionContext) GetConfig_param() IIdentifierContext { return s.config_param }


func (s *Session_local_optionContext) SetConfig_param(v IIdentifierContext) { s.config_param = v }


func (s *Session_local_optionContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION, 0)
}

func (s *Session_local_optionContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(SQLParserAUTHORIZATION, 0)
}

func (s *Session_local_optionContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Session_local_optionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Session_local_optionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Session_local_optionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Session_local_optionContext) TIME() antlr.TerminalNode {
	return s.GetToken(SQLParserTIME, 0)
}

func (s *Session_local_optionContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLParserZONE, 0)
}

func (s *Session_local_optionContext) Signed_numerical_literal() ISigned_numerical_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numerical_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_numerical_literalContext)
}

func (s *Session_local_optionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCAL, 0)
}

func (s *Session_local_optionContext) Set_statement_value() ISet_statement_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statement_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statement_valueContext)
}

func (s *Session_local_optionContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Session_local_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Session_local_optionContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Session_local_optionContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *Session_local_optionContext) NONE() antlr.TerminalNode {
	return s.GetToken(SQLParserNONE, 0)
}

func (s *Session_local_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Session_local_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Session_local_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSession_local_option(s)
	}
}

func (s *Session_local_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSession_local_option(s)
	}
}




func (p *SQLParser) Session_local_option() (localctx ISession_local_optionContext) {
	localctx = NewSession_local_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, SQLParserRULE_session_local_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3602)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 391, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3573)
			p.Match(SQLParserSESSION)
		}
		{
			p.SetState(3574)
			p.Match(SQLParserAUTHORIZATION)
		}
		p.SetState(3578)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCharacter_String_Literal:
			{
				p.SetState(3575)
				p.Match(SQLParserCharacter_String_Literal)
			}


		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(3576)
				p.Identifier()
			}


		case SQLParserDEFAULT:
			{
				p.SetState(3577)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3580)
			p.Match(SQLParserTIME)
		}
		{
			p.SetState(3581)
			p.Match(SQLParserZONE)
		}
		p.SetState(3586)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCharacter_String_Literal:
			{
				p.SetState(3582)
				p.Match(SQLParserCharacter_String_Literal)
			}


		case SQLParserPLUS, SQLParserMINUS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER:
			{
				p.SetState(3583)
				p.Signed_numerical_literal()
			}


		case SQLParserLOCAL:
			{
				p.SetState(3584)
				p.Match(SQLParserLOCAL)
			}


		case SQLParserDEFAULT:
			{
				p.SetState(3585)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(3591)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 389, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3588)
				p.Identifier()
			}
			{
				p.SetState(3589)
				p.Match(SQLParserDOT)
			}


		}
		{
			p.SetState(3593)

			var _x = p.Identifier()


			localctx.(*Session_local_optionContext).config_param = _x
		}
		{
			p.SetState(3594)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserTO || _la == SQLParserEQUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3595)
			p.Set_statement_value()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3597)
			p.Match(SQLParserROLE)
		}
		p.SetState(3600)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 390, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3598)
				p.Identifier()
			}


		case 2:
			{
				p.SetState(3599)
				p.Match(SQLParserNONE)
			}

		}

	}


	return localctx
}


// ISet_statement_valueContext is an interface to support dynamic dispatch.
type ISet_statement_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_statement_valueContext differentiates from other interfaces.
	IsSet_statement_valueContext()
}

type Set_statement_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_statement_valueContext() *Set_statement_valueContext {
	var p = new(Set_statement_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_statement_value
	return p
}

func (*Set_statement_valueContext) IsSet_statement_valueContext() {}

func NewSet_statement_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_statement_valueContext {
	var p = new(Set_statement_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_statement_value

	return p
}

func (s *Set_statement_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_statement_valueContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Set_statement_valueContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Set_statement_valueContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Set_statement_valueContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Set_statement_valueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Set_statement_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_statement_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_statement_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_statement_value(s)
	}
}

func (s *Set_statement_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_statement_value(s)
	}
}




func (p *SQLParser) Set_statement_value() (localctx ISet_statement_valueContext) {
	localctx = NewSet_statement_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, SQLParserRULE_set_statement_value)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3613)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALL, SQLParserANY, SQLParserARRAY, SQLParserCASE, SQLParserCAST, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserFALSE, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserON, SQLParserSESSION_USER, SQLParserSOME, SQLParserTRUE, SQLParserUSER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserLEFT_PAREN, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER, SQLParserDOLLAR_NUMBER, SQLParserIdentifier, SQLParserQuotedIdentifier, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3604)
			p.vex(0)
		}
		p.SetState(3609)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3605)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3606)
				p.vex(0)
			}


			p.SetState(3611)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case SQLParserDEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3612)
			p.Match(SQLParserDEFAULT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_rewrite_statementContext is an interface to support dynamic dispatch.
type ICreate_rewrite_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEvent returns the event token.
	GetEvent() antlr.Token 


	// SetEvent sets the event token.
	SetEvent(antlr.Token) 


	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(ISchema_qualified_nameContext)


	// IsCreate_rewrite_statementContext differentiates from other interfaces.
	IsCreate_rewrite_statementContext()
}

type Create_rewrite_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
	event antlr.Token
	table_name ISchema_qualified_nameContext 
}

func NewEmptyCreate_rewrite_statementContext() *Create_rewrite_statementContext {
	var p = new(Create_rewrite_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_rewrite_statement
	return p
}

func (*Create_rewrite_statementContext) IsCreate_rewrite_statementContext() {}

func NewCreate_rewrite_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_rewrite_statementContext {
	var p = new(Create_rewrite_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_rewrite_statement

	return p
}

func (s *Create_rewrite_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_rewrite_statementContext) GetEvent() antlr.Token { return s.event }


func (s *Create_rewrite_statementContext) SetEvent(v antlr.Token) { s.event = v }


func (s *Create_rewrite_statementContext) GetName() IIdentifierContext { return s.name }

func (s *Create_rewrite_statementContext) GetTable_name() ISchema_qualified_nameContext { return s.table_name }


func (s *Create_rewrite_statementContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_rewrite_statementContext) SetTable_name(v ISchema_qualified_nameContext) { s.table_name = v }


func (s *Create_rewrite_statementContext) RULE() antlr.TerminalNode {
	return s.GetToken(SQLParserRULE, 0)
}

func (s *Create_rewrite_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Create_rewrite_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Create_rewrite_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Create_rewrite_statementContext) DO() antlr.TerminalNode {
	return s.GetToken(SQLParserDO, 0)
}

func (s *Create_rewrite_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_rewrite_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_rewrite_statementContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SQLParserSELECT, 0)
}

func (s *Create_rewrite_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SQLParserINSERT, 0)
}

func (s *Create_rewrite_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, 0)
}

func (s *Create_rewrite_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Create_rewrite_statementContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTHING, 0)
}

func (s *Create_rewrite_statementContext) AllRewrite_command() []IRewrite_commandContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRewrite_commandContext)(nil)).Elem())
	var tst = make([]IRewrite_commandContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRewrite_commandContext)
		}
	}

	return tst
}

func (s *Create_rewrite_statementContext) Rewrite_command(i int) IRewrite_commandContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRewrite_commandContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRewrite_commandContext)
}

func (s *Create_rewrite_statementContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLParserOR, 0)
}

func (s *Create_rewrite_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLACE, 0)
}

func (s *Create_rewrite_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Create_rewrite_statementContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Create_rewrite_statementContext) ALSO() antlr.TerminalNode {
	return s.GetToken(SQLParserALSO, 0)
}

func (s *Create_rewrite_statementContext) INSTEAD() antlr.TerminalNode {
	return s.GetToken(SQLParserINSTEAD, 0)
}

func (s *Create_rewrite_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_rewrite_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_rewrite_statementContext) AllSEMI_COLON() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSEMI_COLON)
}

func (s *Create_rewrite_statementContext) SEMI_COLON(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSEMI_COLON, i)
}

func (s *Create_rewrite_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_rewrite_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_rewrite_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_rewrite_statement(s)
	}
}

func (s *Create_rewrite_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_rewrite_statement(s)
	}
}




func (p *SQLParser) Create_rewrite_statement() (localctx ICreate_rewrite_statementContext) {
	localctx = NewCreate_rewrite_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, SQLParserRULE_create_rewrite_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3617)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOR {
		{
			p.SetState(3615)
			p.Match(SQLParserOR)
		}
		{
			p.SetState(3616)
			p.Match(SQLParserREPLACE)
		}

	}
	{
		p.SetState(3619)
		p.Match(SQLParserRULE)
	}
	{
		p.SetState(3620)

		var _x = p.Identifier()


		localctx.(*Create_rewrite_statementContext).name = _x
	}
	{
		p.SetState(3621)
		p.Match(SQLParserAS)
	}
	{
		p.SetState(3622)
		p.Match(SQLParserON)
	}
	{
		p.SetState(3623)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Create_rewrite_statementContext).event = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserDELETE || _la == SQLParserINSERT || _la == SQLParserUPDATE || _la == SQLParserSELECT) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Create_rewrite_statementContext).event = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3624)
		p.Match(SQLParserTO)
	}
	{
		p.SetState(3625)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_rewrite_statementContext).table_name = _x
	}
	p.SetState(3628)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWHERE {
		{
			p.SetState(3626)
			p.Match(SQLParserWHERE)
		}
		{
			p.SetState(3627)
			p.vex(0)
		}

	}
	{
		p.SetState(3630)
		p.Match(SQLParserDO)
	}
	p.SetState(3632)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserALSO || _la == SQLParserINSTEAD {
		{
			p.SetState(3631)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserALSO || _la == SQLParserINSTEAD) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3651)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 399, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3634)
			p.Match(SQLParserNOTHING)
		}


	case 2:
		{
			p.SetState(3635)
			p.Rewrite_command()
		}


	case 3:
		{
			p.SetState(3636)
			p.Match(SQLParserLEFT_PAREN)
		}
		p.SetState(3642)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 397, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3637)
					p.Rewrite_command()
				}
				{
					p.SetState(3638)
					p.Match(SQLParserSEMI_COLON)
				}


			}
			p.SetState(3644)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 397, p.GetParserRuleContext())
		}
		{
			p.SetState(3645)
			p.Rewrite_command()
		}
		p.SetState(3647)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserSEMI_COLON {
			{
				p.SetState(3646)
				p.Match(SQLParserSEMI_COLON)
			}

		}
		{
			p.SetState(3649)
			p.Match(SQLParserRIGHT_PAREN)
		}


	}



	return localctx
}


// IRewrite_commandContext is an interface to support dynamic dispatch.
type IRewrite_commandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRewrite_commandContext differentiates from other interfaces.
	IsRewrite_commandContext()
}

type Rewrite_commandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRewrite_commandContext() *Rewrite_commandContext {
	var p = new(Rewrite_commandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_rewrite_command
	return p
}

func (*Rewrite_commandContext) IsRewrite_commandContext() {}

func NewRewrite_commandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rewrite_commandContext {
	var p = new(Rewrite_commandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_rewrite_command

	return p
}

func (s *Rewrite_commandContext) GetParser() antlr.Parser { return s.parser }

func (s *Rewrite_commandContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Rewrite_commandContext) Insert_stmt_for_psql() IInsert_stmt_for_psqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_stmt_for_psqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_stmt_for_psqlContext)
}

func (s *Rewrite_commandContext) Update_stmt_for_psql() IUpdate_stmt_for_psqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_stmt_for_psqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmt_for_psqlContext)
}

func (s *Rewrite_commandContext) Delete_stmt_for_psql() IDelete_stmt_for_psqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_stmt_for_psqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_stmt_for_psqlContext)
}

func (s *Rewrite_commandContext) Notify_stmt() INotify_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INotify_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INotify_stmtContext)
}

func (s *Rewrite_commandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rewrite_commandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Rewrite_commandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRewrite_command(s)
	}
}

func (s *Rewrite_commandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRewrite_command(s)
	}
}




func (p *SQLParser) Rewrite_command() (localctx IRewrite_commandContext) {
	localctx = NewRewrite_commandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, SQLParserRULE_rewrite_command)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3658)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 400, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3653)
			p.Select_stmt()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3654)
			p.Insert_stmt_for_psql()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3655)
			p.Update_stmt_for_psql()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3656)
			p.Delete_stmt_for_psql()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3657)
			p.Notify_stmt()
		}

	}


	return localctx
}


// ICreate_trigger_statementContext is an interface to support dynamic dispatch.
type ICreate_trigger_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBefore_true returns the before_true token.
	GetBefore_true() antlr.Token 

	// GetInsert_true returns the insert_true token.
	GetInsert_true() antlr.Token 

	// GetDelete_true returns the delete_true token.
	GetDelete_true() antlr.Token 

	// GetTruncate_true returns the truncate_true token.
	GetTruncate_true() antlr.Token 

	// GetUpdate_true returns the update_true token.
	GetUpdate_true() antlr.Token 

	// GetFor_each_true returns the for_each_true token.
	GetFor_each_true() antlr.Token 


	// SetBefore_true sets the before_true token.
	SetBefore_true(antlr.Token) 

	// SetInsert_true sets the insert_true token.
	SetInsert_true(antlr.Token) 

	// SetDelete_true sets the delete_true token.
	SetDelete_true(antlr.Token) 

	// SetTruncate_true sets the truncate_true token.
	SetTruncate_true(antlr.Token) 

	// SetUpdate_true sets the update_true token.
	SetUpdate_true(antlr.Token) 

	// SetFor_each_true sets the for_each_true token.
	SetFor_each_true(antlr.Token) 


	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() ISchema_qualified_nameContext

	// GetReferenced_table_name returns the referenced_table_name rule contexts.
	GetReferenced_table_name() ISchema_qualified_nameContext

	// GetFunc_name returns the func_name rule contexts.
	GetFunc_name() IFunction_callContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(ISchema_qualified_nameContext)

	// SetReferenced_table_name sets the referenced_table_name rule contexts.
	SetReferenced_table_name(ISchema_qualified_nameContext)

	// SetFunc_name sets the func_name rule contexts.
	SetFunc_name(IFunction_callContext)


	// IsCreate_trigger_statementContext differentiates from other interfaces.
	IsCreate_trigger_statementContext()
}

type Create_trigger_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
	before_true antlr.Token
	insert_true antlr.Token
	delete_true antlr.Token
	truncate_true antlr.Token
	update_true antlr.Token
	table_name ISchema_qualified_nameContext 
	referenced_table_name ISchema_qualified_nameContext 
	for_each_true antlr.Token
	func_name IFunction_callContext 
}

func NewEmptyCreate_trigger_statementContext() *Create_trigger_statementContext {
	var p = new(Create_trigger_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_trigger_statement
	return p
}

func (*Create_trigger_statementContext) IsCreate_trigger_statementContext() {}

func NewCreate_trigger_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_trigger_statementContext {
	var p = new(Create_trigger_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_trigger_statement

	return p
}

func (s *Create_trigger_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_trigger_statementContext) GetBefore_true() antlr.Token { return s.before_true }

func (s *Create_trigger_statementContext) GetInsert_true() antlr.Token { return s.insert_true }

func (s *Create_trigger_statementContext) GetDelete_true() antlr.Token { return s.delete_true }

func (s *Create_trigger_statementContext) GetTruncate_true() antlr.Token { return s.truncate_true }

func (s *Create_trigger_statementContext) GetUpdate_true() antlr.Token { return s.update_true }

func (s *Create_trigger_statementContext) GetFor_each_true() antlr.Token { return s.for_each_true }


func (s *Create_trigger_statementContext) SetBefore_true(v antlr.Token) { s.before_true = v }

func (s *Create_trigger_statementContext) SetInsert_true(v antlr.Token) { s.insert_true = v }

func (s *Create_trigger_statementContext) SetDelete_true(v antlr.Token) { s.delete_true = v }

func (s *Create_trigger_statementContext) SetTruncate_true(v antlr.Token) { s.truncate_true = v }

func (s *Create_trigger_statementContext) SetUpdate_true(v antlr.Token) { s.update_true = v }

func (s *Create_trigger_statementContext) SetFor_each_true(v antlr.Token) { s.for_each_true = v }


func (s *Create_trigger_statementContext) GetName() IIdentifierContext { return s.name }

func (s *Create_trigger_statementContext) GetTable_name() ISchema_qualified_nameContext { return s.table_name }

func (s *Create_trigger_statementContext) GetReferenced_table_name() ISchema_qualified_nameContext { return s.referenced_table_name }

func (s *Create_trigger_statementContext) GetFunc_name() IFunction_callContext { return s.func_name }


func (s *Create_trigger_statementContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Create_trigger_statementContext) SetTable_name(v ISchema_qualified_nameContext) { s.table_name = v }

func (s *Create_trigger_statementContext) SetReferenced_table_name(v ISchema_qualified_nameContext) { s.referenced_table_name = v }

func (s *Create_trigger_statementContext) SetFunc_name(v IFunction_callContext) { s.func_name = v }


func (s *Create_trigger_statementContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Create_trigger_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Create_trigger_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXECUTE, 0)
}

func (s *Create_trigger_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_trigger_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_trigger_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_trigger_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Create_trigger_statementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Create_trigger_statementContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Create_trigger_statementContext) AFTER() antlr.TerminalNode {
	return s.GetToken(SQLParserAFTER, 0)
}

func (s *Create_trigger_statementContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Create_trigger_statementContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(SQLParserBEFORE, 0)
}

func (s *Create_trigger_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Create_trigger_statementContext) Table_deferrable() ITable_deferrableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_deferrableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_deferrableContext)
}

func (s *Create_trigger_statementContext) Table_initialy_immed() ITable_initialy_immedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_initialy_immedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_initialy_immedContext)
}

func (s *Create_trigger_statementContext) REFERENCING() antlr.TerminalNode {
	return s.GetToken(SQLParserREFERENCING, 0)
}

func (s *Create_trigger_statementContext) AllTrigger_referencing() []ITrigger_referencingContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITrigger_referencingContext)(nil)).Elem())
	var tst = make([]ITrigger_referencingContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITrigger_referencingContext)
		}
	}

	return tst
}

func (s *Create_trigger_statementContext) Trigger_referencing(i int) ITrigger_referencingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrigger_referencingContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITrigger_referencingContext)
}

func (s *Create_trigger_statementContext) When_trigger() IWhen_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhen_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhen_triggerContext)
}

func (s *Create_trigger_statementContext) INSTEAD() antlr.TerminalNode {
	return s.GetToken(SQLParserINSTEAD, 0)
}

func (s *Create_trigger_statementContext) AllOF() []antlr.TerminalNode {
	return s.GetTokens(SQLParserOF)
}

func (s *Create_trigger_statementContext) OF(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserOF, i)
}

func (s *Create_trigger_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Create_trigger_statementContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *Create_trigger_statementContext) STATEMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserSTATEMENT, 0)
}

func (s *Create_trigger_statementContext) AllUPDATE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserUPDATE)
}

func (s *Create_trigger_statementContext) UPDATE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, i)
}

func (s *Create_trigger_statementContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(SQLParserOR)
}

func (s *Create_trigger_statementContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserOR, i)
}

func (s *Create_trigger_statementContext) EACH() antlr.TerminalNode {
	return s.GetToken(SQLParserEACH, 0)
}

func (s *Create_trigger_statementContext) AllINSERT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserINSERT)
}

func (s *Create_trigger_statementContext) INSERT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserINSERT, i)
}

func (s *Create_trigger_statementContext) AllDELETE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDELETE)
}

func (s *Create_trigger_statementContext) DELETE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, i)
}

func (s *Create_trigger_statementContext) AllTRUNCATE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserTRUNCATE)
}

func (s *Create_trigger_statementContext) TRUNCATE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserTRUNCATE, i)
}

func (s *Create_trigger_statementContext) AllIdentifier_list() []IIdentifier_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem())
	var tst = make([]IIdentifier_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_listContext)
		}
	}

	return tst
}

func (s *Create_trigger_statementContext) Identifier_list(i int) IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Create_trigger_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_trigger_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_trigger_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_trigger_statement(s)
	}
}

func (s *Create_trigger_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_trigger_statement(s)
	}
}




func (p *SQLParser) Create_trigger_statement() (localctx ICreate_trigger_statementContext) {
	localctx = NewCreate_trigger_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, SQLParserRULE_create_trigger_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3661)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCONSTRAINT {
		{
			p.SetState(3660)
			p.Match(SQLParserCONSTRAINT)
		}

	}
	{
		p.SetState(3663)
		p.Match(SQLParserTRIGGER)
	}
	{
		p.SetState(3664)

		var _x = p.Identifier()


		localctx.(*Create_trigger_statementContext).name = _x
	}
	p.SetState(3669)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserBEFORE:
		{
			p.SetState(3665)

			var _m = p.Match(SQLParserBEFORE)

			localctx.(*Create_trigger_statementContext).before_true = _m
		}


	case SQLParserINSTEAD:
		{
			p.SetState(3666)
			p.Match(SQLParserINSTEAD)
		}
		{
			p.SetState(3667)
			p.Match(SQLParserOF)
		}



	case SQLParserAFTER:
		{
			p.SetState(3668)
			p.Match(SQLParserAFTER)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3686)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == SQLParserDELETE || _la == SQLParserINSERT || _la == SQLParserTRUNCATE || _la == SQLParserUPDATE {
		p.SetState(3681)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserDELETE, SQLParserINSERT, SQLParserTRUNCATE:
			p.SetState(3674)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserINSERT:
				{
					p.SetState(3671)

					var _m = p.Match(SQLParserINSERT)

					localctx.(*Create_trigger_statementContext).insert_true = _m
				}


			case SQLParserDELETE:
				{
					p.SetState(3672)

					var _m = p.Match(SQLParserDELETE)

					localctx.(*Create_trigger_statementContext).delete_true = _m
				}


			case SQLParserTRUNCATE:
				{
					p.SetState(3673)

					var _m = p.Match(SQLParserTRUNCATE)

					localctx.(*Create_trigger_statementContext).truncate_true = _m
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}


		case SQLParserUPDATE:
			{
				p.SetState(3676)

				var _m = p.Match(SQLParserUPDATE)

				localctx.(*Create_trigger_statementContext).update_true = _m
			}
			p.SetState(3679)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserOF {
				{
					p.SetState(3677)
					p.Match(SQLParserOF)
				}
				{
					p.SetState(3678)
					p.Identifier_list()
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(3684)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserOR {
			{
				p.SetState(3683)
				p.Match(SQLParserOR)
			}

		}


		p.SetState(3688)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3690)
		p.Match(SQLParserON)
	}
	{
		p.SetState(3691)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_trigger_statementContext).table_name = _x
	}
	p.SetState(3694)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFROM {
		{
			p.SetState(3692)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(3693)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_trigger_statementContext).referenced_table_name = _x
		}

	}
	p.SetState(3697)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserDEFERRABLE || _la == SQLParserNOT {
		{
			p.SetState(3696)
			p.Table_deferrable()
		}

	}
	p.SetState(3700)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserINITIALLY {
		{
			p.SetState(3699)
			p.Table_initialy_immed()
		}

	}
	p.SetState(3707)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserREFERENCING {
		{
			p.SetState(3702)
			p.Match(SQLParserREFERENCING)
		}
		{
			p.SetState(3703)
			p.Trigger_referencing()
		}
		p.SetState(3705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNEW || _la == SQLParserOLD {
			{
				p.SetState(3704)
				p.Trigger_referencing()
			}

		}

	}
	p.SetState(3714)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFOR {
		{
			p.SetState(3709)

			var _m = p.Match(SQLParserFOR)

			localctx.(*Create_trigger_statementContext).for_each_true = _m
		}
		p.SetState(3711)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserEACH {
			{
				p.SetState(3710)
				p.Match(SQLParserEACH)
			}

		}
		{
			p.SetState(3713)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserSTATEMENT || _la == SQLParserROW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(3717)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWHEN {
		{
			p.SetState(3716)
			p.When_trigger()
		}

	}
	{
		p.SetState(3719)
		p.Match(SQLParserEXECUTE)
	}
	{
		p.SetState(3720)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserFUNCTION || _la == SQLParserPROCEDURE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3721)

		var _x = p.Function_call()


		localctx.(*Create_trigger_statementContext).func_name = _x
	}



	return localctx
}


// ITrigger_referencingContext is an interface to support dynamic dispatch.
type ITrigger_referencingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrigger_referencingContext differentiates from other interfaces.
	IsTrigger_referencingContext()
}

type Trigger_referencingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrigger_referencingContext() *Trigger_referencingContext {
	var p = new(Trigger_referencingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_trigger_referencing
	return p
}

func (*Trigger_referencingContext) IsTrigger_referencingContext() {}

func NewTrigger_referencingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trigger_referencingContext {
	var p = new(Trigger_referencingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_trigger_referencing

	return p
}

func (s *Trigger_referencingContext) GetParser() antlr.Parser { return s.parser }

func (s *Trigger_referencingContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Trigger_referencingContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Trigger_referencingContext) OLD() antlr.TerminalNode {
	return s.GetToken(SQLParserOLD, 0)
}

func (s *Trigger_referencingContext) NEW() antlr.TerminalNode {
	return s.GetToken(SQLParserNEW, 0)
}

func (s *Trigger_referencingContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Trigger_referencingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trigger_referencingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Trigger_referencingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTrigger_referencing(s)
	}
}

func (s *Trigger_referencingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTrigger_referencing(s)
	}
}




func (p *SQLParser) Trigger_referencing() (localctx ITrigger_referencingContext) {
	localctx = NewTrigger_referencingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, SQLParserRULE_trigger_referencing)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3723)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserNEW || _la == SQLParserOLD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(3724)
		p.Match(SQLParserTABLE)
	}
	p.SetState(3726)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserAS {
		{
			p.SetState(3725)
			p.Match(SQLParserAS)
		}

	}
	{
		p.SetState(3728)
		p.Identifier()
	}



	return localctx
}


// IWhen_triggerContext is an interface to support dynamic dispatch.
type IWhen_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhen_triggerContext differentiates from other interfaces.
	IsWhen_triggerContext()
}

type When_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhen_triggerContext() *When_triggerContext {
	var p = new(When_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_when_trigger
	return p
}

func (*When_triggerContext) IsWhen_triggerContext() {}

func NewWhen_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *When_triggerContext {
	var p = new(When_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_when_trigger

	return p
}

func (s *When_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *When_triggerContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SQLParserWHEN, 0)
}

func (s *When_triggerContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *When_triggerContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *When_triggerContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *When_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *When_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *When_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterWhen_trigger(s)
	}
}

func (s *When_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitWhen_trigger(s)
	}
}




func (p *SQLParser) When_trigger() (localctx IWhen_triggerContext) {
	localctx = NewWhen_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, SQLParserRULE_when_trigger)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3730)
		p.Match(SQLParserWHEN)
	}
	{
		p.SetState(3731)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(3732)
		p.vex(0)
	}
	{
		p.SetState(3733)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IRule_commonContext is an interface to support dynamic dispatch.
type IRule_commonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRule_commonContext differentiates from other interfaces.
	IsRule_commonContext()
}

type Rule_commonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRule_commonContext() *Rule_commonContext {
	var p = new(Rule_commonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_rule_common
	return p
}

func (*Rule_commonContext) IsRule_commonContext() {}

func NewRule_commonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rule_commonContext {
	var p = new(Rule_commonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_rule_common

	return p
}

func (s *Rule_commonContext) GetParser() antlr.Parser { return s.parser }

func (s *Rule_commonContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Rule_commonContext) Rule_member_object() IRule_member_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRule_member_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRule_member_objectContext)
}

func (s *Rule_commonContext) Roles_names() IRoles_namesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoles_namesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoles_namesContext)
}

func (s *Rule_commonContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Rule_commonContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Rule_commonContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserGRANT)
}

func (s *Rule_commonContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserGRANT, i)
}

func (s *Rule_commonContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SQLParserREVOKE, 0)
}

func (s *Rule_commonContext) Permissions() IPermissionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPermissionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPermissionsContext)
}

func (s *Rule_commonContext) Columns_permissions() IColumns_permissionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumns_permissionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumns_permissionsContext)
}

func (s *Rule_commonContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Rule_commonContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTION, 0)
}

func (s *Rule_commonContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Rule_commonContext) Grant_option_for() IGrant_option_forContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_option_forContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_option_forContext)
}

func (s *Rule_commonContext) Other_rules() IOther_rulesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOther_rulesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOther_rulesContext)
}

func (s *Rule_commonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rule_commonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Rule_commonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRule_common(s)
	}
}

func (s *Rule_commonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRule_common(s)
	}
}




func (p *SQLParser) Rule_common() (localctx IRule_commonContext) {
	localctx = NewRule_commonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, SQLParserRULE_rule_common)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3757)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 421, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3740)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserGRANT:
			{
				p.SetState(3735)
				p.Match(SQLParserGRANT)
			}


		case SQLParserREVOKE:
			{
				p.SetState(3736)
				p.Match(SQLParserREVOKE)
			}
			p.SetState(3738)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserGRANT {
				{
					p.SetState(3737)
					p.Grant_option_for()
				}

			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(3744)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 419, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3742)
				p.Permissions()
			}


		case 2:
			{
				p.SetState(3743)
				p.Columns_permissions()
			}

		}
		{
			p.SetState(3746)
			p.Match(SQLParserON)
		}
		{
			p.SetState(3747)
			p.Rule_member_object()
		}
		{
			p.SetState(3748)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserFROM || _la == SQLParserTO) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3749)
			p.Roles_names()
		}
		p.SetState(3754)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserWITH:
			{
				p.SetState(3750)
				p.Match(SQLParserWITH)
			}
			{
				p.SetState(3751)
				p.Match(SQLParserGRANT)
			}
			{
				p.SetState(3752)
				p.Match(SQLParserOPTION)
			}


		case SQLParserCASCADE, SQLParserRESTRICT:
			{
				p.SetState(3753)
				p.Cascade_restrict()
			}


		case SQLParserEOF, SQLParserSEMI_COLON:



		default:
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3756)
			p.Other_rules()
		}

	}


	return localctx
}


// IRule_member_objectContext is an interface to support dynamic dispatch.
type IRule_member_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_names returns the table_names rule contexts.
	GetTable_names() INames_referencesContext

	// Get_function_parameters returns the _function_parameters rule contexts.
	Get_function_parameters() IFunction_parametersContext

	// GetSchema_names returns the schema_names rule contexts.
	GetSchema_names() INames_referencesContext


	// SetTable_names sets the table_names rule contexts.
	SetTable_names(INames_referencesContext)

	// Set_function_parameters sets the _function_parameters rule contexts.
	Set_function_parameters(IFunction_parametersContext)

	// SetSchema_names sets the schema_names rule contexts.
	SetSchema_names(INames_referencesContext)


	// GetFunc_name returns the func_name rule context list.
	GetFunc_name() []IFunction_parametersContext


	// SetFunc_name sets the func_name rule context list.
	SetFunc_name([]IFunction_parametersContext) 


	// IsRule_member_objectContext differentiates from other interfaces.
	IsRule_member_objectContext()
}

type Rule_member_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	table_names INames_referencesContext 
	_function_parameters IFunction_parametersContext 
	func_name []IFunction_parametersContext
	schema_names INames_referencesContext 
}

func NewEmptyRule_member_objectContext() *Rule_member_objectContext {
	var p = new(Rule_member_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_rule_member_object
	return p
}

func (*Rule_member_objectContext) IsRule_member_objectContext() {}

func NewRule_member_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rule_member_objectContext {
	var p = new(Rule_member_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_rule_member_object

	return p
}

func (s *Rule_member_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Rule_member_objectContext) GetTable_names() INames_referencesContext { return s.table_names }

func (s *Rule_member_objectContext) Get_function_parameters() IFunction_parametersContext { return s._function_parameters }

func (s *Rule_member_objectContext) GetSchema_names() INames_referencesContext { return s.schema_names }


func (s *Rule_member_objectContext) SetTable_names(v INames_referencesContext) { s.table_names = v }

func (s *Rule_member_objectContext) Set_function_parameters(v IFunction_parametersContext) { s._function_parameters = v }

func (s *Rule_member_objectContext) SetSchema_names(v INames_referencesContext) { s.schema_names = v }


func (s *Rule_member_objectContext) GetFunc_name() []IFunction_parametersContext { return s.func_name }


func (s *Rule_member_objectContext) SetFunc_name(v []IFunction_parametersContext) { s.func_name = v }


func (s *Rule_member_objectContext) Names_references() INames_referencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_referencesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_referencesContext)
}

func (s *Rule_member_objectContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Rule_member_objectContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Rule_member_objectContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Rule_member_objectContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Rule_member_objectContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Rule_member_objectContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Rule_member_objectContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(SQLParserWRAPPER, 0)
}

func (s *Rule_member_objectContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Rule_member_objectContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Rule_member_objectContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Rule_member_objectContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(SQLParserROUTINE, 0)
}

func (s *Rule_member_objectContext) AllFunction_parameters() []IFunction_parametersContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_parametersContext)(nil)).Elem())
	var tst = make([]IFunction_parametersContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_parametersContext)
		}
	}

	return tst
}

func (s *Rule_member_objectContext) Function_parameters(i int) IFunction_parametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_parametersContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_parametersContext)
}

func (s *Rule_member_objectContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Rule_member_objectContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Rule_member_objectContext) LARGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLARGE, 0)
}

func (s *Rule_member_objectContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(SQLParserOBJECT, 0)
}

func (s *Rule_member_objectContext) AllNUMBER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNUMBER_LITERAL)
}

func (s *Rule_member_objectContext) NUMBER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, i)
}

func (s *Rule_member_objectContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Rule_member_objectContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Rule_member_objectContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Rule_member_objectContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Rule_member_objectContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Rule_member_objectContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Rule_member_objectContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLES, 0)
}

func (s *Rule_member_objectContext) SEQUENCES() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCES, 0)
}

func (s *Rule_member_objectContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTIONS, 0)
}

func (s *Rule_member_objectContext) PROCEDURES() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURES, 0)
}

func (s *Rule_member_objectContext) ROUTINES() antlr.TerminalNode {
	return s.GetToken(SQLParserROUTINES, 0)
}

func (s *Rule_member_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rule_member_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Rule_member_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRule_member_object(s)
	}
}

func (s *Rule_member_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRule_member_object(s)
	}
}




func (p *SQLParser) Rule_member_object() (localctx IRule_member_objectContext) {
	localctx = NewRule_member_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, SQLParserRULE_rule_member_object)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3808)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 425, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3760)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserTABLE {
			{
				p.SetState(3759)
				p.Match(SQLParserTABLE)
			}

		}
		{
			p.SetState(3762)

			var _x = p.Names_references()


			localctx.(*Rule_member_objectContext).table_names = _x
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3763)
			p.Match(SQLParserSEQUENCE)
		}
		{
			p.SetState(3764)
			p.Names_references()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3765)
			p.Match(SQLParserDATABASE)
		}
		{
			p.SetState(3766)
			p.Names_references()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3767)
			p.Match(SQLParserDOMAIN)
		}
		{
			p.SetState(3768)
			p.Names_references()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3769)
			p.Match(SQLParserFOREIGN)
		}
		{
			p.SetState(3770)
			p.Match(SQLParserDATA)
		}
		{
			p.SetState(3771)
			p.Match(SQLParserWRAPPER)
		}
		{
			p.SetState(3772)
			p.Names_references()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3773)
			p.Match(SQLParserFOREIGN)
		}
		{
			p.SetState(3774)
			p.Match(SQLParserSERVER)
		}
		{
			p.SetState(3775)
			p.Names_references()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3776)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserFUNCTION || _la == SQLParserPROCEDURE || _la == SQLParserROUTINE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3777)

			var _x = p.Function_parameters()


			localctx.(*Rule_member_objectContext)._function_parameters = _x
		}
		localctx.(*Rule_member_objectContext).func_name = append(localctx.(*Rule_member_objectContext).func_name, localctx.(*Rule_member_objectContext)._function_parameters)
		p.SetState(3782)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3778)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3779)

				var _x = p.Function_parameters()


				localctx.(*Rule_member_objectContext)._function_parameters = _x
			}
			localctx.(*Rule_member_objectContext).func_name = append(localctx.(*Rule_member_objectContext).func_name, localctx.(*Rule_member_objectContext)._function_parameters)


			p.SetState(3784)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3785)
			p.Match(SQLParserLARGE)
		}
		{
			p.SetState(3786)
			p.Match(SQLParserOBJECT)
		}
		{
			p.SetState(3787)
			p.Match(SQLParserNUMBER_LITERAL)
		}
		p.SetState(3792)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(3788)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(3789)
				p.Match(SQLParserNUMBER_LITERAL)
			}


			p.SetState(3794)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3795)
			p.Match(SQLParserLANGUAGE)
		}
		{
			p.SetState(3796)
			p.Names_references()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3797)
			p.Match(SQLParserSCHEMA)
		}
		{
			p.SetState(3798)

			var _x = p.Names_references()


			localctx.(*Rule_member_objectContext).schema_names = _x
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3799)
			p.Match(SQLParserTABLESPACE)
		}
		{
			p.SetState(3800)
			p.Names_references()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3801)
			p.Match(SQLParserTYPE)
		}
		{
			p.SetState(3802)
			p.Names_references()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3803)
			p.Match(SQLParserALL)
		}
		{
			p.SetState(3804)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserFUNCTIONS || _la == SQLParserPROCEDURES || _la == SQLParserROUTINES || _la == SQLParserSEQUENCES || _la == SQLParserTABLES) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3805)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(3806)
			p.Match(SQLParserSCHEMA)
		}
		{
			p.SetState(3807)
			p.Names_references()
		}

	}


	return localctx
}


// IColumns_permissionsContext is an interface to support dynamic dispatch.
type IColumns_permissionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumns_permissionsContext differentiates from other interfaces.
	IsColumns_permissionsContext()
}

type Columns_permissionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumns_permissionsContext() *Columns_permissionsContext {
	var p = new(Columns_permissionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_columns_permissions
	return p
}

func (*Columns_permissionsContext) IsColumns_permissionsContext() {}

func NewColumns_permissionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Columns_permissionsContext {
	var p = new(Columns_permissionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_columns_permissions

	return p
}

func (s *Columns_permissionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Columns_permissionsContext) AllTable_column_privileges() []ITable_column_privilegesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_column_privilegesContext)(nil)).Elem())
	var tst = make([]ITable_column_privilegesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_column_privilegesContext)
		}
	}

	return tst
}

func (s *Columns_permissionsContext) Table_column_privileges(i int) ITable_column_privilegesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_column_privilegesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_column_privilegesContext)
}

func (s *Columns_permissionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Columns_permissionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Columns_permissionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Columns_permissionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Columns_permissionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterColumns_permissions(s)
	}
}

func (s *Columns_permissionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitColumns_permissions(s)
	}
}




func (p *SQLParser) Columns_permissions() (localctx IColumns_permissionsContext) {
	localctx = NewColumns_permissionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, SQLParserRULE_columns_permissions)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3810)
		p.Table_column_privileges()
	}
	p.SetState(3815)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(3811)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(3812)
			p.Table_column_privileges()
		}


		p.SetState(3817)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ITable_column_privilegesContext is an interface to support dynamic dispatch.
type ITable_column_privilegesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_column_privilegesContext differentiates from other interfaces.
	IsTable_column_privilegesContext()
}

type Table_column_privilegesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_column_privilegesContext() *Table_column_privilegesContext {
	var p = new(Table_column_privilegesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_column_privileges
	return p
}

func (*Table_column_privilegesContext) IsTable_column_privilegesContext() {}

func NewTable_column_privilegesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_privilegesContext {
	var p = new(Table_column_privilegesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_column_privileges

	return p
}

func (s *Table_column_privilegesContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_privilegesContext) Table_column_privilege() ITable_column_privilegeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_column_privilegeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_column_privilegeContext)
}

func (s *Table_column_privilegesContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Table_column_privilegesContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Table_column_privilegesContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Table_column_privilegesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_privilegesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_column_privilegesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_column_privileges(s)
	}
}

func (s *Table_column_privilegesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_column_privileges(s)
	}
}




func (p *SQLParser) Table_column_privileges() (localctx ITable_column_privilegesContext) {
	localctx = NewTable_column_privilegesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, SQLParserRULE_table_column_privileges)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3818)
		p.Table_column_privilege()
	}
	{
		p.SetState(3819)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(3820)
		p.Identifier_list()
	}
	{
		p.SetState(3821)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IPermissionsContext is an interface to support dynamic dispatch.
type IPermissionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPermissionsContext differentiates from other interfaces.
	IsPermissionsContext()
}

type PermissionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPermissionsContext() *PermissionsContext {
	var p = new(PermissionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_permissions
	return p
}

func (*PermissionsContext) IsPermissionsContext() {}

func NewPermissionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PermissionsContext {
	var p = new(PermissionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_permissions

	return p
}

func (s *PermissionsContext) GetParser() antlr.Parser { return s.parser }

func (s *PermissionsContext) AllPermission() []IPermissionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPermissionContext)(nil)).Elem())
	var tst = make([]IPermissionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPermissionContext)
		}
	}

	return tst
}

func (s *PermissionsContext) Permission(i int) IPermissionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPermissionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPermissionContext)
}

func (s *PermissionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *PermissionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *PermissionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PermissionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PermissionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPermissions(s)
	}
}

func (s *PermissionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPermissions(s)
	}
}




func (p *SQLParser) Permissions() (localctx IPermissionsContext) {
	localctx = NewPermissionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, SQLParserRULE_permissions)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3823)
		p.Permission()
	}
	p.SetState(3828)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(3824)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(3825)
			p.Permission()
		}


		p.SetState(3830)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IPermissionContext is an interface to support dynamic dispatch.
type IPermissionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPermissionContext differentiates from other interfaces.
	IsPermissionContext()
}

type PermissionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPermissionContext() *PermissionContext {
	var p = new(PermissionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_permission
	return p
}

func (*PermissionContext) IsPermissionContext() {}

func NewPermissionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PermissionContext {
	var p = new(PermissionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_permission

	return p
}

func (s *PermissionContext) GetParser() antlr.Parser { return s.parser }

func (s *PermissionContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *PermissionContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIVILEGES, 0)
}

func (s *PermissionContext) CONNECT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONNECT, 0)
}

func (s *PermissionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATE, 0)
}

func (s *PermissionContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, 0)
}

func (s *PermissionContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXECUTE, 0)
}

func (s *PermissionContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SQLParserINSERT, 0)
}

func (s *PermissionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *PermissionContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(SQLParserREFERENCES, 0)
}

func (s *PermissionContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SQLParserSELECT, 0)
}

func (s *PermissionContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMP, 0)
}

func (s *PermissionContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *PermissionContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUNCATE, 0)
}

func (s *PermissionContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserUSAGE, 0)
}

func (s *PermissionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PermissionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PermissionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPermission(s)
	}
}

func (s *PermissionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPermission(s)
	}
}




func (p *SQLParser) Permission() (localctx IPermissionContext) {
	localctx = NewPermissionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, SQLParserRULE_permission)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3847)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3831)
			p.Match(SQLParserALL)
		}
		p.SetState(3833)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPRIVILEGES {
			{
				p.SetState(3832)
				p.Match(SQLParserPRIVILEGES)
			}

		}


	case SQLParserCONNECT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3835)
			p.Match(SQLParserCONNECT)
		}


	case SQLParserCREATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3836)
			p.Match(SQLParserCREATE)
		}


	case SQLParserDELETE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3837)
			p.Match(SQLParserDELETE)
		}


	case SQLParserEXECUTE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3838)
			p.Match(SQLParserEXECUTE)
		}


	case SQLParserINSERT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3839)
			p.Match(SQLParserINSERT)
		}


	case SQLParserUPDATE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3840)
			p.Match(SQLParserUPDATE)
		}


	case SQLParserREFERENCES:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3841)
			p.Match(SQLParserREFERENCES)
		}


	case SQLParserSELECT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3842)
			p.Match(SQLParserSELECT)
		}


	case SQLParserTEMP:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3843)
			p.Match(SQLParserTEMP)
		}


	case SQLParserTRIGGER:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3844)
			p.Match(SQLParserTRIGGER)
		}


	case SQLParserTRUNCATE:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3845)
			p.Match(SQLParserTRUNCATE)
		}


	case SQLParserUSAGE:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3846)
			p.Match(SQLParserUSAGE)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IOther_rulesContext is an interface to support dynamic dispatch.
type IOther_rulesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOther_rulesContext differentiates from other interfaces.
	IsOther_rulesContext()
}

type Other_rulesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOther_rulesContext() *Other_rulesContext {
	var p = new(Other_rulesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_other_rules
	return p
}

func (*Other_rulesContext) IsOther_rulesContext() {}

func NewOther_rulesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Other_rulesContext {
	var p = new(Other_rulesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_other_rules

	return p
}

func (s *Other_rulesContext) GetParser() antlr.Parser { return s.parser }

func (s *Other_rulesContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SQLParserGRANT, 0)
}

func (s *Other_rulesContext) AllNames_references() []INames_referencesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INames_referencesContext)(nil)).Elem())
	var tst = make([]INames_referencesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INames_referencesContext)
		}
	}

	return tst
}

func (s *Other_rulesContext) Names_references(i int) INames_referencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_referencesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INames_referencesContext)
}

func (s *Other_rulesContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Other_rulesContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Other_rulesContext) ADMIN() antlr.TerminalNode {
	return s.GetToken(SQLParserADMIN, 0)
}

func (s *Other_rulesContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTION, 0)
}

func (s *Other_rulesContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SQLParserREVOKE, 0)
}

func (s *Other_rulesContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Other_rulesContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Other_rulesContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Other_rulesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Other_rulesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Other_rulesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOther_rules(s)
	}
}

func (s *Other_rulesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOther_rules(s)
	}
}




func (p *SQLParser) Other_rules() (localctx IOther_rulesContext) {
	localctx = NewOther_rulesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, SQLParserRULE_other_rules)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3870)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserGRANT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3849)
			p.Match(SQLParserGRANT)
		}
		{
			p.SetState(3850)
			p.Names_references()
		}
		{
			p.SetState(3851)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(3852)
			p.Names_references()
		}
		p.SetState(3856)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(3853)
				p.Match(SQLParserWITH)
			}
			{
				p.SetState(3854)
				p.Match(SQLParserADMIN)
			}
			{
				p.SetState(3855)
				p.Match(SQLParserOPTION)
			}

		}


	case SQLParserREVOKE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3858)
			p.Match(SQLParserREVOKE)
		}
		p.SetState(3862)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 431, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3859)
				p.Match(SQLParserADMIN)
			}
			{
				p.SetState(3860)
				p.Match(SQLParserOPTION)
			}
			{
				p.SetState(3861)
				p.Match(SQLParserFOR)
			}


		}
		{
			p.SetState(3864)
			p.Names_references()
		}
		{
			p.SetState(3865)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(3866)
			p.Names_references()
		}
		p.SetState(3868)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
			{
				p.SetState(3867)
				p.Cascade_restrict()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IGrant_to_ruleContext is an interface to support dynamic dispatch.
type IGrant_to_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_to_ruleContext differentiates from other interfaces.
	IsGrant_to_ruleContext()
}

type Grant_to_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_to_ruleContext() *Grant_to_ruleContext {
	var p = new(Grant_to_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_grant_to_rule
	return p
}

func (*Grant_to_ruleContext) IsGrant_to_ruleContext() {}

func NewGrant_to_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_to_ruleContext {
	var p = new(Grant_to_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_grant_to_rule

	return p
}

func (s *Grant_to_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_to_ruleContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Grant_to_ruleContext) Roles_names() IRoles_namesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoles_namesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoles_namesContext)
}

func (s *Grant_to_ruleContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Grant_to_ruleContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SQLParserGRANT, 0)
}

func (s *Grant_to_ruleContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTION, 0)
}

func (s *Grant_to_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_to_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Grant_to_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterGrant_to_rule(s)
	}
}

func (s *Grant_to_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitGrant_to_rule(s)
	}
}




func (p *SQLParser) Grant_to_rule() (localctx IGrant_to_ruleContext) {
	localctx = NewGrant_to_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, SQLParserRULE_grant_to_rule)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3872)
		p.Match(SQLParserTO)
	}
	{
		p.SetState(3873)
		p.Roles_names()
	}
	p.SetState(3877)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(3874)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(3875)
			p.Match(SQLParserGRANT)
		}
		{
			p.SetState(3876)
			p.Match(SQLParserOPTION)
		}

	}



	return localctx
}


// IRevoke_from_cascade_restrictContext is an interface to support dynamic dispatch.
type IRevoke_from_cascade_restrictContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevoke_from_cascade_restrictContext differentiates from other interfaces.
	IsRevoke_from_cascade_restrictContext()
}

type Revoke_from_cascade_restrictContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevoke_from_cascade_restrictContext() *Revoke_from_cascade_restrictContext {
	var p = new(Revoke_from_cascade_restrictContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_revoke_from_cascade_restrict
	return p
}

func (*Revoke_from_cascade_restrictContext) IsRevoke_from_cascade_restrictContext() {}

func NewRevoke_from_cascade_restrictContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Revoke_from_cascade_restrictContext {
	var p = new(Revoke_from_cascade_restrictContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_revoke_from_cascade_restrict

	return p
}

func (s *Revoke_from_cascade_restrictContext) GetParser() antlr.Parser { return s.parser }

func (s *Revoke_from_cascade_restrictContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Revoke_from_cascade_restrictContext) Roles_names() IRoles_namesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoles_namesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoles_namesContext)
}

func (s *Revoke_from_cascade_restrictContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Revoke_from_cascade_restrictContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Revoke_from_cascade_restrictContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Revoke_from_cascade_restrictContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRevoke_from_cascade_restrict(s)
	}
}

func (s *Revoke_from_cascade_restrictContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRevoke_from_cascade_restrict(s)
	}
}




func (p *SQLParser) Revoke_from_cascade_restrict() (localctx IRevoke_from_cascade_restrictContext) {
	localctx = NewRevoke_from_cascade_restrictContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, SQLParserRULE_revoke_from_cascade_restrict)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3879)
		p.Match(SQLParserFROM)
	}
	{
		p.SetState(3880)
		p.Roles_names()
	}
	p.SetState(3882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(3881)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IRoles_namesContext is an interface to support dynamic dispatch.
type IRoles_namesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoles_namesContext differentiates from other interfaces.
	IsRoles_namesContext()
}

type Roles_namesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoles_namesContext() *Roles_namesContext {
	var p = new(Roles_namesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_roles_names
	return p
}

func (*Roles_namesContext) IsRoles_namesContext() {}

func NewRoles_namesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Roles_namesContext {
	var p = new(Roles_namesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_roles_names

	return p
}

func (s *Roles_namesContext) GetParser() antlr.Parser { return s.parser }

func (s *Roles_namesContext) AllRole_name_with_group() []IRole_name_with_groupContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRole_name_with_groupContext)(nil)).Elem())
	var tst = make([]IRole_name_with_groupContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRole_name_with_groupContext)
		}
	}

	return tst
}

func (s *Roles_namesContext) Role_name_with_group(i int) IRole_name_with_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRole_name_with_groupContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRole_name_with_groupContext)
}

func (s *Roles_namesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Roles_namesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Roles_namesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Roles_namesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Roles_namesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRoles_names(s)
	}
}

func (s *Roles_namesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRoles_names(s)
	}
}




func (p *SQLParser) Roles_names() (localctx IRoles_namesContext) {
	localctx = NewRoles_namesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, SQLParserRULE_roles_names)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3884)
		p.Role_name_with_group()
	}
	p.SetState(3889)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(3885)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(3886)
			p.Role_name_with_group()
		}


		p.SetState(3891)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IRole_name_with_groupContext is an interface to support dynamic dispatch.
type IRole_name_with_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRole_name_with_groupContext differentiates from other interfaces.
	IsRole_name_with_groupContext()
}

type Role_name_with_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRole_name_with_groupContext() *Role_name_with_groupContext {
	var p = new(Role_name_with_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_role_name_with_group
	return p
}

func (*Role_name_with_groupContext) IsRole_name_with_groupContext() {}

func NewRole_name_with_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Role_name_with_groupContext {
	var p = new(Role_name_with_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_role_name_with_group

	return p
}

func (s *Role_name_with_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Role_name_with_groupContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Role_name_with_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *Role_name_with_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Role_name_with_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Role_name_with_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRole_name_with_group(s)
	}
}

func (s *Role_name_with_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRole_name_with_group(s)
	}
}




func (p *SQLParser) Role_name_with_group() (localctx IRole_name_with_groupContext) {
	localctx = NewRole_name_with_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, SQLParserRULE_role_name_with_group)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3893)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserGROUP {
		{
			p.SetState(3892)
			p.Match(SQLParserGROUP)
		}

	}
	{
		p.SetState(3895)
		p.User_name()
	}



	return localctx
}


// IComment_on_statementContext is an interface to support dynamic dispatch.
type IComment_on_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComment_on_statementContext differentiates from other interfaces.
	IsComment_on_statementContext()
}

type Comment_on_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComment_on_statementContext() *Comment_on_statementContext {
	var p = new(Comment_on_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_comment_on_statement
	return p
}

func (*Comment_on_statementContext) IsComment_on_statementContext() {}

func NewComment_on_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comment_on_statementContext {
	var p = new(Comment_on_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_comment_on_statement

	return p
}

func (s *Comment_on_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Comment_on_statementContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMENT, 0)
}

func (s *Comment_on_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Comment_on_statementContext) Comment_member_object() IComment_member_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComment_member_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComment_member_objectContext)
}

func (s *Comment_on_statementContext) IS() antlr.TerminalNode {
	return s.GetToken(SQLParserIS, 0)
}

func (s *Comment_on_statementContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Comment_on_statementContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Comment_on_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comment_on_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Comment_on_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterComment_on_statement(s)
	}
}

func (s *Comment_on_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitComment_on_statement(s)
	}
}




func (p *SQLParser) Comment_on_statement() (localctx IComment_on_statementContext) {
	localctx = NewComment_on_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, SQLParserRULE_comment_on_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3897)
		p.Match(SQLParserCOMMENT)
	}
	{
		p.SetState(3898)
		p.Match(SQLParserON)
	}
	{
		p.SetState(3899)
		p.Comment_member_object()
	}
	{
		p.SetState(3900)
		p.Match(SQLParserIS)
	}
	p.SetState(3903)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
		{
			p.SetState(3901)
			p.Character_string()
		}


	case SQLParserNULL:
		{
			p.SetState(3902)
			p.Match(SQLParserNULL)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// ISecurity_labelContext is an interface to support dynamic dispatch.
type ISecurity_labelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSecurity_labelContext differentiates from other interfaces.
	IsSecurity_labelContext()
}

type Security_labelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySecurity_labelContext() *Security_labelContext {
	var p = new(Security_labelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_security_label
	return p
}

func (*Security_labelContext) IsSecurity_labelContext() {}

func NewSecurity_labelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Security_labelContext {
	var p = new(Security_labelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_security_label

	return p
}

func (s *Security_labelContext) GetParser() antlr.Parser { return s.parser }

func (s *Security_labelContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SQLParserSECURITY, 0)
}

func (s *Security_labelContext) LABEL() antlr.TerminalNode {
	return s.GetToken(SQLParserLABEL, 0)
}

func (s *Security_labelContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Security_labelContext) Label_member_object() ILabel_member_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabel_member_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabel_member_objectContext)
}

func (s *Security_labelContext) IS() antlr.TerminalNode {
	return s.GetToken(SQLParserIS, 0)
}

func (s *Security_labelContext) AllCharacter_string() []ICharacter_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem())
	var tst = make([]ICharacter_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICharacter_stringContext)
		}
	}

	return tst
}

func (s *Security_labelContext) Character_string(i int) ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Security_labelContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Security_labelContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Security_labelContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Security_labelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Security_labelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Security_labelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSecurity_label(s)
	}
}

func (s *Security_labelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSecurity_label(s)
	}
}




func (p *SQLParser) Security_label() (localctx ISecurity_labelContext) {
	localctx = NewSecurity_labelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, SQLParserRULE_security_label)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3905)
		p.Match(SQLParserSECURITY)
	}
	{
		p.SetState(3906)
		p.Match(SQLParserLABEL)
	}
	p.SetState(3912)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFOR {
		{
			p.SetState(3907)
			p.Match(SQLParserFOR)
		}
		p.SetState(3910)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(3908)
				p.Identifier()
			}


		case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(3909)
				p.Character_string()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(3914)
		p.Match(SQLParserON)
	}
	{
		p.SetState(3915)
		p.Label_member_object()
	}
	{
		p.SetState(3916)
		p.Match(SQLParserIS)
	}
	p.SetState(3919)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
		{
			p.SetState(3917)
			p.Character_string()
		}


	case SQLParserNULL:
		{
			p.SetState(3918)
			p.Match(SQLParserNULL)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IComment_member_objectContext is an interface to support dynamic dispatch.
type IComment_member_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetSource returns the source rule contexts.
	GetSource() IData_typeContext

	// GetTarget returns the target rule contexts.
	GetTarget() IData_typeContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() ISchema_qualified_nameContext

	// GetIndex_method returns the index_method rule contexts.
	GetIndex_method() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetSource sets the source rule contexts.
	SetSource(IData_typeContext)

	// SetTarget sets the target rule contexts.
	SetTarget(IData_typeContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(ISchema_qualified_nameContext)

	// SetIndex_method sets the index_method rule contexts.
	SetIndex_method(IIdentifierContext)


	// IsComment_member_objectContext differentiates from other interfaces.
	IsComment_member_objectContext()
}

type Comment_member_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	source IData_typeContext 
	target IData_typeContext 
	table_name ISchema_qualified_nameContext 
	index_method IIdentifierContext 
}

func NewEmptyComment_member_objectContext() *Comment_member_objectContext {
	var p = new(Comment_member_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_comment_member_object
	return p
}

func (*Comment_member_objectContext) IsComment_member_objectContext() {}

func NewComment_member_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comment_member_objectContext {
	var p = new(Comment_member_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_comment_member_object

	return p
}

func (s *Comment_member_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Comment_member_objectContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Comment_member_objectContext) GetSource() IData_typeContext { return s.source }

func (s *Comment_member_objectContext) GetTarget() IData_typeContext { return s.target }

func (s *Comment_member_objectContext) GetTable_name() ISchema_qualified_nameContext { return s.table_name }

func (s *Comment_member_objectContext) GetIndex_method() IIdentifierContext { return s.index_method }


func (s *Comment_member_objectContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Comment_member_objectContext) SetSource(v IData_typeContext) { s.source = v }

func (s *Comment_member_objectContext) SetTarget(v IData_typeContext) { s.target = v }

func (s *Comment_member_objectContext) SetTable_name(v ISchema_qualified_nameContext) { s.table_name = v }

func (s *Comment_member_objectContext) SetIndex_method(v IIdentifierContext) { s.index_method = v }


func (s *Comment_member_objectContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SQLParserACCESS, 0)
}

func (s *Comment_member_objectContext) METHOD() antlr.TerminalNode {
	return s.GetToken(SQLParserMETHOD, 0)
}

func (s *Comment_member_objectContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Comment_member_objectContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Comment_member_objectContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(SQLParserAGGREGATE, 0)
}

func (s *Comment_member_objectContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Comment_member_objectContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Comment_member_objectContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(SQLParserROUTINE, 0)
}

func (s *Comment_member_objectContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Comment_member_objectContext) CAST() antlr.TerminalNode {
	return s.GetToken(SQLParserCAST, 0)
}

func (s *Comment_member_objectContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Comment_member_objectContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Comment_member_objectContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Comment_member_objectContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Comment_member_objectContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Comment_member_objectContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATION, 0)
}

func (s *Comment_member_objectContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Comment_member_objectContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Comment_member_objectContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Comment_member_objectContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Comment_member_objectContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONVERSION, 0)
}

func (s *Comment_member_objectContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Comment_member_objectContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Comment_member_objectContext) EVENT() antlr.TerminalNode {
	return s.GetToken(SQLParserEVENT, 0)
}

func (s *Comment_member_objectContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Comment_member_objectContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Comment_member_objectContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Comment_member_objectContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(SQLParserWRAPPER, 0)
}

func (s *Comment_member_objectContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Comment_member_objectContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Comment_member_objectContext) LARGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLARGE, 0)
}

func (s *Comment_member_objectContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(SQLParserOBJECT, 0)
}

func (s *Comment_member_objectContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Comment_member_objectContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Comment_member_objectContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Comment_member_objectContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Comment_member_objectContext) Target_operator() ITarget_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITarget_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITarget_operatorContext)
}

func (s *Comment_member_objectContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Comment_member_objectContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(SQLParserFAMILY, 0)
}

func (s *Comment_member_objectContext) CLASS() antlr.TerminalNode {
	return s.GetToken(SQLParserCLASS, 0)
}

func (s *Comment_member_objectContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SQLParserPOLICY, 0)
}

func (s *Comment_member_objectContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Comment_member_objectContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURAL, 0)
}

func (s *Comment_member_objectContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserPUBLICATION, 0)
}

func (s *Comment_member_objectContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *Comment_member_objectContext) RULE() antlr.TerminalNode {
	return s.GetToken(SQLParserRULE, 0)
}

func (s *Comment_member_objectContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Comment_member_objectContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Comment_member_objectContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Comment_member_objectContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserSTATISTICS, 0)
}

func (s *Comment_member_objectContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBSCRIPTION, 0)
}

func (s *Comment_member_objectContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Comment_member_objectContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Comment_member_objectContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Comment_member_objectContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFIGURATION, 0)
}

func (s *Comment_member_objectContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(SQLParserDICTIONARY, 0)
}

func (s *Comment_member_objectContext) PARSER() antlr.TerminalNode {
	return s.GetToken(SQLParserPARSER, 0)
}

func (s *Comment_member_objectContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPLATE, 0)
}

func (s *Comment_member_objectContext) TRANSFORM() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSFORM, 0)
}

func (s *Comment_member_objectContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Comment_member_objectContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Comment_member_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comment_member_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Comment_member_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterComment_member_object(s)
	}
}

func (s *Comment_member_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitComment_member_object(s)
	}
}




func (p *SQLParser) Comment_member_object() (localctx IComment_member_objectContext) {
	localctx = NewComment_member_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, SQLParserRULE_comment_member_object)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4045)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 446, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3921)
			p.Match(SQLParserACCESS)
		}
		{
			p.SetState(3922)
			p.Match(SQLParserMETHOD)
		}
		{
			p.SetState(3923)
			p.Identifier()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3924)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserAGGREGATE || _la == SQLParserFUNCTION || _la == SQLParserPROCEDURE || _la == SQLParserROUTINE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3925)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}
		{
			p.SetState(3926)
			p.Function_args()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3928)
			p.Match(SQLParserCAST)
		}
		{
			p.SetState(3929)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(3930)

			var _x = p.Data_type()


			localctx.(*Comment_member_objectContext).source = _x
		}
		{
			p.SetState(3931)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(3932)

			var _x = p.Data_type()


			localctx.(*Comment_member_objectContext).target = _x
		}
		{
			p.SetState(3933)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3935)
			p.Match(SQLParserCOLLATION)
		}
		{
			p.SetState(3936)
			p.Identifier()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3937)
			p.Match(SQLParserCOLUMN)
		}
		{
			p.SetState(3938)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3939)
			p.Match(SQLParserCONSTRAINT)
		}
		{
			p.SetState(3940)
			p.Identifier()
		}
		{
			p.SetState(3941)
			p.Match(SQLParserON)
		}
		p.SetState(3943)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 442, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3942)
				p.Match(SQLParserDOMAIN)
			}


		}
		{
			p.SetState(3945)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).table_name = _x
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3947)
			p.Match(SQLParserCONVERSION)
		}
		{
			p.SetState(3948)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3949)
			p.Match(SQLParserDATABASE)
		}
		{
			p.SetState(3950)
			p.Identifier()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3951)
			p.Match(SQLParserDOMAIN)
		}
		{
			p.SetState(3952)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3953)
			p.Match(SQLParserEXTENSION)
		}
		{
			p.SetState(3954)
			p.Identifier()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3955)
			p.Match(SQLParserEVENT)
		}
		{
			p.SetState(3956)
			p.Match(SQLParserTRIGGER)
		}
		{
			p.SetState(3957)
			p.Identifier()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3958)
			p.Match(SQLParserFOREIGN)
		}
		{
			p.SetState(3959)
			p.Match(SQLParserDATA)
		}
		{
			p.SetState(3960)
			p.Match(SQLParserWRAPPER)
		}
		{
			p.SetState(3961)
			p.Identifier()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		p.SetState(3963)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFOREIGN {
			{
				p.SetState(3962)
				p.Match(SQLParserFOREIGN)
			}

		}
		{
			p.SetState(3965)
			p.Match(SQLParserTABLE)
		}
		{
			p.SetState(3966)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3967)
			p.Match(SQLParserINDEX)
		}
		{
			p.SetState(3968)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(3969)
			p.Match(SQLParserLARGE)
		}
		{
			p.SetState(3970)
			p.Match(SQLParserOBJECT)
		}
		{
			p.SetState(3971)
			p.Match(SQLParserNUMBER_LITERAL)
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		p.SetState(3973)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserMATERIALIZED {
			{
				p.SetState(3972)
				p.Match(SQLParserMATERIALIZED)
			}

		}
		{
			p.SetState(3975)
			p.Match(SQLParserVIEW)
		}
		{
			p.SetState(3976)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(3977)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(3978)
			p.Target_operator()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(3979)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(3980)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCLASS || _la == SQLParserFAMILY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(3981)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}
		{
			p.SetState(3982)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(3983)

			var _x = p.Identifier()


			localctx.(*Comment_member_objectContext).index_method = _x
		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(3985)
			p.Match(SQLParserPOLICY)
		}
		{
			p.SetState(3986)
			p.Identifier()
		}
		{
			p.SetState(3987)
			p.Match(SQLParserON)
		}
		{
			p.SetState(3988)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).table_name = _x
		}


	case 20:
		p.EnterOuterAlt(localctx, 20)
		p.SetState(3991)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPROCEDURAL {
			{
				p.SetState(3990)
				p.Match(SQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(3993)
			p.Match(SQLParserLANGUAGE)
		}
		{
			p.SetState(3994)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(3995)
			p.Match(SQLParserPUBLICATION)
		}
		{
			p.SetState(3996)
			p.Identifier()
		}


	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(3997)
			p.Match(SQLParserROLE)
		}
		{
			p.SetState(3998)
			p.Identifier()
		}


	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(3999)
			p.Match(SQLParserRULE)
		}
		{
			p.SetState(4000)
			p.Identifier()
		}
		{
			p.SetState(4001)
			p.Match(SQLParserON)
		}
		{
			p.SetState(4002)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).table_name = _x
		}


	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(4004)
			p.Match(SQLParserSCHEMA)
		}
		{
			p.SetState(4005)
			p.Identifier()
		}


	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(4006)
			p.Match(SQLParserSEQUENCE)
		}
		{
			p.SetState(4007)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(4008)
			p.Match(SQLParserSERVER)
		}
		{
			p.SetState(4009)
			p.Identifier()
		}


	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(4010)
			p.Match(SQLParserSTATISTICS)
		}
		{
			p.SetState(4011)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(4012)
			p.Match(SQLParserSUBSCRIPTION)
		}
		{
			p.SetState(4013)
			p.Identifier()
		}


	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(4014)
			p.Match(SQLParserTABLESPACE)
		}
		{
			p.SetState(4015)
			p.Identifier()
		}


	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(4016)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(4017)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(4018)
			p.Match(SQLParserCONFIGURATION)
		}
		{
			p.SetState(4019)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(4020)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(4021)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(4022)
			p.Match(SQLParserDICTIONARY)
		}
		{
			p.SetState(4023)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(4024)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(4025)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(4026)
			p.Match(SQLParserPARSER)
		}
		{
			p.SetState(4027)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(4028)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(4029)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(4030)
			p.Match(SQLParserTEMPLATE)
		}
		{
			p.SetState(4031)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}


	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(4032)
			p.Match(SQLParserTRANSFORM)
		}
		{
			p.SetState(4033)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(4034)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}
		{
			p.SetState(4035)
			p.Match(SQLParserLANGUAGE)
		}
		{
			p.SetState(4036)
			p.Identifier()
		}


	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(4038)
			p.Match(SQLParserTRIGGER)
		}
		{
			p.SetState(4039)
			p.Identifier()
		}
		{
			p.SetState(4040)
			p.Match(SQLParserON)
		}
		{
			p.SetState(4041)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).table_name = _x
		}


	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(4043)
			p.Match(SQLParserTYPE)
		}
		{
			p.SetState(4044)

			var _x = p.Schema_qualified_name()


			localctx.(*Comment_member_objectContext).name = _x
		}

	}


	return localctx
}


// ILabel_member_objectContext is an interface to support dynamic dispatch.
type ILabel_member_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabel_member_objectContext differentiates from other interfaces.
	IsLabel_member_objectContext()
}

type Label_member_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabel_member_objectContext() *Label_member_objectContext {
	var p = new(Label_member_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_label_member_object
	return p
}

func (*Label_member_objectContext) IsLabel_member_objectContext() {}

func NewLabel_member_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Label_member_objectContext {
	var p = new(Label_member_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_label_member_object

	return p
}

func (s *Label_member_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Label_member_objectContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Label_member_objectContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Label_member_objectContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(SQLParserAGGREGATE, 0)
}

func (s *Label_member_objectContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Label_member_objectContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Label_member_objectContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(SQLParserROUTINE, 0)
}

func (s *Label_member_objectContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Label_member_objectContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Label_member_objectContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Label_member_objectContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Label_member_objectContext) EVENT() antlr.TerminalNode {
	return s.GetToken(SQLParserEVENT, 0)
}

func (s *Label_member_objectContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Label_member_objectContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Label_member_objectContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Label_member_objectContext) LARGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLARGE, 0)
}

func (s *Label_member_objectContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(SQLParserOBJECT, 0)
}

func (s *Label_member_objectContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Label_member_objectContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Label_member_objectContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Label_member_objectContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Label_member_objectContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURAL, 0)
}

func (s *Label_member_objectContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserPUBLICATION, 0)
}

func (s *Label_member_objectContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *Label_member_objectContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Label_member_objectContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Label_member_objectContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBSCRIPTION, 0)
}

func (s *Label_member_objectContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Label_member_objectContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Label_member_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Label_member_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Label_member_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterLabel_member_object(s)
	}
}

func (s *Label_member_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitLabel_member_object(s)
	}
}




func (p *SQLParser) Label_member_object() (localctx ILabel_member_objectContext) {
	localctx = NewLabel_member_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, SQLParserRULE_label_member_object)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4092)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserAGGREGATE, SQLParserFUNCTION, SQLParserPROCEDURE, SQLParserROUTINE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4047)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserAGGREGATE || _la == SQLParserFUNCTION || _la == SQLParserPROCEDURE || _la == SQLParserROUTINE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4048)
			p.Schema_qualified_name()
		}
		{
			p.SetState(4049)
			p.Function_args()
		}


	case SQLParserCOLUMN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4051)
			p.Match(SQLParserCOLUMN)
		}
		{
			p.SetState(4052)
			p.Schema_qualified_name()
		}


	case SQLParserDATABASE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4053)
			p.Match(SQLParserDATABASE)
		}
		{
			p.SetState(4054)
			p.Identifier()
		}


	case SQLParserDOMAIN:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4055)
			p.Match(SQLParserDOMAIN)
		}
		{
			p.SetState(4056)
			p.Schema_qualified_name()
		}


	case SQLParserEVENT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4057)
			p.Match(SQLParserEVENT)
		}
		{
			p.SetState(4058)
			p.Match(SQLParserTRIGGER)
		}
		{
			p.SetState(4059)
			p.Identifier()
		}


	case SQLParserFOREIGN, SQLParserTABLE:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(4061)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFOREIGN {
			{
				p.SetState(4060)
				p.Match(SQLParserFOREIGN)
			}

		}
		{
			p.SetState(4063)
			p.Match(SQLParserTABLE)
		}
		{
			p.SetState(4064)
			p.Schema_qualified_name()
		}


	case SQLParserLARGE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4065)
			p.Match(SQLParserLARGE)
		}
		{
			p.SetState(4066)
			p.Match(SQLParserOBJECT)
		}
		{
			p.SetState(4067)
			p.Match(SQLParserNUMBER_LITERAL)
		}


	case SQLParserMATERIALIZED, SQLParserVIEW:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(4069)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserMATERIALIZED {
			{
				p.SetState(4068)
				p.Match(SQLParserMATERIALIZED)
			}

		}
		{
			p.SetState(4071)
			p.Match(SQLParserVIEW)
		}
		{
			p.SetState(4072)
			p.Schema_qualified_name()
		}


	case SQLParserLANGUAGE, SQLParserPROCEDURAL:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(4074)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPROCEDURAL {
			{
				p.SetState(4073)
				p.Match(SQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(4076)
			p.Match(SQLParserLANGUAGE)
		}
		{
			p.SetState(4077)
			p.Schema_qualified_name()
		}


	case SQLParserPUBLICATION:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4078)
			p.Match(SQLParserPUBLICATION)
		}
		{
			p.SetState(4079)
			p.Identifier()
		}


	case SQLParserROLE:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4080)
			p.Match(SQLParserROLE)
		}
		{
			p.SetState(4081)
			p.Identifier()
		}


	case SQLParserSCHEMA:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4082)
			p.Match(SQLParserSCHEMA)
		}
		{
			p.SetState(4083)
			p.Identifier()
		}


	case SQLParserSEQUENCE:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4084)
			p.Match(SQLParserSEQUENCE)
		}
		{
			p.SetState(4085)
			p.Schema_qualified_name()
		}


	case SQLParserSUBSCRIPTION:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4086)
			p.Match(SQLParserSUBSCRIPTION)
		}
		{
			p.SetState(4087)
			p.Identifier()
		}


	case SQLParserTABLESPACE:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(4088)
			p.Match(SQLParserTABLESPACE)
		}
		{
			p.SetState(4089)
			p.Identifier()
		}


	case SQLParserTYPE:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(4090)
			p.Match(SQLParserTYPE)
		}
		{
			p.SetState(4091)
			p.Schema_qualified_name()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_function_statementContext is an interface to support dynamic dispatch.
type ICreate_function_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRettype_data returns the rettype_data rule contexts.
	GetRettype_data() IData_typeContext

	// GetRet_table returns the ret_table rule contexts.
	GetRet_table() IFunction_ret_tableContext


	// SetRettype_data sets the rettype_data rule contexts.
	SetRettype_data(IData_typeContext)

	// SetRet_table sets the ret_table rule contexts.
	SetRet_table(IFunction_ret_tableContext)


	// IsCreate_function_statementContext differentiates from other interfaces.
	IsCreate_function_statementContext()
}

type Create_function_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	rettype_data IData_typeContext 
	ret_table IFunction_ret_tableContext 
}

func NewEmptyCreate_function_statementContext() *Create_function_statementContext {
	var p = new(Create_function_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_function_statement
	return p
}

func (*Create_function_statementContext) IsCreate_function_statementContext() {}

func NewCreate_function_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_function_statementContext {
	var p = new(Create_function_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_function_statement

	return p
}

func (s *Create_function_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_function_statementContext) GetRettype_data() IData_typeContext { return s.rettype_data }

func (s *Create_function_statementContext) GetRet_table() IFunction_ret_tableContext { return s.ret_table }


func (s *Create_function_statementContext) SetRettype_data(v IData_typeContext) { s.rettype_data = v }

func (s *Create_function_statementContext) SetRet_table(v IFunction_ret_tableContext) { s.ret_table = v }


func (s *Create_function_statementContext) Function_parameters() IFunction_parametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_parametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_parametersContext)
}

func (s *Create_function_statementContext) Create_funct_params() ICreate_funct_paramsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_funct_paramsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_funct_paramsContext)
}

func (s *Create_function_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Create_function_statementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Create_function_statementContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLParserOR, 0)
}

func (s *Create_function_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLACE, 0)
}

func (s *Create_function_statementContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURNS, 0)
}

func (s *Create_function_statementContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_function_statementContext) Function_ret_table() IFunction_ret_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_ret_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_ret_tableContext)
}

func (s *Create_function_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_function_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_function_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_function_statement(s)
	}
}

func (s *Create_function_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_function_statement(s)
	}
}




func (p *SQLParser) Create_function_statement() (localctx ICreate_function_statementContext) {
	localctx = NewCreate_function_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, SQLParserRULE_create_function_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4096)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOR {
		{
			p.SetState(4094)
			p.Match(SQLParserOR)
		}
		{
			p.SetState(4095)
			p.Match(SQLParserREPLACE)
		}

	}
	{
		p.SetState(4098)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserFUNCTION || _la == SQLParserPROCEDURE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4099)
		p.Function_parameters()
	}
	p.SetState(4105)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 453, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4100)
			p.Match(SQLParserRETURNS)
		}
		p.SetState(4103)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(4101)

				var _x = p.Data_type()


				localctx.(*Create_function_statementContext).rettype_data = _x
			}


		case SQLParserTABLE:
			{
				p.SetState(4102)

				var _x = p.Function_ret_table()


				localctx.(*Create_function_statementContext).ret_table = _x
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	}
	{
		p.SetState(4107)
		p.Create_funct_params()
	}



	return localctx
}


// ICreate_funct_paramsContext is an interface to support dynamic dispatch.
type ICreate_funct_paramsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_funct_paramsContext differentiates from other interfaces.
	IsCreate_funct_paramsContext()
}

type Create_funct_paramsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_funct_paramsContext() *Create_funct_paramsContext {
	var p = new(Create_funct_paramsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_funct_params
	return p
}

func (*Create_funct_paramsContext) IsCreate_funct_paramsContext() {}

func NewCreate_funct_paramsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_funct_paramsContext {
	var p = new(Create_funct_paramsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_funct_params

	return p
}

func (s *Create_funct_paramsContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_funct_paramsContext) AllFunction_actions_common() []IFunction_actions_commonContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_actions_commonContext)(nil)).Elem())
	var tst = make([]IFunction_actions_commonContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_actions_commonContext)
		}
	}

	return tst
}

func (s *Create_funct_paramsContext) Function_actions_common(i int) IFunction_actions_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_actions_commonContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_actions_commonContext)
}

func (s *Create_funct_paramsContext) With_storage_parameter() IWith_storage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_storage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_storage_parameterContext)
}

func (s *Create_funct_paramsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_funct_paramsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_funct_paramsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_funct_params(s)
	}
}

func (s *Create_funct_paramsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_funct_params(s)
	}
}




func (p *SQLParser) Create_funct_params() (localctx ICreate_funct_paramsContext) {
	localctx = NewCreate_funct_paramsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, SQLParserRULE_create_funct_params)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4110)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == SQLParserCALLED || _la == SQLParserCOST || _la == SQLParserEXTERNAL || _la == SQLParserIMMUTABLE || _la == SQLParserLANGUAGE || _la == SQLParserLEAKPROOF || _la == SQLParserPARALLEL || ((((_la - 213)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 213))) & ((1 << (SQLParserRETURNS - 213)) | (1 << (SQLParserROWS - 213)) | (1 << (SQLParserSECURITY - 213)) | (1 << (SQLParserSET - 213)) | (1 << (SQLParserSTABLE - 213)))) != 0) || ((((_la - 251)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 251))) & ((1 << (SQLParserSTRICT - 251)) | (1 << (SQLParserSUPPORT - 251)) | (1 << (SQLParserTRANSFORM - 251)))) != 0) || _la == SQLParserVOLATILE || _la == SQLParserAS || _la == SQLParserNOT || _la == SQLParserWINDOW {
		{
			p.SetState(4109)
			p.Function_actions_common()
		}


		p.SetState(4112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4115)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(4114)
			p.With_storage_parameter()
		}

	}



	return localctx
}


// ITransform_for_typeContext is an interface to support dynamic dispatch.
type ITransform_for_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransform_for_typeContext differentiates from other interfaces.
	IsTransform_for_typeContext()
}

type Transform_for_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransform_for_typeContext() *Transform_for_typeContext {
	var p = new(Transform_for_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_transform_for_type
	return p
}

func (*Transform_for_typeContext) IsTransform_for_typeContext() {}

func NewTransform_for_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transform_for_typeContext {
	var p = new(Transform_for_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_transform_for_type

	return p
}

func (s *Transform_for_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Transform_for_typeContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Transform_for_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Transform_for_typeContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Transform_for_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transform_for_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Transform_for_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTransform_for_type(s)
	}
}

func (s *Transform_for_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTransform_for_type(s)
	}
}




func (p *SQLParser) Transform_for_type() (localctx ITransform_for_typeContext) {
	localctx = NewTransform_for_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, SQLParserRULE_transform_for_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4117)
		p.Match(SQLParserFOR)
	}
	{
		p.SetState(4118)
		p.Match(SQLParserTYPE)
	}
	{
		p.SetState(4119)
		p.Data_type()
	}



	return localctx
}


// IFunction_ret_tableContext is an interface to support dynamic dispatch.
type IFunction_ret_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_ret_tableContext differentiates from other interfaces.
	IsFunction_ret_tableContext()
}

type Function_ret_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_ret_tableContext() *Function_ret_tableContext {
	var p = new(Function_ret_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_ret_table
	return p
}

func (*Function_ret_tableContext) IsFunction_ret_tableContext() {}

func NewFunction_ret_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_ret_tableContext {
	var p = new(Function_ret_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_ret_table

	return p
}

func (s *Function_ret_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_ret_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Function_ret_tableContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Function_ret_tableContext) AllFunction_column_name_type() []IFunction_column_name_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_column_name_typeContext)(nil)).Elem())
	var tst = make([]IFunction_column_name_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_column_name_typeContext)
		}
	}

	return tst
}

func (s *Function_ret_tableContext) Function_column_name_type(i int) IFunction_column_name_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_column_name_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_column_name_typeContext)
}

func (s *Function_ret_tableContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Function_ret_tableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Function_ret_tableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Function_ret_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_ret_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_ret_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_ret_table(s)
	}
}

func (s *Function_ret_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_ret_table(s)
	}
}




func (p *SQLParser) Function_ret_table() (localctx IFunction_ret_tableContext) {
	localctx = NewFunction_ret_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, SQLParserRULE_function_ret_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4121)
		p.Match(SQLParserTABLE)
	}
	{
		p.SetState(4122)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(4123)
		p.Function_column_name_type()
	}
	p.SetState(4128)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(4124)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(4125)
			p.Function_column_name_type()
		}


		p.SetState(4130)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4131)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IFunction_column_name_typeContext is an interface to support dynamic dispatch.
type IFunction_column_name_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_column_name_typeContext differentiates from other interfaces.
	IsFunction_column_name_typeContext()
}

type Function_column_name_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_column_name_typeContext() *Function_column_name_typeContext {
	var p = new(Function_column_name_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_column_name_type
	return p
}

func (*Function_column_name_typeContext) IsFunction_column_name_typeContext() {}

func NewFunction_column_name_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_column_name_typeContext {
	var p = new(Function_column_name_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_column_name_type

	return p
}

func (s *Function_column_name_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_column_name_typeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_column_name_typeContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Function_column_name_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_column_name_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_column_name_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_column_name_type(s)
	}
}

func (s *Function_column_name_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_column_name_type(s)
	}
}




func (p *SQLParser) Function_column_name_type() (localctx IFunction_column_name_typeContext) {
	localctx = NewFunction_column_name_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, SQLParserRULE_function_column_name_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4133)
		p.Identifier()
	}
	{
		p.SetState(4134)
		p.Data_type()
	}



	return localctx
}


// IFunction_parametersContext is an interface to support dynamic dispatch.
type IFunction_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_parametersContext differentiates from other interfaces.
	IsFunction_parametersContext()
}

type Function_parametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_parametersContext() *Function_parametersContext {
	var p = new(Function_parametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_parameters
	return p
}

func (*Function_parametersContext) IsFunction_parametersContext() {}

func NewFunction_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_parametersContext {
	var p = new(Function_parametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_parameters

	return p
}

func (s *Function_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_parametersContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Function_parametersContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Function_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_parameters(s)
	}
}

func (s *Function_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_parameters(s)
	}
}




func (p *SQLParser) Function_parameters() (localctx IFunction_parametersContext) {
	localctx = NewFunction_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, SQLParserRULE_function_parameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4136)
		p.Schema_qualified_name()
	}
	{
		p.SetState(4137)
		p.Function_args()
	}



	return localctx
}


// IFunction_argsContext is an interface to support dynamic dispatch.
type IFunction_argsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_argsContext differentiates from other interfaces.
	IsFunction_argsContext()
}

type Function_argsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_argsContext() *Function_argsContext {
	var p = new(Function_argsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_args
	return p
}

func (*Function_argsContext) IsFunction_argsContext() {}

func NewFunction_argsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_argsContext {
	var p = new(Function_argsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_args

	return p
}

func (s *Function_argsContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_argsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Function_argsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Function_argsContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Function_argsContext) AllFunction_arguments() []IFunction_argumentsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_argumentsContext)(nil)).Elem())
	var tst = make([]IFunction_argumentsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_argumentsContext)
		}
	}

	return tst
}

func (s *Function_argsContext) Function_arguments(i int) IFunction_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argumentsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_argumentsContext)
}

func (s *Function_argsContext) Agg_order() IAgg_orderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAgg_orderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAgg_orderContext)
}

func (s *Function_argsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Function_argsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Function_argsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_argsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_argsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_args(s)
	}
}

func (s *Function_argsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_args(s)
	}
}




func (p *SQLParser) Function_args() (localctx IFunction_argsContext) {
	localctx = NewFunction_argsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, SQLParserRULE_function_args)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4139)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(4154)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserIN, SQLParserORDER, SQLParserVARIADIC, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserRIGHT_PAREN, SQLParserIdentifier, SQLParserQuotedIdentifier:
		p.SetState(4148)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)))) != 0) || _la == SQLParserIN || ((((_la - 445)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 445))) & ((1 << (SQLParserVARIADIC - 445)) | (1 << (SQLParserALIGNMENT - 445)) | (1 << (SQLParserALLOW_CONNECTIONS - 445)) | (1 << (SQLParserBASETYPE - 445)) | (1 << (SQLParserBUFFERS - 445)) | (1 << (SQLParserBYPASSRLS - 445)) | (1 << (SQLParserCANONICAL - 445)) | (1 << (SQLParserCATEGORY - 445)) | (1 << (SQLParserCOLLATABLE - 445)) | (1 << (SQLParserCOMBINEFUNC - 445)) | (1 << (SQLParserCOMMUTATOR - 445)) | (1 << (SQLParserCONNECT - 445)) | (1 << (SQLParserCOSTS - 445)) | (1 << (SQLParserCREATEDB - 445)) | (1 << (SQLParserCREATEROLE - 445)) | (1 << (SQLParserDESERIALFUNC - 445)) | (1 << (SQLParserDETERMINISTIC - 445)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 445)) | (1 << (SQLParserELEMENT - 445)) | (1 << (SQLParserEXTENDED - 445)) | (1 << (SQLParserFINALFUNC - 445)) | (1 << (SQLParserFINALFUNC_EXTRA - 445)) | (1 << (SQLParserFINALFUNC_MODIFY - 445)) | (1 << (SQLParserFORCE_NOT_NULL - 445)) | (1 << (SQLParserFORCE_NULL - 445)) | (1 << (SQLParserFORCE_QUOTE - 445)) | (1 << (SQLParserFORMAT - 445)) | (1 << (SQLParserGETTOKEN - 445)))) != 0) || ((((_la - 477)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 477))) & ((1 << (SQLParserHASH - 477)) | (1 << (SQLParserHASHES - 477)) | (1 << (SQLParserHEADLINE - 477)) | (1 << (SQLParserHYPOTHETICAL - 477)) | (1 << (SQLParserINDEX_CLEANUP - 477)) | (1 << (SQLParserINIT - 477)) | (1 << (SQLParserINITCOND - 477)) | (1 << (SQLParserINTERNALLENGTH - 477)) | (1 << (SQLParserIS_TEMPLATE - 477)) | (1 << (SQLParserJSON - 477)) | (1 << (SQLParserLC_COLLATE - 477)) | (1 << (SQLParserLC_CTYPE - 477)) | (1 << (SQLParserLEFTARG - 477)) | (1 << (SQLParserLEXIZE - 477)) | (1 << (SQLParserLEXTYPES - 477)) | (1 << (SQLParserLIST - 477)) | (1 << (SQLParserLOCALE - 477)) | (1 << (SQLParserLOGIN - 477)) | (1 << (SQLParserMAIN - 477)) | (1 << (SQLParserMERGES - 477)) | (1 << (SQLParserMFINALFUNC - 477)) | (1 << (SQLParserMFINALFUNC_EXTRA - 477)) | (1 << (SQLParserMFINALFUNC_MODIFY - 477)) | (1 << (SQLParserMINITCOND - 477)) | (1 << (SQLParserMINVFUNC - 477)) | (1 << (SQLParserMODULUS - 477)) | (1 << (SQLParserMSFUNC - 477)) | (1 << (SQLParserMSSPACE - 477)) | (1 << (SQLParserMSTYPE - 477)) | (1 << (SQLParserNEGATOR - 477)) | (1 << (SQLParserNOBYPASSRLS - 477)) | (1 << (SQLParserNOCREATEDB - 477)))) != 0) || ((((_la - 509)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 509))) & ((1 << (SQLParserNOCREATEROLE - 509)) | (1 << (SQLParserNOINHERIT - 509)) | (1 << (SQLParserNOLOGIN - 509)) | (1 << (SQLParserNOREPLICATION - 509)) | (1 << (SQLParserNOSUPERUSER - 509)) | (1 << (SQLParserOUTPUT - 509)) | (1 << (SQLParserPASSEDBYVALUE - 509)) | (1 << (SQLParserPATH - 509)) | (1 << (SQLParserPERMISSIVE - 509)) | (1 << (SQLParserPLAIN - 509)) | (1 << (SQLParserPREFERRED - 509)) | (1 << (SQLParserPROVIDER - 509)) | (1 << (SQLParserREAD_ONLY - 509)) | (1 << (SQLParserREAD_WRITE - 509)) | (1 << (SQLParserRECEIVE - 509)) | (1 << (SQLParserREMAINDER - 509)) | (1 << (SQLParserREPLICATION - 509)) | (1 << (SQLParserRESTRICTED - 509)) | (1 << (SQLParserRESTRICTIVE - 509)) | (1 << (SQLParserRIGHTARG - 509)) | (1 << (SQLParserSAFE - 509)) | (1 << (SQLParserSEND - 509)) | (1 << (SQLParserSERIALFUNC - 509)) | (1 << (SQLParserSETTINGS - 509)) | (1 << (SQLParserSFUNC - 509)) | (1 << (SQLParserSHAREABLE - 509)) | (1 << (SQLParserSKIP_LOCKED - 509)) | (1 << (SQLParserSORTOP - 509)) | (1 << (SQLParserSSPACE - 509)) | (1 << (SQLParserSTYPE - 509)) | (1 << (SQLParserSUBTYPE_DIFF - 509)) | (1 << (SQLParserSUBTYPE_OPCLASS - 509)))) != 0) || ((((_la - 541)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 541))) & ((1 << (SQLParserSUBTYPE - 541)) | (1 << (SQLParserSUMMARY - 541)) | (1 << (SQLParserSUPERUSER - 541)) | (1 << (SQLParserTIMING - 541)) | (1 << (SQLParserTYPMOD_IN - 541)) | (1 << (SQLParserTYPMOD_OUT - 541)) | (1 << (SQLParserUNSAFE - 541)) | (1 << (SQLParserUSAGE - 541)) | (1 << (SQLParserVARIABLE - 541)) | (1 << (SQLParserWAL - 541)) | (1 << (SQLParserYAML - 541)) | (1 << (SQLParserALIAS - 541)) | (1 << (SQLParserASSERT - 541)) | (1 << (SQLParserCONSTANT - 541)) | (1 << (SQLParserDATATYPE - 541)) | (1 << (SQLParserDEBUG - 541)) | (1 << (SQLParserDETAIL - 541)) | (1 << (SQLParserDIAGNOSTICS - 541)) | (1 << (SQLParserELSEIF - 541)) | (1 << (SQLParserELSIF - 541)) | (1 << (SQLParserERRCODE - 541)) | (1 << (SQLParserEXIT - 541)) | (1 << (SQLParserEXCEPTION - 541)) | (1 << (SQLParserFOREACH - 541)) | (1 << (SQLParserGET - 541)) | (1 << (SQLParserHINT - 541)) | (1 << (SQLParserINFO - 541)) | (1 << (SQLParserLOG - 541)) | (1 << (SQLParserLOOP - 541)) | (1 << (SQLParserMESSAGE - 541)) | (1 << (SQLParserNOTICE - 541)) | (1 << (SQLParserOPEN - 541)))) != 0) || ((((_la - 573)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 573))) & ((1 << (SQLParserPERFORM - 573)) | (1 << (SQLParserQUERY - 573)) | (1 << (SQLParserRAISE - 573)) | (1 << (SQLParserRECORD - 573)) | (1 << (SQLParserRETURN - 573)) | (1 << (SQLParserREVERSE - 573)) | (1 << (SQLParserROWTYPE - 573)) | (1 << (SQLParserSLICE - 573)) | (1 << (SQLParserSQLSTATE - 573)) | (1 << (SQLParserSTACKED - 573)) | (1 << (SQLParserWARNING - 573)) | (1 << (SQLParserWHILE - 573)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
			{
				p.SetState(4140)
				p.Function_arguments()
			}
			p.SetState(4145)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(4141)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(4142)
					p.Function_arguments()
				}


				p.SetState(4147)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4151)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserORDER {
			{
				p.SetState(4150)
				p.Agg_order()
			}

		}


	case SQLParserMULTIPLY:
		{
			p.SetState(4153)
			p.Match(SQLParserMULTIPLY)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(4156)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IAgg_orderContext is an interface to support dynamic dispatch.
type IAgg_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAgg_orderContext differentiates from other interfaces.
	IsAgg_orderContext()
}

type Agg_orderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAgg_orderContext() *Agg_orderContext {
	var p = new(Agg_orderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_agg_order
	return p
}

func (*Agg_orderContext) IsAgg_orderContext() {}

func NewAgg_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Agg_orderContext {
	var p = new(Agg_orderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_agg_order

	return p
}

func (s *Agg_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Agg_orderContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SQLParserORDER, 0)
}

func (s *Agg_orderContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Agg_orderContext) AllFunction_arguments() []IFunction_argumentsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_argumentsContext)(nil)).Elem())
	var tst = make([]IFunction_argumentsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_argumentsContext)
		}
	}

	return tst
}

func (s *Agg_orderContext) Function_arguments(i int) IFunction_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argumentsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_argumentsContext)
}

func (s *Agg_orderContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Agg_orderContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Agg_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Agg_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Agg_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAgg_order(s)
	}
}

func (s *Agg_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAgg_order(s)
	}
}




func (p *SQLParser) Agg_order() (localctx IAgg_orderContext) {
	localctx = NewAgg_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, SQLParserRULE_agg_order)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4158)
		p.Match(SQLParserORDER)
	}
	{
		p.SetState(4159)
		p.Match(SQLParserBY)
	}
	{
		p.SetState(4160)
		p.Function_arguments()
	}
	p.SetState(4165)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(4161)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(4162)
			p.Function_arguments()
		}


		p.SetState(4167)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ICharacter_stringContext is an interface to support dynamic dispatch.
type ICharacter_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharacter_stringContext differentiates from other interfaces.
	IsCharacter_stringContext()
}

type Character_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharacter_stringContext() *Character_stringContext {
	var p = new(Character_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_character_string
	return p
}

func (*Character_stringContext) IsCharacter_stringContext() {}

func NewCharacter_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Character_stringContext {
	var p = new(Character_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_character_string

	return p
}

func (s *Character_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Character_stringContext) BeginDollarStringConstant() antlr.TerminalNode {
	return s.GetToken(SQLParserBeginDollarStringConstant, 0)
}

func (s *Character_stringContext) EndDollarStringConstant() antlr.TerminalNode {
	return s.GetToken(SQLParserEndDollarStringConstant, 0)
}

func (s *Character_stringContext) AllText_between_Dollar() []antlr.TerminalNode {
	return s.GetTokens(SQLParserText_between_Dollar)
}

func (s *Character_stringContext) Text_between_Dollar(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserText_between_Dollar, i)
}

func (s *Character_stringContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Character_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Character_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Character_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCharacter_string(s)
	}
}

func (s *Character_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCharacter_string(s)
	}
}




func (p *SQLParser) Character_string() (localctx ICharacter_stringContext) {
	localctx = NewCharacter_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, SQLParserRULE_character_string)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4177)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserBeginDollarStringConstant:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4168)
			p.Match(SQLParserBeginDollarStringConstant)
		}
		p.SetState(4172)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserText_between_Dollar {
			{
				p.SetState(4169)
				p.Match(SQLParserText_between_Dollar)
			}


			p.SetState(4174)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4175)
			p.Match(SQLParserEndDollarStringConstant)
		}


	case SQLParserCharacter_String_Literal:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4176)
			p.Match(SQLParserCharacter_String_Literal)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IFunction_argumentsContext is an interface to support dynamic dispatch.
type IFunction_argumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_argumentsContext differentiates from other interfaces.
	IsFunction_argumentsContext()
}

type Function_argumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_argumentsContext() *Function_argumentsContext {
	var p = new(Function_argumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_arguments
	return p
}

func (*Function_argumentsContext) IsFunction_argumentsContext() {}

func NewFunction_argumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_argumentsContext {
	var p = new(Function_argumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_arguments

	return p
}

func (s *Function_argumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_argumentsContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Function_argumentsContext) Argmode() IArgmodeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgmodeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgmodeContext)
}

func (s *Function_argumentsContext) Identifier_nontype() IIdentifier_nontypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nontypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nontypeContext)
}

func (s *Function_argumentsContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Function_argumentsContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Function_argumentsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Function_argumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_argumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_argumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_arguments(s)
	}
}

func (s *Function_argumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_arguments(s)
	}
}




func (p *SQLParser) Function_arguments() (localctx IFunction_argumentsContext) {
	localctx = NewFunction_argumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, SQLParserRULE_function_arguments)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4180)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 464, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4179)
			p.Argmode()
		}


	}
	p.SetState(4183)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 465, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4182)
			p.Identifier_nontype()
		}


	}
	{
		p.SetState(4185)
		p.Data_type()
	}
	p.SetState(4188)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserDEFAULT || _la == SQLParserEQUAL {
		{
			p.SetState(4186)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDEFAULT || _la == SQLParserEQUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4187)
			p.vex(0)
		}

	}



	return localctx
}


// IArgmodeContext is an interface to support dynamic dispatch.
type IArgmodeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgmodeContext differentiates from other interfaces.
	IsArgmodeContext()
}

type ArgmodeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgmodeContext() *ArgmodeContext {
	var p = new(ArgmodeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_argmode
	return p
}

func (*ArgmodeContext) IsArgmodeContext() {}

func NewArgmodeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgmodeContext {
	var p = new(ArgmodeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_argmode

	return p
}

func (s *ArgmodeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgmodeContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *ArgmodeContext) OUT() antlr.TerminalNode {
	return s.GetToken(SQLParserOUT, 0)
}

func (s *ArgmodeContext) INOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserINOUT, 0)
}

func (s *ArgmodeContext) VARIADIC() antlr.TerminalNode {
	return s.GetToken(SQLParserVARIADIC, 0)
}

func (s *ArgmodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgmodeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ArgmodeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterArgmode(s)
	}
}

func (s *ArgmodeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitArgmode(s)
	}
}




func (p *SQLParser) Argmode() (localctx IArgmodeContext) {
	localctx = NewArgmodeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, SQLParserRULE_argmode)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4190)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserINOUT || _la == SQLParserOUT || _la == SQLParserIN || _la == SQLParserVARIADIC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ICreate_sequence_statementContext is an interface to support dynamic dispatch.
type ICreate_sequence_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsCreate_sequence_statementContext differentiates from other interfaces.
	IsCreate_sequence_statementContext()
}

type Create_sequence_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyCreate_sequence_statementContext() *Create_sequence_statementContext {
	var p = new(Create_sequence_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_sequence_statement
	return p
}

func (*Create_sequence_statementContext) IsCreate_sequence_statementContext() {}

func NewCreate_sequence_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_sequence_statementContext {
	var p = new(Create_sequence_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_sequence_statement

	return p
}

func (s *Create_sequence_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_sequence_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Create_sequence_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Create_sequence_statementContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Create_sequence_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_sequence_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_sequence_statementContext) AllSequence_body() []ISequence_bodyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISequence_bodyContext)(nil)).Elem())
	var tst = make([]ISequence_bodyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISequence_bodyContext)
		}
	}

	return tst
}

func (s *Create_sequence_statementContext) Sequence_body(i int) ISequence_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISequence_bodyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISequence_bodyContext)
}

func (s *Create_sequence_statementContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPORARY, 0)
}

func (s *Create_sequence_statementContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMP, 0)
}

func (s *Create_sequence_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_sequence_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_sequence_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_sequence_statement(s)
	}
}

func (s *Create_sequence_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_sequence_statement(s)
	}
}




func (p *SQLParser) Create_sequence_statement() (localctx ICreate_sequence_statementContext) {
	localctx = NewCreate_sequence_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, SQLParserRULE_create_sequence_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4193)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTEMP || _la == SQLParserTEMPORARY {
		{
			p.SetState(4192)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserTEMP || _la == SQLParserTEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(4195)
		p.Match(SQLParserSEQUENCE)
	}
	p.SetState(4197)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 468, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4196)
			p.If_not_exists()
		}


	}
	{
		p.SetState(4199)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_sequence_statementContext).name = _x
	}
	p.SetState(4203)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCACHE || _la == SQLParserCYCLE || _la == SQLParserINCREMENT || _la == SQLParserMAXVALUE || ((((_la - 143)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 143))) & ((1 << (SQLParserMINVALUE - 143)) | (1 << (SQLParserNO - 143)) | (1 << (SQLParserOWNED - 143)))) != 0) || _la == SQLParserSEQUENCE || _la == SQLParserSTART || _la == SQLParserAS {
		{
			p.SetState(4200)
			p.Sequence_body()
		}


		p.SetState(4205)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ISequence_bodyContext is an interface to support dynamic dispatch.
type ISequence_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetX_type returns the x_type token.
	GetX_type() antlr.Token 

	// GetCycle_true returns the cycle_true token.
	GetCycle_true() antlr.Token 

	// GetCycle_val returns the cycle_val token.
	GetCycle_val() antlr.Token 


	// SetX_type sets the x_type token.
	SetX_type(antlr.Token) 

	// SetCycle_true sets the cycle_true token.
	SetCycle_true(antlr.Token) 

	// SetCycle_val sets the cycle_val token.
	SetCycle_val(antlr.Token) 


	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetIncr returns the incr rule contexts.
	GetIncr() ISigned_numerical_literalContext

	// GetMinval returns the minval rule contexts.
	GetMinval() ISigned_numerical_literalContext

	// GetMaxval returns the maxval rule contexts.
	GetMaxval() ISigned_numerical_literalContext

	// GetStart_val returns the start_val rule contexts.
	GetStart_val() ISigned_numerical_literalContext

	// GetCache_val returns the cache_val rule contexts.
	GetCache_val() ISigned_numerical_literalContext

	// GetCol_name returns the col_name rule contexts.
	GetCol_name() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetIncr sets the incr rule contexts.
	SetIncr(ISigned_numerical_literalContext)

	// SetMinval sets the minval rule contexts.
	SetMinval(ISigned_numerical_literalContext)

	// SetMaxval sets the maxval rule contexts.
	SetMaxval(ISigned_numerical_literalContext)

	// SetStart_val sets the start_val rule contexts.
	SetStart_val(ISigned_numerical_literalContext)

	// SetCache_val sets the cache_val rule contexts.
	SetCache_val(ISigned_numerical_literalContext)

	// SetCol_name sets the col_name rule contexts.
	SetCol_name(ISchema_qualified_nameContext)


	// IsSequence_bodyContext differentiates from other interfaces.
	IsSequence_bodyContext()
}

type Sequence_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	x_type antlr.Token
	name ISchema_qualified_nameContext 
	incr ISigned_numerical_literalContext 
	minval ISigned_numerical_literalContext 
	maxval ISigned_numerical_literalContext 
	start_val ISigned_numerical_literalContext 
	cache_val ISigned_numerical_literalContext 
	cycle_true antlr.Token
	cycle_val antlr.Token
	col_name ISchema_qualified_nameContext 
}

func NewEmptySequence_bodyContext() *Sequence_bodyContext {
	var p = new(Sequence_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_sequence_body
	return p
}

func (*Sequence_bodyContext) IsSequence_bodyContext() {}

func NewSequence_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_bodyContext {
	var p = new(Sequence_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_sequence_body

	return p
}

func (s *Sequence_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_bodyContext) GetX_type() antlr.Token { return s.x_type }

func (s *Sequence_bodyContext) GetCycle_true() antlr.Token { return s.cycle_true }

func (s *Sequence_bodyContext) GetCycle_val() antlr.Token { return s.cycle_val }


func (s *Sequence_bodyContext) SetX_type(v antlr.Token) { s.x_type = v }

func (s *Sequence_bodyContext) SetCycle_true(v antlr.Token) { s.cycle_true = v }

func (s *Sequence_bodyContext) SetCycle_val(v antlr.Token) { s.cycle_val = v }


func (s *Sequence_bodyContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Sequence_bodyContext) GetIncr() ISigned_numerical_literalContext { return s.incr }

func (s *Sequence_bodyContext) GetMinval() ISigned_numerical_literalContext { return s.minval }

func (s *Sequence_bodyContext) GetMaxval() ISigned_numerical_literalContext { return s.maxval }

func (s *Sequence_bodyContext) GetStart_val() ISigned_numerical_literalContext { return s.start_val }

func (s *Sequence_bodyContext) GetCache_val() ISigned_numerical_literalContext { return s.cache_val }

func (s *Sequence_bodyContext) GetCol_name() ISchema_qualified_nameContext { return s.col_name }


func (s *Sequence_bodyContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Sequence_bodyContext) SetIncr(v ISigned_numerical_literalContext) { s.incr = v }

func (s *Sequence_bodyContext) SetMinval(v ISigned_numerical_literalContext) { s.minval = v }

func (s *Sequence_bodyContext) SetMaxval(v ISigned_numerical_literalContext) { s.maxval = v }

func (s *Sequence_bodyContext) SetStart_val(v ISigned_numerical_literalContext) { s.start_val = v }

func (s *Sequence_bodyContext) SetCache_val(v ISigned_numerical_literalContext) { s.cache_val = v }

func (s *Sequence_bodyContext) SetCol_name(v ISchema_qualified_nameContext) { s.col_name = v }


func (s *Sequence_bodyContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Sequence_bodyContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(SQLParserSMALLINT, 0)
}

func (s *Sequence_bodyContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SQLParserINTEGER, 0)
}

func (s *Sequence_bodyContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(SQLParserBIGINT, 0)
}

func (s *Sequence_bodyContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Sequence_bodyContext) NAME() antlr.TerminalNode {
	return s.GetToken(SQLParserNAME, 0)
}

func (s *Sequence_bodyContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Sequence_bodyContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserINCREMENT, 0)
}

func (s *Sequence_bodyContext) Signed_numerical_literal() ISigned_numerical_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_numerical_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_numerical_literalContext)
}

func (s *Sequence_bodyContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Sequence_bodyContext) MINVALUE() antlr.TerminalNode {
	return s.GetToken(SQLParserMINVALUE, 0)
}

func (s *Sequence_bodyContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Sequence_bodyContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(SQLParserMAXVALUE, 0)
}

func (s *Sequence_bodyContext) START() antlr.TerminalNode {
	return s.GetToken(SQLParserSTART, 0)
}

func (s *Sequence_bodyContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Sequence_bodyContext) CACHE() antlr.TerminalNode {
	return s.GetToken(SQLParserCACHE, 0)
}

func (s *Sequence_bodyContext) CYCLE() antlr.TerminalNode {
	return s.GetToken(SQLParserCYCLE, 0)
}

func (s *Sequence_bodyContext) OWNED() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNED, 0)
}

func (s *Sequence_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Sequence_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSequence_body(s)
	}
}

func (s *Sequence_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSequence_body(s)
	}
}




func (p *SQLParser) Sequence_body() (localctx ISequence_bodyContext) {
	localctx = NewSequence_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, SQLParserRULE_sequence_body)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4242)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 475, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4206)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(4207)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Sequence_bodyContext).x_type = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 301)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 301))) & ((1 << (SQLParserBIGINT - 301)) | (1 << (SQLParserINTEGER - 301)) | (1 << (SQLParserSMALLINT - 301)))) != 0)) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Sequence_bodyContext).x_type = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4208)
			p.Match(SQLParserSEQUENCE)
		}
		{
			p.SetState(4209)
			p.Match(SQLParserNAME)
		}
		{
			p.SetState(4210)

			var _x = p.Schema_qualified_name()


			localctx.(*Sequence_bodyContext).name = _x
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4211)
			p.Match(SQLParserINCREMENT)
		}
		p.SetState(4213)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserBY {
			{
				p.SetState(4212)
				p.Match(SQLParserBY)
			}

		}
		{
			p.SetState(4215)

			var _x = p.Signed_numerical_literal()


			localctx.(*Sequence_bodyContext).incr = _x
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(4220)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserMINVALUE:
			{
				p.SetState(4216)
				p.Match(SQLParserMINVALUE)
			}
			{
				p.SetState(4217)

				var _x = p.Signed_numerical_literal()


				localctx.(*Sequence_bodyContext).minval = _x
			}


		case SQLParserNO:
			{
				p.SetState(4218)
				p.Match(SQLParserNO)
			}
			{
				p.SetState(4219)
				p.Match(SQLParserMINVALUE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(4226)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserMAXVALUE:
			{
				p.SetState(4222)
				p.Match(SQLParserMAXVALUE)
			}
			{
				p.SetState(4223)

				var _x = p.Signed_numerical_literal()


				localctx.(*Sequence_bodyContext).maxval = _x
			}


		case SQLParserNO:
			{
				p.SetState(4224)
				p.Match(SQLParserNO)
			}
			{
				p.SetState(4225)
				p.Match(SQLParserMAXVALUE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4228)
			p.Match(SQLParserSTART)
		}
		p.SetState(4230)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4229)
				p.Match(SQLParserWITH)
			}

		}
		{
			p.SetState(4232)

			var _x = p.Signed_numerical_literal()


			localctx.(*Sequence_bodyContext).start_val = _x
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4233)
			p.Match(SQLParserCACHE)
		}
		{
			p.SetState(4234)

			var _x = p.Signed_numerical_literal()


			localctx.(*Sequence_bodyContext).cache_val = _x
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(4236)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(4235)

				var _m = p.Match(SQLParserNO)

				localctx.(*Sequence_bodyContext).cycle_true = _m
			}

		}
		{
			p.SetState(4238)

			var _m = p.Match(SQLParserCYCLE)

			localctx.(*Sequence_bodyContext).cycle_val = _m
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4239)
			p.Match(SQLParserOWNED)
		}
		{
			p.SetState(4240)
			p.Match(SQLParserBY)
		}
		{
			p.SetState(4241)

			var _x = p.Schema_qualified_name()


			localctx.(*Sequence_bodyContext).col_name = _x
		}

	}


	return localctx
}


// ISigned_number_literalContext is an interface to support dynamic dispatch.
type ISigned_number_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSigned_number_literalContext differentiates from other interfaces.
	IsSigned_number_literalContext()
}

type Signed_number_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_number_literalContext() *Signed_number_literalContext {
	var p = new(Signed_number_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_signed_number_literal
	return p
}

func (*Signed_number_literalContext) IsSigned_number_literalContext() {}

func NewSigned_number_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_number_literalContext {
	var p = new(Signed_number_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_signed_number_literal

	return p
}

func (s *Signed_number_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_number_literalContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Signed_number_literalContext) Sign() ISignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignContext)
}

func (s *Signed_number_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_number_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Signed_number_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSigned_number_literal(s)
	}
}

func (s *Signed_number_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSigned_number_literal(s)
	}
}




func (p *SQLParser) Signed_number_literal() (localctx ISigned_number_literalContext) {
	localctx = NewSigned_number_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, SQLParserRULE_signed_number_literal)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4245)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserPLUS || _la == SQLParserMINUS {
		{
			p.SetState(4244)
			p.Sign()
		}

	}
	{
		p.SetState(4247)
		p.Match(SQLParserNUMBER_LITERAL)
	}



	return localctx
}


// ISigned_numerical_literalContext is an interface to support dynamic dispatch.
type ISigned_numerical_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSigned_numerical_literalContext differentiates from other interfaces.
	IsSigned_numerical_literalContext()
}

type Signed_numerical_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_numerical_literalContext() *Signed_numerical_literalContext {
	var p = new(Signed_numerical_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_signed_numerical_literal
	return p
}

func (*Signed_numerical_literalContext) IsSigned_numerical_literalContext() {}

func NewSigned_numerical_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_numerical_literalContext {
	var p = new(Signed_numerical_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_signed_numerical_literal

	return p
}

func (s *Signed_numerical_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_numerical_literalContext) Unsigned_numeric_literal() IUnsigned_numeric_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnsigned_numeric_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnsigned_numeric_literalContext)
}

func (s *Signed_numerical_literalContext) Sign() ISignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignContext)
}

func (s *Signed_numerical_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_numerical_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Signed_numerical_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSigned_numerical_literal(s)
	}
}

func (s *Signed_numerical_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSigned_numerical_literal(s)
	}
}




func (p *SQLParser) Signed_numerical_literal() (localctx ISigned_numerical_literalContext) {
	localctx = NewSigned_numerical_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, SQLParserRULE_signed_numerical_literal)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4250)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserPLUS || _la == SQLParserMINUS {
		{
			p.SetState(4249)
			p.Sign()
		}

	}
	{
		p.SetState(4252)
		p.Unsigned_numeric_literal()
	}



	return localctx
}


// ISignContext is an interface to support dynamic dispatch.
type ISignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignContext differentiates from other interfaces.
	IsSignContext()
}

type SignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignContext() *SignContext {
	var p = new(SignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_sign
	return p
}

func (*SignContext) IsSignContext() {}

func NewSignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignContext {
	var p = new(SignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_sign

	return p
}

func (s *SignContext) GetParser() antlr.Parser { return s.parser }

func (s *SignContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLParserPLUS, 0)
}

func (s *SignContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLParserMINUS, 0)
}

func (s *SignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSign(s)
	}
}

func (s *SignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSign(s)
	}
}




func (p *SQLParser) Sign() (localctx ISignContext) {
	localctx = NewSignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, SQLParserRULE_sign)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4254)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserPLUS || _la == SQLParserMINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ICreate_schema_statementContext is an interface to support dynamic dispatch.
type ICreate_schema_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsCreate_schema_statementContext differentiates from other interfaces.
	IsCreate_schema_statementContext()
}

type Create_schema_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyCreate_schema_statementContext() *Create_schema_statementContext {
	var p = new(Create_schema_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_schema_statement
	return p
}

func (*Create_schema_statementContext) IsCreate_schema_statementContext() {}

func NewCreate_schema_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_schema_statementContext {
	var p = new(Create_schema_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_schema_statement

	return p
}

func (s *Create_schema_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_schema_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Create_schema_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Create_schema_statementContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Create_schema_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_schema_statementContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(SQLParserAUTHORIZATION, 0)
}

func (s *Create_schema_statementContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Create_schema_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_schema_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_schema_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_schema_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_schema_statement(s)
	}
}

func (s *Create_schema_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_schema_statement(s)
	}
}




func (p *SQLParser) Create_schema_statement() (localctx ICreate_schema_statementContext) {
	localctx = NewCreate_schema_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, SQLParserRULE_create_schema_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4256)
		p.Match(SQLParserSCHEMA)
	}
	p.SetState(4258)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 478, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4257)
			p.If_not_exists()
		}


	}
	p.SetState(4261)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
		{
			p.SetState(4260)

			var _x = p.Identifier()


			localctx.(*Create_schema_statementContext).name = _x
		}

	}
	p.SetState(4265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserAUTHORIZATION {
		{
			p.SetState(4263)
			p.Match(SQLParserAUTHORIZATION)
		}
		{
			p.SetState(4264)
			p.User_name()
		}

	}



	return localctx
}


// ICreate_policy_statementContext is an interface to support dynamic dispatch.
type ICreate_policy_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEvent returns the event token.
	GetEvent() antlr.Token 


	// SetEvent sets the event token.
	SetEvent(antlr.Token) 


	// GetUsing returns the using rule contexts.
	GetUsing() IVexContext

	// GetCheck returns the check rule contexts.
	GetCheck() IVexContext


	// SetUsing sets the using rule contexts.
	SetUsing(IVexContext)

	// SetCheck sets the check rule contexts.
	SetCheck(IVexContext)


	// IsCreate_policy_statementContext differentiates from other interfaces.
	IsCreate_policy_statementContext()
}

type Create_policy_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	event antlr.Token
	using IVexContext 
	check IVexContext 
}

func NewEmptyCreate_policy_statementContext() *Create_policy_statementContext {
	var p = new(Create_policy_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_policy_statement
	return p
}

func (*Create_policy_statementContext) IsCreate_policy_statementContext() {}

func NewCreate_policy_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_policy_statementContext {
	var p = new(Create_policy_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_policy_statement

	return p
}

func (s *Create_policy_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_policy_statementContext) GetEvent() antlr.Token { return s.event }


func (s *Create_policy_statementContext) SetEvent(v antlr.Token) { s.event = v }


func (s *Create_policy_statementContext) GetUsing() IVexContext { return s.using }

func (s *Create_policy_statementContext) GetCheck() IVexContext { return s.check }


func (s *Create_policy_statementContext) SetUsing(v IVexContext) { s.using = v }

func (s *Create_policy_statementContext) SetCheck(v IVexContext) { s.check = v }


func (s *Create_policy_statementContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SQLParserPOLICY, 0)
}

func (s *Create_policy_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_policy_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Create_policy_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_policy_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Create_policy_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Create_policy_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Create_policy_statementContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *Create_policy_statementContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Create_policy_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Create_policy_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Create_policy_statementContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SQLParserCHECK, 0)
}

func (s *Create_policy_statementContext) PERMISSIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserPERMISSIVE, 0)
}

func (s *Create_policy_statementContext) RESTRICTIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICTIVE, 0)
}

func (s *Create_policy_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Create_policy_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Create_policy_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Create_policy_statementContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SQLParserSELECT, 0)
}

func (s *Create_policy_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SQLParserINSERT, 0)
}

func (s *Create_policy_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Create_policy_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, 0)
}

func (s *Create_policy_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_policy_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_policy_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_policy_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_policy_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_policy_statement(s)
	}
}

func (s *Create_policy_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_policy_statement(s)
	}
}




func (p *SQLParser) Create_policy_statement() (localctx ICreate_policy_statementContext) {
	localctx = NewCreate_policy_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, SQLParserRULE_create_policy_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4267)
		p.Match(SQLParserPOLICY)
	}
	{
		p.SetState(4268)
		p.Identifier()
	}
	{
		p.SetState(4269)
		p.Match(SQLParserON)
	}
	{
		p.SetState(4270)
		p.Schema_qualified_name()
	}
	p.SetState(4273)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserAS {
		{
			p.SetState(4271)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(4272)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserPERMISSIVE || _la == SQLParserRESTRICTIVE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(4277)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFOR {
		{
			p.SetState(4275)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(4276)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Create_policy_statementContext).event = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDELETE || _la == SQLParserINSERT || _la == SQLParserUPDATE || _la == SQLParserALL || _la == SQLParserSELECT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Create_policy_statementContext).event = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(4288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTO {
		{
			p.SetState(4279)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(4280)
			p.User_name()
		}
		p.SetState(4285)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(4281)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(4282)
				p.User_name()
			}


			p.SetState(4287)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(4292)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUSING {
		{
			p.SetState(4290)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(4291)

			var _x = p.vex(0)

			localctx.(*Create_policy_statementContext).using = _x
		}

	}
	p.SetState(4297)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(4294)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(4295)
			p.Match(SQLParserCHECK)
		}
		{
			p.SetState(4296)

			var _x = p.vex(0)

			localctx.(*Create_policy_statementContext).check = _x
		}

	}



	return localctx
}


// IAlter_policy_statementContext is an interface to support dynamic dispatch.
type IAlter_policy_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_policy_statementContext differentiates from other interfaces.
	IsAlter_policy_statementContext()
}

type Alter_policy_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_policy_statementContext() *Alter_policy_statementContext {
	var p = new(Alter_policy_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_policy_statement
	return p
}

func (*Alter_policy_statementContext) IsAlter_policy_statementContext() {}

func NewAlter_policy_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_policy_statementContext {
	var p = new(Alter_policy_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_policy_statement

	return p
}

func (s *Alter_policy_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_policy_statementContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SQLParserPOLICY, 0)
}

func (s *Alter_policy_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_policy_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Alter_policy_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_policy_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_policy_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Alter_policy_statementContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *Alter_policy_statementContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Alter_policy_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Alter_policy_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Alter_policy_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Alter_policy_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Alter_policy_statementContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SQLParserCHECK, 0)
}

func (s *Alter_policy_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alter_policy_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alter_policy_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_policy_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_policy_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_policy_statement(s)
	}
}

func (s *Alter_policy_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_policy_statement(s)
	}
}




func (p *SQLParser) Alter_policy_statement() (localctx IAlter_policy_statementContext) {
	localctx = NewAlter_policy_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, SQLParserRULE_alter_policy_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4329)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 491, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4299)
			p.Match(SQLParserPOLICY)
		}
		{
			p.SetState(4300)
			p.Identifier()
		}
		{
			p.SetState(4301)
			p.Match(SQLParserON)
		}
		{
			p.SetState(4302)
			p.Schema_qualified_name()
		}
		{
			p.SetState(4303)
			p.Rename_to()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4305)
			p.Match(SQLParserPOLICY)
		}
		{
			p.SetState(4306)
			p.Identifier()
		}
		{
			p.SetState(4307)
			p.Match(SQLParserON)
		}
		{
			p.SetState(4308)
			p.Schema_qualified_name()
		}
		p.SetState(4318)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserTO {
			{
				p.SetState(4309)
				p.Match(SQLParserTO)
			}
			{
				p.SetState(4310)
				p.User_name()
			}
			p.SetState(4315)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(4311)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(4312)
					p.User_name()
				}


				p.SetState(4317)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4322)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserUSING {
			{
				p.SetState(4320)
				p.Match(SQLParserUSING)
			}
			{
				p.SetState(4321)
				p.vex(0)
			}

		}
		p.SetState(4327)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4324)
				p.Match(SQLParserWITH)
			}
			{
				p.SetState(4325)
				p.Match(SQLParserCHECK)
			}
			{
				p.SetState(4326)
				p.vex(0)
			}

		}

	}


	return localctx
}


// IDrop_policy_statementContext is an interface to support dynamic dispatch.
type IDrop_policy_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_policy_statementContext differentiates from other interfaces.
	IsDrop_policy_statementContext()
}

type Drop_policy_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_policy_statementContext() *Drop_policy_statementContext {
	var p = new(Drop_policy_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_policy_statement
	return p
}

func (*Drop_policy_statementContext) IsDrop_policy_statementContext() {}

func NewDrop_policy_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_policy_statementContext {
	var p = new(Drop_policy_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_policy_statement

	return p
}

func (s *Drop_policy_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_policy_statementContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SQLParserPOLICY, 0)
}

func (s *Drop_policy_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_policy_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Drop_policy_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Drop_policy_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_policy_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_policy_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_policy_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_policy_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_policy_statement(s)
	}
}

func (s *Drop_policy_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_policy_statement(s)
	}
}




func (p *SQLParser) Drop_policy_statement() (localctx IDrop_policy_statementContext) {
	localctx = NewDrop_policy_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, SQLParserRULE_drop_policy_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4331)
		p.Match(SQLParserPOLICY)
	}
	p.SetState(4333)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 492, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4332)
			p.If_exists()
		}


	}
	{
		p.SetState(4335)
		p.Identifier()
	}
	{
		p.SetState(4336)
		p.Match(SQLParserON)
	}
	{
		p.SetState(4337)
		p.Schema_qualified_name()
	}
	p.SetState(4339)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(4338)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// ICreate_subscription_statementContext is an interface to support dynamic dispatch.
type ICreate_subscription_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_subscription_statementContext differentiates from other interfaces.
	IsCreate_subscription_statementContext()
}

type Create_subscription_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_subscription_statementContext() *Create_subscription_statementContext {
	var p = new(Create_subscription_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_subscription_statement
	return p
}

func (*Create_subscription_statementContext) IsCreate_subscription_statementContext() {}

func NewCreate_subscription_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_subscription_statementContext {
	var p = new(Create_subscription_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_subscription_statement

	return p
}

func (s *Create_subscription_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_subscription_statementContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBSCRIPTION, 0)
}

func (s *Create_subscription_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_subscription_statementContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONNECTION, 0)
}

func (s *Create_subscription_statementContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Create_subscription_statementContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserPUBLICATION, 0)
}

func (s *Create_subscription_statementContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Create_subscription_statementContext) With_storage_parameter() IWith_storage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_storage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_storage_parameterContext)
}

func (s *Create_subscription_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_subscription_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_subscription_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_subscription_statement(s)
	}
}

func (s *Create_subscription_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_subscription_statement(s)
	}
}




func (p *SQLParser) Create_subscription_statement() (localctx ICreate_subscription_statementContext) {
	localctx = NewCreate_subscription_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, SQLParserRULE_create_subscription_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4341)
		p.Match(SQLParserSUBSCRIPTION)
	}
	{
		p.SetState(4342)
		p.Identifier()
	}
	{
		p.SetState(4343)
		p.Match(SQLParserCONNECTION)
	}
	{
		p.SetState(4344)
		p.Match(SQLParserCharacter_String_Literal)
	}
	{
		p.SetState(4345)
		p.Match(SQLParserPUBLICATION)
	}
	{
		p.SetState(4346)
		p.Identifier_list()
	}
	p.SetState(4348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(4347)
			p.With_storage_parameter()
		}

	}



	return localctx
}


// IAlter_subscription_statementContext is an interface to support dynamic dispatch.
type IAlter_subscription_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_subscription_statementContext differentiates from other interfaces.
	IsAlter_subscription_statementContext()
}

type Alter_subscription_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_subscription_statementContext() *Alter_subscription_statementContext {
	var p = new(Alter_subscription_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_subscription_statement
	return p
}

func (*Alter_subscription_statementContext) IsAlter_subscription_statementContext() {}

func NewAlter_subscription_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_subscription_statementContext {
	var p = new(Alter_subscription_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_subscription_statement

	return p
}

func (s *Alter_subscription_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_subscription_statementContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBSCRIPTION, 0)
}

func (s *Alter_subscription_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_subscription_statementContext) Alter_subscription_action() IAlter_subscription_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_subscription_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_subscription_actionContext)
}

func (s *Alter_subscription_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_subscription_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_subscription_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_subscription_statement(s)
	}
}

func (s *Alter_subscription_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_subscription_statement(s)
	}
}




func (p *SQLParser) Alter_subscription_statement() (localctx IAlter_subscription_statementContext) {
	localctx = NewAlter_subscription_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, SQLParserRULE_alter_subscription_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4350)
		p.Match(SQLParserSUBSCRIPTION)
	}
	{
		p.SetState(4351)
		p.Identifier()
	}
	{
		p.SetState(4352)
		p.Alter_subscription_action()
	}



	return localctx
}


// IAlter_subscription_actionContext is an interface to support dynamic dispatch.
type IAlter_subscription_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_subscription_actionContext differentiates from other interfaces.
	IsAlter_subscription_actionContext()
}

type Alter_subscription_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_subscription_actionContext() *Alter_subscription_actionContext {
	var p = new(Alter_subscription_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_subscription_action
	return p
}

func (*Alter_subscription_actionContext) IsAlter_subscription_actionContext() {}

func NewAlter_subscription_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_subscription_actionContext {
	var p = new(Alter_subscription_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_subscription_action

	return p
}

func (s *Alter_subscription_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_subscription_actionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONNECTION, 0)
}

func (s *Alter_subscription_actionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Alter_subscription_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Alter_subscription_actionContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserPUBLICATION, 0)
}

func (s *Alter_subscription_actionContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Alter_subscription_actionContext) With_storage_parameter() IWith_storage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_storage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_storage_parameterContext)
}

func (s *Alter_subscription_actionContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SQLParserREFRESH, 0)
}

func (s *Alter_subscription_actionContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserENABLE, 0)
}

func (s *Alter_subscription_actionContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDISABLE, 0)
}

func (s *Alter_subscription_actionContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Alter_subscription_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_subscription_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_subscription_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_subscription_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_subscription_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_subscription_action(s)
	}
}

func (s *Alter_subscription_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_subscription_action(s)
	}
}




func (p *SQLParser) Alter_subscription_action() (localctx IAlter_subscription_actionContext) {
	localctx = NewAlter_subscription_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, SQLParserRULE_alter_subscription_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4373)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 497, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4354)
			p.Match(SQLParserCONNECTION)
		}
		{
			p.SetState(4355)
			p.Character_string()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4356)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(4357)
			p.Match(SQLParserPUBLICATION)
		}
		{
			p.SetState(4358)
			p.Identifier_list()
		}
		p.SetState(4360)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4359)
				p.With_storage_parameter()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4362)
			p.Match(SQLParserREFRESH)
		}
		{
			p.SetState(4363)
			p.Match(SQLParserPUBLICATION)
		}
		p.SetState(4365)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4364)
				p.With_storage_parameter()
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4367)
			p.Match(SQLParserENABLE)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4368)
			p.Match(SQLParserDISABLE)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4369)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(4370)
			p.Storage_parameter()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4371)
			p.Owner_to()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4372)
			p.Rename_to()
		}

	}


	return localctx
}


// ICreate_cast_statementContext is an interface to support dynamic dispatch.
type ICreate_cast_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSource returns the source rule contexts.
	GetSource() IData_typeContext

	// GetTarget returns the target rule contexts.
	GetTarget() IData_typeContext

	// GetFunc_name returns the func_name rule contexts.
	GetFunc_name() ISchema_qualified_nameContext


	// SetSource sets the source rule contexts.
	SetSource(IData_typeContext)

	// SetTarget sets the target rule contexts.
	SetTarget(IData_typeContext)

	// SetFunc_name sets the func_name rule contexts.
	SetFunc_name(ISchema_qualified_nameContext)


	// IsCreate_cast_statementContext differentiates from other interfaces.
	IsCreate_cast_statementContext()
}

type Create_cast_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	source IData_typeContext 
	target IData_typeContext 
	func_name ISchema_qualified_nameContext 
}

func NewEmptyCreate_cast_statementContext() *Create_cast_statementContext {
	var p = new(Create_cast_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_cast_statement
	return p
}

func (*Create_cast_statementContext) IsCreate_cast_statementContext() {}

func NewCreate_cast_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_cast_statementContext {
	var p = new(Create_cast_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_cast_statement

	return p
}

func (s *Create_cast_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_cast_statementContext) GetSource() IData_typeContext { return s.source }

func (s *Create_cast_statementContext) GetTarget() IData_typeContext { return s.target }

func (s *Create_cast_statementContext) GetFunc_name() ISchema_qualified_nameContext { return s.func_name }


func (s *Create_cast_statementContext) SetSource(v IData_typeContext) { s.source = v }

func (s *Create_cast_statementContext) SetTarget(v IData_typeContext) { s.target = v }

func (s *Create_cast_statementContext) SetFunc_name(v ISchema_qualified_nameContext) { s.func_name = v }


func (s *Create_cast_statementContext) CAST() antlr.TerminalNode {
	return s.GetToken(SQLParserCAST, 0)
}

func (s *Create_cast_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_cast_statementContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(SQLParserAS)
}

func (s *Create_cast_statementContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserAS, i)
}

func (s *Create_cast_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_cast_statementContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Create_cast_statementContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_cast_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Create_cast_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Create_cast_statementContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Create_cast_statementContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHOUT, 0)
}

func (s *Create_cast_statementContext) INOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserINOUT, 0)
}

func (s *Create_cast_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_cast_statementContext) ASSIGNMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserASSIGNMENT, 0)
}

func (s *Create_cast_statementContext) IMPLICIT() antlr.TerminalNode {
	return s.GetToken(SQLParserIMPLICIT, 0)
}

func (s *Create_cast_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_cast_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_cast_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_cast_statement(s)
	}
}

func (s *Create_cast_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_cast_statement(s)
	}
}




func (p *SQLParser) Create_cast_statement() (localctx ICreate_cast_statementContext) {
	localctx = NewCreate_cast_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, SQLParserRULE_create_cast_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4375)
		p.Match(SQLParserCAST)
	}
	{
		p.SetState(4376)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(4377)

		var _x = p.Data_type()


		localctx.(*Create_cast_statementContext).source = _x
	}
	{
		p.SetState(4378)
		p.Match(SQLParserAS)
	}
	{
		p.SetState(4379)

		var _x = p.Data_type()


		localctx.(*Create_cast_statementContext).target = _x
	}
	{
		p.SetState(4380)
		p.Match(SQLParserRIGHT_PAREN)
	}
	p.SetState(4390)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 498, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4381)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(4382)
			p.Match(SQLParserFUNCTION)
		}
		{
			p.SetState(4383)

			var _x = p.Schema_qualified_name()


			localctx.(*Create_cast_statementContext).func_name = _x
		}
		{
			p.SetState(4384)
			p.Function_args()
		}


	case 2:
		{
			p.SetState(4386)
			p.Match(SQLParserWITHOUT)
		}
		{
			p.SetState(4387)
			p.Match(SQLParserFUNCTION)
		}


	case 3:
		{
			p.SetState(4388)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(4389)
			p.Match(SQLParserINOUT)
		}

	}
	p.SetState(4396)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 499, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4392)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(4393)
			p.Match(SQLParserASSIGNMENT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 499, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4394)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(4395)
			p.Match(SQLParserIMPLICIT)
		}


	}



	return localctx
}


// IDrop_cast_statementContext is an interface to support dynamic dispatch.
type IDrop_cast_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSource returns the source rule contexts.
	GetSource() IData_typeContext

	// GetTarget returns the target rule contexts.
	GetTarget() IData_typeContext


	// SetSource sets the source rule contexts.
	SetSource(IData_typeContext)

	// SetTarget sets the target rule contexts.
	SetTarget(IData_typeContext)


	// IsDrop_cast_statementContext differentiates from other interfaces.
	IsDrop_cast_statementContext()
}

type Drop_cast_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	source IData_typeContext 
	target IData_typeContext 
}

func NewEmptyDrop_cast_statementContext() *Drop_cast_statementContext {
	var p = new(Drop_cast_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_cast_statement
	return p
}

func (*Drop_cast_statementContext) IsDrop_cast_statementContext() {}

func NewDrop_cast_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_cast_statementContext {
	var p = new(Drop_cast_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_cast_statement

	return p
}

func (s *Drop_cast_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_cast_statementContext) GetSource() IData_typeContext { return s.source }

func (s *Drop_cast_statementContext) GetTarget() IData_typeContext { return s.target }


func (s *Drop_cast_statementContext) SetSource(v IData_typeContext) { s.source = v }

func (s *Drop_cast_statementContext) SetTarget(v IData_typeContext) { s.target = v }


func (s *Drop_cast_statementContext) CAST() antlr.TerminalNode {
	return s.GetToken(SQLParserCAST, 0)
}

func (s *Drop_cast_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Drop_cast_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Drop_cast_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Drop_cast_statementContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Drop_cast_statementContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Drop_cast_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_cast_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_cast_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_cast_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_cast_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_cast_statement(s)
	}
}

func (s *Drop_cast_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_cast_statement(s)
	}
}




func (p *SQLParser) Drop_cast_statement() (localctx IDrop_cast_statementContext) {
	localctx = NewDrop_cast_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, SQLParserRULE_drop_cast_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4398)
		p.Match(SQLParserCAST)
	}
	p.SetState(4400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserIF {
		{
			p.SetState(4399)
			p.If_exists()
		}

	}
	{
		p.SetState(4402)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(4403)

		var _x = p.Data_type()


		localctx.(*Drop_cast_statementContext).source = _x
	}
	{
		p.SetState(4404)
		p.Match(SQLParserAS)
	}
	{
		p.SetState(4405)

		var _x = p.Data_type()


		localctx.(*Drop_cast_statementContext).target = _x
	}
	{
		p.SetState(4406)
		p.Match(SQLParserRIGHT_PAREN)
	}
	p.SetState(4408)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(4407)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// ICreate_operator_family_statementContext is an interface to support dynamic dispatch.
type ICreate_operator_family_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_operator_family_statementContext differentiates from other interfaces.
	IsCreate_operator_family_statementContext()
}

type Create_operator_family_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_operator_family_statementContext() *Create_operator_family_statementContext {
	var p = new(Create_operator_family_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_operator_family_statement
	return p
}

func (*Create_operator_family_statementContext) IsCreate_operator_family_statementContext() {}

func NewCreate_operator_family_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_operator_family_statementContext {
	var p = new(Create_operator_family_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_operator_family_statement

	return p
}

func (s *Create_operator_family_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_operator_family_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Create_operator_family_statementContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(SQLParserFAMILY, 0)
}

func (s *Create_operator_family_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_operator_family_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Create_operator_family_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_operator_family_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_operator_family_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_operator_family_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_operator_family_statement(s)
	}
}

func (s *Create_operator_family_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_operator_family_statement(s)
	}
}




func (p *SQLParser) Create_operator_family_statement() (localctx ICreate_operator_family_statementContext) {
	localctx = NewCreate_operator_family_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, SQLParserRULE_create_operator_family_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4410)
		p.Match(SQLParserOPERATOR)
	}
	{
		p.SetState(4411)
		p.Match(SQLParserFAMILY)
	}
	{
		p.SetState(4412)
		p.Schema_qualified_name()
	}
	{
		p.SetState(4413)
		p.Match(SQLParserUSING)
	}
	{
		p.SetState(4414)
		p.Identifier()
	}



	return localctx
}


// IAlter_operator_family_statementContext is an interface to support dynamic dispatch.
type IAlter_operator_family_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_operator_family_statementContext differentiates from other interfaces.
	IsAlter_operator_family_statementContext()
}

type Alter_operator_family_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_operator_family_statementContext() *Alter_operator_family_statementContext {
	var p = new(Alter_operator_family_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_operator_family_statement
	return p
}

func (*Alter_operator_family_statementContext) IsAlter_operator_family_statementContext() {}

func NewAlter_operator_family_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_operator_family_statementContext {
	var p = new(Alter_operator_family_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_operator_family_statement

	return p
}

func (s *Alter_operator_family_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_operator_family_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Alter_operator_family_statementContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(SQLParserFAMILY, 0)
}

func (s *Alter_operator_family_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_operator_family_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Alter_operator_family_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_operator_family_statementContext) Operator_family_action() IOperator_family_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_family_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_family_actionContext)
}

func (s *Alter_operator_family_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_operator_family_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_operator_family_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_operator_family_statement(s)
	}
}

func (s *Alter_operator_family_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_operator_family_statement(s)
	}
}




func (p *SQLParser) Alter_operator_family_statement() (localctx IAlter_operator_family_statementContext) {
	localctx = NewAlter_operator_family_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, SQLParserRULE_alter_operator_family_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4416)
		p.Match(SQLParserOPERATOR)
	}
	{
		p.SetState(4417)
		p.Match(SQLParserFAMILY)
	}
	{
		p.SetState(4418)
		p.Schema_qualified_name()
	}
	{
		p.SetState(4419)
		p.Match(SQLParserUSING)
	}
	{
		p.SetState(4420)
		p.Identifier()
	}
	{
		p.SetState(4421)
		p.Operator_family_action()
	}



	return localctx
}


// IOperator_family_actionContext is an interface to support dynamic dispatch.
type IOperator_family_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_family_actionContext differentiates from other interfaces.
	IsOperator_family_actionContext()
}

type Operator_family_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_family_actionContext() *Operator_family_actionContext {
	var p = new(Operator_family_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_operator_family_action
	return p
}

func (*Operator_family_actionContext) IsOperator_family_actionContext() {}

func NewOperator_family_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_family_actionContext {
	var p = new(Operator_family_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_operator_family_action

	return p
}

func (s *Operator_family_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_family_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Operator_family_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Operator_family_actionContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Operator_family_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Operator_family_actionContext) AllAdd_operator_to_family() []IAdd_operator_to_familyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAdd_operator_to_familyContext)(nil)).Elem())
	var tst = make([]IAdd_operator_to_familyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAdd_operator_to_familyContext)
		}
	}

	return tst
}

func (s *Operator_family_actionContext) Add_operator_to_family(i int) IAdd_operator_to_familyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdd_operator_to_familyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAdd_operator_to_familyContext)
}

func (s *Operator_family_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Operator_family_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Operator_family_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Operator_family_actionContext) AllDrop_operator_from_family() []IDrop_operator_from_familyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDrop_operator_from_familyContext)(nil)).Elem())
	var tst = make([]IDrop_operator_from_familyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDrop_operator_from_familyContext)
		}
	}

	return tst
}

func (s *Operator_family_actionContext) Drop_operator_from_family(i int) IDrop_operator_from_familyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_operator_from_familyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDrop_operator_from_familyContext)
}

func (s *Operator_family_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_family_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Operator_family_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOperator_family_action(s)
	}
}

func (s *Operator_family_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOperator_family_action(s)
	}
}




func (p *SQLParser) Operator_family_action() (localctx IOperator_family_actionContext) {
	localctx = NewOperator_family_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, SQLParserRULE_operator_family_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4444)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserRENAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4423)
			p.Rename_to()
		}


	case SQLParserOWNER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4424)
			p.Owner_to()
		}


	case SQLParserSET:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4425)
			p.Set_schema()
		}


	case SQLParserADD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4426)
			p.Match(SQLParserADD)
		}
		{
			p.SetState(4427)
			p.Add_operator_to_family()
		}
		p.SetState(4432)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(4428)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(4429)
				p.Add_operator_to_family()
			}


			p.SetState(4434)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case SQLParserDROP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4435)
			p.Match(SQLParserDROP)
		}
		{
			p.SetState(4436)
			p.Drop_operator_from_family()
		}
		p.SetState(4441)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(4437)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(4438)
				p.Drop_operator_from_family()
			}


			p.SetState(4443)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAdd_operator_to_familyContext is an interface to support dynamic dispatch.
type IAdd_operator_to_familyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdd_operator_to_familyContext differentiates from other interfaces.
	IsAdd_operator_to_familyContext()
}

type Add_operator_to_familyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdd_operator_to_familyContext() *Add_operator_to_familyContext {
	var p = new(Add_operator_to_familyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_add_operator_to_family
	return p
}

func (*Add_operator_to_familyContext) IsAdd_operator_to_familyContext() {}

func NewAdd_operator_to_familyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Add_operator_to_familyContext {
	var p = new(Add_operator_to_familyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_add_operator_to_family

	return p
}

func (s *Add_operator_to_familyContext) GetParser() antlr.Parser { return s.parser }

func (s *Add_operator_to_familyContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Add_operator_to_familyContext) Unsigned_numeric_literal() IUnsigned_numeric_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnsigned_numeric_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnsigned_numeric_literalContext)
}

func (s *Add_operator_to_familyContext) Target_operator() ITarget_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITarget_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITarget_operatorContext)
}

func (s *Add_operator_to_familyContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Add_operator_to_familyContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Add_operator_to_familyContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SQLParserORDER, 0)
}

func (s *Add_operator_to_familyContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Add_operator_to_familyContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Add_operator_to_familyContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Add_operator_to_familyContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Add_operator_to_familyContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Add_operator_to_familyContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Add_operator_to_familyContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Add_operator_to_familyContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Add_operator_to_familyContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNONE)
}

func (s *Add_operator_to_familyContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNONE, i)
}

func (s *Add_operator_to_familyContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Add_operator_to_familyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_operator_to_familyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Add_operator_to_familyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAdd_operator_to_family(s)
	}
}

func (s *Add_operator_to_familyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAdd_operator_to_family(s)
	}
}




func (p *SQLParser) Add_operator_to_family() (localctx IAdd_operator_to_familyContext) {
	localctx = NewAdd_operator_to_familyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, SQLParserRULE_add_operator_to_family)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4476)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserOPERATOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4446)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(4447)
			p.Unsigned_numeric_literal()
		}
		{
			p.SetState(4448)
			p.Target_operator()
		}
		p.SetState(4455)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4449)
				p.Match(SQLParserFOR)
			}
			{
				p.SetState(4450)
				p.Match(SQLParserSEARCH)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(4451)
				p.Match(SQLParserFOR)
			}
			{
				p.SetState(4452)
				p.Match(SQLParserORDER)
			}
			{
				p.SetState(4453)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(4454)
				p.Schema_qualified_name()
			}


		}


	case SQLParserFUNCTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4457)
			p.Match(SQLParserFUNCTION)
		}
		{
			p.SetState(4458)
			p.Unsigned_numeric_literal()
		}
		p.SetState(4472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(4459)
				p.Match(SQLParserLEFT_PAREN)
			}
			p.SetState(4462)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 506, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4460)
					p.Data_type()
				}


			case 2:
				{
					p.SetState(4461)
					p.Match(SQLParserNONE)
				}

			}
			p.SetState(4469)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserCOMMA {
				{
					p.SetState(4464)
					p.Match(SQLParserCOMMA)
				}
				p.SetState(4467)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 507, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(4465)
						p.Data_type()
					}


				case 2:
					{
						p.SetState(4466)
						p.Match(SQLParserNONE)
					}

				}

			}
			{
				p.SetState(4471)
				p.Match(SQLParserRIGHT_PAREN)
			}

		}
		{
			p.SetState(4474)
			p.Function_call()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDrop_operator_from_familyContext is an interface to support dynamic dispatch.
type IDrop_operator_from_familyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_operator_from_familyContext differentiates from other interfaces.
	IsDrop_operator_from_familyContext()
}

type Drop_operator_from_familyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_operator_from_familyContext() *Drop_operator_from_familyContext {
	var p = new(Drop_operator_from_familyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_operator_from_family
	return p
}

func (*Drop_operator_from_familyContext) IsDrop_operator_from_familyContext() {}

func NewDrop_operator_from_familyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_operator_from_familyContext {
	var p = new(Drop_operator_from_familyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_operator_from_family

	return p
}

func (s *Drop_operator_from_familyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_operator_from_familyContext) Unsigned_numeric_literal() IUnsigned_numeric_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnsigned_numeric_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnsigned_numeric_literalContext)
}

func (s *Drop_operator_from_familyContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Drop_operator_from_familyContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Drop_operator_from_familyContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Drop_operator_from_familyContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Drop_operator_from_familyContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Drop_operator_from_familyContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Drop_operator_from_familyContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNONE)
}

func (s *Drop_operator_from_familyContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNONE, i)
}

func (s *Drop_operator_from_familyContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Drop_operator_from_familyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_operator_from_familyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_operator_from_familyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_operator_from_family(s)
	}
}

func (s *Drop_operator_from_familyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_operator_from_family(s)
	}
}




func (p *SQLParser) Drop_operator_from_family() (localctx IDrop_operator_from_familyContext) {
	localctx = NewDrop_operator_from_familyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, SQLParserRULE_drop_operator_from_family)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4478)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserFUNCTION || _la == SQLParserOPERATOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(4479)
		p.Unsigned_numeric_literal()
	}
	{
		p.SetState(4480)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(4483)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 511, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4481)
			p.Data_type()
		}


	case 2:
		{
			p.SetState(4482)
			p.Match(SQLParserNONE)
		}

	}
	p.SetState(4490)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCOMMA {
		{
			p.SetState(4485)
			p.Match(SQLParserCOMMA)
		}
		p.SetState(4488)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 512, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(4486)
				p.Data_type()
			}


		case 2:
			{
				p.SetState(4487)
				p.Match(SQLParserNONE)
			}

		}

	}
	{
		p.SetState(4492)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IDrop_operator_family_statementContext is an interface to support dynamic dispatch.
type IDrop_operator_family_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_operator_family_statementContext differentiates from other interfaces.
	IsDrop_operator_family_statementContext()
}

type Drop_operator_family_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_operator_family_statementContext() *Drop_operator_family_statementContext {
	var p = new(Drop_operator_family_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_operator_family_statement
	return p
}

func (*Drop_operator_family_statementContext) IsDrop_operator_family_statementContext() {}

func NewDrop_operator_family_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_operator_family_statementContext {
	var p = new(Drop_operator_family_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_operator_family_statement

	return p
}

func (s *Drop_operator_family_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_operator_family_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Drop_operator_family_statementContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(SQLParserFAMILY, 0)
}

func (s *Drop_operator_family_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Drop_operator_family_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Drop_operator_family_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_operator_family_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_operator_family_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_operator_family_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_operator_family_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_operator_family_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_operator_family_statement(s)
	}
}

func (s *Drop_operator_family_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_operator_family_statement(s)
	}
}




func (p *SQLParser) Drop_operator_family_statement() (localctx IDrop_operator_family_statementContext) {
	localctx = NewDrop_operator_family_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, SQLParserRULE_drop_operator_family_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4494)
		p.Match(SQLParserOPERATOR)
	}
	{
		p.SetState(4495)
		p.Match(SQLParserFAMILY)
	}
	p.SetState(4497)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 514, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4496)
			p.If_exists()
		}


	}
	{
		p.SetState(4499)
		p.Schema_qualified_name()
	}
	{
		p.SetState(4500)
		p.Match(SQLParserUSING)
	}
	{
		p.SetState(4501)
		p.Identifier()
	}
	p.SetState(4503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(4502)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// ICreate_operator_class_statementContext is an interface to support dynamic dispatch.
type ICreate_operator_class_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_operator_class_statementContext differentiates from other interfaces.
	IsCreate_operator_class_statementContext()
}

type Create_operator_class_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_operator_class_statementContext() *Create_operator_class_statementContext {
	var p = new(Create_operator_class_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_operator_class_statement
	return p
}

func (*Create_operator_class_statementContext) IsCreate_operator_class_statementContext() {}

func NewCreate_operator_class_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_operator_class_statementContext {
	var p = new(Create_operator_class_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_operator_class_statement

	return p
}

func (s *Create_operator_class_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_operator_class_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Create_operator_class_statementContext) CLASS() antlr.TerminalNode {
	return s.GetToken(SQLParserCLASS, 0)
}

func (s *Create_operator_class_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_operator_class_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_operator_class_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Create_operator_class_statementContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Create_operator_class_statementContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_operator_class_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Create_operator_class_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_operator_class_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Create_operator_class_statementContext) AllCreate_operator_class_option() []ICreate_operator_class_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_operator_class_optionContext)(nil)).Elem())
	var tst = make([]ICreate_operator_class_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_operator_class_optionContext)
		}
	}

	return tst
}

func (s *Create_operator_class_statementContext) Create_operator_class_option(i int) ICreate_operator_class_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_operator_class_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_operator_class_optionContext)
}

func (s *Create_operator_class_statementContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Create_operator_class_statementContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(SQLParserFAMILY, 0)
}

func (s *Create_operator_class_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_operator_class_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_operator_class_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_operator_class_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_operator_class_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_operator_class_statement(s)
	}
}

func (s *Create_operator_class_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_operator_class_statement(s)
	}
}




func (p *SQLParser) Create_operator_class_statement() (localctx ICreate_operator_class_statementContext) {
	localctx = NewCreate_operator_class_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, SQLParserRULE_create_operator_class_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4505)
		p.Match(SQLParserOPERATOR)
	}
	{
		p.SetState(4506)
		p.Match(SQLParserCLASS)
	}
	{
		p.SetState(4507)
		p.Schema_qualified_name()
	}
	p.SetState(4509)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserDEFAULT {
		{
			p.SetState(4508)
			p.Match(SQLParserDEFAULT)
		}

	}
	{
		p.SetState(4511)
		p.Match(SQLParserFOR)
	}
	{
		p.SetState(4512)
		p.Match(SQLParserTYPE)
	}
	{
		p.SetState(4513)
		p.Data_type()
	}
	{
		p.SetState(4514)
		p.Match(SQLParserUSING)
	}
	{
		p.SetState(4515)
		p.Identifier()
	}
	p.SetState(4518)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFAMILY {
		{
			p.SetState(4516)
			p.Match(SQLParserFAMILY)
		}
		{
			p.SetState(4517)
			p.Schema_qualified_name()
		}

	}
	{
		p.SetState(4520)
		p.Match(SQLParserAS)
	}
	{
		p.SetState(4521)
		p.Create_operator_class_option()
	}
	p.SetState(4526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(4522)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(4523)
			p.Create_operator_class_option()
		}


		p.SetState(4528)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ICreate_operator_class_optionContext is an interface to support dynamic dispatch.
type ICreate_operator_class_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IOperator_nameContext


	// SetName sets the name rule contexts.
	SetName(IOperator_nameContext)


	// IsCreate_operator_class_optionContext differentiates from other interfaces.
	IsCreate_operator_class_optionContext()
}

type Create_operator_class_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IOperator_nameContext 
}

func NewEmptyCreate_operator_class_optionContext() *Create_operator_class_optionContext {
	var p = new(Create_operator_class_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_operator_class_option
	return p
}

func (*Create_operator_class_optionContext) IsCreate_operator_class_optionContext() {}

func NewCreate_operator_class_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_operator_class_optionContext {
	var p = new(Create_operator_class_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_operator_class_option

	return p
}

func (s *Create_operator_class_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_operator_class_optionContext) GetName() IOperator_nameContext { return s.name }


func (s *Create_operator_class_optionContext) SetName(v IOperator_nameContext) { s.name = v }


func (s *Create_operator_class_optionContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Create_operator_class_optionContext) Unsigned_numeric_literal() IUnsigned_numeric_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnsigned_numeric_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnsigned_numeric_literalContext)
}

func (s *Create_operator_class_optionContext) Operator_name() IOperator_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_nameContext)
}

func (s *Create_operator_class_optionContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Create_operator_class_optionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Create_operator_class_optionContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Create_operator_class_optionContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Create_operator_class_optionContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Create_operator_class_optionContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SQLParserORDER, 0)
}

func (s *Create_operator_class_optionContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Create_operator_class_optionContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_operator_class_optionContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Create_operator_class_optionContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_operator_class_optionContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNONE)
}

func (s *Create_operator_class_optionContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNONE, i)
}

func (s *Create_operator_class_optionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Create_operator_class_optionContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Create_operator_class_optionContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTORAGE, 0)
}

func (s *Create_operator_class_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_operator_class_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_operator_class_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_operator_class_option(s)
	}
}

func (s *Create_operator_class_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_operator_class_option(s)
	}
}




func (p *SQLParser) Create_operator_class_option() (localctx ICreate_operator_class_optionContext) {
	localctx = NewCreate_operator_class_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, SQLParserRULE_create_operator_class_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4574)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserOPERATOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4529)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(4530)
			p.Unsigned_numeric_literal()
		}
		{
			p.SetState(4531)

			var _x = p.Operator_name()


			localctx.(*Create_operator_class_optionContext).name = _x
		}
		p.SetState(4543)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(4532)
				p.Match(SQLParserLEFT_PAREN)
			}
			p.SetState(4535)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 519, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4533)
					p.Data_type()
				}


			case 2:
				{
					p.SetState(4534)
					p.Match(SQLParserNONE)
				}

			}
			{
				p.SetState(4537)
				p.Match(SQLParserCOMMA)
			}
			p.SetState(4540)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 520, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4538)
					p.Data_type()
				}


			case 2:
				{
					p.SetState(4539)
					p.Match(SQLParserNONE)
				}

			}
			{
				p.SetState(4542)
				p.Match(SQLParserRIGHT_PAREN)
			}

		}
		p.SetState(4551)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 522, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4545)
				p.Match(SQLParserFOR)
			}
			{
				p.SetState(4546)
				p.Match(SQLParserSEARCH)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 522, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(4547)
				p.Match(SQLParserFOR)
			}
			{
				p.SetState(4548)
				p.Match(SQLParserORDER)
			}
			{
				p.SetState(4549)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(4550)
				p.Schema_qualified_name()
			}


		}


	case SQLParserFUNCTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4553)
			p.Match(SQLParserFUNCTION)
		}
		{
			p.SetState(4554)
			p.Unsigned_numeric_literal()
		}
		p.SetState(4568)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(4555)
				p.Match(SQLParserLEFT_PAREN)
			}
			p.SetState(4558)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 523, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4556)
					p.Data_type()
				}


			case 2:
				{
					p.SetState(4557)
					p.Match(SQLParserNONE)
				}

			}
			p.SetState(4565)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserCOMMA {
				{
					p.SetState(4560)
					p.Match(SQLParserCOMMA)
				}
				p.SetState(4563)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 524, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(4561)
						p.Data_type()
					}


				case 2:
					{
						p.SetState(4562)
						p.Match(SQLParserNONE)
					}

				}

			}
			{
				p.SetState(4567)
				p.Match(SQLParserRIGHT_PAREN)
			}

		}
		{
			p.SetState(4570)
			p.Function_call()
		}


	case SQLParserSTORAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4572)
			p.Match(SQLParserSTORAGE)
		}
		{
			p.SetState(4573)
			p.Data_type()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlter_operator_class_statementContext is an interface to support dynamic dispatch.
type IAlter_operator_class_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_operator_class_statementContext differentiates from other interfaces.
	IsAlter_operator_class_statementContext()
}

type Alter_operator_class_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_operator_class_statementContext() *Alter_operator_class_statementContext {
	var p = new(Alter_operator_class_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_operator_class_statement
	return p
}

func (*Alter_operator_class_statementContext) IsAlter_operator_class_statementContext() {}

func NewAlter_operator_class_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_operator_class_statementContext {
	var p = new(Alter_operator_class_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_operator_class_statement

	return p
}

func (s *Alter_operator_class_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_operator_class_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Alter_operator_class_statementContext) CLASS() antlr.TerminalNode {
	return s.GetToken(SQLParserCLASS, 0)
}

func (s *Alter_operator_class_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_operator_class_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Alter_operator_class_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_operator_class_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_operator_class_statementContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_operator_class_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_operator_class_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_operator_class_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_operator_class_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_operator_class_statement(s)
	}
}

func (s *Alter_operator_class_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_operator_class_statement(s)
	}
}




func (p *SQLParser) Alter_operator_class_statement() (localctx IAlter_operator_class_statementContext) {
	localctx = NewAlter_operator_class_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, SQLParserRULE_alter_operator_class_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4576)
		p.Match(SQLParserOPERATOR)
	}
	{
		p.SetState(4577)
		p.Match(SQLParserCLASS)
	}
	{
		p.SetState(4578)
		p.Schema_qualified_name()
	}
	{
		p.SetState(4579)
		p.Match(SQLParserUSING)
	}
	{
		p.SetState(4580)
		p.Identifier()
	}
	p.SetState(4584)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserRENAME:
		{
			p.SetState(4581)
			p.Rename_to()
		}


	case SQLParserOWNER:
		{
			p.SetState(4582)
			p.Owner_to()
		}


	case SQLParserSET:
		{
			p.SetState(4583)
			p.Set_schema()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IDrop_operator_class_statementContext is an interface to support dynamic dispatch.
type IDrop_operator_class_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_operator_class_statementContext differentiates from other interfaces.
	IsDrop_operator_class_statementContext()
}

type Drop_operator_class_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_operator_class_statementContext() *Drop_operator_class_statementContext {
	var p = new(Drop_operator_class_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_operator_class_statement
	return p
}

func (*Drop_operator_class_statementContext) IsDrop_operator_class_statementContext() {}

func NewDrop_operator_class_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_operator_class_statementContext {
	var p = new(Drop_operator_class_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_operator_class_statement

	return p
}

func (s *Drop_operator_class_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_operator_class_statementContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Drop_operator_class_statementContext) CLASS() antlr.TerminalNode {
	return s.GetToken(SQLParserCLASS, 0)
}

func (s *Drop_operator_class_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Drop_operator_class_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Drop_operator_class_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_operator_class_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_operator_class_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_operator_class_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_operator_class_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_operator_class_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_operator_class_statement(s)
	}
}

func (s *Drop_operator_class_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_operator_class_statement(s)
	}
}




func (p *SQLParser) Drop_operator_class_statement() (localctx IDrop_operator_class_statementContext) {
	localctx = NewDrop_operator_class_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, SQLParserRULE_drop_operator_class_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4586)
		p.Match(SQLParserOPERATOR)
	}
	{
		p.SetState(4587)
		p.Match(SQLParserCLASS)
	}
	p.SetState(4589)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 529, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4588)
			p.If_exists()
		}


	}
	{
		p.SetState(4591)
		p.Schema_qualified_name()
	}
	{
		p.SetState(4592)
		p.Match(SQLParserUSING)
	}
	{
		p.SetState(4593)
		p.Identifier()
	}
	p.SetState(4595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(4594)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// ICreate_conversion_statementContext is an interface to support dynamic dispatch.
type ICreate_conversion_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_conversion_statementContext differentiates from other interfaces.
	IsCreate_conversion_statementContext()
}

type Create_conversion_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_conversion_statementContext() *Create_conversion_statementContext {
	var p = new(Create_conversion_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_conversion_statement
	return p
}

func (*Create_conversion_statementContext) IsCreate_conversion_statementContext() {}

func NewCreate_conversion_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_conversion_statementContext {
	var p = new(Create_conversion_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_conversion_statement

	return p
}

func (s *Create_conversion_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_conversion_statementContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONVERSION, 0)
}

func (s *Create_conversion_statementContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Create_conversion_statementContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_conversion_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Create_conversion_statementContext) AllCharacter_String_Literal() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCharacter_String_Literal)
}

func (s *Create_conversion_statementContext) Character_String_Literal(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, i)
}

func (s *Create_conversion_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Create_conversion_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Create_conversion_statementContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Create_conversion_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_conversion_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_conversion_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_conversion_statement(s)
	}
}

func (s *Create_conversion_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_conversion_statement(s)
	}
}




func (p *SQLParser) Create_conversion_statement() (localctx ICreate_conversion_statementContext) {
	localctx = NewCreate_conversion_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, SQLParserRULE_create_conversion_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserDEFAULT {
		{
			p.SetState(4597)
			p.Match(SQLParserDEFAULT)
		}

	}
	{
		p.SetState(4600)
		p.Match(SQLParserCONVERSION)
	}
	{
		p.SetState(4601)
		p.Schema_qualified_name()
	}
	{
		p.SetState(4602)
		p.Match(SQLParserFOR)
	}
	{
		p.SetState(4603)
		p.Match(SQLParserCharacter_String_Literal)
	}
	{
		p.SetState(4604)
		p.Match(SQLParserTO)
	}
	{
		p.SetState(4605)
		p.Match(SQLParserCharacter_String_Literal)
	}
	{
		p.SetState(4606)
		p.Match(SQLParserFROM)
	}
	{
		p.SetState(4607)
		p.Schema_qualified_name()
	}



	return localctx
}


// IAlter_conversion_statementContext is an interface to support dynamic dispatch.
type IAlter_conversion_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_conversion_statementContext differentiates from other interfaces.
	IsAlter_conversion_statementContext()
}

type Alter_conversion_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_conversion_statementContext() *Alter_conversion_statementContext {
	var p = new(Alter_conversion_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_conversion_statement
	return p
}

func (*Alter_conversion_statementContext) IsAlter_conversion_statementContext() {}

func NewAlter_conversion_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_conversion_statementContext {
	var p = new(Alter_conversion_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_conversion_statement

	return p
}

func (s *Alter_conversion_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_conversion_statementContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONVERSION, 0)
}

func (s *Alter_conversion_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_conversion_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_conversion_statementContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_conversion_statementContext) Set_schema() ISet_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_schemaContext)
}

func (s *Alter_conversion_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_conversion_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_conversion_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_conversion_statement(s)
	}
}

func (s *Alter_conversion_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_conversion_statement(s)
	}
}




func (p *SQLParser) Alter_conversion_statement() (localctx IAlter_conversion_statementContext) {
	localctx = NewAlter_conversion_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, SQLParserRULE_alter_conversion_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4609)
		p.Match(SQLParserCONVERSION)
	}
	{
		p.SetState(4610)
		p.Schema_qualified_name()
	}
	p.SetState(4614)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserRENAME:
		{
			p.SetState(4611)
			p.Rename_to()
		}


	case SQLParserOWNER:
		{
			p.SetState(4612)
			p.Owner_to()
		}


	case SQLParserSET:
		{
			p.SetState(4613)
			p.Set_schema()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// ICreate_publication_statementContext is an interface to support dynamic dispatch.
type ICreate_publication_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_publication_statementContext differentiates from other interfaces.
	IsCreate_publication_statementContext()
}

type Create_publication_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_publication_statementContext() *Create_publication_statementContext {
	var p = new(Create_publication_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_publication_statement
	return p
}

func (*Create_publication_statementContext) IsCreate_publication_statementContext() {}

func NewCreate_publication_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_publication_statementContext {
	var p = new(Create_publication_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_publication_statement

	return p
}

func (s *Create_publication_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_publication_statementContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserPUBLICATION, 0)
}

func (s *Create_publication_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_publication_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Create_publication_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Create_publication_statementContext) AllOnly_table_multiply() []IOnly_table_multiplyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOnly_table_multiplyContext)(nil)).Elem())
	var tst = make([]IOnly_table_multiplyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOnly_table_multiplyContext)
		}
	}

	return tst
}

func (s *Create_publication_statementContext) Only_table_multiply(i int) IOnly_table_multiplyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOnly_table_multiplyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOnly_table_multiplyContext)
}

func (s *Create_publication_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Create_publication_statementContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLES, 0)
}

func (s *Create_publication_statementContext) With_storage_parameter() IWith_storage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_storage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_storage_parameterContext)
}

func (s *Create_publication_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Create_publication_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Create_publication_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_publication_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_publication_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_publication_statement(s)
	}
}

func (s *Create_publication_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_publication_statement(s)
	}
}




func (p *SQLParser) Create_publication_statement() (localctx ICreate_publication_statementContext) {
	localctx = NewCreate_publication_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, SQLParserRULE_create_publication_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4616)
		p.Match(SQLParserPUBLICATION)
	}
	{
		p.SetState(4617)
		p.Identifier()
	}
	p.SetState(4631)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 534, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4618)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(4619)
			p.Match(SQLParserTABLE)
		}
		{
			p.SetState(4620)
			p.Only_table_multiply()
		}
		p.SetState(4625)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(4621)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(4622)
				p.Only_table_multiply()
			}


			p.SetState(4627)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 534, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4628)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(4629)
			p.Match(SQLParserALL)
		}
		{
			p.SetState(4630)
			p.Match(SQLParserTABLES)
		}


	}
	p.SetState(4634)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(4633)
			p.With_storage_parameter()
		}

	}



	return localctx
}


// IAlter_publication_statementContext is an interface to support dynamic dispatch.
type IAlter_publication_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_publication_statementContext differentiates from other interfaces.
	IsAlter_publication_statementContext()
}

type Alter_publication_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_publication_statementContext() *Alter_publication_statementContext {
	var p = new(Alter_publication_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_publication_statement
	return p
}

func (*Alter_publication_statementContext) IsAlter_publication_statementContext() {}

func NewAlter_publication_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_publication_statementContext {
	var p = new(Alter_publication_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_publication_statement

	return p
}

func (s *Alter_publication_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_publication_statementContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserPUBLICATION, 0)
}

func (s *Alter_publication_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_publication_statementContext) Alter_publication_action() IAlter_publication_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_publication_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_publication_actionContext)
}

func (s *Alter_publication_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_publication_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_publication_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_publication_statement(s)
	}
}

func (s *Alter_publication_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_publication_statement(s)
	}
}




func (p *SQLParser) Alter_publication_statement() (localctx IAlter_publication_statementContext) {
	localctx = NewAlter_publication_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, SQLParserRULE_alter_publication_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4636)
		p.Match(SQLParserPUBLICATION)
	}
	{
		p.SetState(4637)
		p.Identifier()
	}
	{
		p.SetState(4638)
		p.Alter_publication_action()
	}



	return localctx
}


// IAlter_publication_actionContext is an interface to support dynamic dispatch.
type IAlter_publication_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_publication_actionContext differentiates from other interfaces.
	IsAlter_publication_actionContext()
}

type Alter_publication_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_publication_actionContext() *Alter_publication_actionContext {
	var p = new(Alter_publication_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_publication_action
	return p
}

func (*Alter_publication_actionContext) IsAlter_publication_actionContext() {}

func NewAlter_publication_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_publication_actionContext {
	var p = new(Alter_publication_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_publication_action

	return p
}

func (s *Alter_publication_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_publication_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_publication_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_publication_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Alter_publication_actionContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Alter_publication_actionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Alter_publication_actionContext) AllOnly_table_multiply() []IOnly_table_multiplyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOnly_table_multiplyContext)(nil)).Elem())
	var tst = make([]IOnly_table_multiplyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOnly_table_multiplyContext)
		}
	}

	return tst
}

func (s *Alter_publication_actionContext) Only_table_multiply(i int) IOnly_table_multiplyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOnly_table_multiplyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOnly_table_multiplyContext)
}

func (s *Alter_publication_actionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Alter_publication_actionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Alter_publication_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alter_publication_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alter_publication_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_publication_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_publication_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_publication_action(s)
	}
}

func (s *Alter_publication_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_publication_action(s)
	}
}




func (p *SQLParser) Alter_publication_action() (localctx IAlter_publication_actionContext) {
	localctx = NewAlter_publication_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, SQLParserRULE_alter_publication_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4654)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 537, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4640)
			p.Rename_to()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4641)
			p.Owner_to()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4642)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(4643)
			p.Storage_parameter()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4644)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserADD || _la == SQLParserDROP || _la == SQLParserSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(4645)
			p.Match(SQLParserTABLE)
		}
		{
			p.SetState(4646)
			p.Only_table_multiply()
		}
		p.SetState(4651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(4647)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(4648)
				p.Only_table_multiply()
			}


			p.SetState(4653)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// IOnly_table_multiplyContext is an interface to support dynamic dispatch.
type IOnly_table_multiplyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOnly_table_multiplyContext differentiates from other interfaces.
	IsOnly_table_multiplyContext()
}

type Only_table_multiplyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOnly_table_multiplyContext() *Only_table_multiplyContext {
	var p = new(Only_table_multiplyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_only_table_multiply
	return p
}

func (*Only_table_multiplyContext) IsOnly_table_multiplyContext() {}

func NewOnly_table_multiplyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Only_table_multiplyContext {
	var p = new(Only_table_multiplyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_only_table_multiply

	return p
}

func (s *Only_table_multiplyContext) GetParser() antlr.Parser { return s.parser }

func (s *Only_table_multiplyContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Only_table_multiplyContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *Only_table_multiplyContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Only_table_multiplyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Only_table_multiplyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Only_table_multiplyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOnly_table_multiply(s)
	}
}

func (s *Only_table_multiplyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOnly_table_multiply(s)
	}
}




func (p *SQLParser) Only_table_multiply() (localctx IOnly_table_multiplyContext) {
	localctx = NewOnly_table_multiplyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, SQLParserRULE_only_table_multiply)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4657)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserONLY {
		{
			p.SetState(4656)
			p.Match(SQLParserONLY)
		}

	}
	{
		p.SetState(4659)
		p.Schema_qualified_name()
	}
	p.SetState(4661)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserMULTIPLY {
		{
			p.SetState(4660)
			p.Match(SQLParserMULTIPLY)
		}

	}



	return localctx
}


// IAlter_trigger_statementContext is an interface to support dynamic dispatch.
type IAlter_trigger_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_trigger_statementContext differentiates from other interfaces.
	IsAlter_trigger_statementContext()
}

type Alter_trigger_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_trigger_statementContext() *Alter_trigger_statementContext {
	var p = new(Alter_trigger_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_trigger_statement
	return p
}

func (*Alter_trigger_statementContext) IsAlter_trigger_statementContext() {}

func NewAlter_trigger_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_trigger_statementContext {
	var p = new(Alter_trigger_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_trigger_statement

	return p
}

func (s *Alter_trigger_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_trigger_statementContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Alter_trigger_statementContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alter_trigger_statementContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_trigger_statementContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(SQLParserON)
}

func (s *Alter_trigger_statementContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserON, i)
}

func (s *Alter_trigger_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_trigger_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_trigger_statementContext) DEPENDS() antlr.TerminalNode {
	return s.GetToken(SQLParserDEPENDS, 0)
}

func (s *Alter_trigger_statementContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Alter_trigger_statementContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Alter_trigger_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_trigger_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_trigger_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_trigger_statement(s)
	}
}

func (s *Alter_trigger_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_trigger_statement(s)
	}
}




func (p *SQLParser) Alter_trigger_statement() (localctx IAlter_trigger_statementContext) {
	localctx = NewAlter_trigger_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, SQLParserRULE_alter_trigger_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4663)
		p.Match(SQLParserTRIGGER)
	}
	{
		p.SetState(4664)
		p.Identifier()
	}
	{
		p.SetState(4665)
		p.Match(SQLParserON)
	}
	{
		p.SetState(4666)
		p.Schema_qualified_name()
	}
	p.SetState(4675)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserRENAME:
		{
			p.SetState(4667)
			p.Rename_to()
		}


	case SQLParserDEPENDS, SQLParserNO:
		p.SetState(4669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(4668)
				p.Match(SQLParserNO)
			}

		}
		{
			p.SetState(4671)
			p.Match(SQLParserDEPENDS)
		}
		{
			p.SetState(4672)
			p.Match(SQLParserON)
		}
		{
			p.SetState(4673)
			p.Match(SQLParserEXTENSION)
		}
		{
			p.SetState(4674)
			p.Identifier()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IAlter_rule_statementContext is an interface to support dynamic dispatch.
type IAlter_rule_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_rule_statementContext differentiates from other interfaces.
	IsAlter_rule_statementContext()
}

type Alter_rule_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_rule_statementContext() *Alter_rule_statementContext {
	var p = new(Alter_rule_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_rule_statement
	return p
}

func (*Alter_rule_statementContext) IsAlter_rule_statementContext() {}

func NewAlter_rule_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_rule_statementContext {
	var p = new(Alter_rule_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_rule_statement

	return p
}

func (s *Alter_rule_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_rule_statementContext) RULE() antlr.TerminalNode {
	return s.GetToken(SQLParserRULE, 0)
}

func (s *Alter_rule_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_rule_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Alter_rule_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Alter_rule_statementContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_rule_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_rule_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_rule_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_rule_statement(s)
	}
}

func (s *Alter_rule_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_rule_statement(s)
	}
}




func (p *SQLParser) Alter_rule_statement() (localctx IAlter_rule_statementContext) {
	localctx = NewAlter_rule_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, SQLParserRULE_alter_rule_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4677)
		p.Match(SQLParserRULE)
	}
	{
		p.SetState(4678)
		p.Identifier()
	}
	{
		p.SetState(4679)
		p.Match(SQLParserON)
	}
	{
		p.SetState(4680)
		p.Schema_qualified_name()
	}
	{
		p.SetState(4681)
		p.Rename_to()
	}



	return localctx
}


// ICopy_statementContext is an interface to support dynamic dispatch.
type ICopy_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_statementContext differentiates from other interfaces.
	IsCopy_statementContext()
}

type Copy_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_statementContext() *Copy_statementContext {
	var p = new(Copy_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_copy_statement
	return p
}

func (*Copy_statementContext) IsCopy_statementContext() {}

func NewCopy_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_statementContext {
	var p = new(Copy_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_copy_statement

	return p
}

func (s *Copy_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_statementContext) Copy_to_statement() ICopy_to_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICopy_to_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICopy_to_statementContext)
}

func (s *Copy_statementContext) Copy_from_statement() ICopy_from_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICopy_from_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICopy_from_statementContext)
}

func (s *Copy_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCopy_statement(s)
	}
}

func (s *Copy_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCopy_statement(s)
	}
}




func (p *SQLParser) Copy_statement() (localctx ICopy_statementContext) {
	localctx = NewCopy_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, SQLParserRULE_copy_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4685)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 542, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4683)
			p.Copy_to_statement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4684)
			p.Copy_from_statement()
		}

	}


	return localctx
}


// ICopy_from_statementContext is an interface to support dynamic dispatch.
type ICopy_from_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_from_statementContext differentiates from other interfaces.
	IsCopy_from_statementContext()
}

type Copy_from_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_from_statementContext() *Copy_from_statementContext {
	var p = new(Copy_from_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_copy_from_statement
	return p
}

func (*Copy_from_statementContext) IsCopy_from_statementContext() {}

func NewCopy_from_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_from_statementContext {
	var p = new(Copy_from_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_copy_from_statement

	return p
}

func (s *Copy_from_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_from_statementContext) COPY() antlr.TerminalNode {
	return s.GetToken(SQLParserCOPY, 0)
}

func (s *Copy_from_statementContext) Table_cols() ITable_colsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_colsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_colsContext)
}

func (s *Copy_from_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Copy_from_statementContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Copy_from_statementContext) STDIN() antlr.TerminalNode {
	return s.GetToken(SQLParserSTDIN, 0)
}

func (s *Copy_from_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Copy_from_statementContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Copy_from_statementContext) PROGRAM() antlr.TerminalNode {
	return s.GetToken(SQLParserPROGRAM, 0)
}

func (s *Copy_from_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Copy_from_statementContext) Copy_option_list() ICopy_option_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICopy_option_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICopy_option_listContext)
}

func (s *Copy_from_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Copy_from_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Copy_from_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_from_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_from_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCopy_from_statement(s)
	}
}

func (s *Copy_from_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCopy_from_statement(s)
	}
}




func (p *SQLParser) Copy_from_statement() (localctx ICopy_from_statementContext) {
	localctx = NewCopy_from_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, SQLParserRULE_copy_from_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4687)
		p.Match(SQLParserCOPY)
	}
	{
		p.SetState(4688)
		p.Table_cols()
	}
	{
		p.SetState(4689)
		p.Match(SQLParserFROM)
	}
	p.SetState(4695)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserPROGRAM, SQLParserCharacter_String_Literal:
		p.SetState(4691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPROGRAM {
			{
				p.SetState(4690)
				p.Match(SQLParserPROGRAM)
			}

		}
		{
			p.SetState(4693)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case SQLParserSTDIN:
		{
			p.SetState(4694)
			p.Match(SQLParserSTDIN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4707)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 47)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 47))) & ((1 << (SQLParserCSV - 47)) | (1 << (SQLParserDELIMITER - 47)) | (1 << (SQLParserENCODING - 47)) | (1 << (SQLParserESCAPE - 47)))) != 0) || _la == SQLParserFORCE || _la == SQLParserHEADER || _la == SQLParserOIDS || _la == SQLParserQUOTE || _la == SQLParserTEXT || _la == SQLParserBINARY || _la == SQLParserFREEZE || _la == SQLParserNULL || _la == SQLParserWITH || ((((_la - 472)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 472))) & ((1 << (SQLParserFORCE_NOT_NULL - 472)) | (1 << (SQLParserFORCE_NULL - 472)) | (1 << (SQLParserFORCE_QUOTE - 472)) | (1 << (SQLParserFORMAT - 472)))) != 0) || _la == SQLParserLEFT_PAREN {
		p.SetState(4698)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4697)
				p.Match(SQLParserWITH)
			}

		}
		p.SetState(4705)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserLEFT_PAREN:
			{
				p.SetState(4700)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(4701)
				p.Copy_option_list()
			}
			{
				p.SetState(4702)
				p.Match(SQLParserRIGHT_PAREN)
			}


		case SQLParserCSV, SQLParserDELIMITER, SQLParserENCODING, SQLParserESCAPE, SQLParserFORCE, SQLParserHEADER, SQLParserOIDS, SQLParserQUOTE, SQLParserTEXT, SQLParserBINARY, SQLParserFREEZE, SQLParserNULL, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT:
			{
				p.SetState(4704)
				p.Copy_option_list()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(4711)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWHERE {
		{
			p.SetState(4709)
			p.Match(SQLParserWHERE)
		}
		{
			p.SetState(4710)
			p.vex(0)
		}

	}



	return localctx
}


// ICopy_to_statementContext is an interface to support dynamic dispatch.
type ICopy_to_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_to_statementContext differentiates from other interfaces.
	IsCopy_to_statementContext()
}

type Copy_to_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_to_statementContext() *Copy_to_statementContext {
	var p = new(Copy_to_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_copy_to_statement
	return p
}

func (*Copy_to_statementContext) IsCopy_to_statementContext() {}

func NewCopy_to_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_to_statementContext {
	var p = new(Copy_to_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_copy_to_statement

	return p
}

func (s *Copy_to_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_to_statementContext) COPY() antlr.TerminalNode {
	return s.GetToken(SQLParserCOPY, 0)
}

func (s *Copy_to_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Copy_to_statementContext) Table_cols() ITable_colsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_colsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_colsContext)
}

func (s *Copy_to_statementContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_PAREN)
}

func (s *Copy_to_statementContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, i)
}

func (s *Copy_to_statementContext) Data_statement() IData_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_statementContext)
}

func (s *Copy_to_statementContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_PAREN)
}

func (s *Copy_to_statementContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, i)
}

func (s *Copy_to_statementContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Copy_to_statementContext) STDOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserSTDOUT, 0)
}

func (s *Copy_to_statementContext) PROGRAM() antlr.TerminalNode {
	return s.GetToken(SQLParserPROGRAM, 0)
}

func (s *Copy_to_statementContext) Copy_option_list() ICopy_option_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICopy_option_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICopy_option_listContext)
}

func (s *Copy_to_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Copy_to_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_to_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_to_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCopy_to_statement(s)
	}
}

func (s *Copy_to_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCopy_to_statement(s)
	}
}




func (p *SQLParser) Copy_to_statement() (localctx ICopy_to_statementContext) {
	localctx = NewCopy_to_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, SQLParserRULE_copy_to_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4713)
		p.Match(SQLParserCOPY)
	}
	p.SetState(4719)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(4714)
			p.Table_cols()
		}


	case SQLParserLEFT_PAREN:
		{
			p.SetState(4715)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(4716)
			p.Data_statement()
		}
		{
			p.SetState(4717)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(4721)
		p.Match(SQLParserTO)
	}
	p.SetState(4727)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserPROGRAM, SQLParserCharacter_String_Literal:
		p.SetState(4723)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPROGRAM {
			{
				p.SetState(4722)
				p.Match(SQLParserPROGRAM)
			}

		}
		{
			p.SetState(4725)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case SQLParserSTDOUT:
		{
			p.SetState(4726)
			p.Match(SQLParserSTDOUT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(4739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 47)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 47))) & ((1 << (SQLParserCSV - 47)) | (1 << (SQLParserDELIMITER - 47)) | (1 << (SQLParserENCODING - 47)) | (1 << (SQLParserESCAPE - 47)))) != 0) || _la == SQLParserFORCE || _la == SQLParserHEADER || _la == SQLParserOIDS || _la == SQLParserQUOTE || _la == SQLParserTEXT || _la == SQLParserBINARY || _la == SQLParserFREEZE || _la == SQLParserNULL || _la == SQLParserWITH || ((((_la - 472)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 472))) & ((1 << (SQLParserFORCE_NOT_NULL - 472)) | (1 << (SQLParserFORCE_NULL - 472)) | (1 << (SQLParserFORCE_QUOTE - 472)) | (1 << (SQLParserFORMAT - 472)))) != 0) || _la == SQLParserLEFT_PAREN {
		p.SetState(4730)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4729)
				p.Match(SQLParserWITH)
			}

		}
		p.SetState(4737)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserLEFT_PAREN:
			{
				p.SetState(4732)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(4733)
				p.Copy_option_list()
			}
			{
				p.SetState(4734)
				p.Match(SQLParserRIGHT_PAREN)
			}


		case SQLParserCSV, SQLParserDELIMITER, SQLParserENCODING, SQLParserESCAPE, SQLParserFORCE, SQLParserHEADER, SQLParserOIDS, SQLParserQUOTE, SQLParserTEXT, SQLParserBINARY, SQLParserFREEZE, SQLParserNULL, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT:
			{
				p.SetState(4736)
				p.Copy_option_list()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}



	return localctx
}


// ICopy_option_listContext is an interface to support dynamic dispatch.
type ICopy_option_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_option_listContext differentiates from other interfaces.
	IsCopy_option_listContext()
}

type Copy_option_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_option_listContext() *Copy_option_listContext {
	var p = new(Copy_option_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_copy_option_list
	return p
}

func (*Copy_option_listContext) IsCopy_option_listContext() {}

func NewCopy_option_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_option_listContext {
	var p = new(Copy_option_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_copy_option_list

	return p
}

func (s *Copy_option_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_option_listContext) AllCopy_option() []ICopy_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICopy_optionContext)(nil)).Elem())
	var tst = make([]ICopy_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICopy_optionContext)
		}
	}

	return tst
}

func (s *Copy_option_listContext) Copy_option(i int) ICopy_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICopy_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICopy_optionContext)
}

func (s *Copy_option_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Copy_option_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Copy_option_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_option_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_option_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCopy_option_list(s)
	}
}

func (s *Copy_option_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCopy_option_list(s)
	}
}




func (p *SQLParser) Copy_option_list() (localctx ICopy_option_listContext) {
	localctx = NewCopy_option_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, SQLParserRULE_copy_option_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4741)
		p.Copy_option()
	}
	p.SetState(4748)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ((((_la - 47)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 47))) & ((1 << (SQLParserCSV - 47)) | (1 << (SQLParserDELIMITER - 47)) | (1 << (SQLParserENCODING - 47)) | (1 << (SQLParserESCAPE - 47)))) != 0) || _la == SQLParserFORCE || _la == SQLParserHEADER || _la == SQLParserOIDS || _la == SQLParserQUOTE || _la == SQLParserTEXT || _la == SQLParserBINARY || _la == SQLParserFREEZE || _la == SQLParserNULL || ((((_la - 472)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 472))) & ((1 << (SQLParserFORCE_NOT_NULL - 472)) | (1 << (SQLParserFORCE_NULL - 472)) | (1 << (SQLParserFORCE_QUOTE - 472)) | (1 << (SQLParserFORMAT - 472)))) != 0) || _la == SQLParserCOMMA {
		p.SetState(4743)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOMMA {
			{
				p.SetState(4742)
				p.Match(SQLParserCOMMA)
			}

		}
		{
			p.SetState(4745)
			p.Copy_option()
		}


		p.SetState(4750)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ICopy_optionContext is an interface to support dynamic dispatch.
type ICopy_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCopy_optionContext differentiates from other interfaces.
	IsCopy_optionContext()
}

type Copy_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_optionContext() *Copy_optionContext {
	var p = new(Copy_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_copy_option
	return p
}

func (*Copy_optionContext) IsCopy_optionContext() {}

func NewCopy_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_optionContext {
	var p = new(Copy_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_copy_option

	return p
}

func (s *Copy_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_optionContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Copy_optionContext) CSV() antlr.TerminalNode {
	return s.GetToken(SQLParserCSV, 0)
}

func (s *Copy_optionContext) BINARY() antlr.TerminalNode {
	return s.GetToken(SQLParserBINARY, 0)
}

func (s *Copy_optionContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SQLParserFORMAT, 0)
}

func (s *Copy_optionContext) OIDS() antlr.TerminalNode {
	return s.GetToken(SQLParserOIDS, 0)
}

func (s *Copy_optionContext) Truth_value() ITruth_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruth_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruth_valueContext)
}

func (s *Copy_optionContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(SQLParserFREEZE, 0)
}

func (s *Copy_optionContext) DELIMITER() antlr.TerminalNode {
	return s.GetToken(SQLParserDELIMITER, 0)
}

func (s *Copy_optionContext) Character_String_Literal() antlr.TerminalNode {
	return s.GetToken(SQLParserCharacter_String_Literal, 0)
}

func (s *Copy_optionContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Copy_optionContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Copy_optionContext) HEADER() antlr.TerminalNode {
	return s.GetToken(SQLParserHEADER, 0)
}

func (s *Copy_optionContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(SQLParserQUOTE, 0)
}

func (s *Copy_optionContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLParserESCAPE, 0)
}

func (s *Copy_optionContext) FORCE() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE, 0)
}

func (s *Copy_optionContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Copy_optionContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Copy_optionContext) FORCE_QUOTE() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE_QUOTE, 0)
}

func (s *Copy_optionContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Copy_optionContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Copy_optionContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Copy_optionContext) FORCE_NOT_NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE_NOT_NULL, 0)
}

func (s *Copy_optionContext) FORCE_NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE_NULL, 0)
}

func (s *Copy_optionContext) ENCODING() antlr.TerminalNode {
	return s.GetToken(SQLParserENCODING, 0)
}

func (s *Copy_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Copy_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCopy_option(s)
	}
}

func (s *Copy_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCopy_option(s)
	}
}




func (p *SQLParser) Copy_option() (localctx ICopy_optionContext) {
	localctx = NewCopy_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, SQLParserRULE_copy_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4811)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 565, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(4752)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFORMAT {
			{
				p.SetState(4751)
				p.Match(SQLParserFORMAT)
			}

		}
		{
			p.SetState(4754)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCSV || _la == SQLParserTEXT || _la == SQLParserBINARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4755)
			p.Match(SQLParserOIDS)
		}
		p.SetState(4757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFALSE || _la == SQLParserON || _la == SQLParserTRUE {
			{
				p.SetState(4756)
				p.Truth_value()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4759)
			p.Match(SQLParserFREEZE)
		}
		p.SetState(4761)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFALSE || _la == SQLParserON || _la == SQLParserTRUE {
			{
				p.SetState(4760)
				p.Truth_value()
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4763)
			p.Match(SQLParserDELIMITER)
		}
		p.SetState(4765)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAS {
			{
				p.SetState(4764)
				p.Match(SQLParserAS)
			}

		}
		{
			p.SetState(4767)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4768)
			p.Match(SQLParserNULL)
		}
		p.SetState(4770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAS {
			{
				p.SetState(4769)
				p.Match(SQLParserAS)
			}

		}
		{
			p.SetState(4772)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4773)
			p.Match(SQLParserHEADER)
		}
		p.SetState(4775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFALSE || _la == SQLParserON || _la == SQLParserTRUE {
			{
				p.SetState(4774)
				p.Truth_value()
			}

		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4777)
			p.Match(SQLParserQUOTE)
		}
		{
			p.SetState(4778)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4779)
			p.Match(SQLParserESCAPE)
		}
		{
			p.SetState(4780)
			p.Match(SQLParserCharacter_String_Literal)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4781)
			p.Match(SQLParserFORCE)
		}
		{
			p.SetState(4782)
			p.Match(SQLParserQUOTE)
		}
		p.SetState(4785)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserMULTIPLY:
			{
				p.SetState(4783)
				p.Match(SQLParserMULTIPLY)
			}


		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(4784)
				p.Identifier_list()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4787)
			p.Match(SQLParserFORCE_QUOTE)
		}
		p.SetState(4793)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserMULTIPLY:
			{
				p.SetState(4788)
				p.Match(SQLParserMULTIPLY)
			}


		case SQLParserLEFT_PAREN:
			{
				p.SetState(4789)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(4790)
				p.Identifier_list()
			}
			{
				p.SetState(4791)
				p.Match(SQLParserRIGHT_PAREN)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4795)
			p.Match(SQLParserFORCE)
		}
		{
			p.SetState(4796)
			p.Match(SQLParserNOT)
		}
		{
			p.SetState(4797)
			p.Match(SQLParserNULL)
		}
		{
			p.SetState(4798)
			p.Identifier_list()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4799)
			p.Match(SQLParserFORCE_NOT_NULL)
		}
		{
			p.SetState(4800)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(4801)
			p.Identifier_list()
		}
		{
			p.SetState(4802)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4804)
			p.Match(SQLParserFORCE_NULL)
		}
		{
			p.SetState(4805)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(4806)
			p.Identifier_list()
		}
		{
			p.SetState(4807)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4809)
			p.Match(SQLParserENCODING)
		}
		{
			p.SetState(4810)
			p.Match(SQLParserCharacter_String_Literal)
		}

	}


	return localctx
}


// ICreate_view_statementContext is an interface to support dynamic dispatch.
type ICreate_view_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext

	// GetColumn_names returns the column_names rule contexts.
	GetColumn_names() IView_columnsContext

	// GetV_query returns the v_query rule contexts.
	GetV_query() ISelect_stmtContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)

	// SetColumn_names sets the column_names rule contexts.
	SetColumn_names(IView_columnsContext)

	// SetV_query sets the v_query rule contexts.
	SetV_query(ISelect_stmtContext)


	// IsCreate_view_statementContext differentiates from other interfaces.
	IsCreate_view_statementContext()
}

type Create_view_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
	column_names IView_columnsContext 
	v_query ISelect_stmtContext 
}

func NewEmptyCreate_view_statementContext() *Create_view_statementContext {
	var p = new(Create_view_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_view_statement
	return p
}

func (*Create_view_statementContext) IsCreate_view_statementContext() {}

func NewCreate_view_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_view_statementContext {
	var p = new(Create_view_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_view_statement

	return p
}

func (s *Create_view_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_view_statementContext) GetName() ISchema_qualified_nameContext { return s.name }

func (s *Create_view_statementContext) GetColumn_names() IView_columnsContext { return s.column_names }

func (s *Create_view_statementContext) GetV_query() ISelect_stmtContext { return s.v_query }


func (s *Create_view_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }

func (s *Create_view_statementContext) SetColumn_names(v IView_columnsContext) { s.column_names = v }

func (s *Create_view_statementContext) SetV_query(v ISelect_stmtContext) { s.v_query = v }


func (s *Create_view_statementContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Create_view_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Create_view_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_view_statementContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_view_statementContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLParserOR, 0)
}

func (s *Create_view_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLACE, 0)
}

func (s *Create_view_statementContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRECURSIVE, 0)
}

func (s *Create_view_statementContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Create_view_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_view_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Create_view_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_view_statementContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(SQLParserWITH)
}

func (s *Create_view_statementContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, i)
}

func (s *Create_view_statementContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *Create_view_statementContext) Table_space() ITable_spaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_spaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_spaceContext)
}

func (s *Create_view_statementContext) With_check_option() IWith_check_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_check_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_check_optionContext)
}

func (s *Create_view_statementContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Create_view_statementContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMP, 0)
}

func (s *Create_view_statementContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPORARY, 0)
}

func (s *Create_view_statementContext) View_columns() IView_columnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IView_columnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IView_columnsContext)
}

func (s *Create_view_statementContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Create_view_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_view_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_view_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_view_statement(s)
	}
}

func (s *Create_view_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_view_statement(s)
	}
}




func (p *SQLParser) Create_view_statement() (localctx ICreate_view_statementContext) {
	localctx = NewCreate_view_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, SQLParserRULE_create_view_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4815)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOR {
		{
			p.SetState(4813)
			p.Match(SQLParserOR)
		}
		{
			p.SetState(4814)
			p.Match(SQLParserREPLACE)
		}

	}
	p.SetState(4818)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTEMP || _la == SQLParserTEMPORARY {
		{
			p.SetState(4817)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserTEMP || _la == SQLParserTEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(4821)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserRECURSIVE {
		{
			p.SetState(4820)
			p.Match(SQLParserRECURSIVE)
		}

	}
	p.SetState(4824)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserMATERIALIZED {
		{
			p.SetState(4823)
			p.Match(SQLParserMATERIALIZED)
		}

	}
	{
		p.SetState(4826)
		p.Match(SQLParserVIEW)
	}
	p.SetState(4828)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 570, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4827)
			p.If_not_exists()
		}


	}
	{
		p.SetState(4830)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_view_statementContext).name = _x
	}
	p.SetState(4832)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(4831)

			var _x = p.View_columns()


			localctx.(*Create_view_statementContext).column_names = _x
		}

	}
	p.SetState(4836)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUSING {
		{
			p.SetState(4834)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(4835)
			p.Identifier()
		}

	}
	p.SetState(4840)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(4838)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(4839)
			p.Storage_parameter()
		}

	}
	p.SetState(4843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTABLESPACE {
		{
			p.SetState(4842)
			p.Table_space()
		}

	}
	{
		p.SetState(4845)
		p.Match(SQLParserAS)
	}
	{
		p.SetState(4846)

		var _x = p.Select_stmt()


		localctx.(*Create_view_statementContext).v_query = _x
	}
	p.SetState(4848)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 575, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4847)
			p.With_check_option()
		}


	}
	p.SetState(4855)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(4850)
			p.Match(SQLParserWITH)
		}
		p.SetState(4852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(4851)
				p.Match(SQLParserNO)
			}

		}
		{
			p.SetState(4854)
			p.Match(SQLParserDATA)
		}

	}



	return localctx
}


// IIf_existsContext is an interface to support dynamic dispatch.
type IIf_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_existsContext differentiates from other interfaces.
	IsIf_existsContext()
}

type If_existsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_existsContext() *If_existsContext {
	var p = new(If_existsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_if_exists
	return p
}

func (*If_existsContext) IsIf_existsContext() {}

func NewIf_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_existsContext {
	var p = new(If_existsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_if_exists

	return p
}

func (s *If_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *If_existsContext) IF() antlr.TerminalNode {
	return s.GetToken(SQLParserIF, 0)
}

func (s *If_existsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLParserEXISTS, 0)
}

func (s *If_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIf_exists(s)
	}
}

func (s *If_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIf_exists(s)
	}
}




func (p *SQLParser) If_exists() (localctx IIf_existsContext) {
	localctx = NewIf_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, SQLParserRULE_if_exists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4857)
		p.Match(SQLParserIF)
	}
	{
		p.SetState(4858)
		p.Match(SQLParserEXISTS)
	}



	return localctx
}


// IIf_not_existsContext is an interface to support dynamic dispatch.
type IIf_not_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_not_existsContext differentiates from other interfaces.
	IsIf_not_existsContext()
}

type If_not_existsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_not_existsContext() *If_not_existsContext {
	var p = new(If_not_existsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_if_not_exists
	return p
}

func (*If_not_existsContext) IsIf_not_existsContext() {}

func NewIf_not_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_not_existsContext {
	var p = new(If_not_existsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_if_not_exists

	return p
}

func (s *If_not_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *If_not_existsContext) IF() antlr.TerminalNode {
	return s.GetToken(SQLParserIF, 0)
}

func (s *If_not_existsContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *If_not_existsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLParserEXISTS, 0)
}

func (s *If_not_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_not_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_not_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIf_not_exists(s)
	}
}

func (s *If_not_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIf_not_exists(s)
	}
}




func (p *SQLParser) If_not_exists() (localctx IIf_not_existsContext) {
	localctx = NewIf_not_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, SQLParserRULE_if_not_exists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4860)
		p.Match(SQLParserIF)
	}
	{
		p.SetState(4861)
		p.Match(SQLParserNOT)
	}
	{
		p.SetState(4862)
		p.Match(SQLParserEXISTS)
	}



	return localctx
}


// IView_columnsContext is an interface to support dynamic dispatch.
type IView_columnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsView_columnsContext differentiates from other interfaces.
	IsView_columnsContext()
}

type View_columnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_columnsContext() *View_columnsContext {
	var p = new(View_columnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_view_columns
	return p
}

func (*View_columnsContext) IsView_columnsContext() {}

func NewView_columnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_columnsContext {
	var p = new(View_columnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_view_columns

	return p
}

func (s *View_columnsContext) GetParser() antlr.Parser { return s.parser }

func (s *View_columnsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *View_columnsContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *View_columnsContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *View_columnsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *View_columnsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *View_columnsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *View_columnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_columnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *View_columnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterView_columns(s)
	}
}

func (s *View_columnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitView_columns(s)
	}
}




func (p *SQLParser) View_columns() (localctx IView_columnsContext) {
	localctx = NewView_columnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, SQLParserRULE_view_columns)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4864)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(4865)
		p.Identifier()
	}
	p.SetState(4870)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(4866)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(4867)
			p.Identifier()
		}


		p.SetState(4872)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4873)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IWith_check_optionContext is an interface to support dynamic dispatch.
type IWith_check_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_check_optionContext differentiates from other interfaces.
	IsWith_check_optionContext()
}

type With_check_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_check_optionContext() *With_check_optionContext {
	var p = new(With_check_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_with_check_option
	return p
}

func (*With_check_optionContext) IsWith_check_optionContext() {}

func NewWith_check_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_check_optionContext {
	var p = new(With_check_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_with_check_option

	return p
}

func (s *With_check_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *With_check_optionContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *With_check_optionContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SQLParserCHECK, 0)
}

func (s *With_check_optionContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTION, 0)
}

func (s *With_check_optionContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(SQLParserCASCADED, 0)
}

func (s *With_check_optionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCAL, 0)
}

func (s *With_check_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_check_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_check_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterWith_check_option(s)
	}
}

func (s *With_check_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitWith_check_option(s)
	}
}




func (p *SQLParser) With_check_option() (localctx IWith_check_optionContext) {
	localctx = NewWith_check_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, SQLParserRULE_with_check_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4875)
		p.Match(SQLParserWITH)
	}
	p.SetState(4877)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADED || _la == SQLParserLOCAL {
		{
			p.SetState(4876)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCASCADED || _la == SQLParserLOCAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(4879)
		p.Match(SQLParserCHECK)
	}
	{
		p.SetState(4880)
		p.Match(SQLParserOPTION)
	}



	return localctx
}


// ICreate_database_statementContext is an interface to support dynamic dispatch.
type ICreate_database_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_database_statementContext differentiates from other interfaces.
	IsCreate_database_statementContext()
}

type Create_database_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_statementContext() *Create_database_statementContext {
	var p = new(Create_database_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_database_statement
	return p
}

func (*Create_database_statementContext) IsCreate_database_statementContext() {}

func NewCreate_database_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_statementContext {
	var p = new(Create_database_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_database_statement

	return p
}

func (s *Create_database_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_statementContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Create_database_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_database_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Create_database_statementContext) AllCreate_database_option() []ICreate_database_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem())
	var tst = make([]ICreate_database_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_database_optionContext)
		}
	}

	return tst
}

func (s *Create_database_statementContext) Create_database_option(i int) ICreate_database_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_database_optionContext)
}

func (s *Create_database_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_database_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_database_statement(s)
	}
}

func (s *Create_database_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_database_statement(s)
	}
}




func (p *SQLParser) Create_database_statement() (localctx ICreate_database_statementContext) {
	localctx = NewCreate_database_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, SQLParserRULE_create_database_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4882)
		p.Match(SQLParserDATABASE)
	}
	{
		p.SetState(4883)
		p.Identifier()
	}
	p.SetState(4892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCONNECTION || _la == SQLParserENCODING || _la == SQLParserOWNER || _la == SQLParserTABLESPACE || _la == SQLParserTEMPLATE || _la == SQLParserWITH || _la == SQLParserALLOW_CONNECTIONS || ((((_la - 485)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 485))) & ((1 << (SQLParserIS_TEMPLATE - 485)) | (1 << (SQLParserLC_COLLATE - 485)) | (1 << (SQLParserLC_CTYPE - 485)) | (1 << (SQLParserLOCALE - 485)))) != 0) {
		p.SetState(4885)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4884)
				p.Match(SQLParserWITH)
			}

		}
		p.SetState(4888)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserCONNECTION || _la == SQLParserENCODING || _la == SQLParserOWNER || _la == SQLParserTABLESPACE || _la == SQLParserTEMPLATE || _la == SQLParserALLOW_CONNECTIONS || ((((_la - 485)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 485))) & ((1 << (SQLParserIS_TEMPLATE - 485)) | (1 << (SQLParserLC_COLLATE - 485)) | (1 << (SQLParserLC_CTYPE - 485)) | (1 << (SQLParserLOCALE - 485)))) != 0) {
			{
				p.SetState(4887)
				p.Create_database_option()
			}


			p.SetState(4890)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}



	return localctx
}


// ICreate_database_optionContext is an interface to support dynamic dispatch.
type ICreate_database_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_database_optionContext differentiates from other interfaces.
	IsCreate_database_optionContext()
}

type Create_database_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_optionContext() *Create_database_optionContext {
	var p = new(Create_database_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_database_option
	return p
}

func (*Create_database_optionContext) IsCreate_database_optionContext() {}

func NewCreate_database_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_optionContext {
	var p = new(Create_database_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_database_option

	return p
}

func (s *Create_database_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_optionContext) OWNER() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNER, 0)
}

func (s *Create_database_optionContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPLATE, 0)
}

func (s *Create_database_optionContext) ENCODING() antlr.TerminalNode {
	return s.GetToken(SQLParserENCODING, 0)
}

func (s *Create_database_optionContext) LOCALE() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCALE, 0)
}

func (s *Create_database_optionContext) LC_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserLC_COLLATE, 0)
}

func (s *Create_database_optionContext) LC_CTYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserLC_CTYPE, 0)
}

func (s *Create_database_optionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Create_database_optionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Create_database_optionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_database_optionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Create_database_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Create_database_optionContext) Alter_database_option() IAlter_database_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_database_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_database_optionContext)
}

func (s *Create_database_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_database_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_database_option(s)
	}
}

func (s *Create_database_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_database_option(s)
	}
}




func (p *SQLParser) Create_database_option() (localctx ICreate_database_optionContext) {
	localctx = NewCreate_database_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, SQLParserRULE_create_database_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4904)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserENCODING, SQLParserOWNER, SQLParserTABLESPACE, SQLParserTEMPLATE, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLOCALE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4894)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserENCODING || _la == SQLParserOWNER || _la == SQLParserTABLESPACE || _la == SQLParserTEMPLATE || ((((_la - 487)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 487))) & ((1 << (SQLParserLC_COLLATE - 487)) | (1 << (SQLParserLC_CTYPE - 487)) | (1 << (SQLParserLOCALE - 487)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(4896)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserEQUAL {
			{
				p.SetState(4895)
				p.Match(SQLParserEQUAL)
			}

		}
		p.SetState(4901)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(4898)
				p.Character_string()
			}


		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(4899)
				p.Identifier()
			}


		case SQLParserDEFAULT:
			{
				p.SetState(4900)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserCONNECTION, SQLParserALLOW_CONNECTIONS, SQLParserIS_TEMPLATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4903)
			p.Alter_database_option()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAlter_database_statementContext is an interface to support dynamic dispatch.
type IAlter_database_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_database_statementContext differentiates from other interfaces.
	IsAlter_database_statementContext()
}

type Alter_database_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_database_statementContext() *Alter_database_statementContext {
	var p = new(Alter_database_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_database_statement
	return p
}

func (*Alter_database_statementContext) IsAlter_database_statementContext() {}

func NewAlter_database_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_database_statementContext {
	var p = new(Alter_database_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_database_statement

	return p
}

func (s *Alter_database_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_database_statementContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Alter_database_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_database_statementContext) Alter_database_action() IAlter_database_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_database_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_database_actionContext)
}

func (s *Alter_database_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_database_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_database_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_database_statement(s)
	}
}

func (s *Alter_database_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_database_statement(s)
	}
}




func (p *SQLParser) Alter_database_statement() (localctx IAlter_database_statementContext) {
	localctx = NewAlter_database_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, SQLParserRULE_alter_database_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4906)
		p.Match(SQLParserDATABASE)
	}
	{
		p.SetState(4907)
		p.Identifier()
	}
	p.SetState(4909)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCONNECTION || _la == SQLParserOWNER || ((((_la - 206)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 206))) & ((1 << (SQLParserRENAME - 206)) | (1 << (SQLParserRESET - 206)) | (1 << (SQLParserSET - 206)))) != 0) || _la == SQLParserTABLESPACE || _la == SQLParserWITH || _la == SQLParserALLOW_CONNECTIONS || _la == SQLParserIS_TEMPLATE {
		{
			p.SetState(4908)
			p.Alter_database_action()
		}

	}



	return localctx
}


// IAlter_database_actionContext is an interface to support dynamic dispatch.
type IAlter_database_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_database_actionContext differentiates from other interfaces.
	IsAlter_database_actionContext()
}

type Alter_database_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_database_actionContext() *Alter_database_actionContext {
	var p = new(Alter_database_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_database_action
	return p
}

func (*Alter_database_actionContext) IsAlter_database_actionContext() {}

func NewAlter_database_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_database_actionContext {
	var p = new(Alter_database_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_database_action

	return p
}

func (s *Alter_database_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_database_actionContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Alter_database_actionContext) AllAlter_database_option() []IAlter_database_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlter_database_optionContext)(nil)).Elem())
	var tst = make([]IAlter_database_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlter_database_optionContext)
		}
	}

	return tst
}

func (s *Alter_database_actionContext) Alter_database_option(i int) IAlter_database_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_database_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlter_database_optionContext)
}

func (s *Alter_database_actionContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Alter_database_actionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Alter_database_actionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_database_actionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Alter_database_actionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Alter_database_actionContext) Rename_to() IRename_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_toContext)
}

func (s *Alter_database_actionContext) Owner_to() IOwner_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_toContext)
}

func (s *Alter_database_actionContext) Set_tablespace() ISet_tablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_tablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_tablespaceContext)
}

func (s *Alter_database_actionContext) Set_reset_parameter() ISet_reset_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_reset_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_reset_parameterContext)
}

func (s *Alter_database_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_database_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_database_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_database_action(s)
	}
}

func (s *Alter_database_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_database_action(s)
	}
}




func (p *SQLParser) Alter_database_action() (localctx IAlter_database_actionContext) {
	localctx = NewAlter_database_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, SQLParserRULE_alter_database_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4935)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 592, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(4912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4911)
				p.Match(SQLParserWITH)
			}

		}
		p.SetState(4915)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserCONNECTION || _la == SQLParserALLOW_CONNECTIONS || _la == SQLParserIS_TEMPLATE {
			{
				p.SetState(4914)
				p.Alter_database_option()
			}


			p.SetState(4917)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(4920)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(4919)
				p.Match(SQLParserWITH)
			}

		}
		{
			p.SetState(4922)
			p.Match(SQLParserTABLESPACE)
		}
		p.SetState(4924)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserEQUAL {
			{
				p.SetState(4923)
				p.Match(SQLParserEQUAL)
			}

		}
		p.SetState(4929)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(4926)
				p.Character_string()
			}


		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(4927)
				p.Identifier()
			}


		case SQLParserDEFAULT:
			{
				p.SetState(4928)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4931)
			p.Rename_to()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4932)
			p.Owner_to()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4933)
			p.Set_tablespace()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4934)
			p.Set_reset_parameter()
		}

	}


	return localctx
}


// IAlter_database_optionContext is an interface to support dynamic dispatch.
type IAlter_database_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_database_optionContext differentiates from other interfaces.
	IsAlter_database_optionContext()
}

type Alter_database_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_database_optionContext() *Alter_database_optionContext {
	var p = new(Alter_database_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alter_database_option
	return p
}

func (*Alter_database_optionContext) IsAlter_database_optionContext() {}

func NewAlter_database_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_database_optionContext {
	var p = new(Alter_database_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alter_database_option

	return p
}

func (s *Alter_database_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_database_optionContext) ALLOW_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserALLOW_CONNECTIONS, 0)
}

func (s *Alter_database_optionContext) IS_TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserIS_TEMPLATE, 0)
}

func (s *Alter_database_optionContext) Boolean_value() IBoolean_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_valueContext)
}

func (s *Alter_database_optionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Alter_database_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Alter_database_optionContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONNECTION, 0)
}

func (s *Alter_database_optionContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserLIMIT, 0)
}

func (s *Alter_database_optionContext) Signed_number_literal() ISigned_number_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISigned_number_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISigned_number_literalContext)
}

func (s *Alter_database_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_database_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alter_database_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlter_database_option(s)
	}
}

func (s *Alter_database_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlter_database_option(s)
	}
}




func (p *SQLParser) Alter_database_option() (localctx IAlter_database_optionContext) {
	localctx = NewAlter_database_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, SQLParserRULE_alter_database_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4954)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserALLOW_CONNECTIONS, SQLParserIS_TEMPLATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4937)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserALLOW_CONNECTIONS || _la == SQLParserIS_TEMPLATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(4939)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserEQUAL {
			{
				p.SetState(4938)
				p.Match(SQLParserEQUAL)
			}

		}
		p.SetState(4943)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserOFF, SQLParserFALSE, SQLParserON, SQLParserTRUE, SQLParserNUMBER_LITERAL, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(4941)
				p.Boolean_value()
			}


		case SQLParserDEFAULT:
			{
				p.SetState(4942)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserCONNECTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4945)
			p.Match(SQLParserCONNECTION)
		}
		{
			p.SetState(4946)
			p.Match(SQLParserLIMIT)
		}
		p.SetState(4948)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserEQUAL {
			{
				p.SetState(4947)
				p.Match(SQLParserEQUAL)
			}

		}
		p.SetState(4952)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserPLUS, SQLParserMINUS, SQLParserNUMBER_LITERAL:
			{
				p.SetState(4950)
				p.Signed_number_literal()
			}


		case SQLParserDEFAULT:
			{
				p.SetState(4951)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICreate_table_statementContext is an interface to support dynamic dispatch.
type ICreate_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsCreate_table_statementContext differentiates from other interfaces.
	IsCreate_table_statementContext()
}

type Create_table_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyCreate_table_statementContext() *Create_table_statementContext {
	var p = new(Create_table_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_table_statement
	return p
}

func (*Create_table_statementContext) IsCreate_table_statementContext() {}

func NewCreate_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_statementContext {
	var p = new(Create_table_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_table_statement

	return p
}

func (s *Create_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Create_table_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Create_table_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Create_table_statementContext) Define_table() IDefine_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_tableContext)
}

func (s *Create_table_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_table_statementContext) UNLOGGED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNLOGGED, 0)
}

func (s *Create_table_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_table_statementContext) Partition_by() IPartition_byContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_byContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartition_byContext)
}

func (s *Create_table_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Create_table_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_table_statementContext) Storage_parameter_oid() IStorage_parameter_oidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameter_oidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameter_oidContext)
}

func (s *Create_table_statementContext) On_commit() IOn_commitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_commitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_commitContext)
}

func (s *Create_table_statementContext) Table_space() ITable_spaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_spaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_spaceContext)
}

func (s *Create_table_statementContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPORARY, 0)
}

func (s *Create_table_statementContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMP, 0)
}

func (s *Create_table_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(SQLParserGLOBAL, 0)
}

func (s *Create_table_statementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCAL, 0)
}

func (s *Create_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_table_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_table_statement(s)
	}
}

func (s *Create_table_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_table_statement(s)
	}
}




func (p *SQLParser) Create_table_statement() (localctx ICreate_table_statementContext) {
	localctx = NewCreate_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, SQLParserRULE_create_table_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4961)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserGLOBAL, SQLParserLOCAL, SQLParserTEMP, SQLParserTEMPORARY:
		p.SetState(4957)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserGLOBAL || _la == SQLParserLOCAL {
			{
				p.SetState(4956)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserGLOBAL || _la == SQLParserLOCAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4959)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserTEMP || _la == SQLParserTEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserUNLOGGED:
		{
			p.SetState(4960)
			p.Match(SQLParserUNLOGGED)
		}


	case SQLParserTABLE:



	default:
	}
	{
		p.SetState(4963)
		p.Match(SQLParserTABLE)
	}
	p.SetState(4965)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 600, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4964)
			p.If_not_exists()
		}


	}
	{
		p.SetState(4967)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_table_statementContext).name = _x
	}
	{
		p.SetState(4968)
		p.Define_table()
	}
	p.SetState(4970)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserPARTITION {
		{
			p.SetState(4969)
			p.Partition_by()
		}

	}
	p.SetState(4974)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUSING {
		{
			p.SetState(4972)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(4973)
			p.Identifier()
		}

	}
	p.SetState(4977)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITHOUT || _la == SQLParserWITH {
		{
			p.SetState(4976)
			p.Storage_parameter_oid()
		}

	}
	p.SetState(4980)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserON {
		{
			p.SetState(4979)
			p.On_commit()
		}

	}
	p.SetState(4983)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTABLESPACE {
		{
			p.SetState(4982)
			p.Table_space()
		}

	}



	return localctx
}


// ICreate_table_as_statementContext is an interface to support dynamic dispatch.
type ICreate_table_as_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsCreate_table_as_statementContext differentiates from other interfaces.
	IsCreate_table_as_statementContext()
}

type Create_table_as_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyCreate_table_as_statementContext() *Create_table_as_statementContext {
	var p = new(Create_table_as_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_table_as_statement
	return p
}

func (*Create_table_as_statementContext) IsCreate_table_as_statementContext() {}

func NewCreate_table_as_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_as_statementContext {
	var p = new(Create_table_as_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_table_as_statement

	return p
}

func (s *Create_table_as_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_as_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Create_table_as_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Create_table_as_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Create_table_as_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Create_table_as_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_table_as_statementContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_table_as_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXECUTE, 0)
}

func (s *Create_table_as_statementContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Create_table_as_statementContext) UNLOGGED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNLOGGED, 0)
}

func (s *Create_table_as_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_table_as_statementContext) Names_in_parens() INames_in_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_in_parensContext)
}

func (s *Create_table_as_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Create_table_as_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_table_as_statementContext) Storage_parameter_oid() IStorage_parameter_oidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameter_oidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameter_oidContext)
}

func (s *Create_table_as_statementContext) On_commit() IOn_commitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_commitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_commitContext)
}

func (s *Create_table_as_statementContext) Table_space() ITable_spaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_spaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_spaceContext)
}

func (s *Create_table_as_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Create_table_as_statementContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Create_table_as_statementContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPORARY, 0)
}

func (s *Create_table_as_statementContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMP, 0)
}

func (s *Create_table_as_statementContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Create_table_as_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(SQLParserGLOBAL, 0)
}

func (s *Create_table_as_statementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCAL, 0)
}

func (s *Create_table_as_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_as_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_table_as_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_table_as_statement(s)
	}
}

func (s *Create_table_as_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_table_as_statement(s)
	}
}




func (p *SQLParser) Create_table_as_statement() (localctx ICreate_table_as_statementContext) {
	localctx = NewCreate_table_as_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, SQLParserRULE_create_table_as_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4990)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserGLOBAL, SQLParserLOCAL, SQLParserTEMP, SQLParserTEMPORARY:
		p.SetState(4986)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserGLOBAL || _la == SQLParserLOCAL {
			{
				p.SetState(4985)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserGLOBAL || _la == SQLParserLOCAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(4988)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserTEMP || _la == SQLParserTEMPORARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserUNLOGGED:
		{
			p.SetState(4989)
			p.Match(SQLParserUNLOGGED)
		}


	case SQLParserTABLE:



	default:
	}
	{
		p.SetState(4992)
		p.Match(SQLParserTABLE)
	}
	p.SetState(4994)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 608, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4993)
			p.If_not_exists()
		}


	}
	{
		p.SetState(4996)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_table_as_statementContext).name = _x
	}
	p.SetState(4998)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(4997)
			p.Names_in_parens()
		}

	}
	p.SetState(5002)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUSING {
		{
			p.SetState(5000)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(5001)
			p.Identifier()
		}

	}
	p.SetState(5005)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITHOUT || _la == SQLParserWITH {
		{
			p.SetState(5004)
			p.Storage_parameter_oid()
		}

	}
	p.SetState(5008)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserON {
		{
			p.SetState(5007)
			p.On_commit()
		}

	}
	p.SetState(5011)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTABLESPACE {
		{
			p.SetState(5010)
			p.Table_space()
		}

	}
	{
		p.SetState(5013)
		p.Match(SQLParserAS)
	}
	p.SetState(5017)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserVALUES, SQLParserSELECT, SQLParserTABLE, SQLParserWITH, SQLParserLEFT_PAREN:
		{
			p.SetState(5014)
			p.Select_stmt()
		}


	case SQLParserEXECUTE:
		{
			p.SetState(5015)
			p.Match(SQLParserEXECUTE)
		}
		{
			p.SetState(5016)
			p.Function_call()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5024)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(5019)
			p.Match(SQLParserWITH)
		}
		p.SetState(5021)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(5020)
				p.Match(SQLParserNO)
			}

		}
		{
			p.SetState(5023)
			p.Match(SQLParserDATA)
		}

	}



	return localctx
}


// ICreate_foreign_table_statementContext is an interface to support dynamic dispatch.
type ICreate_foreign_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsCreate_foreign_table_statementContext differentiates from other interfaces.
	IsCreate_foreign_table_statementContext()
}

type Create_foreign_table_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyCreate_foreign_table_statementContext() *Create_foreign_table_statementContext {
	var p = new(Create_foreign_table_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_create_foreign_table_statement
	return p
}

func (*Create_foreign_table_statementContext) IsCreate_foreign_table_statementContext() {}

func NewCreate_foreign_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_foreign_table_statementContext {
	var p = new(Create_foreign_table_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_create_foreign_table_statement

	return p
}

func (s *Create_foreign_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_foreign_table_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Create_foreign_table_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Create_foreign_table_statementContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Create_foreign_table_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Create_foreign_table_statementContext) Define_server() IDefine_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_serverContext)
}

func (s *Create_foreign_table_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Create_foreign_table_statementContext) Define_columns() IDefine_columnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_columnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_columnsContext)
}

func (s *Create_foreign_table_statementContext) Define_partition() IDefine_partitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_partitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_partitionContext)
}

func (s *Create_foreign_table_statementContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_foreign_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_foreign_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Create_foreign_table_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCreate_foreign_table_statement(s)
	}
}

func (s *Create_foreign_table_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCreate_foreign_table_statement(s)
	}
}




func (p *SQLParser) Create_foreign_table_statement() (localctx ICreate_foreign_table_statementContext) {
	localctx = NewCreate_foreign_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, SQLParserRULE_create_foreign_table_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5026)
		p.Match(SQLParserFOREIGN)
	}
	{
		p.SetState(5027)
		p.Match(SQLParserTABLE)
	}
	p.SetState(5029)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 617, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5028)
			p.If_not_exists()
		}


	}
	{
		p.SetState(5031)

		var _x = p.Schema_qualified_name()


		localctx.(*Create_foreign_table_statementContext).name = _x
	}
	p.SetState(5034)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserLEFT_PAREN:
		{
			p.SetState(5032)
			p.Define_columns()
		}


	case SQLParserPARTITION:
		{
			p.SetState(5033)
			p.Define_partition()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(5036)
		p.Define_server()
	}



	return localctx
}


// IDefine_tableContext is an interface to support dynamic dispatch.
type IDefine_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefine_tableContext differentiates from other interfaces.
	IsDefine_tableContext()
}

type Define_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefine_tableContext() *Define_tableContext {
	var p = new(Define_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_define_table
	return p
}

func (*Define_tableContext) IsDefine_tableContext() {}

func NewDefine_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Define_tableContext {
	var p = new(Define_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_define_table

	return p
}

func (s *Define_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Define_tableContext) Define_columns() IDefine_columnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_columnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_columnsContext)
}

func (s *Define_tableContext) Define_type() IDefine_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_typeContext)
}

func (s *Define_tableContext) Define_partition() IDefine_partitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_partitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_partitionContext)
}

func (s *Define_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Define_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Define_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDefine_table(s)
	}
}

func (s *Define_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDefine_table(s)
	}
}




func (p *SQLParser) Define_table() (localctx IDefine_tableContext) {
	localctx = NewDefine_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, SQLParserRULE_define_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5041)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5038)
			p.Define_columns()
		}


	case SQLParserOF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5039)
			p.Define_type()
		}


	case SQLParserPARTITION:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5040)
			p.Define_partition()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDefine_partitionContext is an interface to support dynamic dispatch.
type IDefine_partitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParent_table returns the parent_table rule contexts.
	GetParent_table() ISchema_qualified_nameContext


	// SetParent_table sets the parent_table rule contexts.
	SetParent_table(ISchema_qualified_nameContext)


	// IsDefine_partitionContext differentiates from other interfaces.
	IsDefine_partitionContext()
}

type Define_partitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	parent_table ISchema_qualified_nameContext 
}

func NewEmptyDefine_partitionContext() *Define_partitionContext {
	var p = new(Define_partitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_define_partition
	return p
}

func (*Define_partitionContext) IsDefine_partitionContext() {}

func NewDefine_partitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Define_partitionContext {
	var p = new(Define_partitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_define_partition

	return p
}

func (s *Define_partitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Define_partitionContext) GetParent_table() ISchema_qualified_nameContext { return s.parent_table }


func (s *Define_partitionContext) SetParent_table(v ISchema_qualified_nameContext) { s.parent_table = v }


func (s *Define_partitionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SQLParserPARTITION, 0)
}

func (s *Define_partitionContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *Define_partitionContext) For_values_bound() IFor_values_boundContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_values_boundContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_values_boundContext)
}

func (s *Define_partitionContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Define_partitionContext) List_of_type_column_def() IList_of_type_column_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_type_column_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_type_column_defContext)
}

func (s *Define_partitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Define_partitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Define_partitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDefine_partition(s)
	}
}

func (s *Define_partitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDefine_partition(s)
	}
}




func (p *SQLParser) Define_partition() (localctx IDefine_partitionContext) {
	localctx = NewDefine_partitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, SQLParserRULE_define_partition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5043)
		p.Match(SQLParserPARTITION)
	}
	{
		p.SetState(5044)
		p.Match(SQLParserOF)
	}
	{
		p.SetState(5045)

		var _x = p.Schema_qualified_name()


		localctx.(*Define_partitionContext).parent_table = _x
	}
	p.SetState(5047)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(5046)
			p.List_of_type_column_def()
		}

	}
	{
		p.SetState(5049)
		p.For_values_bound()
	}



	return localctx
}


// IFor_values_boundContext is an interface to support dynamic dispatch.
type IFor_values_boundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_values_boundContext differentiates from other interfaces.
	IsFor_values_boundContext()
}

type For_values_boundContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_values_boundContext() *For_values_boundContext {
	var p = new(For_values_boundContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_for_values_bound
	return p
}

func (*For_values_boundContext) IsFor_values_boundContext() {}

func NewFor_values_boundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_values_boundContext {
	var p = new(For_values_boundContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_for_values_bound

	return p
}

func (s *For_values_boundContext) GetParser() antlr.Parser { return s.parser }

func (s *For_values_boundContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *For_values_boundContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SQLParserVALUES, 0)
}

func (s *For_values_boundContext) Partition_bound_spec() IPartition_bound_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_bound_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartition_bound_specContext)
}

func (s *For_values_boundContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *For_values_boundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_values_boundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *For_values_boundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFor_values_bound(s)
	}
}

func (s *For_values_boundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFor_values_bound(s)
	}
}




func (p *SQLParser) For_values_bound() (localctx IFor_values_boundContext) {
	localctx = NewFor_values_boundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, SQLParserRULE_for_values_bound)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5055)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5051)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(5052)
			p.Match(SQLParserVALUES)
		}
		{
			p.SetState(5053)
			p.Partition_bound_spec()
		}


	case SQLParserDEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5054)
			p.Match(SQLParserDEFAULT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IPartition_bound_specContext is an interface to support dynamic dispatch.
type IPartition_bound_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartition_bound_specContext differentiates from other interfaces.
	IsPartition_bound_specContext()
}

type Partition_bound_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_bound_specContext() *Partition_bound_specContext {
	var p = new(Partition_bound_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_partition_bound_spec
	return p
}

func (*Partition_bound_specContext) IsPartition_bound_specContext() {}

func NewPartition_bound_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_bound_specContext {
	var p = new(Partition_bound_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_partition_bound_spec

	return p
}

func (s *Partition_bound_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_bound_specContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Partition_bound_specContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Partition_bound_specContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Partition_bound_specContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Partition_bound_specContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Partition_bound_specContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Partition_bound_specContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Partition_bound_specContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Partition_bound_specContext) AllPartition_bound_part() []IPartition_bound_partContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartition_bound_partContext)(nil)).Elem())
	var tst = make([]IPartition_bound_partContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartition_bound_partContext)
		}
	}

	return tst
}

func (s *Partition_bound_specContext) Partition_bound_part(i int) IPartition_bound_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_bound_partContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartition_bound_partContext)
}

func (s *Partition_bound_specContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Partition_bound_specContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Partition_bound_specContext) MODULUS() antlr.TerminalNode {
	return s.GetToken(SQLParserMODULUS, 0)
}

func (s *Partition_bound_specContext) AllNUMBER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNUMBER_LITERAL)
}

func (s *Partition_bound_specContext) NUMBER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, i)
}

func (s *Partition_bound_specContext) REMAINDER() antlr.TerminalNode {
	return s.GetToken(SQLParserREMAINDER, 0)
}

func (s *Partition_bound_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_bound_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Partition_bound_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPartition_bound_spec(s)
	}
}

func (s *Partition_bound_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPartition_bound_spec(s)
	}
}




func (p *SQLParser) Partition_bound_spec() (localctx IPartition_bound_specContext) {
	localctx = NewPartition_bound_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, SQLParserRULE_partition_bound_spec)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5082)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserIN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5057)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(5058)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5059)
			p.vex(0)
		}
		p.SetState(5064)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(5060)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(5061)
				p.vex(0)
			}


			p.SetState(5066)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5067)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserFROM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5069)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(5070)
			p.Partition_bound_part()
		}
		{
			p.SetState(5071)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(5072)
			p.Partition_bound_part()
		}


	case SQLParserWITH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5074)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(5075)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5076)
			p.Match(SQLParserMODULUS)
		}
		{
			p.SetState(5077)
			p.Match(SQLParserNUMBER_LITERAL)
		}
		{
			p.SetState(5078)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5079)
			p.Match(SQLParserREMAINDER)
		}
		{
			p.SetState(5080)
			p.Match(SQLParserNUMBER_LITERAL)
		}
		{
			p.SetState(5081)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IPartition_bound_partContext is an interface to support dynamic dispatch.
type IPartition_bound_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartition_bound_partContext differentiates from other interfaces.
	IsPartition_bound_partContext()
}

type Partition_bound_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_bound_partContext() *Partition_bound_partContext {
	var p = new(Partition_bound_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_partition_bound_part
	return p
}

func (*Partition_bound_partContext) IsPartition_bound_partContext() {}

func NewPartition_bound_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_bound_partContext {
	var p = new(Partition_bound_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_partition_bound_part

	return p
}

func (s *Partition_bound_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_bound_partContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Partition_bound_partContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Partition_bound_partContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Partition_bound_partContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Partition_bound_partContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Partition_bound_partContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Partition_bound_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_bound_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Partition_bound_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPartition_bound_part(s)
	}
}

func (s *Partition_bound_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPartition_bound_part(s)
	}
}




func (p *SQLParser) Partition_bound_part() (localctx IPartition_bound_partContext) {
	localctx = NewPartition_bound_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, SQLParserRULE_partition_bound_part)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5084)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(5085)
		p.vex(0)
	}
	p.SetState(5090)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(5086)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5087)
			p.vex(0)
		}


		p.SetState(5092)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5093)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IDefine_columnsContext is an interface to support dynamic dispatch.
type IDefine_columnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefine_columnsContext differentiates from other interfaces.
	IsDefine_columnsContext()
}

type Define_columnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefine_columnsContext() *Define_columnsContext {
	var p = new(Define_columnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_define_columns
	return p
}

func (*Define_columnsContext) IsDefine_columnsContext() {}

func NewDefine_columnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Define_columnsContext {
	var p = new(Define_columnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_define_columns

	return p
}

func (s *Define_columnsContext) GetParser() antlr.Parser { return s.parser }

func (s *Define_columnsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Define_columnsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Define_columnsContext) AllTable_column_def() []ITable_column_defContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_column_defContext)(nil)).Elem())
	var tst = make([]ITable_column_defContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_column_defContext)
		}
	}

	return tst
}

func (s *Define_columnsContext) Table_column_def(i int) ITable_column_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_column_defContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_column_defContext)
}

func (s *Define_columnsContext) INHERITS() antlr.TerminalNode {
	return s.GetToken(SQLParserINHERITS, 0)
}

func (s *Define_columnsContext) Names_in_parens() INames_in_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_in_parensContext)
}

func (s *Define_columnsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Define_columnsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Define_columnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Define_columnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Define_columnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDefine_columns(s)
	}
}

func (s *Define_columnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDefine_columns(s)
	}
}




func (p *SQLParser) Define_columns() (localctx IDefine_columnsContext) {
	localctx = NewDefine_columnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, SQLParserRULE_define_columns)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5095)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(5104)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 365)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 365))) & ((1 << (SQLParserLIKE - 365)) | (1 << (SQLParserCHECK - 365)) | (1 << (SQLParserCONSTRAINT - 365)) | (1 << (SQLParserDEFAULT - 365)))) != 0) || ((((_la - 407)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 407))) & ((1 << (SQLParserFOREIGN - 407)) | (1 << (SQLParserNOT - 407)) | (1 << (SQLParserNULL - 407)) | (1 << (SQLParserPRIMARY - 407)) | (1 << (SQLParserREFERENCES - 407)))) != 0) || ((((_la - 442)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 442))) & ((1 << (SQLParserUNIQUE - 442)) | (1 << (SQLParserALIGNMENT - 442)) | (1 << (SQLParserALLOW_CONNECTIONS - 442)) | (1 << (SQLParserBASETYPE - 442)) | (1 << (SQLParserBUFFERS - 442)) | (1 << (SQLParserBYPASSRLS - 442)) | (1 << (SQLParserCANONICAL - 442)) | (1 << (SQLParserCATEGORY - 442)) | (1 << (SQLParserCOLLATABLE - 442)) | (1 << (SQLParserCOMBINEFUNC - 442)) | (1 << (SQLParserCOMMUTATOR - 442)) | (1 << (SQLParserCONNECT - 442)) | (1 << (SQLParserCOSTS - 442)) | (1 << (SQLParserCREATEDB - 442)) | (1 << (SQLParserCREATEROLE - 442)) | (1 << (SQLParserDESERIALFUNC - 442)) | (1 << (SQLParserDETERMINISTIC - 442)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 442)) | (1 << (SQLParserELEMENT - 442)) | (1 << (SQLParserEXTENDED - 442)) | (1 << (SQLParserFINALFUNC - 442)) | (1 << (SQLParserFINALFUNC_EXTRA - 442)) | (1 << (SQLParserFINALFUNC_MODIFY - 442)) | (1 << (SQLParserFORCE_NOT_NULL - 442)) | (1 << (SQLParserFORCE_NULL - 442)))) != 0) || ((((_la - 474)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 474))) & ((1 << (SQLParserFORCE_QUOTE - 474)) | (1 << (SQLParserFORMAT - 474)) | (1 << (SQLParserGETTOKEN - 474)) | (1 << (SQLParserHASH - 474)) | (1 << (SQLParserHASHES - 474)) | (1 << (SQLParserHEADLINE - 474)) | (1 << (SQLParserHYPOTHETICAL - 474)) | (1 << (SQLParserINDEX_CLEANUP - 474)) | (1 << (SQLParserINIT - 474)) | (1 << (SQLParserINITCOND - 474)) | (1 << (SQLParserINTERNALLENGTH - 474)) | (1 << (SQLParserIS_TEMPLATE - 474)) | (1 << (SQLParserJSON - 474)) | (1 << (SQLParserLC_COLLATE - 474)) | (1 << (SQLParserLC_CTYPE - 474)) | (1 << (SQLParserLEFTARG - 474)) | (1 << (SQLParserLEXIZE - 474)) | (1 << (SQLParserLEXTYPES - 474)) | (1 << (SQLParserLIST - 474)) | (1 << (SQLParserLOCALE - 474)) | (1 << (SQLParserLOGIN - 474)) | (1 << (SQLParserMAIN - 474)) | (1 << (SQLParserMERGES - 474)) | (1 << (SQLParserMFINALFUNC - 474)) | (1 << (SQLParserMFINALFUNC_EXTRA - 474)) | (1 << (SQLParserMFINALFUNC_MODIFY - 474)) | (1 << (SQLParserMINITCOND - 474)) | (1 << (SQLParserMINVFUNC - 474)) | (1 << (SQLParserMODULUS - 474)) | (1 << (SQLParserMSFUNC - 474)) | (1 << (SQLParserMSSPACE - 474)) | (1 << (SQLParserMSTYPE - 474)))) != 0) || ((((_la - 506)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 506))) & ((1 << (SQLParserNEGATOR - 506)) | (1 << (SQLParserNOBYPASSRLS - 506)) | (1 << (SQLParserNOCREATEDB - 506)) | (1 << (SQLParserNOCREATEROLE - 506)) | (1 << (SQLParserNOINHERIT - 506)) | (1 << (SQLParserNOLOGIN - 506)) | (1 << (SQLParserNOREPLICATION - 506)) | (1 << (SQLParserNOSUPERUSER - 506)) | (1 << (SQLParserOUTPUT - 506)) | (1 << (SQLParserPASSEDBYVALUE - 506)) | (1 << (SQLParserPATH - 506)) | (1 << (SQLParserPERMISSIVE - 506)) | (1 << (SQLParserPLAIN - 506)) | (1 << (SQLParserPREFERRED - 506)) | (1 << (SQLParserPROVIDER - 506)) | (1 << (SQLParserREAD_ONLY - 506)) | (1 << (SQLParserREAD_WRITE - 506)) | (1 << (SQLParserRECEIVE - 506)) | (1 << (SQLParserREMAINDER - 506)) | (1 << (SQLParserREPLICATION - 506)) | (1 << (SQLParserRESTRICTED - 506)) | (1 << (SQLParserRESTRICTIVE - 506)) | (1 << (SQLParserRIGHTARG - 506)) | (1 << (SQLParserSAFE - 506)) | (1 << (SQLParserSEND - 506)) | (1 << (SQLParserSERIALFUNC - 506)) | (1 << (SQLParserSETTINGS - 506)) | (1 << (SQLParserSFUNC - 506)) | (1 << (SQLParserSHAREABLE - 506)) | (1 << (SQLParserSKIP_LOCKED - 506)) | (1 << (SQLParserSORTOP - 506)) | (1 << (SQLParserSSPACE - 506)))) != 0) || ((((_la - 538)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 538))) & ((1 << (SQLParserSTYPE - 538)) | (1 << (SQLParserSUBTYPE_DIFF - 538)) | (1 << (SQLParserSUBTYPE_OPCLASS - 538)) | (1 << (SQLParserSUBTYPE - 538)) | (1 << (SQLParserSUMMARY - 538)) | (1 << (SQLParserSUPERUSER - 538)) | (1 << (SQLParserTIMING - 538)) | (1 << (SQLParserTYPMOD_IN - 538)) | (1 << (SQLParserTYPMOD_OUT - 538)) | (1 << (SQLParserUNSAFE - 538)) | (1 << (SQLParserUSAGE - 538)) | (1 << (SQLParserVARIABLE - 538)) | (1 << (SQLParserWAL - 538)) | (1 << (SQLParserYAML - 538)) | (1 << (SQLParserALIAS - 538)) | (1 << (SQLParserASSERT - 538)) | (1 << (SQLParserCONSTANT - 538)) | (1 << (SQLParserDATATYPE - 538)) | (1 << (SQLParserDEBUG - 538)) | (1 << (SQLParserDETAIL - 538)) | (1 << (SQLParserDIAGNOSTICS - 538)) | (1 << (SQLParserELSEIF - 538)) | (1 << (SQLParserELSIF - 538)) | (1 << (SQLParserERRCODE - 538)) | (1 << (SQLParserEXIT - 538)) | (1 << (SQLParserEXCEPTION - 538)) | (1 << (SQLParserFOREACH - 538)) | (1 << (SQLParserGET - 538)) | (1 << (SQLParserHINT - 538)) | (1 << (SQLParserINFO - 538)) | (1 << (SQLParserLOG - 538)) | (1 << (SQLParserLOOP - 538)))) != 0) || ((((_la - 570)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 570))) & ((1 << (SQLParserMESSAGE - 570)) | (1 << (SQLParserNOTICE - 570)) | (1 << (SQLParserOPEN - 570)) | (1 << (SQLParserPERFORM - 570)) | (1 << (SQLParserQUERY - 570)) | (1 << (SQLParserRAISE - 570)) | (1 << (SQLParserRECORD - 570)) | (1 << (SQLParserRETURN - 570)) | (1 << (SQLParserREVERSE - 570)) | (1 << (SQLParserROWTYPE - 570)) | (1 << (SQLParserSLICE - 570)) | (1 << (SQLParserSQLSTATE - 570)) | (1 << (SQLParserSTACKED - 570)) | (1 << (SQLParserWARNING - 570)) | (1 << (SQLParserWHILE - 570)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
		{
			p.SetState(5096)
			p.Table_column_def()
		}
		p.SetState(5101)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(5097)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(5098)
				p.Table_column_def()
			}


			p.SetState(5103)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(5106)
		p.Match(SQLParserRIGHT_PAREN)
	}
	p.SetState(5109)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserINHERITS {
		{
			p.SetState(5107)
			p.Match(SQLParserINHERITS)
		}
		{
			p.SetState(5108)
			p.Names_in_parens()
		}

	}



	return localctx
}


// IDefine_typeContext is an interface to support dynamic dispatch.
type IDefine_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetType_name returns the type_name rule contexts.
	GetType_name() IData_typeContext


	// SetType_name sets the type_name rule contexts.
	SetType_name(IData_typeContext)


	// IsDefine_typeContext differentiates from other interfaces.
	IsDefine_typeContext()
}

type Define_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	type_name IData_typeContext 
}

func NewEmptyDefine_typeContext() *Define_typeContext {
	var p = new(Define_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_define_type
	return p
}

func (*Define_typeContext) IsDefine_typeContext() {}

func NewDefine_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Define_typeContext {
	var p = new(Define_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_define_type

	return p
}

func (s *Define_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Define_typeContext) GetType_name() IData_typeContext { return s.type_name }


func (s *Define_typeContext) SetType_name(v IData_typeContext) { s.type_name = v }


func (s *Define_typeContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *Define_typeContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Define_typeContext) List_of_type_column_def() IList_of_type_column_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IList_of_type_column_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IList_of_type_column_defContext)
}

func (s *Define_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Define_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Define_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDefine_type(s)
	}
}

func (s *Define_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDefine_type(s)
	}
}




func (p *SQLParser) Define_type() (localctx IDefine_typeContext) {
	localctx = NewDefine_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, SQLParserRULE_define_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5111)
		p.Match(SQLParserOF)
	}
	{
		p.SetState(5112)

		var _x = p.Data_type()


		localctx.(*Define_typeContext).type_name = _x
	}
	p.SetState(5114)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(5113)
			p.List_of_type_column_def()
		}

	}



	return localctx
}


// IPartition_byContext is an interface to support dynamic dispatch.
type IPartition_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartition_byContext differentiates from other interfaces.
	IsPartition_byContext()
}

type Partition_byContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_byContext() *Partition_byContext {
	var p = new(Partition_byContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_partition_by
	return p
}

func (*Partition_byContext) IsPartition_byContext() {}

func NewPartition_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_byContext {
	var p = new(Partition_byContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_partition_by

	return p
}

func (s *Partition_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_byContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SQLParserPARTITION, 0)
}

func (s *Partition_byContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Partition_byContext) Partition_method() IPartition_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartition_methodContext)
}

func (s *Partition_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Partition_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPartition_by(s)
	}
}

func (s *Partition_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPartition_by(s)
	}
}




func (p *SQLParser) Partition_by() (localctx IPartition_byContext) {
	localctx = NewPartition_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, SQLParserRULE_partition_by)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5116)
		p.Match(SQLParserPARTITION)
	}
	{
		p.SetState(5117)
		p.Match(SQLParserBY)
	}
	{
		p.SetState(5118)
		p.Partition_method()
	}



	return localctx
}


// IPartition_methodContext is an interface to support dynamic dispatch.
type IPartition_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartition_methodContext differentiates from other interfaces.
	IsPartition_methodContext()
}

type Partition_methodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_methodContext() *Partition_methodContext {
	var p = new(Partition_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_partition_method
	return p
}

func (*Partition_methodContext) IsPartition_methodContext() {}

func NewPartition_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_methodContext {
	var p = new(Partition_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_partition_method

	return p
}

func (s *Partition_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_methodContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Partition_methodContext) AllPartition_column() []IPartition_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartition_columnContext)(nil)).Elem())
	var tst = make([]IPartition_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartition_columnContext)
		}
	}

	return tst
}

func (s *Partition_methodContext) Partition_column(i int) IPartition_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartition_columnContext)
}

func (s *Partition_methodContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Partition_methodContext) RANGE() antlr.TerminalNode {
	return s.GetToken(SQLParserRANGE, 0)
}

func (s *Partition_methodContext) LIST() antlr.TerminalNode {
	return s.GetToken(SQLParserLIST, 0)
}

func (s *Partition_methodContext) HASH() antlr.TerminalNode {
	return s.GetToken(SQLParserHASH, 0)
}

func (s *Partition_methodContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Partition_methodContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Partition_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Partition_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPartition_method(s)
	}
}

func (s *Partition_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPartition_method(s)
	}
}




func (p *SQLParser) Partition_method() (localctx IPartition_methodContext) {
	localctx = NewPartition_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, SQLParserRULE_partition_method)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5120)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserRANGE || _la == SQLParserHASH || _la == SQLParserLIST) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5121)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(5122)
		p.Partition_column()
	}
	p.SetState(5127)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(5123)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5124)
			p.Partition_column()
		}


		p.SetState(5129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5130)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IPartition_columnContext is an interface to support dynamic dispatch.
type IPartition_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartition_columnContext differentiates from other interfaces.
	IsPartition_columnContext()
}

type Partition_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_columnContext() *Partition_columnContext {
	var p = new(Partition_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_partition_column
	return p
}

func (*Partition_columnContext) IsPartition_columnContext() {}

func NewPartition_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_columnContext {
	var p = new(Partition_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_partition_column

	return p
}

func (s *Partition_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_columnContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Partition_columnContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Partition_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Partition_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPartition_column(s)
	}
}

func (s *Partition_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPartition_column(s)
	}
}




func (p *SQLParser) Partition_column() (localctx IPartition_columnContext) {
	localctx = NewPartition_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, SQLParserRULE_partition_column)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5132)
		p.vex(0)
	}
	p.SetState(5134)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
		{
			p.SetState(5133)
			p.Identifier()
		}

	}



	return localctx
}


// IDefine_serverContext is an interface to support dynamic dispatch.
type IDefine_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefine_serverContext differentiates from other interfaces.
	IsDefine_serverContext()
}

type Define_serverContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefine_serverContext() *Define_serverContext {
	var p = new(Define_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_define_server
	return p
}

func (*Define_serverContext) IsDefine_serverContext() {}

func NewDefine_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Define_serverContext {
	var p = new(Define_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_define_server

	return p
}

func (s *Define_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Define_serverContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Define_serverContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Define_serverContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Define_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Define_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Define_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDefine_server(s)
	}
}

func (s *Define_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDefine_server(s)
	}
}




func (p *SQLParser) Define_server() (localctx IDefine_serverContext) {
	localctx = NewDefine_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, SQLParserRULE_define_server)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5136)
		p.Match(SQLParserSERVER)
	}
	{
		p.SetState(5137)
		p.Identifier()
	}
	p.SetState(5139)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOPTIONS {
		{
			p.SetState(5138)
			p.Define_foreign_options()
		}

	}



	return localctx
}


// IDefine_foreign_optionsContext is an interface to support dynamic dispatch.
type IDefine_foreign_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefine_foreign_optionsContext differentiates from other interfaces.
	IsDefine_foreign_optionsContext()
}

type Define_foreign_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefine_foreign_optionsContext() *Define_foreign_optionsContext {
	var p = new(Define_foreign_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_define_foreign_options
	return p
}

func (*Define_foreign_optionsContext) IsDefine_foreign_optionsContext() {}

func NewDefine_foreign_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Define_foreign_optionsContext {
	var p = new(Define_foreign_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_define_foreign_options

	return p
}

func (s *Define_foreign_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Define_foreign_optionsContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTIONS, 0)
}

func (s *Define_foreign_optionsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Define_foreign_optionsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Define_foreign_optionsContext) AllForeign_option() []IForeign_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IForeign_optionContext)(nil)).Elem())
	var tst = make([]IForeign_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IForeign_optionContext)
		}
	}

	return tst
}

func (s *Define_foreign_optionsContext) Foreign_option(i int) IForeign_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeign_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IForeign_optionContext)
}

func (s *Define_foreign_optionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Define_foreign_optionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Define_foreign_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Define_foreign_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Define_foreign_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDefine_foreign_options(s)
	}
}

func (s *Define_foreign_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDefine_foreign_options(s)
	}
}




func (p *SQLParser) Define_foreign_options() (localctx IDefine_foreign_optionsContext) {
	localctx = NewDefine_foreign_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, SQLParserRULE_define_foreign_options)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5141)
		p.Match(SQLParserOPTIONS)
	}
	{
		p.SetState(5142)
		p.Match(SQLParserLEFT_PAREN)
	}

	{
		p.SetState(5143)
		p.Foreign_option()
	}
	p.SetState(5148)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(5144)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5145)
			p.Foreign_option()
		}


		p.SetState(5150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	{
		p.SetState(5151)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IForeign_optionContext is an interface to support dynamic dispatch.
type IForeign_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_optionContext differentiates from other interfaces.
	IsForeign_optionContext()
}

type Foreign_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_optionContext() *Foreign_optionContext {
	var p = new(Foreign_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_foreign_option
	return p
}

func (*Foreign_optionContext) IsForeign_optionContext() {}

func NewForeign_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_optionContext {
	var p = new(Foreign_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_foreign_option

	return p
}

func (s *Foreign_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_optionContext) Foreign_option_name() IForeign_option_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForeign_option_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForeign_option_nameContext)
}

func (s *Foreign_optionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Foreign_optionContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Foreign_optionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Foreign_optionContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Foreign_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Foreign_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterForeign_option(s)
	}
}

func (s *Foreign_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitForeign_option(s)
	}
}




func (p *SQLParser) Foreign_option() (localctx IForeign_optionContext) {
	localctx = NewForeign_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, SQLParserRULE_foreign_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5154)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 633, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5153)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserADD || _la == SQLParserDROP || _la == SQLParserSET) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	}
	{
		p.SetState(5156)
		p.Foreign_option_name()
	}
	p.SetState(5158)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCharacter_String_Literal || _la == SQLParserBeginDollarStringConstant {
		{
			p.SetState(5157)
			p.Character_string()
		}

	}



	return localctx
}


// IForeign_option_nameContext is an interface to support dynamic dispatch.
type IForeign_option_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForeign_option_nameContext differentiates from other interfaces.
	IsForeign_option_nameContext()
}

type Foreign_option_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_option_nameContext() *Foreign_option_nameContext {
	var p = new(Foreign_option_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_foreign_option_name
	return p
}

func (*Foreign_option_nameContext) IsForeign_option_nameContext() {}

func NewForeign_option_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_option_nameContext {
	var p = new(Foreign_option_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_foreign_option_name

	return p
}

func (s *Foreign_option_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_option_nameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Foreign_option_nameContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Foreign_option_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_option_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Foreign_option_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterForeign_option_name(s)
	}
}

func (s *Foreign_option_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitForeign_option_name(s)
	}
}




func (p *SQLParser) Foreign_option_name() (localctx IForeign_option_nameContext) {
	localctx = NewForeign_option_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, SQLParserRULE_foreign_option_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5162)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5160)
			p.Identifier()
		}


	case SQLParserUSER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5161)
			p.Match(SQLParserUSER)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IList_of_type_column_defContext is an interface to support dynamic dispatch.
type IList_of_type_column_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsList_of_type_column_defContext differentiates from other interfaces.
	IsList_of_type_column_defContext()
}

type List_of_type_column_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyList_of_type_column_defContext() *List_of_type_column_defContext {
	var p = new(List_of_type_column_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_list_of_type_column_def
	return p
}

func (*List_of_type_column_defContext) IsList_of_type_column_defContext() {}

func NewList_of_type_column_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *List_of_type_column_defContext {
	var p = new(List_of_type_column_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_list_of_type_column_def

	return p
}

func (s *List_of_type_column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *List_of_type_column_defContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *List_of_type_column_defContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *List_of_type_column_defContext) AllTable_of_type_column_def() []ITable_of_type_column_defContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_of_type_column_defContext)(nil)).Elem())
	var tst = make([]ITable_of_type_column_defContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_of_type_column_defContext)
		}
	}

	return tst
}

func (s *List_of_type_column_defContext) Table_of_type_column_def(i int) ITable_of_type_column_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_of_type_column_defContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_of_type_column_defContext)
}

func (s *List_of_type_column_defContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *List_of_type_column_defContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *List_of_type_column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *List_of_type_column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *List_of_type_column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterList_of_type_column_def(s)
	}
}

func (s *List_of_type_column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitList_of_type_column_def(s)
	}
}




func (p *SQLParser) List_of_type_column_def() (localctx IList_of_type_column_defContext) {
	localctx = NewList_of_type_column_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, SQLParserRULE_list_of_type_column_def)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5164)
		p.Match(SQLParserLEFT_PAREN)
	}

	{
		p.SetState(5165)
		p.Table_of_type_column_def()
	}
	p.SetState(5170)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(5166)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5167)
			p.Table_of_type_column_def()
		}


		p.SetState(5172)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	{
		p.SetState(5173)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// ITable_column_defContext is an interface to support dynamic dispatch.
type ITable_column_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTabl_constraint returns the tabl_constraint rule contexts.
	GetTabl_constraint() IConstraint_commonContext


	// SetTabl_constraint sets the tabl_constraint rule contexts.
	SetTabl_constraint(IConstraint_commonContext)


	// IsTable_column_defContext differentiates from other interfaces.
	IsTable_column_defContext()
}

type Table_column_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tabl_constraint IConstraint_commonContext 
}

func NewEmptyTable_column_defContext() *Table_column_defContext {
	var p = new(Table_column_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_column_def
	return p
}

func (*Table_column_defContext) IsTable_column_defContext() {}

func NewTable_column_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_defContext {
	var p = new(Table_column_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_column_def

	return p
}

func (s *Table_column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_defContext) GetTabl_constraint() IConstraint_commonContext { return s.tabl_constraint }


func (s *Table_column_defContext) SetTabl_constraint(v IConstraint_commonContext) { s.tabl_constraint = v }


func (s *Table_column_defContext) Table_column_definition() ITable_column_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_column_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_column_definitionContext)
}

func (s *Table_column_defContext) Constraint_common() IConstraint_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstraint_commonContext)
}

func (s *Table_column_defContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SQLParserLIKE, 0)
}

func (s *Table_column_defContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Table_column_defContext) AllLike_option() []ILike_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILike_optionContext)(nil)).Elem())
	var tst = make([]ILike_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILike_optionContext)
		}
	}

	return tst
}

func (s *Table_column_defContext) Like_option(i int) ILike_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILike_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILike_optionContext)
}

func (s *Table_column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_column_def(s)
	}
}

func (s *Table_column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_column_def(s)
	}
}




func (p *SQLParser) Table_column_def() (localctx ITable_column_defContext) {
	localctx = NewTable_column_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, SQLParserRULE_table_column_def)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5185)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 638, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5175)
			p.Table_column_definition()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5176)

			var _x = p.Constraint_common()


			localctx.(*Table_column_defContext).tabl_constraint = _x
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5177)
			p.Match(SQLParserLIKE)
		}
		{
			p.SetState(5178)
			p.Schema_qualified_name()
		}
		p.SetState(5182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserEXCLUDING || _la == SQLParserINCLUDING {
			{
				p.SetState(5179)
				p.Like_option()
			}


			p.SetState(5184)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}


	return localctx
}


// ITable_of_type_column_defContext is an interface to support dynamic dispatch.
type ITable_of_type_column_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTabl_constraint returns the tabl_constraint rule contexts.
	GetTabl_constraint() IConstraint_commonContext


	// SetTabl_constraint sets the tabl_constraint rule contexts.
	SetTabl_constraint(IConstraint_commonContext)


	// IsTable_of_type_column_defContext differentiates from other interfaces.
	IsTable_of_type_column_defContext()
}

type Table_of_type_column_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	tabl_constraint IConstraint_commonContext 
}

func NewEmptyTable_of_type_column_defContext() *Table_of_type_column_defContext {
	var p = new(Table_of_type_column_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_of_type_column_def
	return p
}

func (*Table_of_type_column_defContext) IsTable_of_type_column_defContext() {}

func NewTable_of_type_column_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_of_type_column_defContext {
	var p = new(Table_of_type_column_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_of_type_column_def

	return p
}

func (s *Table_of_type_column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_of_type_column_defContext) GetTabl_constraint() IConstraint_commonContext { return s.tabl_constraint }


func (s *Table_of_type_column_defContext) SetTabl_constraint(v IConstraint_commonContext) { s.tabl_constraint = v }


func (s *Table_of_type_column_defContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_of_type_column_defContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Table_of_type_column_defContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTIONS, 0)
}

func (s *Table_of_type_column_defContext) AllConstraint_common() []IConstraint_commonContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstraint_commonContext)(nil)).Elem())
	var tst = make([]IConstraint_commonContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstraint_commonContext)
		}
	}

	return tst
}

func (s *Table_of_type_column_defContext) Constraint_common(i int) IConstraint_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_commonContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstraint_commonContext)
}

func (s *Table_of_type_column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_of_type_column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_of_type_column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_of_type_column_def(s)
	}
}

func (s *Table_of_type_column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_of_type_column_def(s)
	}
}




func (p *SQLParser) Table_of_type_column_def() (localctx ITable_of_type_column_defContext) {
	localctx = NewTable_of_type_column_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, SQLParserRULE_table_of_type_column_def)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5199)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 641, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5187)
			p.Identifier()
		}
		p.SetState(5190)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(5188)
				p.Match(SQLParserWITH)
			}
			{
				p.SetState(5189)
				p.Match(SQLParserOPTIONS)
			}

		}
		p.SetState(5195)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserEXCLUDE || _la == SQLParserGENERATED || ((((_la - 385)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 385))) & ((1 << (SQLParserCHECK - 385)) | (1 << (SQLParserCONSTRAINT - 385)) | (1 << (SQLParserDEFAULT - 385)) | (1 << (SQLParserFOREIGN - 385)))) != 0) || ((((_la - 421)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 421))) & ((1 << (SQLParserNOT - 421)) | (1 << (SQLParserNULL - 421)) | (1 << (SQLParserPRIMARY - 421)) | (1 << (SQLParserREFERENCES - 421)) | (1 << (SQLParserUNIQUE - 421)))) != 0) {
			{
				p.SetState(5192)
				p.Constraint_common()
			}


			p.SetState(5197)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5198)

			var _x = p.Constraint_common()


			localctx.(*Table_of_type_column_defContext).tabl_constraint = _x
		}

	}


	return localctx
}


// ITable_column_definitionContext is an interface to support dynamic dispatch.
type ITable_column_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_column_definitionContext differentiates from other interfaces.
	IsTable_column_definitionContext()
}

type Table_column_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_column_definitionContext() *Table_column_definitionContext {
	var p = new(Table_column_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_column_definition
	return p
}

func (*Table_column_definitionContext) IsTable_column_definitionContext() {}

func NewTable_column_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_definitionContext {
	var p = new(Table_column_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_column_definition

	return p
}

func (s *Table_column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_definitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_column_definitionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Table_column_definitionContext) Define_foreign_options() IDefine_foreign_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefine_foreign_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefine_foreign_optionsContext)
}

func (s *Table_column_definitionContext) Collate_identifier() ICollate_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollate_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollate_identifierContext)
}

func (s *Table_column_definitionContext) AllConstraint_common() []IConstraint_commonContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstraint_commonContext)(nil)).Elem())
	var tst = make([]IConstraint_commonContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstraint_commonContext)
		}
	}

	return tst
}

func (s *Table_column_definitionContext) Constraint_common(i int) IConstraint_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstraint_commonContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstraint_commonContext)
}

func (s *Table_column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_column_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_column_definition(s)
	}
}

func (s *Table_column_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_column_definition(s)
	}
}




func (p *SQLParser) Table_column_definition() (localctx ITable_column_definitionContext) {
	localctx = NewTable_column_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, SQLParserRULE_table_column_definition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5201)
		p.Identifier()
	}
	{
		p.SetState(5202)
		p.Data_type()
	}
	p.SetState(5204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOPTIONS {
		{
			p.SetState(5203)
			p.Define_foreign_options()
		}

	}
	p.SetState(5207)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCOLLATE {
		{
			p.SetState(5206)
			p.Collate_identifier()
		}

	}
	p.SetState(5212)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserEXCLUDE || _la == SQLParserGENERATED || ((((_la - 385)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 385))) & ((1 << (SQLParserCHECK - 385)) | (1 << (SQLParserCONSTRAINT - 385)) | (1 << (SQLParserDEFAULT - 385)) | (1 << (SQLParserFOREIGN - 385)))) != 0) || ((((_la - 421)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 421))) & ((1 << (SQLParserNOT - 421)) | (1 << (SQLParserNULL - 421)) | (1 << (SQLParserPRIMARY - 421)) | (1 << (SQLParserREFERENCES - 421)) | (1 << (SQLParserUNIQUE - 421)))) != 0) {
		{
			p.SetState(5209)
			p.Constraint_common()
		}


		p.SetState(5214)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ILike_optionContext is an interface to support dynamic dispatch.
type ILike_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLike_optionContext differentiates from other interfaces.
	IsLike_optionContext()
}

type Like_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLike_optionContext() *Like_optionContext {
	var p = new(Like_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_like_option
	return p
}

func (*Like_optionContext) IsLike_optionContext() {}

func NewLike_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Like_optionContext {
	var p = new(Like_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_like_option

	return p
}

func (s *Like_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Like_optionContext) INCLUDING() antlr.TerminalNode {
	return s.GetToken(SQLParserINCLUDING, 0)
}

func (s *Like_optionContext) EXCLUDING() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCLUDING, 0)
}

func (s *Like_optionContext) COMMENTS() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMENTS, 0)
}

func (s *Like_optionContext) CONSTRAINTS() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINTS, 0)
}

func (s *Like_optionContext) DEFAULTS() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULTS, 0)
}

func (s *Like_optionContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(SQLParserGENERATED, 0)
}

func (s *Like_optionContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(SQLParserIDENTITY, 0)
}

func (s *Like_optionContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEXES, 0)
}

func (s *Like_optionContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTORAGE, 0)
}

func (s *Like_optionContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Like_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Like_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Like_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterLike_option(s)
	}
}

func (s *Like_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitLike_option(s)
	}
}




func (p *SQLParser) Like_option() (localctx ILike_optionContext) {
	localctx = NewLike_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, SQLParserRULE_like_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5215)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserEXCLUDING || _la == SQLParserINCLUDING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(5216)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 35)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 35))) & ((1 << (SQLParserCOMMENTS - 35)) | (1 << (SQLParserCONSTRAINTS - 35)) | (1 << (SQLParserDEFAULTS - 35)))) != 0) || ((((_la - 95)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 95))) & ((1 << (SQLParserGENERATED - 95)) | (1 << (SQLParserIDENTITY - 95)) | (1 << (SQLParserINDEXES - 95)))) != 0) || _la == SQLParserSTORAGE || _la == SQLParserALL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IConstraint_commonContext is an interface to support dynamic dispatch.
type IConstraint_commonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstraint_commonContext differentiates from other interfaces.
	IsConstraint_commonContext()
}

type Constraint_commonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_commonContext() *Constraint_commonContext {
	var p = new(Constraint_commonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_constraint_common
	return p
}

func (*Constraint_commonContext) IsConstraint_commonContext() {}

func NewConstraint_commonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_commonContext {
	var p = new(Constraint_commonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_constraint_common

	return p
}

func (s *Constraint_commonContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_commonContext) Constr_body() IConstr_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstr_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstr_bodyContext)
}

func (s *Constraint_commonContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Constraint_commonContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Constraint_commonContext) Table_deferrable() ITable_deferrableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_deferrableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_deferrableContext)
}

func (s *Constraint_commonContext) Table_initialy_immed() ITable_initialy_immedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_initialy_immedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_initialy_immedContext)
}

func (s *Constraint_commonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_commonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Constraint_commonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterConstraint_common(s)
	}
}

func (s *Constraint_commonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitConstraint_common(s)
	}
}




func (p *SQLParser) Constraint_common() (localctx IConstraint_commonContext) {
	localctx = NewConstraint_commonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, SQLParserRULE_constraint_common)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5220)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCONSTRAINT {
		{
			p.SetState(5218)
			p.Match(SQLParserCONSTRAINT)
		}
		{
			p.SetState(5219)
			p.Identifier()
		}

	}
	{
		p.SetState(5222)
		p.Constr_body()
	}
	p.SetState(5224)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 646, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5223)
			p.Table_deferrable()
		}


	}
	p.SetState(5227)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserINITIALLY {
		{
			p.SetState(5226)
			p.Table_initialy_immed()
		}

	}



	return localctx
}


// IConstr_bodyContext is an interface to support dynamic dispatch.
type IConstr_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhere returns the where token.
	GetWhere() antlr.Token 


	// SetWhere sets the where token.
	SetWhere(antlr.Token) 


	// GetIndex_method returns the index_method rule contexts.
	GetIndex_method() IIdentifierContext

	// GetExp returns the exp rule contexts.
	GetExp() IVexContext

	// GetRef returns the ref rule contexts.
	GetRef() INames_in_parensContext

	// GetExpression returns the expression rule contexts.
	GetExpression() IVexContext

	// GetCol returns the col rule contexts.
	GetCol() INames_in_parensContext

	// GetDefault_expr returns the default_expr rule contexts.
	GetDefault_expr() IVexContext


	// SetIndex_method sets the index_method rule contexts.
	SetIndex_method(IIdentifierContext)

	// SetExp sets the exp rule contexts.
	SetExp(IVexContext)

	// SetRef sets the ref rule contexts.
	SetRef(INames_in_parensContext)

	// SetExpression sets the expression rule contexts.
	SetExpression(IVexContext)

	// SetCol sets the col rule contexts.
	SetCol(INames_in_parensContext)

	// SetDefault_expr sets the default_expr rule contexts.
	SetDefault_expr(IVexContext)


	// IsConstr_bodyContext differentiates from other interfaces.
	IsConstr_bodyContext()
}

type Constr_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	index_method IIdentifierContext 
	where antlr.Token
	exp IVexContext 
	ref INames_in_parensContext 
	expression IVexContext 
	col INames_in_parensContext 
	default_expr IVexContext 
}

func NewEmptyConstr_bodyContext() *Constr_bodyContext {
	var p = new(Constr_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_constr_body
	return p
}

func (*Constr_bodyContext) IsConstr_bodyContext() {}

func NewConstr_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constr_bodyContext {
	var p = new(Constr_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_constr_body

	return p
}

func (s *Constr_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Constr_bodyContext) GetWhere() antlr.Token { return s.where }


func (s *Constr_bodyContext) SetWhere(v antlr.Token) { s.where = v }


func (s *Constr_bodyContext) GetIndex_method() IIdentifierContext { return s.index_method }

func (s *Constr_bodyContext) GetExp() IVexContext { return s.exp }

func (s *Constr_bodyContext) GetRef() INames_in_parensContext { return s.ref }

func (s *Constr_bodyContext) GetExpression() IVexContext { return s.expression }

func (s *Constr_bodyContext) GetCol() INames_in_parensContext { return s.col }

func (s *Constr_bodyContext) GetDefault_expr() IVexContext { return s.default_expr }


func (s *Constr_bodyContext) SetIndex_method(v IIdentifierContext) { s.index_method = v }

func (s *Constr_bodyContext) SetExp(v IVexContext) { s.exp = v }

func (s *Constr_bodyContext) SetRef(v INames_in_parensContext) { s.ref = v }

func (s *Constr_bodyContext) SetExpression(v IVexContext) { s.expression = v }

func (s *Constr_bodyContext) SetCol(v INames_in_parensContext) { s.col = v }

func (s *Constr_bodyContext) SetDefault_expr(v IVexContext) { s.default_expr = v }


func (s *Constr_bodyContext) EXCLUDE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCLUDE, 0)
}

func (s *Constr_bodyContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Constr_bodyContext) AllIndex_column() []IIndex_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_columnContext)(nil)).Elem())
	var tst = make([]IIndex_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_columnContext)
		}
	}

	return tst
}

func (s *Constr_bodyContext) Index_column(i int) IIndex_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_columnContext)
}

func (s *Constr_bodyContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(SQLParserWITH)
}

func (s *Constr_bodyContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, i)
}

func (s *Constr_bodyContext) AllAll_op() []IAll_opContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAll_opContext)(nil)).Elem())
	var tst = make([]IAll_opContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAll_opContext)
		}
	}

	return tst
}

func (s *Constr_bodyContext) All_op(i int) IAll_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_opContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAll_opContext)
}

func (s *Constr_bodyContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Constr_bodyContext) Index_parameters() IIndex_parametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_parametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_parametersContext)
}

func (s *Constr_bodyContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Constr_bodyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Constr_bodyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Constr_bodyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Constr_bodyContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Constr_bodyContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Constr_bodyContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(SQLParserREFERENCES, 0)
}

func (s *Constr_bodyContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Constr_bodyContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Constr_bodyContext) KEY() antlr.TerminalNode {
	return s.GetToken(SQLParserKEY, 0)
}

func (s *Constr_bodyContext) AllNames_in_parens() []INames_in_parensContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem())
	var tst = make([]INames_in_parensContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INames_in_parensContext)
		}
	}

	return tst
}

func (s *Constr_bodyContext) Names_in_parens(i int) INames_in_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INames_in_parensContext)
}

func (s *Constr_bodyContext) AllMATCH() []antlr.TerminalNode {
	return s.GetTokens(SQLParserMATCH)
}

func (s *Constr_bodyContext) MATCH(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserMATCH, i)
}

func (s *Constr_bodyContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(SQLParserON)
}

func (s *Constr_bodyContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserON, i)
}

func (s *Constr_bodyContext) AllX_action() []IX_actionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IX_actionContext)(nil)).Elem())
	var tst = make([]IX_actionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IX_actionContext)
		}
	}

	return tst
}

func (s *Constr_bodyContext) X_action(i int) IX_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IX_actionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IX_actionContext)
}

func (s *Constr_bodyContext) AllFULL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserFULL)
}

func (s *Constr_bodyContext) FULL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserFULL, i)
}

func (s *Constr_bodyContext) AllPARTIAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserPARTIAL)
}

func (s *Constr_bodyContext) PARTIAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserPARTIAL, i)
}

func (s *Constr_bodyContext) AllSIMPLE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSIMPLE)
}

func (s *Constr_bodyContext) SIMPLE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSIMPLE, i)
}

func (s *Constr_bodyContext) AllDELETE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDELETE)
}

func (s *Constr_bodyContext) DELETE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, i)
}

func (s *Constr_bodyContext) AllUPDATE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserUPDATE)
}

func (s *Constr_bodyContext) UPDATE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, i)
}

func (s *Constr_bodyContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SQLParserCHECK, 0)
}

func (s *Constr_bodyContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Constr_bodyContext) INHERIT() antlr.TerminalNode {
	return s.GetToken(SQLParserINHERIT, 0)
}

func (s *Constr_bodyContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Constr_bodyContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Constr_bodyContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLParserUNIQUE, 0)
}

func (s *Constr_bodyContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIMARY, 0)
}

func (s *Constr_bodyContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Constr_bodyContext) Identity_body() IIdentity_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentity_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentity_bodyContext)
}

func (s *Constr_bodyContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(SQLParserGENERATED, 0)
}

func (s *Constr_bodyContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(SQLParserALWAYS, 0)
}

func (s *Constr_bodyContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Constr_bodyContext) STORED() antlr.TerminalNode {
	return s.GetToken(SQLParserSTORED, 0)
}

func (s *Constr_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constr_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Constr_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterConstr_body(s)
	}
}

func (s *Constr_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitConstr_body(s)
	}
}




func (p *SQLParser) Constr_body() (localctx IConstr_bodyContext) {
	localctx = NewConstr_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, SQLParserRULE_constr_body)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5306)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 659, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5229)
			p.Match(SQLParserEXCLUDE)
		}
		p.SetState(5232)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserUSING {
			{
				p.SetState(5230)
				p.Match(SQLParserUSING)
			}
			{
				p.SetState(5231)

				var _x = p.Identifier()


				localctx.(*Constr_bodyContext).index_method = _x
			}

		}
		{
			p.SetState(5234)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5235)
			p.Index_column()
		}
		{
			p.SetState(5236)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(5237)
			p.All_op()
		}
		p.SetState(5245)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(5238)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(5239)
				p.Index_column()
			}
			{
				p.SetState(5240)
				p.Match(SQLParserWITH)
			}
			{
				p.SetState(5241)
				p.All_op()
			}


			p.SetState(5247)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5248)
			p.Match(SQLParserRIGHT_PAREN)
		}
		{
			p.SetState(5249)
			p.Index_parameters()
		}
		p.SetState(5252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWHERE {
			{
				p.SetState(5250)

				var _m = p.Match(SQLParserWHERE)

				localctx.(*Constr_bodyContext).where = _m
			}
			{
				p.SetState(5251)

				var _x = p.vex(0)

				localctx.(*Constr_bodyContext).exp = _x
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5257)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFOREIGN {
			{
				p.SetState(5254)
				p.Match(SQLParserFOREIGN)
			}
			{
				p.SetState(5255)
				p.Match(SQLParserKEY)
			}
			{
				p.SetState(5256)
				p.Names_in_parens()
			}

		}
		{
			p.SetState(5259)
			p.Match(SQLParserREFERENCES)
		}
		{
			p.SetState(5260)
			p.Schema_qualified_name()
		}
		p.SetState(5262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(5261)

				var _x = p.Names_in_parens()


				localctx.(*Constr_bodyContext).ref = _x
			}

		}
		p.SetState(5271)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserMATCH || _la == SQLParserON {
			p.SetState(5269)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserMATCH:
				{
					p.SetState(5264)
					p.Match(SQLParserMATCH)
				}
				{
					p.SetState(5265)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLParserPARTIAL || _la == SQLParserSIMPLE || _la == SQLParserFULL) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}


			case SQLParserON:
				{
					p.SetState(5266)
					p.Match(SQLParserON)
				}
				{
					p.SetState(5267)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLParserDELETE || _la == SQLParserUPDATE) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(5268)
					p.X_action()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5273)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5274)
			p.Match(SQLParserCHECK)
		}
		{
			p.SetState(5275)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5276)

			var _x = p.vex(0)

			localctx.(*Constr_bodyContext).expression = _x
		}
		{
			p.SetState(5277)
			p.Match(SQLParserRIGHT_PAREN)
		}
		p.SetState(5280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO {
			{
				p.SetState(5278)
				p.Match(SQLParserNO)
			}
			{
				p.SetState(5279)
				p.Match(SQLParserINHERIT)
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(5283)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT {
			{
				p.SetState(5282)
				p.Match(SQLParserNOT)
			}

		}
		{
			p.SetState(5285)
			p.Match(SQLParserNULL)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(5289)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserUNIQUE:
			{
				p.SetState(5286)
				p.Match(SQLParserUNIQUE)
			}


		case SQLParserPRIMARY:
			{
				p.SetState(5287)
				p.Match(SQLParserPRIMARY)
			}
			{
				p.SetState(5288)
				p.Match(SQLParserKEY)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(5292)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(5291)

				var _x = p.Names_in_parens()


				localctx.(*Constr_bodyContext).col = _x
			}

		}
		{
			p.SetState(5294)
			p.Index_parameters()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5295)
			p.Match(SQLParserDEFAULT)
		}
		{
			p.SetState(5296)

			var _x = p.vex(0)

			localctx.(*Constr_bodyContext).default_expr = _x
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5297)
			p.Identity_body()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5298)
			p.Match(SQLParserGENERATED)
		}
		{
			p.SetState(5299)
			p.Match(SQLParserALWAYS)
		}
		{
			p.SetState(5300)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(5301)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5302)
			p.vex(0)
		}
		{
			p.SetState(5303)
			p.Match(SQLParserRIGHT_PAREN)
		}
		{
			p.SetState(5304)
			p.Match(SQLParserSTORED)
		}

	}


	return localctx
}


// IAll_opContext is an interface to support dynamic dispatch.
type IAll_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAll_opContext differentiates from other interfaces.
	IsAll_opContext()
}

type All_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_opContext() *All_opContext {
	var p = new(All_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_all_op
	return p
}

func (*All_opContext) IsAll_opContext() {}

func NewAll_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_opContext {
	var p = new(All_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_all_op

	return p
}

func (s *All_opContext) GetParser() antlr.Parser { return s.parser }

func (s *All_opContext) Op() IOpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpContext)
}

func (s *All_opContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *All_opContext) NOT_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT_EQUAL, 0)
}

func (s *All_opContext) LTH() antlr.TerminalNode {
	return s.GetToken(SQLParserLTH, 0)
}

func (s *All_opContext) LEQ() antlr.TerminalNode {
	return s.GetToken(SQLParserLEQ, 0)
}

func (s *All_opContext) GTH() antlr.TerminalNode {
	return s.GetToken(SQLParserGTH, 0)
}

func (s *All_opContext) GEQ() antlr.TerminalNode {
	return s.GetToken(SQLParserGEQ, 0)
}

func (s *All_opContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLParserPLUS, 0)
}

func (s *All_opContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLParserMINUS, 0)
}

func (s *All_opContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *All_opContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(SQLParserDIVIDE, 0)
}

func (s *All_opContext) MODULAR() antlr.TerminalNode {
	return s.GetToken(SQLParserMODULAR, 0)
}

func (s *All_opContext) EXP() antlr.TerminalNode {
	return s.GetToken(SQLParserEXP, 0)
}

func (s *All_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *All_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAll_op(s)
	}
}

func (s *All_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAll_op(s)
	}
}




func (p *SQLParser) All_op() (localctx IAll_opContext) {
	localctx = NewAll_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, SQLParserRULE_all_op)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5321)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserOPERATOR, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5308)
			p.Op()
		}


	case SQLParserEQUAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5309)
			p.Match(SQLParserEQUAL)
		}


	case SQLParserNOT_EQUAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5310)
			p.Match(SQLParserNOT_EQUAL)
		}


	case SQLParserLTH:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5311)
			p.Match(SQLParserLTH)
		}


	case SQLParserLEQ:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5312)
			p.Match(SQLParserLEQ)
		}


	case SQLParserGTH:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5313)
			p.Match(SQLParserGTH)
		}


	case SQLParserGEQ:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5314)
			p.Match(SQLParserGEQ)
		}


	case SQLParserPLUS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5315)
			p.Match(SQLParserPLUS)
		}


	case SQLParserMINUS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5316)
			p.Match(SQLParserMINUS)
		}


	case SQLParserMULTIPLY:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5317)
			p.Match(SQLParserMULTIPLY)
		}


	case SQLParserDIVIDE:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5318)
			p.Match(SQLParserDIVIDE)
		}


	case SQLParserMODULAR:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5319)
			p.Match(SQLParserMODULAR)
		}


	case SQLParserEXP:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5320)
			p.Match(SQLParserEXP)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAll_simple_opContext is an interface to support dynamic dispatch.
type IAll_simple_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAll_simple_opContext differentiates from other interfaces.
	IsAll_simple_opContext()
}

type All_simple_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_simple_opContext() *All_simple_opContext {
	var p = new(All_simple_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_all_simple_op
	return p
}

func (*All_simple_opContext) IsAll_simple_opContext() {}

func NewAll_simple_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_simple_opContext {
	var p = new(All_simple_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_all_simple_op

	return p
}

func (s *All_simple_opContext) GetParser() antlr.Parser { return s.parser }

func (s *All_simple_opContext) Op_chars() IOp_charsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOp_charsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOp_charsContext)
}

func (s *All_simple_opContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *All_simple_opContext) NOT_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT_EQUAL, 0)
}

func (s *All_simple_opContext) LTH() antlr.TerminalNode {
	return s.GetToken(SQLParserLTH, 0)
}

func (s *All_simple_opContext) LEQ() antlr.TerminalNode {
	return s.GetToken(SQLParserLEQ, 0)
}

func (s *All_simple_opContext) GTH() antlr.TerminalNode {
	return s.GetToken(SQLParserGTH, 0)
}

func (s *All_simple_opContext) GEQ() antlr.TerminalNode {
	return s.GetToken(SQLParserGEQ, 0)
}

func (s *All_simple_opContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLParserPLUS, 0)
}

func (s *All_simple_opContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLParserMINUS, 0)
}

func (s *All_simple_opContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *All_simple_opContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(SQLParserDIVIDE, 0)
}

func (s *All_simple_opContext) MODULAR() antlr.TerminalNode {
	return s.GetToken(SQLParserMODULAR, 0)
}

func (s *All_simple_opContext) EXP() antlr.TerminalNode {
	return s.GetToken(SQLParserEXP, 0)
}

func (s *All_simple_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_simple_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *All_simple_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAll_simple_op(s)
	}
}

func (s *All_simple_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAll_simple_op(s)
	}
}




func (p *SQLParser) All_simple_op() (localctx IAll_simple_opContext) {
	localctx = NewAll_simple_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, SQLParserRULE_all_simple_op)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5336)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5323)
			p.Op_chars()
		}


	case SQLParserEQUAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5324)
			p.Match(SQLParserEQUAL)
		}


	case SQLParserNOT_EQUAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5325)
			p.Match(SQLParserNOT_EQUAL)
		}


	case SQLParserLTH:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5326)
			p.Match(SQLParserLTH)
		}


	case SQLParserLEQ:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5327)
			p.Match(SQLParserLEQ)
		}


	case SQLParserGTH:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5328)
			p.Match(SQLParserGTH)
		}


	case SQLParserGEQ:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5329)
			p.Match(SQLParserGEQ)
		}


	case SQLParserPLUS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5330)
			p.Match(SQLParserPLUS)
		}


	case SQLParserMINUS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5331)
			p.Match(SQLParserMINUS)
		}


	case SQLParserMULTIPLY:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5332)
			p.Match(SQLParserMULTIPLY)
		}


	case SQLParserDIVIDE:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5333)
			p.Match(SQLParserDIVIDE)
		}


	case SQLParserMODULAR:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5334)
			p.Match(SQLParserMODULAR)
		}


	case SQLParserEXP:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5335)
			p.Match(SQLParserEXP)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IOp_charsContext is an interface to support dynamic dispatch.
type IOp_charsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOp_charsContext differentiates from other interfaces.
	IsOp_charsContext()
}

type Op_charsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOp_charsContext() *Op_charsContext {
	var p = new(Op_charsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_op_chars
	return p
}

func (*Op_charsContext) IsOp_charsContext() {}

func NewOp_charsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Op_charsContext {
	var p = new(Op_charsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_op_chars

	return p
}

func (s *Op_charsContext) GetParser() antlr.Parser { return s.parser }

func (s *Op_charsContext) OP_CHARS() antlr.TerminalNode {
	return s.GetToken(SQLParserOP_CHARS, 0)
}

func (s *Op_charsContext) LESS_LESS() antlr.TerminalNode {
	return s.GetToken(SQLParserLESS_LESS, 0)
}

func (s *Op_charsContext) GREATER_GREATER() antlr.TerminalNode {
	return s.GetToken(SQLParserGREATER_GREATER, 0)
}

func (s *Op_charsContext) HASH_SIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserHASH_SIGN, 0)
}

func (s *Op_charsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Op_charsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Op_charsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOp_chars(s)
	}
}

func (s *Op_charsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOp_chars(s)
	}
}




func (p *SQLParser) Op_chars() (localctx IOp_charsContext) {
	localctx = NewOp_charsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, SQLParserRULE_op_chars)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5338)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IIndex_parametersContext is an interface to support dynamic dispatch.
type IIndex_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_parametersContext differentiates from other interfaces.
	IsIndex_parametersContext()
}

type Index_parametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_parametersContext() *Index_parametersContext {
	var p = new(Index_parametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_index_parameters
	return p
}

func (*Index_parametersContext) IsIndex_parametersContext() {}

func NewIndex_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_parametersContext {
	var p = new(Index_parametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_index_parameters

	return p
}

func (s *Index_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_parametersContext) Including_index() IIncluding_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncluding_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncluding_indexContext)
}

func (s *Index_parametersContext) With_storage_parameter() IWith_storage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_storage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_storage_parameterContext)
}

func (s *Index_parametersContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Index_parametersContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Index_parametersContext) Table_space() ITable_spaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_spaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_spaceContext)
}

func (s *Index_parametersContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Index_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Index_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndex_parameters(s)
	}
}

func (s *Index_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndex_parameters(s)
	}
}




func (p *SQLParser) Index_parameters() (localctx IIndex_parametersContext) {
	localctx = NewIndex_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, SQLParserRULE_index_parameters)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserINCLUDE {
		{
			p.SetState(5340)
			p.Including_index()
		}

	}
	p.SetState(5344)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(5343)
			p.With_storage_parameter()
		}

	}
	p.SetState(5352)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUSING {
		{
			p.SetState(5346)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(5347)
			p.Match(SQLParserINDEX)
		}
		p.SetState(5350)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 664, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5348)
				p.Table_space()
			}


		case 2:
			{
				p.SetState(5349)
				p.Schema_qualified_name()
			}

		}

	}



	return localctx
}


// INames_in_parensContext is an interface to support dynamic dispatch.
type INames_in_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNames_in_parensContext differentiates from other interfaces.
	IsNames_in_parensContext()
}

type Names_in_parensContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNames_in_parensContext() *Names_in_parensContext {
	var p = new(Names_in_parensContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_names_in_parens
	return p
}

func (*Names_in_parensContext) IsNames_in_parensContext() {}

func NewNames_in_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Names_in_parensContext {
	var p = new(Names_in_parensContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_names_in_parens

	return p
}

func (s *Names_in_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Names_in_parensContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Names_in_parensContext) Names_references() INames_referencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_referencesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_referencesContext)
}

func (s *Names_in_parensContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Names_in_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Names_in_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Names_in_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterNames_in_parens(s)
	}
}

func (s *Names_in_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitNames_in_parens(s)
	}
}




func (p *SQLParser) Names_in_parens() (localctx INames_in_parensContext) {
	localctx = NewNames_in_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, SQLParserRULE_names_in_parens)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5354)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(5355)
		p.Names_references()
	}
	{
		p.SetState(5356)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// INames_referencesContext is an interface to support dynamic dispatch.
type INames_referencesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNames_referencesContext differentiates from other interfaces.
	IsNames_referencesContext()
}

type Names_referencesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNames_referencesContext() *Names_referencesContext {
	var p = new(Names_referencesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_names_references
	return p
}

func (*Names_referencesContext) IsNames_referencesContext() {}

func NewNames_referencesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Names_referencesContext {
	var p = new(Names_referencesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_names_references

	return p
}

func (s *Names_referencesContext) GetParser() antlr.Parser { return s.parser }

func (s *Names_referencesContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *Names_referencesContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Names_referencesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Names_referencesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Names_referencesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Names_referencesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Names_referencesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterNames_references(s)
	}
}

func (s *Names_referencesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitNames_references(s)
	}
}




func (p *SQLParser) Names_references() (localctx INames_referencesContext) {
	localctx = NewNames_referencesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, SQLParserRULE_names_references)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5358)
		p.Schema_qualified_name()
	}
	p.SetState(5363)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(5359)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5360)
			p.Schema_qualified_name()
		}


		p.SetState(5365)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IStorage_parameterContext is an interface to support dynamic dispatch.
type IStorage_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorage_parameterContext differentiates from other interfaces.
	IsStorage_parameterContext()
}

type Storage_parameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorage_parameterContext() *Storage_parameterContext {
	var p = new(Storage_parameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_storage_parameter
	return p
}

func (*Storage_parameterContext) IsStorage_parameterContext() {}

func NewStorage_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Storage_parameterContext {
	var p = new(Storage_parameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_storage_parameter

	return p
}

func (s *Storage_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Storage_parameterContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Storage_parameterContext) AllStorage_parameter_option() []IStorage_parameter_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStorage_parameter_optionContext)(nil)).Elem())
	var tst = make([]IStorage_parameter_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStorage_parameter_optionContext)
		}
	}

	return tst
}

func (s *Storage_parameterContext) Storage_parameter_option(i int) IStorage_parameter_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameter_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameter_optionContext)
}

func (s *Storage_parameterContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Storage_parameterContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Storage_parameterContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Storage_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Storage_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Storage_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterStorage_parameter(s)
	}
}

func (s *Storage_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitStorage_parameter(s)
	}
}




func (p *SQLParser) Storage_parameter() (localctx IStorage_parameterContext) {
	localctx = NewStorage_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, SQLParserRULE_storage_parameter)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5366)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(5367)
		p.Storage_parameter_option()
	}
	p.SetState(5372)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(5368)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5369)
			p.Storage_parameter_option()
		}


		p.SetState(5374)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5375)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IStorage_parameter_optionContext is an interface to support dynamic dispatch.
type IStorage_parameter_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorage_parameter_optionContext differentiates from other interfaces.
	IsStorage_parameter_optionContext()
}

type Storage_parameter_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorage_parameter_optionContext() *Storage_parameter_optionContext {
	var p = new(Storage_parameter_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_storage_parameter_option
	return p
}

func (*Storage_parameter_optionContext) IsStorage_parameter_optionContext() {}

func NewStorage_parameter_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Storage_parameter_optionContext {
	var p = new(Storage_parameter_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_storage_parameter_option

	return p
}

func (s *Storage_parameter_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Storage_parameter_optionContext) Storage_parameter_name() IStorage_parameter_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameter_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameter_nameContext)
}

func (s *Storage_parameter_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Storage_parameter_optionContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Storage_parameter_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Storage_parameter_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Storage_parameter_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterStorage_parameter_option(s)
	}
}

func (s *Storage_parameter_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitStorage_parameter_option(s)
	}
}




func (p *SQLParser) Storage_parameter_option() (localctx IStorage_parameter_optionContext) {
	localctx = NewStorage_parameter_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, SQLParserRULE_storage_parameter_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5377)
		p.Storage_parameter_name()
	}
	p.SetState(5380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserEQUAL {
		{
			p.SetState(5378)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(5379)
			p.vex(0)
		}

	}



	return localctx
}


// IStorage_parameter_nameContext is an interface to support dynamic dispatch.
type IStorage_parameter_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorage_parameter_nameContext differentiates from other interfaces.
	IsStorage_parameter_nameContext()
}

type Storage_parameter_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorage_parameter_nameContext() *Storage_parameter_nameContext {
	var p = new(Storage_parameter_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_storage_parameter_name
	return p
}

func (*Storage_parameter_nameContext) IsStorage_parameter_nameContext() {}

func NewStorage_parameter_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Storage_parameter_nameContext {
	var p = new(Storage_parameter_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_storage_parameter_name

	return p
}

func (s *Storage_parameter_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Storage_parameter_nameContext) AllCol_label() []ICol_labelContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICol_labelContext)(nil)).Elem())
	var tst = make([]ICol_labelContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICol_labelContext)
		}
	}

	return tst
}

func (s *Storage_parameter_nameContext) Col_label(i int) ICol_labelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICol_labelContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICol_labelContext)
}

func (s *Storage_parameter_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Storage_parameter_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Storage_parameter_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Storage_parameter_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterStorage_parameter_name(s)
	}
}

func (s *Storage_parameter_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitStorage_parameter_name(s)
	}
}




func (p *SQLParser) Storage_parameter_name() (localctx IStorage_parameter_nameContext) {
	localctx = NewStorage_parameter_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, SQLParserRULE_storage_parameter_name)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5382)
		p.Col_label()
	}
	p.SetState(5385)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserDOT {
		{
			p.SetState(5383)
			p.Match(SQLParserDOT)
		}
		{
			p.SetState(5384)
			p.Col_label()
		}

	}



	return localctx
}


// IWith_storage_parameterContext is an interface to support dynamic dispatch.
type IWith_storage_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_storage_parameterContext differentiates from other interfaces.
	IsWith_storage_parameterContext()
}

type With_storage_parameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_storage_parameterContext() *With_storage_parameterContext {
	var p = new(With_storage_parameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_with_storage_parameter
	return p
}

func (*With_storage_parameterContext) IsWith_storage_parameterContext() {}

func NewWith_storage_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_storage_parameterContext {
	var p = new(With_storage_parameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_with_storage_parameter

	return p
}

func (s *With_storage_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *With_storage_parameterContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *With_storage_parameterContext) Storage_parameter() IStorage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorage_parameterContext)
}

func (s *With_storage_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_storage_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_storage_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterWith_storage_parameter(s)
	}
}

func (s *With_storage_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitWith_storage_parameter(s)
	}
}




func (p *SQLParser) With_storage_parameter() (localctx IWith_storage_parameterContext) {
	localctx = NewWith_storage_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, SQLParserRULE_with_storage_parameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5387)
		p.Match(SQLParserWITH)
	}
	{
		p.SetState(5388)
		p.Storage_parameter()
	}



	return localctx
}


// IStorage_parameter_oidContext is an interface to support dynamic dispatch.
type IStorage_parameter_oidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorage_parameter_oidContext differentiates from other interfaces.
	IsStorage_parameter_oidContext()
}

type Storage_parameter_oidContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorage_parameter_oidContext() *Storage_parameter_oidContext {
	var p = new(Storage_parameter_oidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_storage_parameter_oid
	return p
}

func (*Storage_parameter_oidContext) IsStorage_parameter_oidContext() {}

func NewStorage_parameter_oidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Storage_parameter_oidContext {
	var p = new(Storage_parameter_oidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_storage_parameter_oid

	return p
}

func (s *Storage_parameter_oidContext) GetParser() antlr.Parser { return s.parser }

func (s *Storage_parameter_oidContext) With_storage_parameter() IWith_storage_parameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_storage_parameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_storage_parameterContext)
}

func (s *Storage_parameter_oidContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Storage_parameter_oidContext) OIDS() antlr.TerminalNode {
	return s.GetToken(SQLParserOIDS, 0)
}

func (s *Storage_parameter_oidContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHOUT, 0)
}

func (s *Storage_parameter_oidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Storage_parameter_oidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Storage_parameter_oidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterStorage_parameter_oid(s)
	}
}

func (s *Storage_parameter_oidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitStorage_parameter_oid(s)
	}
}




func (p *SQLParser) Storage_parameter_oid() (localctx IStorage_parameter_oidContext) {
	localctx = NewStorage_parameter_oidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, SQLParserRULE_storage_parameter_oid)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5395)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 670, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5390)
			p.With_storage_parameter()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5391)
			p.Match(SQLParserWITH)
		}
		{
			p.SetState(5392)
			p.Match(SQLParserOIDS)
		}



	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5393)
			p.Match(SQLParserWITHOUT)
		}
		{
			p.SetState(5394)
			p.Match(SQLParserOIDS)
		}


	}


	return localctx
}


// IOn_commitContext is an interface to support dynamic dispatch.
type IOn_commitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_commitContext differentiates from other interfaces.
	IsOn_commitContext()
}

type On_commitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_commitContext() *On_commitContext {
	var p = new(On_commitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_on_commit
	return p
}

func (*On_commitContext) IsOn_commitContext() {}

func NewOn_commitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_commitContext {
	var p = new(On_commitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_on_commit

	return p
}

func (s *On_commitContext) GetParser() antlr.Parser { return s.parser }

func (s *On_commitContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *On_commitContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMIT, 0)
}

func (s *On_commitContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(SQLParserPRESERVE, 0)
}

func (s *On_commitContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SQLParserROWS, 0)
}

func (s *On_commitContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, 0)
}

func (s *On_commitContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *On_commitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_commitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *On_commitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOn_commit(s)
	}
}

func (s *On_commitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOn_commit(s)
	}
}




func (p *SQLParser) On_commit() (localctx IOn_commitContext) {
	localctx = NewOn_commitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, SQLParserRULE_on_commit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5397)
		p.Match(SQLParserON)
	}
	{
		p.SetState(5398)
		p.Match(SQLParserCOMMIT)
	}
	p.SetState(5404)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserPRESERVE:
		{
			p.SetState(5399)
			p.Match(SQLParserPRESERVE)
		}
		{
			p.SetState(5400)
			p.Match(SQLParserROWS)
		}


	case SQLParserDELETE:
		{
			p.SetState(5401)
			p.Match(SQLParserDELETE)
		}
		{
			p.SetState(5402)
			p.Match(SQLParserROWS)
		}


	case SQLParserDROP:
		{
			p.SetState(5403)
			p.Match(SQLParserDROP)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// ITable_spaceContext is an interface to support dynamic dispatch.
type ITable_spaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_spaceContext differentiates from other interfaces.
	IsTable_spaceContext()
}

type Table_spaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_spaceContext() *Table_spaceContext {
	var p = new(Table_spaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_space
	return p
}

func (*Table_spaceContext) IsTable_spaceContext() {}

func NewTable_spaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_spaceContext {
	var p = new(Table_spaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_space

	return p
}

func (s *Table_spaceContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_spaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Table_spaceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_spaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_spaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_spaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_space(s)
	}
}

func (s *Table_spaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_space(s)
	}
}




func (p *SQLParser) Table_space() (localctx ITable_spaceContext) {
	localctx = NewTable_spaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, SQLParserRULE_table_space)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5406)
		p.Match(SQLParserTABLESPACE)
	}
	{
		p.SetState(5407)
		p.Identifier()
	}



	return localctx
}


// ISet_tablespaceContext is an interface to support dynamic dispatch.
type ISet_tablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_tablespaceContext differentiates from other interfaces.
	IsSet_tablespaceContext()
}

type Set_tablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_tablespaceContext() *Set_tablespaceContext {
	var p = new(Set_tablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_tablespace
	return p
}

func (*Set_tablespaceContext) IsSet_tablespaceContext() {}

func NewSet_tablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_tablespaceContext {
	var p = new(Set_tablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_tablespace

	return p
}

func (s *Set_tablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_tablespaceContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Set_tablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Set_tablespaceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Set_tablespaceContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOWAIT, 0)
}

func (s *Set_tablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_tablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_tablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_tablespace(s)
	}
}

func (s *Set_tablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_tablespace(s)
	}
}




func (p *SQLParser) Set_tablespace() (localctx ISet_tablespaceContext) {
	localctx = NewSet_tablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, SQLParserRULE_set_tablespace)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5409)
		p.Match(SQLParserSET)
	}
	{
		p.SetState(5410)
		p.Match(SQLParserTABLESPACE)
	}
	{
		p.SetState(5411)
		p.Identifier()
	}
	p.SetState(5413)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserNOWAIT {
		{
			p.SetState(5412)
			p.Match(SQLParserNOWAIT)
		}

	}



	return localctx
}


// IX_actionContext is an interface to support dynamic dispatch.
type IX_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsX_actionContext differentiates from other interfaces.
	IsX_actionContext()
}

type X_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyX_actionContext() *X_actionContext {
	var p = new(X_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_x_action
	return p
}

func (*X_actionContext) IsX_actionContext() {}

func NewX_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *X_actionContext {
	var p = new(X_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_x_action

	return p
}

func (s *X_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *X_actionContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *X_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *X_actionContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *X_actionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *X_actionContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *X_actionContext) ACTION() antlr.TerminalNode {
	return s.GetToken(SQLParserACTION, 0)
}

func (s *X_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *X_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *X_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterX_action(s)
	}
}

func (s *X_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitX_action(s)
	}
}




func (p *SQLParser) X_action() (localctx IX_actionContext) {
	localctx = NewX_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, SQLParserRULE_x_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5420)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCASCADE, SQLParserRESTRICT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5415)
			p.Cascade_restrict()
		}


	case SQLParserSET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5416)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(5417)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserDEFAULT || _la == SQLParserNULL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case SQLParserNO:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5418)
			p.Match(SQLParserNO)
		}
		{
			p.SetState(5419)
			p.Match(SQLParserACTION)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IOwner_toContext is an interface to support dynamic dispatch.
type IOwner_toContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsOwner_toContext differentiates from other interfaces.
	IsOwner_toContext()
}

type Owner_toContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyOwner_toContext() *Owner_toContext {
	var p = new(Owner_toContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_owner_to
	return p
}

func (*Owner_toContext) IsOwner_toContext() {}

func NewOwner_toContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Owner_toContext {
	var p = new(Owner_toContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_owner_to

	return p
}

func (s *Owner_toContext) GetParser() antlr.Parser { return s.parser }

func (s *Owner_toContext) GetName() IIdentifierContext { return s.name }


func (s *Owner_toContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Owner_toContext) OWNER() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNER, 0)
}

func (s *Owner_toContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Owner_toContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_USER, 0)
}

func (s *Owner_toContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION_USER, 0)
}

func (s *Owner_toContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Owner_toContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Owner_toContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Owner_toContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOwner_to(s)
	}
}

func (s *Owner_toContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOwner_to(s)
	}
}




func (p *SQLParser) Owner_to() (localctx IOwner_toContext) {
	localctx = NewOwner_toContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, SQLParserRULE_owner_to)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5422)
		p.Match(SQLParserOWNER)
	}
	{
		p.SetState(5423)
		p.Match(SQLParserTO)
	}
	p.SetState(5427)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(5424)

			var _x = p.Identifier()


			localctx.(*Owner_toContext).name = _x
		}


	case SQLParserCURRENT_USER:
		{
			p.SetState(5425)
			p.Match(SQLParserCURRENT_USER)
		}


	case SQLParserSESSION_USER:
		{
			p.SetState(5426)
			p.Match(SQLParserSESSION_USER)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IRename_toContext is an interface to support dynamic dispatch.
type IRename_toContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsRename_toContext differentiates from other interfaces.
	IsRename_toContext()
}

type Rename_toContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyRename_toContext() *Rename_toContext {
	var p = new(Rename_toContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_rename_to
	return p
}

func (*Rename_toContext) IsRename_toContext() {}

func NewRename_toContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rename_toContext {
	var p = new(Rename_toContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_rename_to

	return p
}

func (s *Rename_toContext) GetParser() antlr.Parser { return s.parser }

func (s *Rename_toContext) GetName() IIdentifierContext { return s.name }


func (s *Rename_toContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Rename_toContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SQLParserRENAME, 0)
}

func (s *Rename_toContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Rename_toContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Rename_toContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rename_toContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Rename_toContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRename_to(s)
	}
}

func (s *Rename_toContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRename_to(s)
	}
}




func (p *SQLParser) Rename_to() (localctx IRename_toContext) {
	localctx = NewRename_toContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, SQLParserRULE_rename_to)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5429)
		p.Match(SQLParserRENAME)
	}
	{
		p.SetState(5430)
		p.Match(SQLParserTO)
	}
	{
		p.SetState(5431)

		var _x = p.Identifier()


		localctx.(*Rename_toContext).name = _x
	}



	return localctx
}


// ISet_schemaContext is an interface to support dynamic dispatch.
type ISet_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_schemaContext differentiates from other interfaces.
	IsSet_schemaContext()
}

type Set_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_schemaContext() *Set_schemaContext {
	var p = new(Set_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_schema
	return p
}

func (*Set_schemaContext) IsSet_schemaContext() {}

func NewSet_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_schemaContext {
	var p = new(Set_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_schema

	return p
}

func (s *Set_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_schemaContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Set_schemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Set_schemaContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Set_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_schema(s)
	}
}

func (s *Set_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_schema(s)
	}
}




func (p *SQLParser) Set_schema() (localctx ISet_schemaContext) {
	localctx = NewSet_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, SQLParserRULE_set_schema)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5433)
		p.Match(SQLParserSET)
	}
	{
		p.SetState(5434)
		p.Match(SQLParserSCHEMA)
	}
	{
		p.SetState(5435)
		p.Identifier()
	}



	return localctx
}


// ITable_column_privilegeContext is an interface to support dynamic dispatch.
type ITable_column_privilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_column_privilegeContext differentiates from other interfaces.
	IsTable_column_privilegeContext()
}

type Table_column_privilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_column_privilegeContext() *Table_column_privilegeContext {
	var p = new(Table_column_privilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_column_privilege
	return p
}

func (*Table_column_privilegeContext) IsTable_column_privilegeContext() {}

func NewTable_column_privilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_privilegeContext {
	var p = new(Table_column_privilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_column_privilege

	return p
}

func (s *Table_column_privilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_privilegeContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SQLParserSELECT, 0)
}

func (s *Table_column_privilegeContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SQLParserINSERT, 0)
}

func (s *Table_column_privilegeContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Table_column_privilegeContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, 0)
}

func (s *Table_column_privilegeContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUNCATE, 0)
}

func (s *Table_column_privilegeContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(SQLParserREFERENCES, 0)
}

func (s *Table_column_privilegeContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Table_column_privilegeContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Table_column_privilegeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIVILEGES, 0)
}

func (s *Table_column_privilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_privilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_column_privilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_column_privilege(s)
	}
}

func (s *Table_column_privilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_column_privilege(s)
	}
}




func (p *SQLParser) Table_column_privilege() (localctx ITable_column_privilegeContext) {
	localctx = NewTable_column_privilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, SQLParserRULE_table_column_privilege)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5448)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserSELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5437)
			p.Match(SQLParserSELECT)
		}


	case SQLParserINSERT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5438)
			p.Match(SQLParserINSERT)
		}


	case SQLParserUPDATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5439)
			p.Match(SQLParserUPDATE)
		}


	case SQLParserDELETE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5440)
			p.Match(SQLParserDELETE)
		}


	case SQLParserTRUNCATE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5441)
			p.Match(SQLParserTRUNCATE)
		}


	case SQLParserREFERENCES:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5442)
			p.Match(SQLParserREFERENCES)
		}


	case SQLParserTRIGGER:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5443)
			p.Match(SQLParserTRIGGER)
		}


	case SQLParserALL:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5444)
			p.Match(SQLParserALL)
		}
		p.SetState(5446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPRIVILEGES {
			{
				p.SetState(5445)
				p.Match(SQLParserPRIVILEGES)
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IUsage_select_updateContext is an interface to support dynamic dispatch.
type IUsage_select_updateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsage_select_updateContext differentiates from other interfaces.
	IsUsage_select_updateContext()
}

type Usage_select_updateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsage_select_updateContext() *Usage_select_updateContext {
	var p = new(Usage_select_updateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_usage_select_update
	return p
}

func (*Usage_select_updateContext) IsUsage_select_updateContext() {}

func NewUsage_select_updateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Usage_select_updateContext {
	var p = new(Usage_select_updateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_usage_select_update

	return p
}

func (s *Usage_select_updateContext) GetParser() antlr.Parser { return s.parser }

func (s *Usage_select_updateContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserUSAGE, 0)
}

func (s *Usage_select_updateContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SQLParserSELECT, 0)
}

func (s *Usage_select_updateContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Usage_select_updateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Usage_select_updateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Usage_select_updateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUsage_select_update(s)
	}
}

func (s *Usage_select_updateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUsage_select_update(s)
	}
}




func (p *SQLParser) Usage_select_update() (localctx IUsage_select_updateContext) {
	localctx = NewUsage_select_updateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, SQLParserRULE_usage_select_update)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5450)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserUPDATE || _la == SQLParserSELECT || _la == SQLParserUSAGE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IPartition_by_columnsContext is an interface to support dynamic dispatch.
type IPartition_by_columnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartition_by_columnsContext differentiates from other interfaces.
	IsPartition_by_columnsContext()
}

type Partition_by_columnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_by_columnsContext() *Partition_by_columnsContext {
	var p = new(Partition_by_columnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_partition_by_columns
	return p
}

func (*Partition_by_columnsContext) IsPartition_by_columnsContext() {}

func NewPartition_by_columnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_by_columnsContext {
	var p = new(Partition_by_columnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_partition_by_columns

	return p
}

func (s *Partition_by_columnsContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_by_columnsContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SQLParserPARTITION, 0)
}

func (s *Partition_by_columnsContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Partition_by_columnsContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Partition_by_columnsContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Partition_by_columnsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Partition_by_columnsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Partition_by_columnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_by_columnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Partition_by_columnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPartition_by_columns(s)
	}
}

func (s *Partition_by_columnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPartition_by_columns(s)
	}
}




func (p *SQLParser) Partition_by_columns() (localctx IPartition_by_columnsContext) {
	localctx = NewPartition_by_columnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, SQLParserRULE_partition_by_columns)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5452)
		p.Match(SQLParserPARTITION)
	}
	{
		p.SetState(5453)
		p.Match(SQLParserBY)
	}
	{
		p.SetState(5454)
		p.vex(0)
	}
	p.SetState(5459)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(5455)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5456)
			p.vex(0)
		}


		p.SetState(5461)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ICascade_restrictContext is an interface to support dynamic dispatch.
type ICascade_restrictContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCascade_restrictContext differentiates from other interfaces.
	IsCascade_restrictContext()
}

type Cascade_restrictContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCascade_restrictContext() *Cascade_restrictContext {
	var p = new(Cascade_restrictContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_cascade_restrict
	return p
}

func (*Cascade_restrictContext) IsCascade_restrictContext() {}

func NewCascade_restrictContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cascade_restrictContext {
	var p = new(Cascade_restrictContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_cascade_restrict

	return p
}

func (s *Cascade_restrictContext) GetParser() antlr.Parser { return s.parser }

func (s *Cascade_restrictContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(SQLParserCASCADE, 0)
}

func (s *Cascade_restrictContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICT, 0)
}

func (s *Cascade_restrictContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cascade_restrictContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cascade_restrictContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCascade_restrict(s)
	}
}

func (s *Cascade_restrictContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCascade_restrict(s)
	}
}




func (p *SQLParser) Cascade_restrict() (localctx ICascade_restrictContext) {
	localctx = NewCascade_restrictContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, SQLParserRULE_cascade_restrict)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5462)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserCASCADE || _la == SQLParserRESTRICT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ICollate_identifierContext is an interface to support dynamic dispatch.
type ICollate_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCollation returns the collation rule contexts.
	GetCollation() ISchema_qualified_nameContext


	// SetCollation sets the collation rule contexts.
	SetCollation(ISchema_qualified_nameContext)


	// IsCollate_identifierContext differentiates from other interfaces.
	IsCollate_identifierContext()
}

type Collate_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	collation ISchema_qualified_nameContext 
}

func NewEmptyCollate_identifierContext() *Collate_identifierContext {
	var p = new(Collate_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_collate_identifier
	return p
}

func (*Collate_identifierContext) IsCollate_identifierContext() {}

func NewCollate_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collate_identifierContext {
	var p = new(Collate_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_collate_identifier

	return p
}

func (s *Collate_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Collate_identifierContext) GetCollation() ISchema_qualified_nameContext { return s.collation }


func (s *Collate_identifierContext) SetCollation(v ISchema_qualified_nameContext) { s.collation = v }


func (s *Collate_identifierContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATE, 0)
}

func (s *Collate_identifierContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Collate_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collate_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Collate_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCollate_identifier(s)
	}
}

func (s *Collate_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCollate_identifier(s)
	}
}




func (p *SQLParser) Collate_identifier() (localctx ICollate_identifierContext) {
	localctx = NewCollate_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, SQLParserRULE_collate_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5464)
		p.Match(SQLParserCOLLATE)
	}
	{
		p.SetState(5465)

		var _x = p.Schema_qualified_name()


		localctx.(*Collate_identifierContext).collation = _x
	}



	return localctx
}


// IIndirection_varContext is an interface to support dynamic dispatch.
type IIndirection_varContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndirection_varContext differentiates from other interfaces.
	IsIndirection_varContext()
}

type Indirection_varContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndirection_varContext() *Indirection_varContext {
	var p = new(Indirection_varContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_indirection_var
	return p
}

func (*Indirection_varContext) IsIndirection_varContext() {}

func NewIndirection_varContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Indirection_varContext {
	var p = new(Indirection_varContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_indirection_var

	return p
}

func (s *Indirection_varContext) GetParser() antlr.Parser { return s.parser }

func (s *Indirection_varContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Indirection_varContext) Dollar_number() IDollar_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDollar_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDollar_numberContext)
}

func (s *Indirection_varContext) Indirection_list() IIndirection_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirection_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndirection_listContext)
}

func (s *Indirection_varContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Indirection_varContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Indirection_varContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndirection_var(s)
	}
}

func (s *Indirection_varContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndirection_var(s)
	}
}




func (p *SQLParser) Indirection_var() (localctx IIndirection_varContext) {
	localctx = NewIndirection_varContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, SQLParserRULE_indirection_var)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5469)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(5467)
			p.Identifier()
		}


	case SQLParserDOLLAR_NUMBER:
		{
			p.SetState(5468)
			p.Dollar_number()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5472)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 679, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5471)
			p.Indirection_list()
		}


	}



	return localctx
}


// IDollar_numberContext is an interface to support dynamic dispatch.
type IDollar_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDollar_numberContext differentiates from other interfaces.
	IsDollar_numberContext()
}

type Dollar_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDollar_numberContext() *Dollar_numberContext {
	var p = new(Dollar_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_dollar_number
	return p
}

func (*Dollar_numberContext) IsDollar_numberContext() {}

func NewDollar_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dollar_numberContext {
	var p = new(Dollar_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_dollar_number

	return p
}

func (s *Dollar_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Dollar_numberContext) DOLLAR_NUMBER() antlr.TerminalNode {
	return s.GetToken(SQLParserDOLLAR_NUMBER, 0)
}

func (s *Dollar_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dollar_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Dollar_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDollar_number(s)
	}
}

func (s *Dollar_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDollar_number(s)
	}
}




func (p *SQLParser) Dollar_number() (localctx IDollar_numberContext) {
	localctx = NewDollar_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, SQLParserRULE_dollar_number)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5474)
		p.Match(SQLParserDOLLAR_NUMBER)
	}



	return localctx
}


// IIndirection_listContext is an interface to support dynamic dispatch.
type IIndirection_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndirection_listContext differentiates from other interfaces.
	IsIndirection_listContext()
}

type Indirection_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndirection_listContext() *Indirection_listContext {
	var p = new(Indirection_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_indirection_list
	return p
}

func (*Indirection_listContext) IsIndirection_listContext() {}

func NewIndirection_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Indirection_listContext {
	var p = new(Indirection_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_indirection_list

	return p
}

func (s *Indirection_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Indirection_listContext) AllIndirection() []IIndirectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndirectionContext)(nil)).Elem())
	var tst = make([]IIndirectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndirectionContext)
		}
	}

	return tst
}

func (s *Indirection_listContext) Indirection(i int) IIndirectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndirectionContext)
}

func (s *Indirection_listContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Indirection_listContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Indirection_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Indirection_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Indirection_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndirection_list(s)
	}
}

func (s *Indirection_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndirection_list(s)
	}
}




func (p *SQLParser) Indirection_list() (localctx IIndirection_listContext) {
	localctx = NewIndirection_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, SQLParserRULE_indirection_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(5489)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 682, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5477)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					{
						p.SetState(5476)
						p.Indirection()
					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5479)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 680, p.GetParserRuleContext())
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5484)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 681, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(5481)
					p.Indirection()
				}


			}
			p.SetState(5486)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 681, p.GetParserRuleContext())
		}
		{
			p.SetState(5487)
			p.Match(SQLParserDOT)
		}
		{
			p.SetState(5488)
			p.Match(SQLParserMULTIPLY)
		}

	}


	return localctx
}


// IIndirectionContext is an interface to support dynamic dispatch.
type IIndirectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndirectionContext differentiates from other interfaces.
	IsIndirectionContext()
}

type IndirectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndirectionContext() *IndirectionContext {
	var p = new(IndirectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_indirection
	return p
}

func (*IndirectionContext) IsIndirectionContext() {}

func NewIndirectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndirectionContext {
	var p = new(IndirectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_indirection

	return p
}

func (s *IndirectionContext) GetParser() antlr.Parser { return s.parser }

func (s *IndirectionContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *IndirectionContext) Col_label() ICol_labelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICol_labelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICol_labelContext)
}

func (s *IndirectionContext) LEFT_BRACKET() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_BRACKET, 0)
}

func (s *IndirectionContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *IndirectionContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *IndirectionContext) RIGHT_BRACKET() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_BRACKET, 0)
}

func (s *IndirectionContext) COLON() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLON, 0)
}

func (s *IndirectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndirectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *IndirectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndirection(s)
	}
}

func (s *IndirectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndirection(s)
	}
}




func (p *SQLParser) Indirection() (localctx IIndirectionContext) {
	localctx = NewIndirectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, SQLParserRULE_indirection)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5506)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 685, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5491)
			p.Match(SQLParserDOT)
		}
		{
			p.SetState(5492)
			p.Col_label()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5493)
			p.Match(SQLParserLEFT_BRACKET)
		}
		{
			p.SetState(5494)
			p.vex(0)
		}
		{
			p.SetState(5495)
			p.Match(SQLParserRIGHT_BRACKET)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5497)
			p.Match(SQLParserLEFT_BRACKET)
		}
		p.SetState(5499)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)) | (1 << (SQLParserALL - 352)) | (1 << (SQLParserANY - 352)) | (1 << (SQLParserARRAY - 352)) | (1 << (SQLParserCASE - 352)))) != 0) || ((((_la - 384)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 384))) & ((1 << (SQLParserCAST - 384)) | (1 << (SQLParserCURRENT_CATALOG - 384)) | (1 << (SQLParserCURRENT_DATE - 384)) | (1 << (SQLParserCURRENT_TIME - 384)) | (1 << (SQLParserCURRENT_TIMESTAMP - 384)) | (1 << (SQLParserCURRENT_USER - 384)) | (1 << (SQLParserFALSE - 384)))) != 0) || ((((_la - 419)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 419))) & ((1 << (SQLParserLOCALTIME - 419)) | (1 << (SQLParserLOCALTIMESTAMP - 419)) | (1 << (SQLParserNOT - 419)) | (1 << (SQLParserNULL - 419)) | (1 << (SQLParserON - 419)) | (1 << (SQLParserSESSION_USER - 419)) | (1 << (SQLParserSOME - 419)) | (1 << (SQLParserTRUE - 419)) | (1 << (SQLParserUSER - 419)) | (1 << (SQLParserALIGNMENT - 419)))) != 0) || ((((_la - 451)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 451))) & ((1 << (SQLParserALLOW_CONNECTIONS - 451)) | (1 << (SQLParserBASETYPE - 451)) | (1 << (SQLParserBUFFERS - 451)) | (1 << (SQLParserBYPASSRLS - 451)) | (1 << (SQLParserCANONICAL - 451)) | (1 << (SQLParserCATEGORY - 451)) | (1 << (SQLParserCOLLATABLE - 451)) | (1 << (SQLParserCOMBINEFUNC - 451)) | (1 << (SQLParserCOMMUTATOR - 451)) | (1 << (SQLParserCONNECT - 451)) | (1 << (SQLParserCOSTS - 451)) | (1 << (SQLParserCREATEDB - 451)) | (1 << (SQLParserCREATEROLE - 451)) | (1 << (SQLParserDESERIALFUNC - 451)) | (1 << (SQLParserDETERMINISTIC - 451)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 451)) | (1 << (SQLParserELEMENT - 451)) | (1 << (SQLParserEXTENDED - 451)) | (1 << (SQLParserFINALFUNC - 451)) | (1 << (SQLParserFINALFUNC_EXTRA - 451)) | (1 << (SQLParserFINALFUNC_MODIFY - 451)) | (1 << (SQLParserFORCE_NOT_NULL - 451)) | (1 << (SQLParserFORCE_NULL - 451)) | (1 << (SQLParserFORCE_QUOTE - 451)) | (1 << (SQLParserFORMAT - 451)) | (1 << (SQLParserGETTOKEN - 451)) | (1 << (SQLParserHASH - 451)) | (1 << (SQLParserHASHES - 451)) | (1 << (SQLParserHEADLINE - 451)) | (1 << (SQLParserHYPOTHETICAL - 451)) | (1 << (SQLParserINDEX_CLEANUP - 451)) | (1 << (SQLParserINIT - 451)))) != 0) || ((((_la - 483)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 483))) & ((1 << (SQLParserINITCOND - 483)) | (1 << (SQLParserINTERNALLENGTH - 483)) | (1 << (SQLParserIS_TEMPLATE - 483)) | (1 << (SQLParserJSON - 483)) | (1 << (SQLParserLC_COLLATE - 483)) | (1 << (SQLParserLC_CTYPE - 483)) | (1 << (SQLParserLEFTARG - 483)) | (1 << (SQLParserLEXIZE - 483)) | (1 << (SQLParserLEXTYPES - 483)) | (1 << (SQLParserLIST - 483)) | (1 << (SQLParserLOCALE - 483)) | (1 << (SQLParserLOGIN - 483)) | (1 << (SQLParserMAIN - 483)) | (1 << (SQLParserMERGES - 483)) | (1 << (SQLParserMFINALFUNC - 483)) | (1 << (SQLParserMFINALFUNC_EXTRA - 483)) | (1 << (SQLParserMFINALFUNC_MODIFY - 483)) | (1 << (SQLParserMINITCOND - 483)) | (1 << (SQLParserMINVFUNC - 483)) | (1 << (SQLParserMODULUS - 483)) | (1 << (SQLParserMSFUNC - 483)) | (1 << (SQLParserMSSPACE - 483)) | (1 << (SQLParserMSTYPE - 483)) | (1 << (SQLParserNEGATOR - 483)) | (1 << (SQLParserNOBYPASSRLS - 483)) | (1 << (SQLParserNOCREATEDB - 483)) | (1 << (SQLParserNOCREATEROLE - 483)) | (1 << (SQLParserNOINHERIT - 483)) | (1 << (SQLParserNOLOGIN - 483)) | (1 << (SQLParserNOREPLICATION - 483)) | (1 << (SQLParserNOSUPERUSER - 483)) | (1 << (SQLParserOUTPUT - 483)))) != 0) || ((((_la - 515)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 515))) & ((1 << (SQLParserPASSEDBYVALUE - 515)) | (1 << (SQLParserPATH - 515)) | (1 << (SQLParserPERMISSIVE - 515)) | (1 << (SQLParserPLAIN - 515)) | (1 << (SQLParserPREFERRED - 515)) | (1 << (SQLParserPROVIDER - 515)) | (1 << (SQLParserREAD_ONLY - 515)) | (1 << (SQLParserREAD_WRITE - 515)) | (1 << (SQLParserRECEIVE - 515)) | (1 << (SQLParserREMAINDER - 515)) | (1 << (SQLParserREPLICATION - 515)) | (1 << (SQLParserRESTRICTED - 515)) | (1 << (SQLParserRESTRICTIVE - 515)) | (1 << (SQLParserRIGHTARG - 515)) | (1 << (SQLParserSAFE - 515)) | (1 << (SQLParserSEND - 515)) | (1 << (SQLParserSERIALFUNC - 515)) | (1 << (SQLParserSETTINGS - 515)) | (1 << (SQLParserSFUNC - 515)) | (1 << (SQLParserSHAREABLE - 515)) | (1 << (SQLParserSKIP_LOCKED - 515)) | (1 << (SQLParserSORTOP - 515)) | (1 << (SQLParserSSPACE - 515)) | (1 << (SQLParserSTYPE - 515)) | (1 << (SQLParserSUBTYPE_DIFF - 515)) | (1 << (SQLParserSUBTYPE_OPCLASS - 515)) | (1 << (SQLParserSUBTYPE - 515)) | (1 << (SQLParserSUMMARY - 515)) | (1 << (SQLParserSUPERUSER - 515)) | (1 << (SQLParserTIMING - 515)) | (1 << (SQLParserTYPMOD_IN - 515)) | (1 << (SQLParserTYPMOD_OUT - 515)))) != 0) || ((((_la - 547)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 547))) & ((1 << (SQLParserUNSAFE - 547)) | (1 << (SQLParserUSAGE - 547)) | (1 << (SQLParserVARIABLE - 547)) | (1 << (SQLParserWAL - 547)) | (1 << (SQLParserYAML - 547)) | (1 << (SQLParserALIAS - 547)) | (1 << (SQLParserASSERT - 547)) | (1 << (SQLParserCONSTANT - 547)) | (1 << (SQLParserDATATYPE - 547)) | (1 << (SQLParserDEBUG - 547)) | (1 << (SQLParserDETAIL - 547)) | (1 << (SQLParserDIAGNOSTICS - 547)) | (1 << (SQLParserELSEIF - 547)) | (1 << (SQLParserELSIF - 547)) | (1 << (SQLParserERRCODE - 547)) | (1 << (SQLParserEXIT - 547)) | (1 << (SQLParserEXCEPTION - 547)) | (1 << (SQLParserFOREACH - 547)) | (1 << (SQLParserGET - 547)) | (1 << (SQLParserHINT - 547)) | (1 << (SQLParserINFO - 547)) | (1 << (SQLParserLOG - 547)) | (1 << (SQLParserLOOP - 547)) | (1 << (SQLParserMESSAGE - 547)) | (1 << (SQLParserNOTICE - 547)) | (1 << (SQLParserOPEN - 547)) | (1 << (SQLParserPERFORM - 547)) | (1 << (SQLParserQUERY - 547)) | (1 << (SQLParserRAISE - 547)) | (1 << (SQLParserRECORD - 547)) | (1 << (SQLParserRETURN - 547)) | (1 << (SQLParserREVERSE - 547)))) != 0) || ((((_la - 579)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 579))) & ((1 << (SQLParserROWTYPE - 579)) | (1 << (SQLParserSLICE - 579)) | (1 << (SQLParserSQLSTATE - 579)) | (1 << (SQLParserSTACKED - 579)) | (1 << (SQLParserWARNING - 579)) | (1 << (SQLParserWHILE - 579)) | (1 << (SQLParserLEFT_PAREN - 579)) | (1 << (SQLParserPLUS - 579)) | (1 << (SQLParserMINUS - 579)) | (1 << (SQLParserMULTIPLY - 579)))) != 0) || ((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)) | (1 << (SQLParserNUMBER_LITERAL - 611)) | (1 << (SQLParserREAL_NUMBER - 611)) | (1 << (SQLParserDOLLAR_NUMBER - 611)) | (1 << (SQLParserIdentifier - 611)) | (1 << (SQLParserQuotedIdentifier - 611)) | (1 << (SQLParserCharacter_String_Literal - 611)) | (1 << (SQLParserBeginDollarStringConstant - 611)))) != 0) {
			{
				p.SetState(5498)
				p.vex(0)
			}

		}
		{
			p.SetState(5501)
			p.Match(SQLParserCOLON)
		}
		p.SetState(5503)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)) | (1 << (SQLParserALL - 352)) | (1 << (SQLParserANY - 352)) | (1 << (SQLParserARRAY - 352)) | (1 << (SQLParserCASE - 352)))) != 0) || ((((_la - 384)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 384))) & ((1 << (SQLParserCAST - 384)) | (1 << (SQLParserCURRENT_CATALOG - 384)) | (1 << (SQLParserCURRENT_DATE - 384)) | (1 << (SQLParserCURRENT_TIME - 384)) | (1 << (SQLParserCURRENT_TIMESTAMP - 384)) | (1 << (SQLParserCURRENT_USER - 384)) | (1 << (SQLParserFALSE - 384)))) != 0) || ((((_la - 419)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 419))) & ((1 << (SQLParserLOCALTIME - 419)) | (1 << (SQLParserLOCALTIMESTAMP - 419)) | (1 << (SQLParserNOT - 419)) | (1 << (SQLParserNULL - 419)) | (1 << (SQLParserON - 419)) | (1 << (SQLParserSESSION_USER - 419)) | (1 << (SQLParserSOME - 419)) | (1 << (SQLParserTRUE - 419)) | (1 << (SQLParserUSER - 419)) | (1 << (SQLParserALIGNMENT - 419)))) != 0) || ((((_la - 451)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 451))) & ((1 << (SQLParserALLOW_CONNECTIONS - 451)) | (1 << (SQLParserBASETYPE - 451)) | (1 << (SQLParserBUFFERS - 451)) | (1 << (SQLParserBYPASSRLS - 451)) | (1 << (SQLParserCANONICAL - 451)) | (1 << (SQLParserCATEGORY - 451)) | (1 << (SQLParserCOLLATABLE - 451)) | (1 << (SQLParserCOMBINEFUNC - 451)) | (1 << (SQLParserCOMMUTATOR - 451)) | (1 << (SQLParserCONNECT - 451)) | (1 << (SQLParserCOSTS - 451)) | (1 << (SQLParserCREATEDB - 451)) | (1 << (SQLParserCREATEROLE - 451)) | (1 << (SQLParserDESERIALFUNC - 451)) | (1 << (SQLParserDETERMINISTIC - 451)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 451)) | (1 << (SQLParserELEMENT - 451)) | (1 << (SQLParserEXTENDED - 451)) | (1 << (SQLParserFINALFUNC - 451)) | (1 << (SQLParserFINALFUNC_EXTRA - 451)) | (1 << (SQLParserFINALFUNC_MODIFY - 451)) | (1 << (SQLParserFORCE_NOT_NULL - 451)) | (1 << (SQLParserFORCE_NULL - 451)) | (1 << (SQLParserFORCE_QUOTE - 451)) | (1 << (SQLParserFORMAT - 451)) | (1 << (SQLParserGETTOKEN - 451)) | (1 << (SQLParserHASH - 451)) | (1 << (SQLParserHASHES - 451)) | (1 << (SQLParserHEADLINE - 451)) | (1 << (SQLParserHYPOTHETICAL - 451)) | (1 << (SQLParserINDEX_CLEANUP - 451)) | (1 << (SQLParserINIT - 451)))) != 0) || ((((_la - 483)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 483))) & ((1 << (SQLParserINITCOND - 483)) | (1 << (SQLParserINTERNALLENGTH - 483)) | (1 << (SQLParserIS_TEMPLATE - 483)) | (1 << (SQLParserJSON - 483)) | (1 << (SQLParserLC_COLLATE - 483)) | (1 << (SQLParserLC_CTYPE - 483)) | (1 << (SQLParserLEFTARG - 483)) | (1 << (SQLParserLEXIZE - 483)) | (1 << (SQLParserLEXTYPES - 483)) | (1 << (SQLParserLIST - 483)) | (1 << (SQLParserLOCALE - 483)) | (1 << (SQLParserLOGIN - 483)) | (1 << (SQLParserMAIN - 483)) | (1 << (SQLParserMERGES - 483)) | (1 << (SQLParserMFINALFUNC - 483)) | (1 << (SQLParserMFINALFUNC_EXTRA - 483)) | (1 << (SQLParserMFINALFUNC_MODIFY - 483)) | (1 << (SQLParserMINITCOND - 483)) | (1 << (SQLParserMINVFUNC - 483)) | (1 << (SQLParserMODULUS - 483)) | (1 << (SQLParserMSFUNC - 483)) | (1 << (SQLParserMSSPACE - 483)) | (1 << (SQLParserMSTYPE - 483)) | (1 << (SQLParserNEGATOR - 483)) | (1 << (SQLParserNOBYPASSRLS - 483)) | (1 << (SQLParserNOCREATEDB - 483)) | (1 << (SQLParserNOCREATEROLE - 483)) | (1 << (SQLParserNOINHERIT - 483)) | (1 << (SQLParserNOLOGIN - 483)) | (1 << (SQLParserNOREPLICATION - 483)) | (1 << (SQLParserNOSUPERUSER - 483)) | (1 << (SQLParserOUTPUT - 483)))) != 0) || ((((_la - 515)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 515))) & ((1 << (SQLParserPASSEDBYVALUE - 515)) | (1 << (SQLParserPATH - 515)) | (1 << (SQLParserPERMISSIVE - 515)) | (1 << (SQLParserPLAIN - 515)) | (1 << (SQLParserPREFERRED - 515)) | (1 << (SQLParserPROVIDER - 515)) | (1 << (SQLParserREAD_ONLY - 515)) | (1 << (SQLParserREAD_WRITE - 515)) | (1 << (SQLParserRECEIVE - 515)) | (1 << (SQLParserREMAINDER - 515)) | (1 << (SQLParserREPLICATION - 515)) | (1 << (SQLParserRESTRICTED - 515)) | (1 << (SQLParserRESTRICTIVE - 515)) | (1 << (SQLParserRIGHTARG - 515)) | (1 << (SQLParserSAFE - 515)) | (1 << (SQLParserSEND - 515)) | (1 << (SQLParserSERIALFUNC - 515)) | (1 << (SQLParserSETTINGS - 515)) | (1 << (SQLParserSFUNC - 515)) | (1 << (SQLParserSHAREABLE - 515)) | (1 << (SQLParserSKIP_LOCKED - 515)) | (1 << (SQLParserSORTOP - 515)) | (1 << (SQLParserSSPACE - 515)) | (1 << (SQLParserSTYPE - 515)) | (1 << (SQLParserSUBTYPE_DIFF - 515)) | (1 << (SQLParserSUBTYPE_OPCLASS - 515)) | (1 << (SQLParserSUBTYPE - 515)) | (1 << (SQLParserSUMMARY - 515)) | (1 << (SQLParserSUPERUSER - 515)) | (1 << (SQLParserTIMING - 515)) | (1 << (SQLParserTYPMOD_IN - 515)) | (1 << (SQLParserTYPMOD_OUT - 515)))) != 0) || ((((_la - 547)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 547))) & ((1 << (SQLParserUNSAFE - 547)) | (1 << (SQLParserUSAGE - 547)) | (1 << (SQLParserVARIABLE - 547)) | (1 << (SQLParserWAL - 547)) | (1 << (SQLParserYAML - 547)) | (1 << (SQLParserALIAS - 547)) | (1 << (SQLParserASSERT - 547)) | (1 << (SQLParserCONSTANT - 547)) | (1 << (SQLParserDATATYPE - 547)) | (1 << (SQLParserDEBUG - 547)) | (1 << (SQLParserDETAIL - 547)) | (1 << (SQLParserDIAGNOSTICS - 547)) | (1 << (SQLParserELSEIF - 547)) | (1 << (SQLParserELSIF - 547)) | (1 << (SQLParserERRCODE - 547)) | (1 << (SQLParserEXIT - 547)) | (1 << (SQLParserEXCEPTION - 547)) | (1 << (SQLParserFOREACH - 547)) | (1 << (SQLParserGET - 547)) | (1 << (SQLParserHINT - 547)) | (1 << (SQLParserINFO - 547)) | (1 << (SQLParserLOG - 547)) | (1 << (SQLParserLOOP - 547)) | (1 << (SQLParserMESSAGE - 547)) | (1 << (SQLParserNOTICE - 547)) | (1 << (SQLParserOPEN - 547)) | (1 << (SQLParserPERFORM - 547)) | (1 << (SQLParserQUERY - 547)) | (1 << (SQLParserRAISE - 547)) | (1 << (SQLParserRECORD - 547)) | (1 << (SQLParserRETURN - 547)) | (1 << (SQLParserREVERSE - 547)))) != 0) || ((((_la - 579)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 579))) & ((1 << (SQLParserROWTYPE - 579)) | (1 << (SQLParserSLICE - 579)) | (1 << (SQLParserSQLSTATE - 579)) | (1 << (SQLParserSTACKED - 579)) | (1 << (SQLParserWARNING - 579)) | (1 << (SQLParserWHILE - 579)) | (1 << (SQLParserLEFT_PAREN - 579)) | (1 << (SQLParserPLUS - 579)) | (1 << (SQLParserMINUS - 579)) | (1 << (SQLParserMULTIPLY - 579)))) != 0) || ((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)) | (1 << (SQLParserNUMBER_LITERAL - 611)) | (1 << (SQLParserREAL_NUMBER - 611)) | (1 << (SQLParserDOLLAR_NUMBER - 611)) | (1 << (SQLParserIdentifier - 611)) | (1 << (SQLParserQuotedIdentifier - 611)) | (1 << (SQLParserCharacter_String_Literal - 611)) | (1 << (SQLParserBeginDollarStringConstant - 611)))) != 0) {
			{
				p.SetState(5502)
				p.vex(0)
			}

		}
		{
			p.SetState(5505)
			p.Match(SQLParserRIGHT_BRACKET)
		}

	}


	return localctx
}


// IDrop_database_statementContext is an interface to support dynamic dispatch.
type IDrop_database_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_database_statementContext differentiates from other interfaces.
	IsDrop_database_statementContext()
}

type Drop_database_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_database_statementContext() *Drop_database_statementContext {
	var p = new(Drop_database_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_database_statement
	return p
}

func (*Drop_database_statementContext) IsDrop_database_statementContext() {}

func NewDrop_database_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_database_statementContext {
	var p = new(Drop_database_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_database_statement

	return p
}

func (s *Drop_database_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_database_statementContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Drop_database_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_database_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_database_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Drop_database_statementContext) FORCE() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE, 0)
}

func (s *Drop_database_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Drop_database_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Drop_database_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_database_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_database_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_database_statement(s)
	}
}

func (s *Drop_database_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_database_statement(s)
	}
}




func (p *SQLParser) Drop_database_statement() (localctx IDrop_database_statementContext) {
	localctx = NewDrop_database_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, SQLParserRULE_drop_database_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5508)
		p.Match(SQLParserDATABASE)
	}
	p.SetState(5510)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 686, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5509)
			p.If_exists()
		}


	}
	{
		p.SetState(5512)
		p.Identifier()
	}
	p.SetState(5519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH || _la == SQLParserLEFT_PAREN {
		p.SetState(5514)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWITH {
			{
				p.SetState(5513)
				p.Match(SQLParserWITH)
			}

		}
		{
			p.SetState(5516)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5517)
			p.Match(SQLParserFORCE)
		}
		{
			p.SetState(5518)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}



	return localctx
}


// IDrop_function_statementContext is an interface to support dynamic dispatch.
type IDrop_function_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(ISchema_qualified_nameContext)


	// IsDrop_function_statementContext differentiates from other interfaces.
	IsDrop_function_statementContext()
}

type Drop_function_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name ISchema_qualified_nameContext 
}

func NewEmptyDrop_function_statementContext() *Drop_function_statementContext {
	var p = new(Drop_function_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_function_statement
	return p
}

func (*Drop_function_statementContext) IsDrop_function_statementContext() {}

func NewDrop_function_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_function_statementContext {
	var p = new(Drop_function_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_function_statement

	return p
}

func (s *Drop_function_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_function_statementContext) GetName() ISchema_qualified_nameContext { return s.name }


func (s *Drop_function_statementContext) SetName(v ISchema_qualified_nameContext) { s.name = v }


func (s *Drop_function_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Drop_function_statementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Drop_function_statementContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(SQLParserAGGREGATE, 0)
}

func (s *Drop_function_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Drop_function_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_function_statementContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Drop_function_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_function_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_function_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_function_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_function_statement(s)
	}
}

func (s *Drop_function_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_function_statement(s)
	}
}




func (p *SQLParser) Drop_function_statement() (localctx IDrop_function_statementContext) {
	localctx = NewDrop_function_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, SQLParserRULE_drop_function_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5521)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserAGGREGATE || _la == SQLParserFUNCTION || _la == SQLParserPROCEDURE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(5523)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 689, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5522)
			p.If_exists()
		}


	}
	{
		p.SetState(5525)

		var _x = p.Schema_qualified_name()


		localctx.(*Drop_function_statementContext).name = _x
	}
	p.SetState(5527)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(5526)
			p.Function_args()
		}

	}
	p.SetState(5530)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(5529)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_trigger_statementContext is an interface to support dynamic dispatch.
type IDrop_trigger_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetTable_name returns the table_name rule contexts.
	GetTable_name() ISchema_qualified_nameContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetTable_name sets the table_name rule contexts.
	SetTable_name(ISchema_qualified_nameContext)


	// IsDrop_trigger_statementContext differentiates from other interfaces.
	IsDrop_trigger_statementContext()
}

type Drop_trigger_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
	table_name ISchema_qualified_nameContext 
}

func NewEmptyDrop_trigger_statementContext() *Drop_trigger_statementContext {
	var p = new(Drop_trigger_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_trigger_statement
	return p
}

func (*Drop_trigger_statementContext) IsDrop_trigger_statementContext() {}

func NewDrop_trigger_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_trigger_statementContext {
	var p = new(Drop_trigger_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_trigger_statement

	return p
}

func (s *Drop_trigger_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_trigger_statementContext) GetName() IIdentifierContext { return s.name }

func (s *Drop_trigger_statementContext) GetTable_name() ISchema_qualified_nameContext { return s.table_name }


func (s *Drop_trigger_statementContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Drop_trigger_statementContext) SetTable_name(v ISchema_qualified_nameContext) { s.table_name = v }


func (s *Drop_trigger_statementContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Drop_trigger_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Drop_trigger_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_trigger_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Drop_trigger_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_trigger_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_trigger_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_trigger_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_trigger_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_trigger_statement(s)
	}
}

func (s *Drop_trigger_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_trigger_statement(s)
	}
}




func (p *SQLParser) Drop_trigger_statement() (localctx IDrop_trigger_statementContext) {
	localctx = NewDrop_trigger_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, SQLParserRULE_drop_trigger_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5532)
		p.Match(SQLParserTRIGGER)
	}
	p.SetState(5534)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 692, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5533)
			p.If_exists()
		}


	}
	{
		p.SetState(5536)

		var _x = p.Identifier()


		localctx.(*Drop_trigger_statementContext).name = _x
	}
	{
		p.SetState(5537)
		p.Match(SQLParserON)
	}
	{
		p.SetState(5538)

		var _x = p.Schema_qualified_name()


		localctx.(*Drop_trigger_statementContext).table_name = _x
	}
	p.SetState(5540)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(5539)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_rule_statementContext is an interface to support dynamic dispatch.
type IDrop_rule_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsDrop_rule_statementContext differentiates from other interfaces.
	IsDrop_rule_statementContext()
}

type Drop_rule_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyDrop_rule_statementContext() *Drop_rule_statementContext {
	var p = new(Drop_rule_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_rule_statement
	return p
}

func (*Drop_rule_statementContext) IsDrop_rule_statementContext() {}

func NewDrop_rule_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_rule_statementContext {
	var p = new(Drop_rule_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_rule_statement

	return p
}

func (s *Drop_rule_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_rule_statementContext) GetName() IIdentifierContext { return s.name }


func (s *Drop_rule_statementContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Drop_rule_statementContext) RULE() antlr.TerminalNode {
	return s.GetToken(SQLParserRULE, 0)
}

func (s *Drop_rule_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Drop_rule_statementContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Drop_rule_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Drop_rule_statementContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_rule_statementContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Drop_rule_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_rule_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_rule_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_rule_statement(s)
	}
}

func (s *Drop_rule_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_rule_statement(s)
	}
}




func (p *SQLParser) Drop_rule_statement() (localctx IDrop_rule_statementContext) {
	localctx = NewDrop_rule_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, SQLParserRULE_drop_rule_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5542)
		p.Match(SQLParserRULE)
	}
	p.SetState(5544)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 694, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5543)
			p.If_exists()
		}


	}
	{
		p.SetState(5546)

		var _x = p.Identifier()


		localctx.(*Drop_rule_statementContext).name = _x
	}
	{
		p.SetState(5547)
		p.Match(SQLParserON)
	}
	{
		p.SetState(5548)
		p.Schema_qualified_name()
	}
	p.SetState(5550)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(5549)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IDrop_statementsContext is an interface to support dynamic dispatch.
type IDrop_statementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_statementsContext differentiates from other interfaces.
	IsDrop_statementsContext()
}

type Drop_statementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_statementsContext() *Drop_statementsContext {
	var p = new(Drop_statementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_drop_statements
	return p
}

func (*Drop_statementsContext) IsDrop_statementsContext() {}

func NewDrop_statementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_statementsContext {
	var p = new(Drop_statementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_drop_statements

	return p
}

func (s *Drop_statementsContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_statementsContext) If_exist_names_restrict_cascade() IIf_exist_names_restrict_cascadeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_exist_names_restrict_cascadeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_exist_names_restrict_cascadeContext)
}

func (s *Drop_statementsContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SQLParserACCESS, 0)
}

func (s *Drop_statementsContext) METHOD() antlr.TerminalNode {
	return s.GetToken(SQLParserMETHOD, 0)
}

func (s *Drop_statementsContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATION, 0)
}

func (s *Drop_statementsContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONVERSION, 0)
}

func (s *Drop_statementsContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Drop_statementsContext) EVENT() antlr.TerminalNode {
	return s.GetToken(SQLParserEVENT, 0)
}

func (s *Drop_statementsContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Drop_statementsContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Drop_statementsContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *Drop_statementsContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Drop_statementsContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Drop_statementsContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Drop_statementsContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(SQLParserWRAPPER, 0)
}

func (s *Drop_statementsContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Drop_statementsContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Drop_statementsContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Drop_statementsContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserPUBLICATION, 0)
}

func (s *Drop_statementsContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *Drop_statementsContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Drop_statementsContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Drop_statementsContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Drop_statementsContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserSTATISTICS, 0)
}

func (s *Drop_statementsContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBSCRIPTION, 0)
}

func (s *Drop_statementsContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Drop_statementsContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Drop_statementsContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Drop_statementsContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Drop_statementsContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Drop_statementsContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFIGURATION, 0)
}

func (s *Drop_statementsContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(SQLParserDICTIONARY, 0)
}

func (s *Drop_statementsContext) PARSER() antlr.TerminalNode {
	return s.GetToken(SQLParserPARSER, 0)
}

func (s *Drop_statementsContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPLATE, 0)
}

func (s *Drop_statementsContext) CONCURRENTLY() antlr.TerminalNode {
	return s.GetToken(SQLParserCONCURRENTLY, 0)
}

func (s *Drop_statementsContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Drop_statementsContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURAL, 0)
}

func (s *Drop_statementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_statementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Drop_statementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDrop_statements(s)
	}
}

func (s *Drop_statementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDrop_statements(s)
	}
}




func (p *SQLParser) Drop_statements() (localctx IDrop_statementsContext) {
	localctx = NewDrop_statementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, SQLParserRULE_drop_statements)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5593)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 700, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5552)
			p.Match(SQLParserACCESS)
		}
		{
			p.SetState(5553)
			p.Match(SQLParserMETHOD)
		}


	case 2:
		{
			p.SetState(5554)
			p.Match(SQLParserCOLLATION)
		}


	case 3:
		{
			p.SetState(5555)
			p.Match(SQLParserCONVERSION)
		}


	case 4:
		{
			p.SetState(5556)
			p.Match(SQLParserDOMAIN)
		}


	case 5:
		{
			p.SetState(5557)
			p.Match(SQLParserEVENT)
		}
		{
			p.SetState(5558)
			p.Match(SQLParserTRIGGER)
		}


	case 6:
		{
			p.SetState(5559)
			p.Match(SQLParserEXTENSION)
		}


	case 7:
		{
			p.SetState(5560)
			p.Match(SQLParserGROUP)
		}


	case 8:
		p.SetState(5562)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFOREIGN {
			{
				p.SetState(5561)
				p.Match(SQLParserFOREIGN)
			}

		}
		{
			p.SetState(5564)
			p.Match(SQLParserTABLE)
		}


	case 9:
		{
			p.SetState(5565)
			p.Match(SQLParserFOREIGN)
		}
		{
			p.SetState(5566)
			p.Match(SQLParserDATA)
		}
		{
			p.SetState(5567)
			p.Match(SQLParserWRAPPER)
		}


	case 10:
		{
			p.SetState(5568)
			p.Match(SQLParserINDEX)
		}
		p.SetState(5570)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCONCURRENTLY {
			{
				p.SetState(5569)
				p.Match(SQLParserCONCURRENTLY)
			}

		}


	case 11:
		p.SetState(5573)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserMATERIALIZED {
			{
				p.SetState(5572)
				p.Match(SQLParserMATERIALIZED)
			}

		}
		{
			p.SetState(5575)
			p.Match(SQLParserVIEW)
		}


	case 12:
		p.SetState(5577)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPROCEDURAL {
			{
				p.SetState(5576)
				p.Match(SQLParserPROCEDURAL)
			}

		}
		{
			p.SetState(5579)
			p.Match(SQLParserLANGUAGE)
		}


	case 13:
		{
			p.SetState(5580)
			p.Match(SQLParserPUBLICATION)
		}


	case 14:
		{
			p.SetState(5581)
			p.Match(SQLParserROLE)
		}


	case 15:
		{
			p.SetState(5582)
			p.Match(SQLParserSCHEMA)
		}


	case 16:
		{
			p.SetState(5583)
			p.Match(SQLParserSEQUENCE)
		}


	case 17:
		{
			p.SetState(5584)
			p.Match(SQLParserSERVER)
		}


	case 18:
		{
			p.SetState(5585)
			p.Match(SQLParserSTATISTICS)
		}


	case 19:
		{
			p.SetState(5586)
			p.Match(SQLParserSUBSCRIPTION)
		}


	case 20:
		{
			p.SetState(5587)
			p.Match(SQLParserTABLESPACE)
		}


	case 21:
		{
			p.SetState(5588)
			p.Match(SQLParserTYPE)
		}


	case 22:
		{
			p.SetState(5589)
			p.Match(SQLParserTEXT)
		}
		{
			p.SetState(5590)
			p.Match(SQLParserSEARCH)
		}
		{
			p.SetState(5591)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCONFIGURATION || _la == SQLParserDICTIONARY || _la == SQLParserPARSER || _la == SQLParserTEMPLATE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 23:
		{
			p.SetState(5592)
			p.Match(SQLParserUSER)
		}

	}
	{
		p.SetState(5595)
		p.If_exist_names_restrict_cascade()
	}



	return localctx
}


// IIf_exist_names_restrict_cascadeContext is an interface to support dynamic dispatch.
type IIf_exist_names_restrict_cascadeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_exist_names_restrict_cascadeContext differentiates from other interfaces.
	IsIf_exist_names_restrict_cascadeContext()
}

type If_exist_names_restrict_cascadeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_exist_names_restrict_cascadeContext() *If_exist_names_restrict_cascadeContext {
	var p = new(If_exist_names_restrict_cascadeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_if_exist_names_restrict_cascade
	return p
}

func (*If_exist_names_restrict_cascadeContext) IsIf_exist_names_restrict_cascadeContext() {}

func NewIf_exist_names_restrict_cascadeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_exist_names_restrict_cascadeContext {
	var p = new(If_exist_names_restrict_cascadeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_if_exist_names_restrict_cascade

	return p
}

func (s *If_exist_names_restrict_cascadeContext) GetParser() antlr.Parser { return s.parser }

func (s *If_exist_names_restrict_cascadeContext) Names_references() INames_referencesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_referencesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_referencesContext)
}

func (s *If_exist_names_restrict_cascadeContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *If_exist_names_restrict_cascadeContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *If_exist_names_restrict_cascadeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_exist_names_restrict_cascadeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_exist_names_restrict_cascadeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIf_exist_names_restrict_cascade(s)
	}
}

func (s *If_exist_names_restrict_cascadeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIf_exist_names_restrict_cascade(s)
	}
}




func (p *SQLParser) If_exist_names_restrict_cascade() (localctx IIf_exist_names_restrict_cascadeContext) {
	localctx = NewIf_exist_names_restrict_cascadeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, SQLParserRULE_if_exist_names_restrict_cascade)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5598)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 701, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5597)
			p.If_exists()
		}


	}
	{
		p.SetState(5600)
		p.Names_references()
	}
	p.SetState(5602)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(5601)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IId_tokenContext is an interface to support dynamic dispatch.
type IId_tokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsId_tokenContext differentiates from other interfaces.
	IsId_tokenContext()
}

type Id_tokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyId_tokenContext() *Id_tokenContext {
	var p = new(Id_tokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_id_token
	return p
}

func (*Id_tokenContext) IsId_tokenContext() {}

func NewId_tokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Id_tokenContext {
	var p = new(Id_tokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_id_token

	return p
}

func (s *Id_tokenContext) GetParser() antlr.Parser { return s.parser }

func (s *Id_tokenContext) Identifier() antlr.TerminalNode {
	return s.GetToken(SQLParserIdentifier, 0)
}

func (s *Id_tokenContext) QuotedIdentifier() antlr.TerminalNode {
	return s.GetToken(SQLParserQuotedIdentifier, 0)
}

func (s *Id_tokenContext) Tokens_nonkeyword() ITokens_nonkeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_nonkeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_nonkeywordContext)
}

func (s *Id_tokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Id_tokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Id_tokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterId_token(s)
	}
}

func (s *Id_tokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitId_token(s)
	}
}




func (p *SQLParser) Id_token() (localctx IId_tokenContext) {
	localctx = NewId_tokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, SQLParserRULE_id_token)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5607)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5604)
			p.Match(SQLParserIdentifier)
		}


	case SQLParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5605)
			p.Match(SQLParserQuotedIdentifier)
		}


	case SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5606)
			p.Tokens_nonkeyword()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Id_token() IId_tokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_tokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_tokenContext)
}

func (s *IdentifierContext) Tokens_nonreserved() ITokens_nonreservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_nonreservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_nonreservedContext)
}

func (s *IdentifierContext) Tokens_nonreserved_except_function_type() ITokens_nonreserved_except_function_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_nonreserved_except_function_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_nonreserved_except_function_typeContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}




func (p *SQLParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, SQLParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5612)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5609)
			p.Id_token()
		}


	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5610)
			p.Tokens_nonreserved()
		}


	case SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5611)
			p.Tokens_nonreserved_except_function_type()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IIdentifier_nontypeContext is an interface to support dynamic dispatch.
type IIdentifier_nontypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_nontypeContext differentiates from other interfaces.
	IsIdentifier_nontypeContext()
}

type Identifier_nontypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_nontypeContext() *Identifier_nontypeContext {
	var p = new(Identifier_nontypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_identifier_nontype
	return p
}

func (*Identifier_nontypeContext) IsIdentifier_nontypeContext() {}

func NewIdentifier_nontypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_nontypeContext {
	var p = new(Identifier_nontypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_identifier_nontype

	return p
}

func (s *Identifier_nontypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_nontypeContext) Id_token() IId_tokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_tokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_tokenContext)
}

func (s *Identifier_nontypeContext) Tokens_nonreserved() ITokens_nonreservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_nonreservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_nonreservedContext)
}

func (s *Identifier_nontypeContext) Tokens_reserved_except_function_type() ITokens_reserved_except_function_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_reserved_except_function_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_reserved_except_function_typeContext)
}

func (s *Identifier_nontypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_nontypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Identifier_nontypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIdentifier_nontype(s)
	}
}

func (s *Identifier_nontypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIdentifier_nontype(s)
	}
}




func (p *SQLParser) Identifier_nontype() (localctx IIdentifier_nontypeContext) {
	localctx = NewIdentifier_nontypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, SQLParserRULE_identifier_nontype)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5617)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5614)
			p.Id_token()
		}


	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5615)
			p.Tokens_nonreserved()
		}


	case SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5616)
			p.Tokens_reserved_except_function_type()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICol_labelContext is an interface to support dynamic dispatch.
type ICol_labelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCol_labelContext differentiates from other interfaces.
	IsCol_labelContext()
}

type Col_labelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCol_labelContext() *Col_labelContext {
	var p = new(Col_labelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_col_label
	return p
}

func (*Col_labelContext) IsCol_labelContext() {}

func NewCol_labelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Col_labelContext {
	var p = new(Col_labelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_col_label

	return p
}

func (s *Col_labelContext) GetParser() antlr.Parser { return s.parser }

func (s *Col_labelContext) Id_token() IId_tokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_tokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_tokenContext)
}

func (s *Col_labelContext) Tokens_reserved() ITokens_reservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_reservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_reservedContext)
}

func (s *Col_labelContext) Tokens_nonreserved() ITokens_nonreservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_nonreservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_nonreservedContext)
}

func (s *Col_labelContext) Tokens_reserved_except_function_type() ITokens_reserved_except_function_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_reserved_except_function_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_reserved_except_function_typeContext)
}

func (s *Col_labelContext) Tokens_nonreserved_except_function_type() ITokens_nonreserved_except_function_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITokens_nonreserved_except_function_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITokens_nonreserved_except_function_typeContext)
}

func (s *Col_labelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Col_labelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Col_labelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCol_label(s)
	}
}

func (s *Col_labelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCol_label(s)
	}
}




func (p *SQLParser) Col_label() (localctx ICol_labelContext) {
	localctx = NewCol_labelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, SQLParserRULE_col_label)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5624)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5619)
			p.Id_token()
		}


	case SQLParserALL, SQLParserANALYZE, SQLParserAND, SQLParserANY, SQLParserARRAY, SQLParserAS, SQLParserASC, SQLParserASYMMETRIC, SQLParserBOTH, SQLParserCASE, SQLParserCAST, SQLParserCHECK, SQLParserCOLLATE, SQLParserCOLUMN, SQLParserCONSTRAINT, SQLParserCREATE, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_ROLE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserDEFAULT, SQLParserDEFERRABLE, SQLParserDESC, SQLParserDISTINCT, SQLParserDO, SQLParserELSE, SQLParserEND, SQLParserEXCEPT, SQLParserFALSE, SQLParserFETCH, SQLParserFOR, SQLParserFOREIGN, SQLParserFROM, SQLParserGRANT, SQLParserGROUP, SQLParserHAVING, SQLParserIN, SQLParserINITIALLY, SQLParserINTERSECT, SQLParserINTO, SQLParserLATERAL, SQLParserLEADING, SQLParserLIMIT, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserOFFSET, SQLParserON, SQLParserONLY, SQLParserOR, SQLParserORDER, SQLParserPLACING, SQLParserPRIMARY, SQLParserREFERENCES, SQLParserRETURNING, SQLParserSELECT, SQLParserSESSION_USER, SQLParserSOME, SQLParserSYMMETRIC, SQLParserTABLE, SQLParserTHEN, SQLParserTO, SQLParserTRAILING, SQLParserTRUE, SQLParserUNION, SQLParserUNIQUE, SQLParserUSER, SQLParserUSING, SQLParserVARIADIC, SQLParserWHEN, SQLParserWHERE, SQLParserWINDOW, SQLParserWITH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5620)
			p.Tokens_reserved()
		}


	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5621)
			p.Tokens_nonreserved()
		}


	case SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5622)
			p.Tokens_reserved_except_function_type()
		}


	case SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5623)
			p.Tokens_nonreserved_except_function_type()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ITokens_nonreservedContext is an interface to support dynamic dispatch.
type ITokens_nonreservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTokens_nonreservedContext differentiates from other interfaces.
	IsTokens_nonreservedContext()
}

type Tokens_nonreservedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTokens_nonreservedContext() *Tokens_nonreservedContext {
	var p = new(Tokens_nonreservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_tokens_nonreserved
	return p
}

func (*Tokens_nonreservedContext) IsTokens_nonreservedContext() {}

func NewTokens_nonreservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tokens_nonreservedContext {
	var p = new(Tokens_nonreservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_tokens_nonreserved

	return p
}

func (s *Tokens_nonreservedContext) GetParser() antlr.Parser { return s.parser }

func (s *Tokens_nonreservedContext) ABORT() antlr.TerminalNode {
	return s.GetToken(SQLParserABORT, 0)
}

func (s *Tokens_nonreservedContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserABSOLUTE, 0)
}

func (s *Tokens_nonreservedContext) ACCESS() antlr.TerminalNode {
	return s.GetToken(SQLParserACCESS, 0)
}

func (s *Tokens_nonreservedContext) ACTION() antlr.TerminalNode {
	return s.GetToken(SQLParserACTION, 0)
}

func (s *Tokens_nonreservedContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLParserADD, 0)
}

func (s *Tokens_nonreservedContext) ADMIN() antlr.TerminalNode {
	return s.GetToken(SQLParserADMIN, 0)
}

func (s *Tokens_nonreservedContext) AFTER() antlr.TerminalNode {
	return s.GetToken(SQLParserAFTER, 0)
}

func (s *Tokens_nonreservedContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(SQLParserAGGREGATE, 0)
}

func (s *Tokens_nonreservedContext) ALSO() antlr.TerminalNode {
	return s.GetToken(SQLParserALSO, 0)
}

func (s *Tokens_nonreservedContext) ALTER() antlr.TerminalNode {
	return s.GetToken(SQLParserALTER, 0)
}

func (s *Tokens_nonreservedContext) ALWAYS() antlr.TerminalNode {
	return s.GetToken(SQLParserALWAYS, 0)
}

func (s *Tokens_nonreservedContext) ASSERTION() antlr.TerminalNode {
	return s.GetToken(SQLParserASSERTION, 0)
}

func (s *Tokens_nonreservedContext) ASSIGNMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserASSIGNMENT, 0)
}

func (s *Tokens_nonreservedContext) AT() antlr.TerminalNode {
	return s.GetToken(SQLParserAT, 0)
}

func (s *Tokens_nonreservedContext) ATTACH() antlr.TerminalNode {
	return s.GetToken(SQLParserATTACH, 0)
}

func (s *Tokens_nonreservedContext) ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserATTRIBUTE, 0)
}

func (s *Tokens_nonreservedContext) BACKWARD() antlr.TerminalNode {
	return s.GetToken(SQLParserBACKWARD, 0)
}

func (s *Tokens_nonreservedContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(SQLParserBEFORE, 0)
}

func (s *Tokens_nonreservedContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLParserBEGIN, 0)
}

func (s *Tokens_nonreservedContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Tokens_nonreservedContext) CACHE() antlr.TerminalNode {
	return s.GetToken(SQLParserCACHE, 0)
}

func (s *Tokens_nonreservedContext) CALL() antlr.TerminalNode {
	return s.GetToken(SQLParserCALL, 0)
}

func (s *Tokens_nonreservedContext) CALLED() antlr.TerminalNode {
	return s.GetToken(SQLParserCALLED, 0)
}

func (s *Tokens_nonreservedContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(SQLParserCASCADE, 0)
}

func (s *Tokens_nonreservedContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(SQLParserCASCADED, 0)
}

func (s *Tokens_nonreservedContext) CATALOG() antlr.TerminalNode {
	return s.GetToken(SQLParserCATALOG, 0)
}

func (s *Tokens_nonreservedContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserCHAIN, 0)
}

func (s *Tokens_nonreservedContext) CHARACTERISTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserCHARACTERISTICS, 0)
}

func (s *Tokens_nonreservedContext) CHECKPOINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCHECKPOINT, 0)
}

func (s *Tokens_nonreservedContext) CLASS() antlr.TerminalNode {
	return s.GetToken(SQLParserCLASS, 0)
}

func (s *Tokens_nonreservedContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserCLOSE, 0)
}

func (s *Tokens_nonreservedContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(SQLParserCLUSTER, 0)
}

func (s *Tokens_nonreservedContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMNS, 0)
}

func (s *Tokens_nonreservedContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMENT, 0)
}

func (s *Tokens_nonreservedContext) COMMENTS() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMENTS, 0)
}

func (s *Tokens_nonreservedContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMIT, 0)
}

func (s *Tokens_nonreservedContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMITTED, 0)
}

func (s *Tokens_nonreservedContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFIGURATION, 0)
}

func (s *Tokens_nonreservedContext) CONFLICT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFLICT, 0)
}

func (s *Tokens_nonreservedContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONNECTION, 0)
}

func (s *Tokens_nonreservedContext) CONSTRAINTS() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINTS, 0)
}

func (s *Tokens_nonreservedContext) CONTENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONTENT, 0)
}

func (s *Tokens_nonreservedContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(SQLParserCONTINUE, 0)
}

func (s *Tokens_nonreservedContext) CONVERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserCONVERSION, 0)
}

func (s *Tokens_nonreservedContext) COPY() antlr.TerminalNode {
	return s.GetToken(SQLParserCOPY, 0)
}

func (s *Tokens_nonreservedContext) COST() antlr.TerminalNode {
	return s.GetToken(SQLParserCOST, 0)
}

func (s *Tokens_nonreservedContext) CSV() antlr.TerminalNode {
	return s.GetToken(SQLParserCSV, 0)
}

func (s *Tokens_nonreservedContext) CUBE() antlr.TerminalNode {
	return s.GetToken(SQLParserCUBE, 0)
}

func (s *Tokens_nonreservedContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT, 0)
}

func (s *Tokens_nonreservedContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(SQLParserCURSOR, 0)
}

func (s *Tokens_nonreservedContext) CYCLE() antlr.TerminalNode {
	return s.GetToken(SQLParserCYCLE, 0)
}

func (s *Tokens_nonreservedContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLParserDATA, 0)
}

func (s *Tokens_nonreservedContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATABASE, 0)
}

func (s *Tokens_nonreservedContext) DAY() antlr.TerminalNode {
	return s.GetToken(SQLParserDAY, 0)
}

func (s *Tokens_nonreservedContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(SQLParserDEALLOCATE, 0)
}

func (s *Tokens_nonreservedContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(SQLParserDECLARE, 0)
}

func (s *Tokens_nonreservedContext) DEFAULTS() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULTS, 0)
}

func (s *Tokens_nonreservedContext) DEFERRED() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFERRED, 0)
}

func (s *Tokens_nonreservedContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFINER, 0)
}

func (s *Tokens_nonreservedContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, 0)
}

func (s *Tokens_nonreservedContext) DELIMITER() antlr.TerminalNode {
	return s.GetToken(SQLParserDELIMITER, 0)
}

func (s *Tokens_nonreservedContext) DELIMITERS() antlr.TerminalNode {
	return s.GetToken(SQLParserDELIMITERS, 0)
}

func (s *Tokens_nonreservedContext) DEPENDS() antlr.TerminalNode {
	return s.GetToken(SQLParserDEPENDS, 0)
}

func (s *Tokens_nonreservedContext) DETACH() antlr.TerminalNode {
	return s.GetToken(SQLParserDETACH, 0)
}

func (s *Tokens_nonreservedContext) DICTIONARY() antlr.TerminalNode {
	return s.GetToken(SQLParserDICTIONARY, 0)
}

func (s *Tokens_nonreservedContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDISABLE, 0)
}

func (s *Tokens_nonreservedContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(SQLParserDISCARD, 0)
}

func (s *Tokens_nonreservedContext) DOCUMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOCUMENT, 0)
}

func (s *Tokens_nonreservedContext) DOMAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserDOMAIN, 0)
}

func (s *Tokens_nonreservedContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDOUBLE, 0)
}

func (s *Tokens_nonreservedContext) DROP() antlr.TerminalNode {
	return s.GetToken(SQLParserDROP, 0)
}

func (s *Tokens_nonreservedContext) EACH() antlr.TerminalNode {
	return s.GetToken(SQLParserEACH, 0)
}

func (s *Tokens_nonreservedContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserENABLE, 0)
}

func (s *Tokens_nonreservedContext) ENCODING() antlr.TerminalNode {
	return s.GetToken(SQLParserENCODING, 0)
}

func (s *Tokens_nonreservedContext) ENCRYPTED() antlr.TerminalNode {
	return s.GetToken(SQLParserENCRYPTED, 0)
}

func (s *Tokens_nonreservedContext) ENUM() antlr.TerminalNode {
	return s.GetToken(SQLParserENUM, 0)
}

func (s *Tokens_nonreservedContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLParserESCAPE, 0)
}

func (s *Tokens_nonreservedContext) EVENT() antlr.TerminalNode {
	return s.GetToken(SQLParserEVENT, 0)
}

func (s *Tokens_nonreservedContext) EXCLUDE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCLUDE, 0)
}

func (s *Tokens_nonreservedContext) EXCLUDING() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCLUDING, 0)
}

func (s *Tokens_nonreservedContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCLUSIVE, 0)
}

func (s *Tokens_nonreservedContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXECUTE, 0)
}

func (s *Tokens_nonreservedContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserEXPLAIN, 0)
}

func (s *Tokens_nonreservedContext) EXPRESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXPRESSION, 0)
}

func (s *Tokens_nonreservedContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENSION, 0)
}

func (s *Tokens_nonreservedContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTERNAL, 0)
}

func (s *Tokens_nonreservedContext) FAMILY() antlr.TerminalNode {
	return s.GetToken(SQLParserFAMILY, 0)
}

func (s *Tokens_nonreservedContext) FILTER() antlr.TerminalNode {
	return s.GetToken(SQLParserFILTER, 0)
}

func (s *Tokens_nonreservedContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SQLParserFIRST, 0)
}

func (s *Tokens_nonreservedContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(SQLParserFOLLOWING, 0)
}

func (s *Tokens_nonreservedContext) FORCE() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE, 0)
}

func (s *Tokens_nonreservedContext) FORWARD() antlr.TerminalNode {
	return s.GetToken(SQLParserFORWARD, 0)
}

func (s *Tokens_nonreservedContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTION, 0)
}

func (s *Tokens_nonreservedContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserFUNCTIONS, 0)
}

func (s *Tokens_nonreservedContext) GENERATED() antlr.TerminalNode {
	return s.GetToken(SQLParserGENERATED, 0)
}

func (s *Tokens_nonreservedContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(SQLParserGLOBAL, 0)
}

func (s *Tokens_nonreservedContext) GRANTED() antlr.TerminalNode {
	return s.GetToken(SQLParserGRANTED, 0)
}

func (s *Tokens_nonreservedContext) GROUPS() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUPS, 0)
}

func (s *Tokens_nonreservedContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(SQLParserHANDLER, 0)
}

func (s *Tokens_nonreservedContext) HEADER() antlr.TerminalNode {
	return s.GetToken(SQLParserHEADER, 0)
}

func (s *Tokens_nonreservedContext) HOLD() antlr.TerminalNode {
	return s.GetToken(SQLParserHOLD, 0)
}

func (s *Tokens_nonreservedContext) HOUR() antlr.TerminalNode {
	return s.GetToken(SQLParserHOUR, 0)
}

func (s *Tokens_nonreservedContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(SQLParserIDENTITY, 0)
}

func (s *Tokens_nonreservedContext) IF() antlr.TerminalNode {
	return s.GetToken(SQLParserIF, 0)
}

func (s *Tokens_nonreservedContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(SQLParserIMMEDIATE, 0)
}

func (s *Tokens_nonreservedContext) IMMUTABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserIMMUTABLE, 0)
}

func (s *Tokens_nonreservedContext) IMPLICIT() antlr.TerminalNode {
	return s.GetToken(SQLParserIMPLICIT, 0)
}

func (s *Tokens_nonreservedContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(SQLParserIMPORT, 0)
}

func (s *Tokens_nonreservedContext) INCLUDE() antlr.TerminalNode {
	return s.GetToken(SQLParserINCLUDE, 0)
}

func (s *Tokens_nonreservedContext) INCLUDING() antlr.TerminalNode {
	return s.GetToken(SQLParserINCLUDING, 0)
}

func (s *Tokens_nonreservedContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserINCREMENT, 0)
}

func (s *Tokens_nonreservedContext) INDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX, 0)
}

func (s *Tokens_nonreservedContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEXES, 0)
}

func (s *Tokens_nonreservedContext) INHERIT() antlr.TerminalNode {
	return s.GetToken(SQLParserINHERIT, 0)
}

func (s *Tokens_nonreservedContext) INHERITS() antlr.TerminalNode {
	return s.GetToken(SQLParserINHERITS, 0)
}

func (s *Tokens_nonreservedContext) INLINE() antlr.TerminalNode {
	return s.GetToken(SQLParserINLINE, 0)
}

func (s *Tokens_nonreservedContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SQLParserINPUT, 0)
}

func (s *Tokens_nonreservedContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserINSENSITIVE, 0)
}

func (s *Tokens_nonreservedContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SQLParserINSERT, 0)
}

func (s *Tokens_nonreservedContext) INSTEAD() antlr.TerminalNode {
	return s.GetToken(SQLParserINSTEAD, 0)
}

func (s *Tokens_nonreservedContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(SQLParserINVOKER, 0)
}

func (s *Tokens_nonreservedContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserISOLATION, 0)
}

func (s *Tokens_nonreservedContext) KEY() antlr.TerminalNode {
	return s.GetToken(SQLParserKEY, 0)
}

func (s *Tokens_nonreservedContext) LABEL() antlr.TerminalNode {
	return s.GetToken(SQLParserLABEL, 0)
}

func (s *Tokens_nonreservedContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Tokens_nonreservedContext) LARGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLARGE, 0)
}

func (s *Tokens_nonreservedContext) LAST() antlr.TerminalNode {
	return s.GetToken(SQLParserLAST, 0)
}

func (s *Tokens_nonreservedContext) LEAKPROOF() antlr.TerminalNode {
	return s.GetToken(SQLParserLEAKPROOF, 0)
}

func (s *Tokens_nonreservedContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(SQLParserLEVEL, 0)
}

func (s *Tokens_nonreservedContext) LISTEN() antlr.TerminalNode {
	return s.GetToken(SQLParserLISTEN, 0)
}

func (s *Tokens_nonreservedContext) LOAD() antlr.TerminalNode {
	return s.GetToken(SQLParserLOAD, 0)
}

func (s *Tokens_nonreservedContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCAL, 0)
}

func (s *Tokens_nonreservedContext) LOCATION() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCATION, 0)
}

func (s *Tokens_nonreservedContext) LOCK() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCK, 0)
}

func (s *Tokens_nonreservedContext) LOCKED() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCKED, 0)
}

func (s *Tokens_nonreservedContext) LOGGED() antlr.TerminalNode {
	return s.GetToken(SQLParserLOGGED, 0)
}

func (s *Tokens_nonreservedContext) MAPPING() antlr.TerminalNode {
	return s.GetToken(SQLParserMAPPING, 0)
}

func (s *Tokens_nonreservedContext) MATCH() antlr.TerminalNode {
	return s.GetToken(SQLParserMATCH, 0)
}

func (s *Tokens_nonreservedContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *Tokens_nonreservedContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(SQLParserMAXVALUE, 0)
}

func (s *Tokens_nonreservedContext) METHOD() antlr.TerminalNode {
	return s.GetToken(SQLParserMETHOD, 0)
}

func (s *Tokens_nonreservedContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserMINUTE, 0)
}

func (s *Tokens_nonreservedContext) MINVALUE() antlr.TerminalNode {
	return s.GetToken(SQLParserMINVALUE, 0)
}

func (s *Tokens_nonreservedContext) MODE() antlr.TerminalNode {
	return s.GetToken(SQLParserMODE, 0)
}

func (s *Tokens_nonreservedContext) MONTH() antlr.TerminalNode {
	return s.GetToken(SQLParserMONTH, 0)
}

func (s *Tokens_nonreservedContext) MOVE() antlr.TerminalNode {
	return s.GetToken(SQLParserMOVE, 0)
}

func (s *Tokens_nonreservedContext) NAME() antlr.TerminalNode {
	return s.GetToken(SQLParserNAME, 0)
}

func (s *Tokens_nonreservedContext) NAMES() antlr.TerminalNode {
	return s.GetToken(SQLParserNAMES, 0)
}

func (s *Tokens_nonreservedContext) NEW() antlr.TerminalNode {
	return s.GetToken(SQLParserNEW, 0)
}

func (s *Tokens_nonreservedContext) NEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserNEXT, 0)
}

func (s *Tokens_nonreservedContext) NFC() antlr.TerminalNode {
	return s.GetToken(SQLParserNFC, 0)
}

func (s *Tokens_nonreservedContext) NFD() antlr.TerminalNode {
	return s.GetToken(SQLParserNFD, 0)
}

func (s *Tokens_nonreservedContext) NFKC() antlr.TerminalNode {
	return s.GetToken(SQLParserNFKC, 0)
}

func (s *Tokens_nonreservedContext) NFKD() antlr.TerminalNode {
	return s.GetToken(SQLParserNFKD, 0)
}

func (s *Tokens_nonreservedContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Tokens_nonreservedContext) NORMALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserNORMALIZED, 0)
}

func (s *Tokens_nonreservedContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTHING, 0)
}

func (s *Tokens_nonreservedContext) NOTIFY() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTIFY, 0)
}

func (s *Tokens_nonreservedContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOWAIT, 0)
}

func (s *Tokens_nonreservedContext) NULLS() antlr.TerminalNode {
	return s.GetToken(SQLParserNULLS, 0)
}

func (s *Tokens_nonreservedContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(SQLParserOBJECT, 0)
}

func (s *Tokens_nonreservedContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *Tokens_nonreservedContext) OFF() antlr.TerminalNode {
	return s.GetToken(SQLParserOFF, 0)
}

func (s *Tokens_nonreservedContext) OIDS() antlr.TerminalNode {
	return s.GetToken(SQLParserOIDS, 0)
}

func (s *Tokens_nonreservedContext) OLD() antlr.TerminalNode {
	return s.GetToken(SQLParserOLD, 0)
}

func (s *Tokens_nonreservedContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *Tokens_nonreservedContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTION, 0)
}

func (s *Tokens_nonreservedContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserOPTIONS, 0)
}

func (s *Tokens_nonreservedContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(SQLParserORDINALITY, 0)
}

func (s *Tokens_nonreservedContext) OTHERS() antlr.TerminalNode {
	return s.GetToken(SQLParserOTHERS, 0)
}

func (s *Tokens_nonreservedContext) OVER() antlr.TerminalNode {
	return s.GetToken(SQLParserOVER, 0)
}

func (s *Tokens_nonreservedContext) OVERRIDING() antlr.TerminalNode {
	return s.GetToken(SQLParserOVERRIDING, 0)
}

func (s *Tokens_nonreservedContext) OWNED() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNED, 0)
}

func (s *Tokens_nonreservedContext) OWNER() antlr.TerminalNode {
	return s.GetToken(SQLParserOWNER, 0)
}

func (s *Tokens_nonreservedContext) PARALLEL() antlr.TerminalNode {
	return s.GetToken(SQLParserPARALLEL, 0)
}

func (s *Tokens_nonreservedContext) PARSER() antlr.TerminalNode {
	return s.GetToken(SQLParserPARSER, 0)
}

func (s *Tokens_nonreservedContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(SQLParserPARTIAL, 0)
}

func (s *Tokens_nonreservedContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SQLParserPARTITION, 0)
}

func (s *Tokens_nonreservedContext) PASSING() antlr.TerminalNode {
	return s.GetToken(SQLParserPASSING, 0)
}

func (s *Tokens_nonreservedContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(SQLParserPASSWORD, 0)
}

func (s *Tokens_nonreservedContext) PLANS() antlr.TerminalNode {
	return s.GetToken(SQLParserPLANS, 0)
}

func (s *Tokens_nonreservedContext) POLICY() antlr.TerminalNode {
	return s.GetToken(SQLParserPOLICY, 0)
}

func (s *Tokens_nonreservedContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(SQLParserPRECEDING, 0)
}

func (s *Tokens_nonreservedContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(SQLParserPREPARE, 0)
}

func (s *Tokens_nonreservedContext) PREPARED() antlr.TerminalNode {
	return s.GetToken(SQLParserPREPARED, 0)
}

func (s *Tokens_nonreservedContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(SQLParserPRESERVE, 0)
}

func (s *Tokens_nonreservedContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIOR, 0)
}

func (s *Tokens_nonreservedContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIVILEGES, 0)
}

func (s *Tokens_nonreservedContext) PROCEDURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURAL, 0)
}

func (s *Tokens_nonreservedContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURE, 0)
}

func (s *Tokens_nonreservedContext) PROCEDURES() antlr.TerminalNode {
	return s.GetToken(SQLParserPROCEDURES, 0)
}

func (s *Tokens_nonreservedContext) PROGRAM() antlr.TerminalNode {
	return s.GetToken(SQLParserPROGRAM, 0)
}

func (s *Tokens_nonreservedContext) PUBLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserPUBLICATION, 0)
}

func (s *Tokens_nonreservedContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(SQLParserQUOTE, 0)
}

func (s *Tokens_nonreservedContext) RANGE() antlr.TerminalNode {
	return s.GetToken(SQLParserRANGE, 0)
}

func (s *Tokens_nonreservedContext) READ() antlr.TerminalNode {
	return s.GetToken(SQLParserREAD, 0)
}

func (s *Tokens_nonreservedContext) REASSIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserREASSIGN, 0)
}

func (s *Tokens_nonreservedContext) RECHECK() antlr.TerminalNode {
	return s.GetToken(SQLParserRECHECK, 0)
}

func (s *Tokens_nonreservedContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRECURSIVE, 0)
}

func (s *Tokens_nonreservedContext) REF() antlr.TerminalNode {
	return s.GetToken(SQLParserREF, 0)
}

func (s *Tokens_nonreservedContext) REFERENCING() antlr.TerminalNode {
	return s.GetToken(SQLParserREFERENCING, 0)
}

func (s *Tokens_nonreservedContext) REFRESH() antlr.TerminalNode {
	return s.GetToken(SQLParserREFRESH, 0)
}

func (s *Tokens_nonreservedContext) REINDEX() antlr.TerminalNode {
	return s.GetToken(SQLParserREINDEX, 0)
}

func (s *Tokens_nonreservedContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRELATIVE, 0)
}

func (s *Tokens_nonreservedContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(SQLParserRELEASE, 0)
}

func (s *Tokens_nonreservedContext) RENAME() antlr.TerminalNode {
	return s.GetToken(SQLParserRENAME, 0)
}

func (s *Tokens_nonreservedContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPEATABLE, 0)
}

func (s *Tokens_nonreservedContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLACE, 0)
}

func (s *Tokens_nonreservedContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLICA, 0)
}

func (s *Tokens_nonreservedContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLParserRESET, 0)
}

func (s *Tokens_nonreservedContext) RESTART() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTART, 0)
}

func (s *Tokens_nonreservedContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICT, 0)
}

func (s *Tokens_nonreservedContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURNS, 0)
}

func (s *Tokens_nonreservedContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SQLParserREVOKE, 0)
}

func (s *Tokens_nonreservedContext) ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserROLE, 0)
}

func (s *Tokens_nonreservedContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLParserROLLBACK, 0)
}

func (s *Tokens_nonreservedContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(SQLParserROLLUP, 0)
}

func (s *Tokens_nonreservedContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(SQLParserROUTINE, 0)
}

func (s *Tokens_nonreservedContext) ROUTINES() antlr.TerminalNode {
	return s.GetToken(SQLParserROUTINES, 0)
}

func (s *Tokens_nonreservedContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SQLParserROWS, 0)
}

func (s *Tokens_nonreservedContext) RULE() antlr.TerminalNode {
	return s.GetToken(SQLParserRULE, 0)
}

func (s *Tokens_nonreservedContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(SQLParserSAVEPOINT, 0)
}

func (s *Tokens_nonreservedContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Tokens_nonreservedContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMAS, 0)
}

func (s *Tokens_nonreservedContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(SQLParserSCROLL, 0)
}

func (s *Tokens_nonreservedContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(SQLParserSEARCH, 0)
}

func (s *Tokens_nonreservedContext) SECOND() antlr.TerminalNode {
	return s.GetToken(SQLParserSECOND, 0)
}

func (s *Tokens_nonreservedContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(SQLParserSECURITY, 0)
}

func (s *Tokens_nonreservedContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCE, 0)
}

func (s *Tokens_nonreservedContext) SEQUENCES() antlr.TerminalNode {
	return s.GetToken(SQLParserSEQUENCES, 0)
}

func (s *Tokens_nonreservedContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserSERIALIZABLE, 0)
}

func (s *Tokens_nonreservedContext) SERVER() antlr.TerminalNode {
	return s.GetToken(SQLParserSERVER, 0)
}

func (s *Tokens_nonreservedContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION, 0)
}

func (s *Tokens_nonreservedContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Tokens_nonreservedContext) SETS() antlr.TerminalNode {
	return s.GetToken(SQLParserSETS, 0)
}

func (s *Tokens_nonreservedContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SQLParserSHARE, 0)
}

func (s *Tokens_nonreservedContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SQLParserSHOW, 0)
}

func (s *Tokens_nonreservedContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(SQLParserSIMPLE, 0)
}

func (s *Tokens_nonreservedContext) SKIP_() antlr.TerminalNode {
	return s.GetToken(SQLParserSKIP_, 0)
}

func (s *Tokens_nonreservedContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(SQLParserSNAPSHOT, 0)
}

func (s *Tokens_nonreservedContext) SQL() antlr.TerminalNode {
	return s.GetToken(SQLParserSQL, 0)
}

func (s *Tokens_nonreservedContext) STABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTABLE, 0)
}

func (s *Tokens_nonreservedContext) STANDALONE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTANDALONE, 0)
}

func (s *Tokens_nonreservedContext) START() antlr.TerminalNode {
	return s.GetToken(SQLParserSTART, 0)
}

func (s *Tokens_nonreservedContext) STATEMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserSTATEMENT, 0)
}

func (s *Tokens_nonreservedContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserSTATISTICS, 0)
}

func (s *Tokens_nonreservedContext) STDIN() antlr.TerminalNode {
	return s.GetToken(SQLParserSTDIN, 0)
}

func (s *Tokens_nonreservedContext) STDOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserSTDOUT, 0)
}

func (s *Tokens_nonreservedContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTORAGE, 0)
}

func (s *Tokens_nonreservedContext) STORED() antlr.TerminalNode {
	return s.GetToken(SQLParserSTORED, 0)
}

func (s *Tokens_nonreservedContext) STRICT() antlr.TerminalNode {
	return s.GetToken(SQLParserSTRICT, 0)
}

func (s *Tokens_nonreservedContext) STRIP() antlr.TerminalNode {
	return s.GetToken(SQLParserSTRIP, 0)
}

func (s *Tokens_nonreservedContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBSCRIPTION, 0)
}

func (s *Tokens_nonreservedContext) SUPPORT() antlr.TerminalNode {
	return s.GetToken(SQLParserSUPPORT, 0)
}

func (s *Tokens_nonreservedContext) SYSID() antlr.TerminalNode {
	return s.GetToken(SQLParserSYSID, 0)
}

func (s *Tokens_nonreservedContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(SQLParserSYSTEM, 0)
}

func (s *Tokens_nonreservedContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLES, 0)
}

func (s *Tokens_nonreservedContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESPACE, 0)
}

func (s *Tokens_nonreservedContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMP, 0)
}

func (s *Tokens_nonreservedContext) TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPLATE, 0)
}

func (s *Tokens_nonreservedContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPORARY, 0)
}

func (s *Tokens_nonreservedContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserTEXT, 0)
}

func (s *Tokens_nonreservedContext) TIES() antlr.TerminalNode {
	return s.GetToken(SQLParserTIES, 0)
}

func (s *Tokens_nonreservedContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSACTION, 0)
}

func (s *Tokens_nonreservedContext) TRANSFORM() antlr.TerminalNode {
	return s.GetToken(SQLParserTRANSFORM, 0)
}

func (s *Tokens_nonreservedContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIGGER, 0)
}

func (s *Tokens_nonreservedContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUNCATE, 0)
}

func (s *Tokens_nonreservedContext) TRUSTED() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUSTED, 0)
}

func (s *Tokens_nonreservedContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Tokens_nonreservedContext) TYPES() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPES, 0)
}

func (s *Tokens_nonreservedContext) UESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLParserUESCAPE, 0)
}

func (s *Tokens_nonreservedContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNBOUNDED, 0)
}

func (s *Tokens_nonreservedContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNCOMMITTED, 0)
}

func (s *Tokens_nonreservedContext) UNENCRYPTED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNENCRYPTED, 0)
}

func (s *Tokens_nonreservedContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(SQLParserUNKNOWN, 0)
}

func (s *Tokens_nonreservedContext) UNLISTEN() antlr.TerminalNode {
	return s.GetToken(SQLParserUNLISTEN, 0)
}

func (s *Tokens_nonreservedContext) UNLOGGED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNLOGGED, 0)
}

func (s *Tokens_nonreservedContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(SQLParserUNTIL, 0)
}

func (s *Tokens_nonreservedContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Tokens_nonreservedContext) VACUUM() antlr.TerminalNode {
	return s.GetToken(SQLParserVACUUM, 0)
}

func (s *Tokens_nonreservedContext) VALID() antlr.TerminalNode {
	return s.GetToken(SQLParserVALID, 0)
}

func (s *Tokens_nonreservedContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserVALIDATE, 0)
}

func (s *Tokens_nonreservedContext) VALIDATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserVALIDATOR, 0)
}

func (s *Tokens_nonreservedContext) VALUE() antlr.TerminalNode {
	return s.GetToken(SQLParserVALUE, 0)
}

func (s *Tokens_nonreservedContext) VARYING() antlr.TerminalNode {
	return s.GetToken(SQLParserVARYING, 0)
}

func (s *Tokens_nonreservedContext) VERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserVERSION, 0)
}

func (s *Tokens_nonreservedContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEW, 0)
}

func (s *Tokens_nonreservedContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(SQLParserVIEWS, 0)
}

func (s *Tokens_nonreservedContext) VOLATILE() antlr.TerminalNode {
	return s.GetToken(SQLParserVOLATILE, 0)
}

func (s *Tokens_nonreservedContext) WHITESPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHITESPACE, 0)
}

func (s *Tokens_nonreservedContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHIN, 0)
}

func (s *Tokens_nonreservedContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHOUT, 0)
}

func (s *Tokens_nonreservedContext) WORK() antlr.TerminalNode {
	return s.GetToken(SQLParserWORK, 0)
}

func (s *Tokens_nonreservedContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(SQLParserWRAPPER, 0)
}

func (s *Tokens_nonreservedContext) WRITE() antlr.TerminalNode {
	return s.GetToken(SQLParserWRITE, 0)
}

func (s *Tokens_nonreservedContext) XML() antlr.TerminalNode {
	return s.GetToken(SQLParserXML, 0)
}

func (s *Tokens_nonreservedContext) YEAR() antlr.TerminalNode {
	return s.GetToken(SQLParserYEAR, 0)
}

func (s *Tokens_nonreservedContext) YES() antlr.TerminalNode {
	return s.GetToken(SQLParserYES, 0)
}

func (s *Tokens_nonreservedContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLParserZONE, 0)
}

func (s *Tokens_nonreservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tokens_nonreservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Tokens_nonreservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTokens_nonreserved(s)
	}
}

func (s *Tokens_nonreservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTokens_nonreserved(s)
	}
}




func (p *SQLParser) Tokens_nonreserved() (localctx ITokens_nonreservedContext) {
	localctx = NewTokens_nonreservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, SQLParserRULE_tokens_nonreserved)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5626)
		_la = p.GetTokenStream().LA(1)

		if !((((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITokens_nonreserved_except_function_typeContext is an interface to support dynamic dispatch.
type ITokens_nonreserved_except_function_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTokens_nonreserved_except_function_typeContext differentiates from other interfaces.
	IsTokens_nonreserved_except_function_typeContext()
}

type Tokens_nonreserved_except_function_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTokens_nonreserved_except_function_typeContext() *Tokens_nonreserved_except_function_typeContext {
	var p = new(Tokens_nonreserved_except_function_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_tokens_nonreserved_except_function_type
	return p
}

func (*Tokens_nonreserved_except_function_typeContext) IsTokens_nonreserved_except_function_typeContext() {}

func NewTokens_nonreserved_except_function_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tokens_nonreserved_except_function_typeContext {
	var p = new(Tokens_nonreserved_except_function_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_tokens_nonreserved_except_function_type

	return p
}

func (s *Tokens_nonreserved_except_function_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Tokens_nonreserved_except_function_typeContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLParserBETWEEN, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(SQLParserBIGINT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) BIT() antlr.TerminalNode {
	return s.GetToken(SQLParserBIT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SQLParserBOOLEAN, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(SQLParserCHAR, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(SQLParserCHARACTER, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(SQLParserCOALESCE, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) DEC() antlr.TerminalNode {
	return s.GetToken(SQLParserDEC, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(SQLParserDECIMAL, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLParserEXISTS, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTRACT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(SQLParserFLOAT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) GREATEST() antlr.TerminalNode {
	return s.GetToken(SQLParserGREATEST, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUPING, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) INOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserINOUT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) INT() antlr.TerminalNode {
	return s.GetToken(SQLParserINT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SQLParserINTEGER, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(SQLParserINTERVAL, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) LEAST() antlr.TerminalNode {
	return s.GetToken(SQLParserLEAST, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNATIONAL, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(SQLParserNCHAR, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) NONE() antlr.TerminalNode {
	return s.GetToken(SQLParserNONE, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) NORMALIZE() antlr.TerminalNode {
	return s.GetToken(SQLParserNORMALIZE, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(SQLParserNULLIF, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMERIC, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) OUT() antlr.TerminalNode {
	return s.GetToken(SQLParserOUT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) OVERLAY() antlr.TerminalNode {
	return s.GetToken(SQLParserOVERLAY, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) POSITION() antlr.TerminalNode {
	return s.GetToken(SQLParserPOSITION, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(SQLParserPRECISION, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) REAL() antlr.TerminalNode {
	return s.GetToken(SQLParserREAL, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) SETOF() antlr.TerminalNode {
	return s.GetToken(SQLParserSETOF, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(SQLParserSMALLINT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBSTRING, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) TIME() antlr.TerminalNode {
	return s.GetToken(SQLParserTIME, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTIMESTAMP, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) TREAT() antlr.TerminalNode {
	return s.GetToken(SQLParserTREAT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) TRIM() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIM, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SQLParserVALUES, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(SQLParserVARCHAR, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLATTRIBUTES() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLATTRIBUTES, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLCONCAT() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLCONCAT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLELEMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLELEMENT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLEXISTS() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLEXISTS, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLFOREST() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLFOREST, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLNAMESPACES, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLPARSE() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLPARSE, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLPI() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLPI, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLROOT() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLROOT, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLSERIALIZE() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLSERIALIZE, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) XMLTABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLTABLE, 0)
}

func (s *Tokens_nonreserved_except_function_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tokens_nonreserved_except_function_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Tokens_nonreserved_except_function_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTokens_nonreserved_except_function_type(s)
	}
}

func (s *Tokens_nonreserved_except_function_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTokens_nonreserved_except_function_type(s)
	}
}




func (p *SQLParser) Tokens_nonreserved_except_function_type() (localctx ITokens_nonreserved_except_function_typeContext) {
	localctx = NewTokens_nonreserved_except_function_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, SQLParserRULE_tokens_nonreserved_except_function_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5628)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 300)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 300))) & ((1 << (SQLParserBETWEEN - 300)) | (1 << (SQLParserBIGINT - 300)) | (1 << (SQLParserBIT - 300)) | (1 << (SQLParserBOOLEAN - 300)) | (1 << (SQLParserCHAR - 300)) | (1 << (SQLParserCHARACTER - 300)) | (1 << (SQLParserCOALESCE - 300)) | (1 << (SQLParserDEC - 300)) | (1 << (SQLParserDECIMAL - 300)) | (1 << (SQLParserEXISTS - 300)) | (1 << (SQLParserEXTRACT - 300)) | (1 << (SQLParserFLOAT - 300)) | (1 << (SQLParserGREATEST - 300)) | (1 << (SQLParserGROUPING - 300)) | (1 << (SQLParserINOUT - 300)) | (1 << (SQLParserINT - 300)) | (1 << (SQLParserINTEGER - 300)) | (1 << (SQLParserINTERVAL - 300)) | (1 << (SQLParserLEAST - 300)) | (1 << (SQLParserNATIONAL - 300)) | (1 << (SQLParserNCHAR - 300)) | (1 << (SQLParserNONE - 300)) | (1 << (SQLParserNORMALIZE - 300)) | (1 << (SQLParserNULLIF - 300)) | (1 << (SQLParserNUMERIC - 300)) | (1 << (SQLParserOUT - 300)) | (1 << (SQLParserOVERLAY - 300)) | (1 << (SQLParserPOSITION - 300)) | (1 << (SQLParserPRECISION - 300)) | (1 << (SQLParserREAL - 300)) | (1 << (SQLParserROW - 300)) | (1 << (SQLParserSETOF - 300)))) != 0) || ((((_la - 332)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 332))) & ((1 << (SQLParserSMALLINT - 332)) | (1 << (SQLParserSUBSTRING - 332)) | (1 << (SQLParserTIME - 332)) | (1 << (SQLParserTIMESTAMP - 332)) | (1 << (SQLParserTREAT - 332)) | (1 << (SQLParserTRIM - 332)) | (1 << (SQLParserVALUES - 332)) | (1 << (SQLParserVARCHAR - 332)) | (1 << (SQLParserXMLATTRIBUTES - 332)) | (1 << (SQLParserXMLCONCAT - 332)) | (1 << (SQLParserXMLELEMENT - 332)) | (1 << (SQLParserXMLEXISTS - 332)) | (1 << (SQLParserXMLFOREST - 332)) | (1 << (SQLParserXMLNAMESPACES - 332)) | (1 << (SQLParserXMLPARSE - 332)) | (1 << (SQLParserXMLPI - 332)) | (1 << (SQLParserXMLROOT - 332)) | (1 << (SQLParserXMLSERIALIZE - 332)) | (1 << (SQLParserXMLTABLE - 332)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITokens_reserved_except_function_typeContext is an interface to support dynamic dispatch.
type ITokens_reserved_except_function_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTokens_reserved_except_function_typeContext differentiates from other interfaces.
	IsTokens_reserved_except_function_typeContext()
}

type Tokens_reserved_except_function_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTokens_reserved_except_function_typeContext() *Tokens_reserved_except_function_typeContext {
	var p = new(Tokens_reserved_except_function_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_tokens_reserved_except_function_type
	return p
}

func (*Tokens_reserved_except_function_typeContext) IsTokens_reserved_except_function_typeContext() {}

func NewTokens_reserved_except_function_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tokens_reserved_except_function_typeContext {
	var p = new(Tokens_reserved_except_function_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_tokens_reserved_except_function_type

	return p
}

func (s *Tokens_reserved_except_function_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Tokens_reserved_except_function_typeContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(SQLParserAUTHORIZATION, 0)
}

func (s *Tokens_reserved_except_function_typeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(SQLParserBINARY, 0)
}

func (s *Tokens_reserved_except_function_typeContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATION, 0)
}

func (s *Tokens_reserved_except_function_typeContext) CONCURRENTLY() antlr.TerminalNode {
	return s.GetToken(SQLParserCONCURRENTLY, 0)
}

func (s *Tokens_reserved_except_function_typeContext) CROSS() antlr.TerminalNode {
	return s.GetToken(SQLParserCROSS, 0)
}

func (s *Tokens_reserved_except_function_typeContext) CURRENT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_SCHEMA, 0)
}

func (s *Tokens_reserved_except_function_typeContext) FREEZE() antlr.TerminalNode {
	return s.GetToken(SQLParserFREEZE, 0)
}

func (s *Tokens_reserved_except_function_typeContext) FULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFULL, 0)
}

func (s *Tokens_reserved_except_function_typeContext) ILIKE() antlr.TerminalNode {
	return s.GetToken(SQLParserILIKE, 0)
}

func (s *Tokens_reserved_except_function_typeContext) INNER() antlr.TerminalNode {
	return s.GetToken(SQLParserINNER, 0)
}

func (s *Tokens_reserved_except_function_typeContext) IS() antlr.TerminalNode {
	return s.GetToken(SQLParserIS, 0)
}

func (s *Tokens_reserved_except_function_typeContext) ISNULL() antlr.TerminalNode {
	return s.GetToken(SQLParserISNULL, 0)
}

func (s *Tokens_reserved_except_function_typeContext) JOIN() antlr.TerminalNode {
	return s.GetToken(SQLParserJOIN, 0)
}

func (s *Tokens_reserved_except_function_typeContext) LEFT() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT, 0)
}

func (s *Tokens_reserved_except_function_typeContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SQLParserLIKE, 0)
}

func (s *Tokens_reserved_except_function_typeContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNATURAL, 0)
}

func (s *Tokens_reserved_except_function_typeContext) NOTNULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTNULL, 0)
}

func (s *Tokens_reserved_except_function_typeContext) OUTER() antlr.TerminalNode {
	return s.GetToken(SQLParserOUTER, 0)
}

func (s *Tokens_reserved_except_function_typeContext) OVERLAPS() antlr.TerminalNode {
	return s.GetToken(SQLParserOVERLAPS, 0)
}

func (s *Tokens_reserved_except_function_typeContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT, 0)
}

func (s *Tokens_reserved_except_function_typeContext) SIMILAR() antlr.TerminalNode {
	return s.GetToken(SQLParserSIMILAR, 0)
}

func (s *Tokens_reserved_except_function_typeContext) TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESAMPLE, 0)
}

func (s *Tokens_reserved_except_function_typeContext) VERBOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserVERBOSE, 0)
}

func (s *Tokens_reserved_except_function_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tokens_reserved_except_function_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Tokens_reserved_except_function_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTokens_reserved_except_function_type(s)
	}
}

func (s *Tokens_reserved_except_function_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTokens_reserved_except_function_type(s)
	}
}




func (p *SQLParser) Tokens_reserved_except_function_type() (localctx ITokens_reserved_except_function_typeContext) {
	localctx = NewTokens_reserved_except_function_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, SQLParserRULE_tokens_reserved_except_function_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5630)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 351)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 351))) & ((1 << (SQLParserAUTHORIZATION - 351)) | (1 << (SQLParserBINARY - 351)) | (1 << (SQLParserCOLLATION - 351)) | (1 << (SQLParserCONCURRENTLY - 351)) | (1 << (SQLParserCROSS - 351)) | (1 << (SQLParserCURRENT_SCHEMA - 351)) | (1 << (SQLParserFREEZE - 351)) | (1 << (SQLParserFULL - 351)) | (1 << (SQLParserILIKE - 351)) | (1 << (SQLParserINNER - 351)) | (1 << (SQLParserIS - 351)) | (1 << (SQLParserISNULL - 351)) | (1 << (SQLParserJOIN - 351)) | (1 << (SQLParserLEFT - 351)) | (1 << (SQLParserLIKE - 351)) | (1 << (SQLParserNATURAL - 351)) | (1 << (SQLParserNOTNULL - 351)) | (1 << (SQLParserOUTER - 351)) | (1 << (SQLParserOVERLAPS - 351)) | (1 << (SQLParserRIGHT - 351)) | (1 << (SQLParserSIMILAR - 351)) | (1 << (SQLParserTABLESAMPLE - 351)) | (1 << (SQLParserVERBOSE - 351)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITokens_reservedContext is an interface to support dynamic dispatch.
type ITokens_reservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTokens_reservedContext differentiates from other interfaces.
	IsTokens_reservedContext()
}

type Tokens_reservedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTokens_reservedContext() *Tokens_reservedContext {
	var p = new(Tokens_reservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_tokens_reserved
	return p
}

func (*Tokens_reservedContext) IsTokens_reservedContext() {}

func NewTokens_reservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tokens_reservedContext {
	var p = new(Tokens_reservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_tokens_reserved

	return p
}

func (s *Tokens_reservedContext) GetParser() antlr.Parser { return s.parser }

func (s *Tokens_reservedContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Tokens_reservedContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLParserANALYZE, 0)
}

func (s *Tokens_reservedContext) AND() antlr.TerminalNode {
	return s.GetToken(SQLParserAND, 0)
}

func (s *Tokens_reservedContext) ANY() antlr.TerminalNode {
	return s.GetToken(SQLParserANY, 0)
}

func (s *Tokens_reservedContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SQLParserARRAY, 0)
}

func (s *Tokens_reservedContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Tokens_reservedContext) ASC() antlr.TerminalNode {
	return s.GetToken(SQLParserASC, 0)
}

func (s *Tokens_reservedContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(SQLParserASYMMETRIC, 0)
}

func (s *Tokens_reservedContext) BOTH() antlr.TerminalNode {
	return s.GetToken(SQLParserBOTH, 0)
}

func (s *Tokens_reservedContext) CASE() antlr.TerminalNode {
	return s.GetToken(SQLParserCASE, 0)
}

func (s *Tokens_reservedContext) CAST() antlr.TerminalNode {
	return s.GetToken(SQLParserCAST, 0)
}

func (s *Tokens_reservedContext) CHECK() antlr.TerminalNode {
	return s.GetToken(SQLParserCHECK, 0)
}

func (s *Tokens_reservedContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATE, 0)
}

func (s *Tokens_reservedContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Tokens_reservedContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Tokens_reservedContext) CREATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATE, 0)
}

func (s *Tokens_reservedContext) CURRENT_CATALOG() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_CATALOG, 0)
}

func (s *Tokens_reservedContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_DATE, 0)
}

func (s *Tokens_reservedContext) CURRENT_ROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_ROLE, 0)
}

func (s *Tokens_reservedContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_TIME, 0)
}

func (s *Tokens_reservedContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_TIMESTAMP, 0)
}

func (s *Tokens_reservedContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_USER, 0)
}

func (s *Tokens_reservedContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Tokens_reservedContext) DEFERRABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFERRABLE, 0)
}

func (s *Tokens_reservedContext) DESC() antlr.TerminalNode {
	return s.GetToken(SQLParserDESC, 0)
}

func (s *Tokens_reservedContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLParserDISTINCT, 0)
}

func (s *Tokens_reservedContext) DO() antlr.TerminalNode {
	return s.GetToken(SQLParserDO, 0)
}

func (s *Tokens_reservedContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SQLParserELSE, 0)
}

func (s *Tokens_reservedContext) END() antlr.TerminalNode {
	return s.GetToken(SQLParserEND, 0)
}

func (s *Tokens_reservedContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCEPT, 0)
}

func (s *Tokens_reservedContext) FALSE() antlr.TerminalNode {
	return s.GetToken(SQLParserFALSE, 0)
}

func (s *Tokens_reservedContext) FETCH() antlr.TerminalNode {
	return s.GetToken(SQLParserFETCH, 0)
}

func (s *Tokens_reservedContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Tokens_reservedContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREIGN, 0)
}

func (s *Tokens_reservedContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Tokens_reservedContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SQLParserGRANT, 0)
}

func (s *Tokens_reservedContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *Tokens_reservedContext) HAVING() antlr.TerminalNode {
	return s.GetToken(SQLParserHAVING, 0)
}

func (s *Tokens_reservedContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Tokens_reservedContext) INITIALLY() antlr.TerminalNode {
	return s.GetToken(SQLParserINITIALLY, 0)
}

func (s *Tokens_reservedContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLParserINTERSECT, 0)
}

func (s *Tokens_reservedContext) INTO() antlr.TerminalNode {
	return s.GetToken(SQLParserINTO, 0)
}

func (s *Tokens_reservedContext) LATERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserLATERAL, 0)
}

func (s *Tokens_reservedContext) LEADING() antlr.TerminalNode {
	return s.GetToken(SQLParserLEADING, 0)
}

func (s *Tokens_reservedContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserLIMIT, 0)
}

func (s *Tokens_reservedContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCALTIME, 0)
}

func (s *Tokens_reservedContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCALTIMESTAMP, 0)
}

func (s *Tokens_reservedContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Tokens_reservedContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Tokens_reservedContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLParserOFFSET, 0)
}

func (s *Tokens_reservedContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Tokens_reservedContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *Tokens_reservedContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLParserOR, 0)
}

func (s *Tokens_reservedContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SQLParserORDER, 0)
}

func (s *Tokens_reservedContext) PLACING() antlr.TerminalNode {
	return s.GetToken(SQLParserPLACING, 0)
}

func (s *Tokens_reservedContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(SQLParserPRIMARY, 0)
}

func (s *Tokens_reservedContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(SQLParserREFERENCES, 0)
}

func (s *Tokens_reservedContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURNING, 0)
}

func (s *Tokens_reservedContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SQLParserSELECT, 0)
}

func (s *Tokens_reservedContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION_USER, 0)
}

func (s *Tokens_reservedContext) SOME() antlr.TerminalNode {
	return s.GetToken(SQLParserSOME, 0)
}

func (s *Tokens_reservedContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(SQLParserSYMMETRIC, 0)
}

func (s *Tokens_reservedContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Tokens_reservedContext) THEN() antlr.TerminalNode {
	return s.GetToken(SQLParserTHEN, 0)
}

func (s *Tokens_reservedContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Tokens_reservedContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(SQLParserTRAILING, 0)
}

func (s *Tokens_reservedContext) TRUE() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUE, 0)
}

func (s *Tokens_reservedContext) UNION() antlr.TerminalNode {
	return s.GetToken(SQLParserUNION, 0)
}

func (s *Tokens_reservedContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(SQLParserUNIQUE, 0)
}

func (s *Tokens_reservedContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Tokens_reservedContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Tokens_reservedContext) VARIADIC() antlr.TerminalNode {
	return s.GetToken(SQLParserVARIADIC, 0)
}

func (s *Tokens_reservedContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SQLParserWHEN, 0)
}

func (s *Tokens_reservedContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Tokens_reservedContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(SQLParserWINDOW, 0)
}

func (s *Tokens_reservedContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Tokens_reservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tokens_reservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Tokens_reservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTokens_reserved(s)
	}
}

func (s *Tokens_reservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTokens_reserved(s)
	}
}




func (p *SQLParser) Tokens_reserved() (localctx ITokens_reservedContext) {
	localctx = NewTokens_reservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, SQLParserRULE_tokens_reserved)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5632)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 374)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 374))) & ((1 << (SQLParserALL - 374)) | (1 << (SQLParserANALYZE - 374)) | (1 << (SQLParserAND - 374)) | (1 << (SQLParserANY - 374)) | (1 << (SQLParserARRAY - 374)) | (1 << (SQLParserAS - 374)) | (1 << (SQLParserASC - 374)) | (1 << (SQLParserASYMMETRIC - 374)) | (1 << (SQLParserBOTH - 374)) | (1 << (SQLParserCASE - 374)) | (1 << (SQLParserCAST - 374)) | (1 << (SQLParserCHECK - 374)) | (1 << (SQLParserCOLLATE - 374)) | (1 << (SQLParserCOLUMN - 374)) | (1 << (SQLParserCONSTRAINT - 374)) | (1 << (SQLParserCREATE - 374)) | (1 << (SQLParserCURRENT_CATALOG - 374)) | (1 << (SQLParserCURRENT_DATE - 374)) | (1 << (SQLParserCURRENT_ROLE - 374)) | (1 << (SQLParserCURRENT_TIME - 374)) | (1 << (SQLParserCURRENT_TIMESTAMP - 374)) | (1 << (SQLParserCURRENT_USER - 374)) | (1 << (SQLParserDEFAULT - 374)) | (1 << (SQLParserDEFERRABLE - 374)) | (1 << (SQLParserDESC - 374)) | (1 << (SQLParserDISTINCT - 374)) | (1 << (SQLParserDO - 374)) | (1 << (SQLParserELSE - 374)) | (1 << (SQLParserEND - 374)) | (1 << (SQLParserEXCEPT - 374)) | (1 << (SQLParserFALSE - 374)) | (1 << (SQLParserFETCH - 374)))) != 0) || ((((_la - 406)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 406))) & ((1 << (SQLParserFOR - 406)) | (1 << (SQLParserFOREIGN - 406)) | (1 << (SQLParserFROM - 406)) | (1 << (SQLParserGRANT - 406)) | (1 << (SQLParserGROUP - 406)) | (1 << (SQLParserHAVING - 406)) | (1 << (SQLParserIN - 406)) | (1 << (SQLParserINITIALLY - 406)) | (1 << (SQLParserINTERSECT - 406)) | (1 << (SQLParserINTO - 406)) | (1 << (SQLParserLATERAL - 406)) | (1 << (SQLParserLEADING - 406)) | (1 << (SQLParserLIMIT - 406)) | (1 << (SQLParserLOCALTIME - 406)) | (1 << (SQLParserLOCALTIMESTAMP - 406)) | (1 << (SQLParserNOT - 406)) | (1 << (SQLParserNULL - 406)) | (1 << (SQLParserOFFSET - 406)) | (1 << (SQLParserON - 406)) | (1 << (SQLParserONLY - 406)) | (1 << (SQLParserOR - 406)) | (1 << (SQLParserORDER - 406)) | (1 << (SQLParserPLACING - 406)) | (1 << (SQLParserPRIMARY - 406)) | (1 << (SQLParserREFERENCES - 406)) | (1 << (SQLParserRETURNING - 406)) | (1 << (SQLParserSELECT - 406)) | (1 << (SQLParserSESSION_USER - 406)) | (1 << (SQLParserSOME - 406)) | (1 << (SQLParserSYMMETRIC - 406)) | (1 << (SQLParserTABLE - 406)) | (1 << (SQLParserTHEN - 406)))) != 0) || ((((_la - 438)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 438))) & ((1 << (SQLParserTO - 438)) | (1 << (SQLParserTRAILING - 438)) | (1 << (SQLParserTRUE - 438)) | (1 << (SQLParserUNION - 438)) | (1 << (SQLParserUNIQUE - 438)) | (1 << (SQLParserUSER - 438)) | (1 << (SQLParserUSING - 438)) | (1 << (SQLParserVARIADIC - 438)) | (1 << (SQLParserWHEN - 438)) | (1 << (SQLParserWHERE - 438)) | (1 << (SQLParserWINDOW - 438)) | (1 << (SQLParserWITH - 438)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITokens_nonkeywordContext is an interface to support dynamic dispatch.
type ITokens_nonkeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTokens_nonkeywordContext differentiates from other interfaces.
	IsTokens_nonkeywordContext()
}

type Tokens_nonkeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTokens_nonkeywordContext() *Tokens_nonkeywordContext {
	var p = new(Tokens_nonkeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_tokens_nonkeyword
	return p
}

func (*Tokens_nonkeywordContext) IsTokens_nonkeywordContext() {}

func NewTokens_nonkeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tokens_nonkeywordContext {
	var p = new(Tokens_nonkeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_tokens_nonkeyword

	return p
}

func (s *Tokens_nonkeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Tokens_nonkeywordContext) ALIGNMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserALIGNMENT, 0)
}

func (s *Tokens_nonkeywordContext) ALLOW_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(SQLParserALLOW_CONNECTIONS, 0)
}

func (s *Tokens_nonkeywordContext) BASETYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserBASETYPE, 0)
}

func (s *Tokens_nonkeywordContext) BUFFERS() antlr.TerminalNode {
	return s.GetToken(SQLParserBUFFERS, 0)
}

func (s *Tokens_nonkeywordContext) BYPASSRLS() antlr.TerminalNode {
	return s.GetToken(SQLParserBYPASSRLS, 0)
}

func (s *Tokens_nonkeywordContext) CANONICAL() antlr.TerminalNode {
	return s.GetToken(SQLParserCANONICAL, 0)
}

func (s *Tokens_nonkeywordContext) CATEGORY() antlr.TerminalNode {
	return s.GetToken(SQLParserCATEGORY, 0)
}

func (s *Tokens_nonkeywordContext) COLLATABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATABLE, 0)
}

func (s *Tokens_nonkeywordContext) COMBINEFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMBINEFUNC, 0)
}

func (s *Tokens_nonkeywordContext) COMMUTATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMUTATOR, 0)
}

func (s *Tokens_nonkeywordContext) CONNECT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONNECT, 0)
}

func (s *Tokens_nonkeywordContext) COSTS() antlr.TerminalNode {
	return s.GetToken(SQLParserCOSTS, 0)
}

func (s *Tokens_nonkeywordContext) CREATEDB() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATEDB, 0)
}

func (s *Tokens_nonkeywordContext) CREATEROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserCREATEROLE, 0)
}

func (s *Tokens_nonkeywordContext) DESERIALFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserDESERIALFUNC, 0)
}

func (s *Tokens_nonkeywordContext) DETERMINISTIC() antlr.TerminalNode {
	return s.GetToken(SQLParserDETERMINISTIC, 0)
}

func (s *Tokens_nonkeywordContext) DISABLE_PAGE_SKIPPING() antlr.TerminalNode {
	return s.GetToken(SQLParserDISABLE_PAGE_SKIPPING, 0)
}

func (s *Tokens_nonkeywordContext) ELEMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserELEMENT, 0)
}

func (s *Tokens_nonkeywordContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTENDED, 0)
}

func (s *Tokens_nonkeywordContext) FINALFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserFINALFUNC, 0)
}

func (s *Tokens_nonkeywordContext) FINALFUNC_EXTRA() antlr.TerminalNode {
	return s.GetToken(SQLParserFINALFUNC_EXTRA, 0)
}

func (s *Tokens_nonkeywordContext) FINALFUNC_MODIFY() antlr.TerminalNode {
	return s.GetToken(SQLParserFINALFUNC_MODIFY, 0)
}

func (s *Tokens_nonkeywordContext) FORCE_NOT_NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE_NOT_NULL, 0)
}

func (s *Tokens_nonkeywordContext) FORCE_NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE_NULL, 0)
}

func (s *Tokens_nonkeywordContext) FORCE_QUOTE() antlr.TerminalNode {
	return s.GetToken(SQLParserFORCE_QUOTE, 0)
}

func (s *Tokens_nonkeywordContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SQLParserFORMAT, 0)
}

func (s *Tokens_nonkeywordContext) GETTOKEN() antlr.TerminalNode {
	return s.GetToken(SQLParserGETTOKEN, 0)
}

func (s *Tokens_nonkeywordContext) HASH() antlr.TerminalNode {
	return s.GetToken(SQLParserHASH, 0)
}

func (s *Tokens_nonkeywordContext) HASHES() antlr.TerminalNode {
	return s.GetToken(SQLParserHASHES, 0)
}

func (s *Tokens_nonkeywordContext) HEADLINE() antlr.TerminalNode {
	return s.GetToken(SQLParserHEADLINE, 0)
}

func (s *Tokens_nonkeywordContext) HYPOTHETICAL() antlr.TerminalNode {
	return s.GetToken(SQLParserHYPOTHETICAL, 0)
}

func (s *Tokens_nonkeywordContext) INDEX_CLEANUP() antlr.TerminalNode {
	return s.GetToken(SQLParserINDEX_CLEANUP, 0)
}

func (s *Tokens_nonkeywordContext) INIT() antlr.TerminalNode {
	return s.GetToken(SQLParserINIT, 0)
}

func (s *Tokens_nonkeywordContext) INITCOND() antlr.TerminalNode {
	return s.GetToken(SQLParserINITCOND, 0)
}

func (s *Tokens_nonkeywordContext) INTERNALLENGTH() antlr.TerminalNode {
	return s.GetToken(SQLParserINTERNALLENGTH, 0)
}

func (s *Tokens_nonkeywordContext) IS_TEMPLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserIS_TEMPLATE, 0)
}

func (s *Tokens_nonkeywordContext) JSON() antlr.TerminalNode {
	return s.GetToken(SQLParserJSON, 0)
}

func (s *Tokens_nonkeywordContext) LC_COLLATE() antlr.TerminalNode {
	return s.GetToken(SQLParserLC_COLLATE, 0)
}

func (s *Tokens_nonkeywordContext) LC_CTYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserLC_CTYPE, 0)
}

func (s *Tokens_nonkeywordContext) LEFTARG() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFTARG, 0)
}

func (s *Tokens_nonkeywordContext) LEXIZE() antlr.TerminalNode {
	return s.GetToken(SQLParserLEXIZE, 0)
}

func (s *Tokens_nonkeywordContext) LEXTYPES() antlr.TerminalNode {
	return s.GetToken(SQLParserLEXTYPES, 0)
}

func (s *Tokens_nonkeywordContext) LIST() antlr.TerminalNode {
	return s.GetToken(SQLParserLIST, 0)
}

func (s *Tokens_nonkeywordContext) LOCALE() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCALE, 0)
}

func (s *Tokens_nonkeywordContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(SQLParserLOGIN, 0)
}

func (s *Tokens_nonkeywordContext) MAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserMAIN, 0)
}

func (s *Tokens_nonkeywordContext) MERGES() antlr.TerminalNode {
	return s.GetToken(SQLParserMERGES, 0)
}

func (s *Tokens_nonkeywordContext) MFINALFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserMFINALFUNC, 0)
}

func (s *Tokens_nonkeywordContext) MFINALFUNC_EXTRA() antlr.TerminalNode {
	return s.GetToken(SQLParserMFINALFUNC_EXTRA, 0)
}

func (s *Tokens_nonkeywordContext) MFINALFUNC_MODIFY() antlr.TerminalNode {
	return s.GetToken(SQLParserMFINALFUNC_MODIFY, 0)
}

func (s *Tokens_nonkeywordContext) MINITCOND() antlr.TerminalNode {
	return s.GetToken(SQLParserMINITCOND, 0)
}

func (s *Tokens_nonkeywordContext) MINVFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserMINVFUNC, 0)
}

func (s *Tokens_nonkeywordContext) MODULUS() antlr.TerminalNode {
	return s.GetToken(SQLParserMODULUS, 0)
}

func (s *Tokens_nonkeywordContext) MSFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserMSFUNC, 0)
}

func (s *Tokens_nonkeywordContext) MSSPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserMSSPACE, 0)
}

func (s *Tokens_nonkeywordContext) MSTYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserMSTYPE, 0)
}

func (s *Tokens_nonkeywordContext) NEGATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserNEGATOR, 0)
}

func (s *Tokens_nonkeywordContext) NOBYPASSRLS() antlr.TerminalNode {
	return s.GetToken(SQLParserNOBYPASSRLS, 0)
}

func (s *Tokens_nonkeywordContext) NOCREATEDB() antlr.TerminalNode {
	return s.GetToken(SQLParserNOCREATEDB, 0)
}

func (s *Tokens_nonkeywordContext) NOCREATEROLE() antlr.TerminalNode {
	return s.GetToken(SQLParserNOCREATEROLE, 0)
}

func (s *Tokens_nonkeywordContext) NOINHERIT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOINHERIT, 0)
}

func (s *Tokens_nonkeywordContext) NOLOGIN() antlr.TerminalNode {
	return s.GetToken(SQLParserNOLOGIN, 0)
}

func (s *Tokens_nonkeywordContext) NOREPLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserNOREPLICATION, 0)
}

func (s *Tokens_nonkeywordContext) NOSUPERUSER() antlr.TerminalNode {
	return s.GetToken(SQLParserNOSUPERUSER, 0)
}

func (s *Tokens_nonkeywordContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(SQLParserOUTPUT, 0)
}

func (s *Tokens_nonkeywordContext) PASSEDBYVALUE() antlr.TerminalNode {
	return s.GetToken(SQLParserPASSEDBYVALUE, 0)
}

func (s *Tokens_nonkeywordContext) PATH() antlr.TerminalNode {
	return s.GetToken(SQLParserPATH, 0)
}

func (s *Tokens_nonkeywordContext) PERMISSIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserPERMISSIVE, 0)
}

func (s *Tokens_nonkeywordContext) PLAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserPLAIN, 0)
}

func (s *Tokens_nonkeywordContext) PREFERRED() antlr.TerminalNode {
	return s.GetToken(SQLParserPREFERRED, 0)
}

func (s *Tokens_nonkeywordContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(SQLParserPROVIDER, 0)
}

func (s *Tokens_nonkeywordContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserREAD_ONLY, 0)
}

func (s *Tokens_nonkeywordContext) READ_WRITE() antlr.TerminalNode {
	return s.GetToken(SQLParserREAD_WRITE, 0)
}

func (s *Tokens_nonkeywordContext) RECEIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRECEIVE, 0)
}

func (s *Tokens_nonkeywordContext) REMAINDER() antlr.TerminalNode {
	return s.GetToken(SQLParserREMAINDER, 0)
}

func (s *Tokens_nonkeywordContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(SQLParserREPLICATION, 0)
}

func (s *Tokens_nonkeywordContext) RESTRICTED() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICTED, 0)
}

func (s *Tokens_nonkeywordContext) RESTRICTIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTRICTIVE, 0)
}

func (s *Tokens_nonkeywordContext) RIGHTARG() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHTARG, 0)
}

func (s *Tokens_nonkeywordContext) SAFE() antlr.TerminalNode {
	return s.GetToken(SQLParserSAFE, 0)
}

func (s *Tokens_nonkeywordContext) SEND() antlr.TerminalNode {
	return s.GetToken(SQLParserSEND, 0)
}

func (s *Tokens_nonkeywordContext) SERIALFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserSERIALFUNC, 0)
}

func (s *Tokens_nonkeywordContext) SETTINGS() antlr.TerminalNode {
	return s.GetToken(SQLParserSETTINGS, 0)
}

func (s *Tokens_nonkeywordContext) SFUNC() antlr.TerminalNode {
	return s.GetToken(SQLParserSFUNC, 0)
}

func (s *Tokens_nonkeywordContext) SHAREABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserSHAREABLE, 0)
}

func (s *Tokens_nonkeywordContext) SKIP_LOCKED() antlr.TerminalNode {
	return s.GetToken(SQLParserSKIP_LOCKED, 0)
}

func (s *Tokens_nonkeywordContext) SORTOP() antlr.TerminalNode {
	return s.GetToken(SQLParserSORTOP, 0)
}

func (s *Tokens_nonkeywordContext) SSPACE() antlr.TerminalNode {
	return s.GetToken(SQLParserSSPACE, 0)
}

func (s *Tokens_nonkeywordContext) STYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTYPE, 0)
}

func (s *Tokens_nonkeywordContext) SUBTYPE_DIFF() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBTYPE_DIFF, 0)
}

func (s *Tokens_nonkeywordContext) SUBTYPE_OPCLASS() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBTYPE_OPCLASS, 0)
}

func (s *Tokens_nonkeywordContext) SUBTYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBTYPE, 0)
}

func (s *Tokens_nonkeywordContext) SUMMARY() antlr.TerminalNode {
	return s.GetToken(SQLParserSUMMARY, 0)
}

func (s *Tokens_nonkeywordContext) SUPERUSER() antlr.TerminalNode {
	return s.GetToken(SQLParserSUPERUSER, 0)
}

func (s *Tokens_nonkeywordContext) TIMING() antlr.TerminalNode {
	return s.GetToken(SQLParserTIMING, 0)
}

func (s *Tokens_nonkeywordContext) TYPMOD_IN() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPMOD_IN, 0)
}

func (s *Tokens_nonkeywordContext) TYPMOD_OUT() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPMOD_OUT, 0)
}

func (s *Tokens_nonkeywordContext) UNSAFE() antlr.TerminalNode {
	return s.GetToken(SQLParserUNSAFE, 0)
}

func (s *Tokens_nonkeywordContext) USAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserUSAGE, 0)
}

func (s *Tokens_nonkeywordContext) VARIABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserVARIABLE, 0)
}

func (s *Tokens_nonkeywordContext) WAL() antlr.TerminalNode {
	return s.GetToken(SQLParserWAL, 0)
}

func (s *Tokens_nonkeywordContext) YAML() antlr.TerminalNode {
	return s.GetToken(SQLParserYAML, 0)
}

func (s *Tokens_nonkeywordContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(SQLParserALIAS, 0)
}

func (s *Tokens_nonkeywordContext) ASSERT() antlr.TerminalNode {
	return s.GetToken(SQLParserASSERT, 0)
}

func (s *Tokens_nonkeywordContext) CONSTANT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTANT, 0)
}

func (s *Tokens_nonkeywordContext) DATATYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATATYPE, 0)
}

func (s *Tokens_nonkeywordContext) DEBUG() antlr.TerminalNode {
	return s.GetToken(SQLParserDEBUG, 0)
}

func (s *Tokens_nonkeywordContext) DETAIL() antlr.TerminalNode {
	return s.GetToken(SQLParserDETAIL, 0)
}

func (s *Tokens_nonkeywordContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserDIAGNOSTICS, 0)
}

func (s *Tokens_nonkeywordContext) ELSEIF() antlr.TerminalNode {
	return s.GetToken(SQLParserELSEIF, 0)
}

func (s *Tokens_nonkeywordContext) ELSIF() antlr.TerminalNode {
	return s.GetToken(SQLParserELSIF, 0)
}

func (s *Tokens_nonkeywordContext) ERRCODE() antlr.TerminalNode {
	return s.GetToken(SQLParserERRCODE, 0)
}

func (s *Tokens_nonkeywordContext) EXIT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXIT, 0)
}

func (s *Tokens_nonkeywordContext) EXCEPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCEPTION, 0)
}

func (s *Tokens_nonkeywordContext) FOREACH() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREACH, 0)
}

func (s *Tokens_nonkeywordContext) GET() antlr.TerminalNode {
	return s.GetToken(SQLParserGET, 0)
}

func (s *Tokens_nonkeywordContext) HINT() antlr.TerminalNode {
	return s.GetToken(SQLParserHINT, 0)
}

func (s *Tokens_nonkeywordContext) INFO() antlr.TerminalNode {
	return s.GetToken(SQLParserINFO, 0)
}

func (s *Tokens_nonkeywordContext) LOG() antlr.TerminalNode {
	return s.GetToken(SQLParserLOG, 0)
}

func (s *Tokens_nonkeywordContext) LOOP() antlr.TerminalNode {
	return s.GetToken(SQLParserLOOP, 0)
}

func (s *Tokens_nonkeywordContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserMESSAGE, 0)
}

func (s *Tokens_nonkeywordContext) NOTICE() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTICE, 0)
}

func (s *Tokens_nonkeywordContext) OPEN() antlr.TerminalNode {
	return s.GetToken(SQLParserOPEN, 0)
}

func (s *Tokens_nonkeywordContext) PERFORM() antlr.TerminalNode {
	return s.GetToken(SQLParserPERFORM, 0)
}

func (s *Tokens_nonkeywordContext) QUERY() antlr.TerminalNode {
	return s.GetToken(SQLParserQUERY, 0)
}

func (s *Tokens_nonkeywordContext) RAISE() antlr.TerminalNode {
	return s.GetToken(SQLParserRAISE, 0)
}

func (s *Tokens_nonkeywordContext) RECORD() antlr.TerminalNode {
	return s.GetToken(SQLParserRECORD, 0)
}

func (s *Tokens_nonkeywordContext) RETURN() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURN, 0)
}

func (s *Tokens_nonkeywordContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(SQLParserREVERSE, 0)
}

func (s *Tokens_nonkeywordContext) ROWTYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserROWTYPE, 0)
}

func (s *Tokens_nonkeywordContext) SLICE() antlr.TerminalNode {
	return s.GetToken(SQLParserSLICE, 0)
}

func (s *Tokens_nonkeywordContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(SQLParserSQLSTATE, 0)
}

func (s *Tokens_nonkeywordContext) STACKED() antlr.TerminalNode {
	return s.GetToken(SQLParserSTACKED, 0)
}

func (s *Tokens_nonkeywordContext) WARNING() antlr.TerminalNode {
	return s.GetToken(SQLParserWARNING, 0)
}

func (s *Tokens_nonkeywordContext) WHILE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHILE, 0)
}

func (s *Tokens_nonkeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tokens_nonkeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Tokens_nonkeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTokens_nonkeyword(s)
	}
}

func (s *Tokens_nonkeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTokens_nonkeyword(s)
	}
}




func (p *SQLParser) Tokens_nonkeyword() (localctx ITokens_nonkeywordContext) {
	localctx = NewTokens_nonkeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, SQLParserRULE_tokens_nonkeyword)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5634)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ISchema_qualified_name_nontypeContext is an interface to support dynamic dispatch.
type ISchema_qualified_name_nontypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdentifierContext


	// SetSchema sets the schema rule contexts.
	SetSchema(IIdentifierContext)


	// IsSchema_qualified_name_nontypeContext differentiates from other interfaces.
	IsSchema_qualified_name_nontypeContext()
}

type Schema_qualified_name_nontypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	schema IIdentifierContext 
}

func NewEmptySchema_qualified_name_nontypeContext() *Schema_qualified_name_nontypeContext {
	var p = new(Schema_qualified_name_nontypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_schema_qualified_name_nontype
	return p
}

func (*Schema_qualified_name_nontypeContext) IsSchema_qualified_name_nontypeContext() {}

func NewSchema_qualified_name_nontypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_qualified_name_nontypeContext {
	var p = new(Schema_qualified_name_nontypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_schema_qualified_name_nontype

	return p
}

func (s *Schema_qualified_name_nontypeContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_qualified_name_nontypeContext) GetSchema() IIdentifierContext { return s.schema }


func (s *Schema_qualified_name_nontypeContext) SetSchema(v IIdentifierContext) { s.schema = v }


func (s *Schema_qualified_name_nontypeContext) Identifier_nontype() IIdentifier_nontypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nontypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nontypeContext)
}

func (s *Schema_qualified_name_nontypeContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *Schema_qualified_name_nontypeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Schema_qualified_name_nontypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_qualified_name_nontypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_qualified_name_nontypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSchema_qualified_name_nontype(s)
	}
}

func (s *Schema_qualified_name_nontypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSchema_qualified_name_nontype(s)
	}
}




func (p *SQLParser) Schema_qualified_name_nontype() (localctx ISchema_qualified_name_nontypeContext) {
	localctx = NewSchema_qualified_name_nontypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, SQLParserRULE_schema_qualified_name_nontype)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5641)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 707, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5636)
			p.Identifier_nontype()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5637)

			var _x = p.Identifier()


			localctx.(*Schema_qualified_name_nontypeContext).schema = _x
		}
		{
			p.SetState(5638)
			p.Match(SQLParserDOT)
		}
		{
			p.SetState(5639)
			p.Identifier_nontype()
		}

	}


	return localctx
}


// IType_listContext is an interface to support dynamic dispatch.
type IType_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_listContext differentiates from other interfaces.
	IsType_listContext()
}

type Type_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_listContext() *Type_listContext {
	var p = new(Type_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_type_list
	return p
}

func (*Type_listContext) IsType_listContext() {}

func NewType_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_listContext {
	var p = new(Type_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_type_list

	return p
}

func (s *Type_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_listContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Type_listContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Type_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Type_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Type_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterType_list(s)
	}
}

func (s *Type_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitType_list(s)
	}
}




func (p *SQLParser) Type_list() (localctx IType_listContext) {
	localctx = NewType_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, SQLParserRULE_type_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5643)
		p.Data_type()
	}
	p.SetState(5648)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(5644)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5645)
			p.Data_type()
		}


		p.SetState(5650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) Predefined_type() IPredefined_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredefined_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredefined_typeContext)
}

func (s *Data_typeContext) SETOF() antlr.TerminalNode {
	return s.GetToken(SQLParserSETOF, 0)
}

func (s *Data_typeContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SQLParserARRAY, 0)
}

func (s *Data_typeContext) AllArray_type() []IArray_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArray_typeContext)(nil)).Elem())
	var tst = make([]IArray_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArray_typeContext)
		}
	}

	return tst
}

func (s *Data_typeContext) Array_type(i int) IArray_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterData_type(s)
	}
}

func (s *Data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitData_type(s)
	}
}




func (p *SQLParser) Data_type() (localctx IData_typeContext) {
	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, SQLParserRULE_data_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5652)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 709, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5651)
			p.Match(SQLParserSETOF)
		}


	}
	{
		p.SetState(5654)
		p.Predefined_type()
	}
	p.SetState(5664)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 712, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5655)
			p.Match(SQLParserARRAY)
		}
		p.SetState(5657)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 710, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5656)
				p.Array_type()
			}


		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 712, p.GetParserRuleContext()) == 2 {
		p.SetState(5660)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					{
						p.SetState(5659)
						p.Array_type()
					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5662)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 711, p.GetParserRuleContext())
		}


	}



	return localctx
}


// IArray_typeContext is an interface to support dynamic dispatch.
type IArray_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_typeContext differentiates from other interfaces.
	IsArray_typeContext()
}

type Array_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_typeContext() *Array_typeContext {
	var p = new(Array_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_array_type
	return p
}

func (*Array_typeContext) IsArray_typeContext() {}

func NewArray_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_typeContext {
	var p = new(Array_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_array_type

	return p
}

func (s *Array_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_typeContext) LEFT_BRACKET() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_BRACKET, 0)
}

func (s *Array_typeContext) RIGHT_BRACKET() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_BRACKET, 0)
}

func (s *Array_typeContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Array_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Array_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterArray_type(s)
	}
}

func (s *Array_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitArray_type(s)
	}
}




func (p *SQLParser) Array_type() (localctx IArray_typeContext) {
	localctx = NewArray_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, SQLParserRULE_array_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5666)
		p.Match(SQLParserLEFT_BRACKET)
	}
	p.SetState(5668)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserNUMBER_LITERAL {
		{
			p.SetState(5667)
			p.Match(SQLParserNUMBER_LITERAL)
		}

	}
	{
		p.SetState(5670)
		p.Match(SQLParserRIGHT_BRACKET)
	}



	return localctx
}


// IPredefined_typeContext is an interface to support dynamic dispatch.
type IPredefined_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredefined_typeContext differentiates from other interfaces.
	IsPredefined_typeContext()
}

type Predefined_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredefined_typeContext() *Predefined_typeContext {
	var p = new(Predefined_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_predefined_type
	return p
}

func (*Predefined_typeContext) IsPredefined_typeContext() {}

func NewPredefined_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Predefined_typeContext {
	var p = new(Predefined_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_predefined_type

	return p
}

func (s *Predefined_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Predefined_typeContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(SQLParserBIGINT, 0)
}

func (s *Predefined_typeContext) BIT() antlr.TerminalNode {
	return s.GetToken(SQLParserBIT, 0)
}

func (s *Predefined_typeContext) VARYING() antlr.TerminalNode {
	return s.GetToken(SQLParserVARYING, 0)
}

func (s *Predefined_typeContext) Type_length() IType_lengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_lengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_lengthContext)
}

func (s *Predefined_typeContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SQLParserBOOLEAN, 0)
}

func (s *Predefined_typeContext) DEC() antlr.TerminalNode {
	return s.GetToken(SQLParserDEC, 0)
}

func (s *Predefined_typeContext) Precision_param() IPrecision_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecision_paramContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecision_paramContext)
}

func (s *Predefined_typeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(SQLParserDECIMAL, 0)
}

func (s *Predefined_typeContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(SQLParserDOUBLE, 0)
}

func (s *Predefined_typeContext) PRECISION() antlr.TerminalNode {
	return s.GetToken(SQLParserPRECISION, 0)
}

func (s *Predefined_typeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(SQLParserFLOAT, 0)
}

func (s *Predefined_typeContext) INT() antlr.TerminalNode {
	return s.GetToken(SQLParserINT, 0)
}

func (s *Predefined_typeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SQLParserINTEGER, 0)
}

func (s *Predefined_typeContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(SQLParserINTERVAL, 0)
}

func (s *Predefined_typeContext) Interval_field() IInterval_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterval_fieldContext)
}

func (s *Predefined_typeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(SQLParserCHARACTER, 0)
}

func (s *Predefined_typeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(SQLParserCHAR, 0)
}

func (s *Predefined_typeContext) NATIONAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNATIONAL, 0)
}

func (s *Predefined_typeContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(SQLParserNCHAR, 0)
}

func (s *Predefined_typeContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMERIC, 0)
}

func (s *Predefined_typeContext) REAL() antlr.TerminalNode {
	return s.GetToken(SQLParserREAL, 0)
}

func (s *Predefined_typeContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(SQLParserSMALLINT, 0)
}

func (s *Predefined_typeContext) AllTIME() []antlr.TerminalNode {
	return s.GetTokens(SQLParserTIME)
}

func (s *Predefined_typeContext) TIME(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserTIME, i)
}

func (s *Predefined_typeContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLParserZONE, 0)
}

func (s *Predefined_typeContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *Predefined_typeContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHOUT, 0)
}

func (s *Predefined_typeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTIMESTAMP, 0)
}

func (s *Predefined_typeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(SQLParserVARCHAR, 0)
}

func (s *Predefined_typeContext) Schema_qualified_name_nontype() ISchema_qualified_name_nontypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_name_nontypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_name_nontypeContext)
}

func (s *Predefined_typeContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Predefined_typeContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Predefined_typeContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Predefined_typeContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Predefined_typeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Predefined_typeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Predefined_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Predefined_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Predefined_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPredefined_type(s)
	}
}

func (s *Predefined_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPredefined_type(s)
	}
}




func (p *SQLParser) Predefined_type() (localctx IPredefined_typeContext) {
	localctx = NewPredefined_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, SQLParserRULE_predefined_type)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5763)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 734, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5672)
			p.Match(SQLParserBIGINT)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5673)
			p.Match(SQLParserBIT)
		}
		p.SetState(5675)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 714, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5674)
				p.Match(SQLParserVARYING)
			}


		}
		p.SetState(5678)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 715, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5677)
				p.Type_length()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5680)
			p.Match(SQLParserBOOLEAN)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5681)
			p.Match(SQLParserDEC)
		}
		p.SetState(5683)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 716, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5682)
				p.Precision_param()
			}


		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5685)
			p.Match(SQLParserDECIMAL)
		}
		p.SetState(5687)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 717, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5686)
				p.Precision_param()
			}


		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5689)
			p.Match(SQLParserDOUBLE)
		}
		{
			p.SetState(5690)
			p.Match(SQLParserPRECISION)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5691)
			p.Match(SQLParserFLOAT)
		}
		p.SetState(5693)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 718, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5692)
				p.Precision_param()
			}


		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5695)
			p.Match(SQLParserINT)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5696)
			p.Match(SQLParserINTEGER)
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5697)
			p.Match(SQLParserINTERVAL)
		}
		p.SetState(5699)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 719, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5698)
				p.Interval_field()
			}


		}
		p.SetState(5702)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 720, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5701)
				p.Type_length()
			}


		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		p.SetState(5705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNATIONAL {
			{
				p.SetState(5704)
				p.Match(SQLParserNATIONAL)
			}

		}
		{
			p.SetState(5707)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCHAR || _la == SQLParserCHARACTER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(5709)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 722, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5708)
				p.Match(SQLParserVARYING)
			}


		}
		p.SetState(5712)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 723, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5711)
				p.Type_length()
			}


		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5714)
			p.Match(SQLParserNCHAR)
		}
		p.SetState(5716)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 724, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5715)
				p.Match(SQLParserVARYING)
			}


		}
		p.SetState(5719)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 725, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5718)
				p.Type_length()
			}


		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5721)
			p.Match(SQLParserNUMERIC)
		}
		p.SetState(5723)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 726, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5722)
				p.Precision_param()
			}


		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5725)
			p.Match(SQLParserREAL)
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5726)
			p.Match(SQLParserSMALLINT)
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(5727)
			p.Match(SQLParserTIME)
		}
		p.SetState(5729)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 727, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5728)
				p.Type_length()
			}


		}
		p.SetState(5734)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 728, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5731)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserWITHOUT || _la == SQLParserWITH) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5732)
				p.Match(SQLParserTIME)
			}
			{
				p.SetState(5733)
				p.Match(SQLParserZONE)
			}


		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(5736)
			p.Match(SQLParserTIMESTAMP)
		}
		p.SetState(5738)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 729, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5737)
				p.Type_length()
			}


		}
		p.SetState(5743)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 730, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5740)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserWITHOUT || _la == SQLParserWITH) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(5741)
				p.Match(SQLParserTIME)
			}
			{
				p.SetState(5742)
				p.Match(SQLParserZONE)
			}


		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(5745)
			p.Match(SQLParserVARCHAR)
		}
		p.SetState(5747)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 731, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5746)
				p.Type_length()
			}


		}


	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(5749)
			p.Schema_qualified_name_nontype()
		}
		p.SetState(5761)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 733, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5750)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(5751)
				p.vex(0)
			}
			p.SetState(5756)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(5752)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(5753)
					p.vex(0)
				}


				p.SetState(5758)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(5759)
				p.Match(SQLParserRIGHT_PAREN)
			}


		}

	}


	return localctx
}


// IInterval_fieldContext is an interface to support dynamic dispatch.
type IInterval_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterval_fieldContext differentiates from other interfaces.
	IsInterval_fieldContext()
}

type Interval_fieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterval_fieldContext() *Interval_fieldContext {
	var p = new(Interval_fieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_interval_field
	return p
}

func (*Interval_fieldContext) IsInterval_fieldContext() {}

func NewInterval_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interval_fieldContext {
	var p = new(Interval_fieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_interval_field

	return p
}

func (s *Interval_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Interval_fieldContext) YEAR() antlr.TerminalNode {
	return s.GetToken(SQLParserYEAR, 0)
}

func (s *Interval_fieldContext) MONTH() antlr.TerminalNode {
	return s.GetToken(SQLParserMONTH, 0)
}

func (s *Interval_fieldContext) DAY() antlr.TerminalNode {
	return s.GetToken(SQLParserDAY, 0)
}

func (s *Interval_fieldContext) HOUR() antlr.TerminalNode {
	return s.GetToken(SQLParserHOUR, 0)
}

func (s *Interval_fieldContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserMINUTE, 0)
}

func (s *Interval_fieldContext) SECOND() antlr.TerminalNode {
	return s.GetToken(SQLParserSECOND, 0)
}

func (s *Interval_fieldContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *Interval_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interval_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Interval_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterInterval_field(s)
	}
}

func (s *Interval_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitInterval_field(s)
	}
}




func (p *SQLParser) Interval_field() (localctx IInterval_fieldContext) {
	localctx = NewInterval_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, SQLParserRULE_interval_field)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5792)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 735, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5765)
			p.Match(SQLParserYEAR)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5766)
			p.Match(SQLParserMONTH)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5767)
			p.Match(SQLParserDAY)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5768)
			p.Match(SQLParserHOUR)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5769)
			p.Match(SQLParserMINUTE)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5770)
			p.Match(SQLParserSECOND)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5771)
			p.Match(SQLParserYEAR)
		}
		{
			p.SetState(5772)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(5773)
			p.Match(SQLParserMONTH)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5774)
			p.Match(SQLParserDAY)
		}
		{
			p.SetState(5775)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(5776)
			p.Match(SQLParserHOUR)
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5777)
			p.Match(SQLParserDAY)
		}
		{
			p.SetState(5778)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(5779)
			p.Match(SQLParserMINUTE)
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5780)
			p.Match(SQLParserDAY)
		}
		{
			p.SetState(5781)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(5782)
			p.Match(SQLParserSECOND)
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5783)
			p.Match(SQLParserHOUR)
		}
		{
			p.SetState(5784)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(5785)
			p.Match(SQLParserMINUTE)
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5786)
			p.Match(SQLParserHOUR)
		}
		{
			p.SetState(5787)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(5788)
			p.Match(SQLParserSECOND)
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5789)
			p.Match(SQLParserMINUTE)
		}
		{
			p.SetState(5790)
			p.Match(SQLParserTO)
		}
		{
			p.SetState(5791)
			p.Match(SQLParserSECOND)
		}

	}


	return localctx
}


// IType_lengthContext is an interface to support dynamic dispatch.
type IType_lengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_lengthContext differentiates from other interfaces.
	IsType_lengthContext()
}

type Type_lengthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_lengthContext() *Type_lengthContext {
	var p = new(Type_lengthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_type_length
	return p
}

func (*Type_lengthContext) IsType_lengthContext() {}

func NewType_lengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_lengthContext {
	var p = new(Type_lengthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_type_length

	return p
}

func (s *Type_lengthContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_lengthContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Type_lengthContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Type_lengthContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Type_lengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_lengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_lengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterType_length(s)
	}
}

func (s *Type_lengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitType_length(s)
	}
}




func (p *SQLParser) Type_length() (localctx IType_lengthContext) {
	localctx = NewType_lengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, SQLParserRULE_type_length)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5794)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(5795)
		p.Match(SQLParserNUMBER_LITERAL)
	}
	{
		p.SetState(5796)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IPrecision_paramContext is an interface to support dynamic dispatch.
type IPrecision_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPrecision returns the precision token.
	GetPrecision() antlr.Token 

	// GetScale returns the scale token.
	GetScale() antlr.Token 


	// SetPrecision sets the precision token.
	SetPrecision(antlr.Token) 

	// SetScale sets the scale token.
	SetScale(antlr.Token) 


	// IsPrecision_paramContext differentiates from other interfaces.
	IsPrecision_paramContext()
}

type Precision_paramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	precision antlr.Token
	scale antlr.Token
}

func NewEmptyPrecision_paramContext() *Precision_paramContext {
	var p = new(Precision_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_precision_param
	return p
}

func (*Precision_paramContext) IsPrecision_paramContext() {}

func NewPrecision_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Precision_paramContext {
	var p = new(Precision_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_precision_param

	return p
}

func (s *Precision_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Precision_paramContext) GetPrecision() antlr.Token { return s.precision }

func (s *Precision_paramContext) GetScale() antlr.Token { return s.scale }


func (s *Precision_paramContext) SetPrecision(v antlr.Token) { s.precision = v }

func (s *Precision_paramContext) SetScale(v antlr.Token) { s.scale = v }


func (s *Precision_paramContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Precision_paramContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Precision_paramContext) AllNUMBER_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNUMBER_LITERAL)
}

func (s *Precision_paramContext) NUMBER_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, i)
}

func (s *Precision_paramContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Precision_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Precision_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Precision_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPrecision_param(s)
	}
}

func (s *Precision_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPrecision_param(s)
	}
}




func (p *SQLParser) Precision_param() (localctx IPrecision_paramContext) {
	localctx = NewPrecision_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, SQLParserRULE_precision_param)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5798)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(5799)

		var _m = p.Match(SQLParserNUMBER_LITERAL)

		localctx.(*Precision_paramContext).precision = _m
	}
	p.SetState(5802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCOMMA {
		{
			p.SetState(5800)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(5801)

			var _m = p.Match(SQLParserNUMBER_LITERAL)

			localctx.(*Precision_paramContext).scale = _m
		}

	}
	{
		p.SetState(5804)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IVexContext is an interface to support dynamic dispatch.
type IVexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVexContext differentiates from other interfaces.
	IsVexContext()
}

type VexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVexContext() *VexContext {
	var p = new(VexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_vex
	return p
}

func (*VexContext) IsVexContext() {}

func NewVexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VexContext {
	var p = new(VexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_vex

	return p
}

func (s *VexContext) GetParser() antlr.Parser { return s.parser }

func (s *VexContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *VexContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *VexContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *VexContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *VexContext) Indirection_list() IIndirection_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirection_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndirection_listContext)
}

func (s *VexContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *VexContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *VexContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLParserPLUS, 0)
}

func (s *VexContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLParserMINUS, 0)
}

func (s *VexContext) Op() IOpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpContext)
}

func (s *VexContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *VexContext) Value_expression_primary() IValue_expression_primaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValue_expression_primaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValue_expression_primaryContext)
}

func (s *VexContext) AT() antlr.TerminalNode {
	return s.GetToken(SQLParserAT, 0)
}

func (s *VexContext) TIME() antlr.TerminalNode {
	return s.GetToken(SQLParserTIME, 0)
}

func (s *VexContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLParserZONE, 0)
}

func (s *VexContext) EXP() antlr.TerminalNode {
	return s.GetToken(SQLParserEXP, 0)
}

func (s *VexContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *VexContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(SQLParserDIVIDE, 0)
}

func (s *VexContext) MODULAR() antlr.TerminalNode {
	return s.GetToken(SQLParserMODULAR, 0)
}

func (s *VexContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLParserBETWEEN, 0)
}

func (s *VexContext) Vex_b() IVex_bContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVex_bContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVex_bContext)
}

func (s *VexContext) AND() antlr.TerminalNode {
	return s.GetToken(SQLParserAND, 0)
}

func (s *VexContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(SQLParserASYMMETRIC, 0)
}

func (s *VexContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(SQLParserSYMMETRIC, 0)
}

func (s *VexContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SQLParserLIKE, 0)
}

func (s *VexContext) ILIKE() antlr.TerminalNode {
	return s.GetToken(SQLParserILIKE, 0)
}

func (s *VexContext) SIMILAR() antlr.TerminalNode {
	return s.GetToken(SQLParserSIMILAR, 0)
}

func (s *VexContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLParserTO, 0)
}

func (s *VexContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLParserESCAPE, 0)
}

func (s *VexContext) LTH() antlr.TerminalNode {
	return s.GetToken(SQLParserLTH, 0)
}

func (s *VexContext) GTH() antlr.TerminalNode {
	return s.GetToken(SQLParserGTH, 0)
}

func (s *VexContext) LEQ() antlr.TerminalNode {
	return s.GetToken(SQLParserLEQ, 0)
}

func (s *VexContext) GEQ() antlr.TerminalNode {
	return s.GetToken(SQLParserGEQ, 0)
}

func (s *VexContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *VexContext) NOT_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT_EQUAL, 0)
}

func (s *VexContext) IS() antlr.TerminalNode {
	return s.GetToken(SQLParserIS, 0)
}

func (s *VexContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLParserDISTINCT, 0)
}

func (s *VexContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *VexContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLParserOR, 0)
}

func (s *VexContext) CAST_EXPRESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserCAST_EXPRESSION, 0)
}

func (s *VexContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *VexContext) Collate_identifier() ICollate_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollate_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollate_identifierContext)
}

func (s *VexContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *VexContext) Select_stmt_no_parens() ISelect_stmt_no_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmt_no_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmt_no_parensContext)
}

func (s *VexContext) Truth_value() ITruth_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruth_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruth_valueContext)
}

func (s *VexContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *VexContext) DOCUMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOCUMENT, 0)
}

func (s *VexContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(SQLParserUNKNOWN, 0)
}

func (s *VexContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *VexContext) Type_list() IType_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_listContext)
}

func (s *VexContext) ISNULL() antlr.TerminalNode {
	return s.GetToken(SQLParserISNULL, 0)
}

func (s *VexContext) NOTNULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTNULL, 0)
}

func (s *VexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *VexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterVex(s)
	}
}

func (s *VexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitVex(s)
	}
}





func (p *SQLParser) Vex() (localctx IVexContext) {
	return p.vex(0)
}

func (p *SQLParser) vex(_p int) (localctx IVexContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVexContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVexContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 586
	p.EnterRecursionRule(localctx, 586, SQLParserRULE_vex, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5831)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 739, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5807)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5808)
			p.vex(0)
		}
		{
			p.SetState(5809)
			p.Match(SQLParserRIGHT_PAREN)
		}
		p.SetState(5811)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 737, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5810)
				p.Indirection_list()
			}


		}


	case 2:
		{
			p.SetState(5813)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5814)
			p.vex(0)
		}
		p.SetState(5817)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserCOMMA {
			{
				p.SetState(5815)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(5816)
				p.vex(0)
			}


			p.SetState(5819)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5821)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case 3:
		{
			p.SetState(5823)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserPLUS || _la == SQLParserMINUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5824)
			p.vex(24)
		}


	case 4:
		{
			p.SetState(5825)
			p.Op()
		}
		{
			p.SetState(5826)
			p.vex(18)
		}


	case 5:
		{
			p.SetState(5828)
			p.Match(SQLParserNOT)
		}
		{
			p.SetState(5829)
			p.vex(4)
		}


	case 6:
		{
			p.SetState(5830)
			p.Value_expression_primary()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5968)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 756, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(5966)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 755, p.GetParserRuleContext()) {
			case 1:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5833)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(5834)
					p.Match(SQLParserAT)
				}
				{
					p.SetState(5835)
					p.Match(SQLParserTIME)
				}
				{
					p.SetState(5836)
					p.Match(SQLParserZONE)
				}
				{
					p.SetState(5837)
					p.vex(24)
				}


			case 2:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5838)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(5839)
					p.Match(SQLParserEXP)
				}
				{
					p.SetState(5840)
					p.vex(23)
				}


			case 3:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5841)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(5842)
					_la = p.GetTokenStream().LA(1)

					if !(((((_la - 599)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 599))) & ((1 << (SQLParserMULTIPLY - 599)) | (1 << (SQLParserDIVIDE - 599)) | (1 << (SQLParserMODULAR - 599)))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(5843)
					p.vex(22)
				}


			case 4:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5844)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(5845)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLParserPLUS || _la == SQLParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(5846)
					p.vex(21)
				}


			case 5:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5847)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(5848)
					p.Op()
				}
				{
					p.SetState(5849)
					p.vex(20)
				}


			case 6:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5851)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				p.SetState(5853)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5852)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(5855)
					p.Match(SQLParserBETWEEN)
				}
				p.SetState(5857)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserASYMMETRIC || _la == SQLParserSYMMETRIC {
					{
						p.SetState(5856)
						_la = p.GetTokenStream().LA(1)

						if !(_la == SQLParserASYMMETRIC || _la == SQLParserSYMMETRIC) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}

				}
				{
					p.SetState(5859)
					p.vex_b(0)
				}
				{
					p.SetState(5860)
					p.Match(SQLParserAND)
				}
				{
					p.SetState(5861)
					p.vex(16)
				}


			case 7:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5863)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				p.SetState(5865)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5864)
						p.Match(SQLParserNOT)
					}

				}
				p.SetState(5871)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserLIKE:
					{
						p.SetState(5867)
						p.Match(SQLParserLIKE)
					}


				case SQLParserILIKE:
					{
						p.SetState(5868)
						p.Match(SQLParserILIKE)
					}


				case SQLParserSIMILAR:
					{
						p.SetState(5869)
						p.Match(SQLParserSIMILAR)
					}
					{
						p.SetState(5870)
						p.Match(SQLParserTO)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}
				{
					p.SetState(5873)
					p.vex(15)
				}


			case 8:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5874)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				p.SetState(5876)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5875)
						p.Match(SQLParserNOT)
					}

				}
				p.SetState(5882)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserLIKE:
					{
						p.SetState(5878)
						p.Match(SQLParserLIKE)
					}


				case SQLParserILIKE:
					{
						p.SetState(5879)
						p.Match(SQLParserILIKE)
					}


				case SQLParserSIMILAR:
					{
						p.SetState(5880)
						p.Match(SQLParserSIMILAR)
					}
					{
						p.SetState(5881)
						p.Match(SQLParserTO)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}
				{
					p.SetState(5884)
					p.vex(0)
				}
				{
					p.SetState(5885)
					p.Match(SQLParserESCAPE)
				}
				{
					p.SetState(5886)
					p.vex(14)
				}


			case 9:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5888)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(5889)
					_la = p.GetTokenStream().LA(1)

					if !(((((_la - 586)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 586))) & ((1 << (SQLParserEQUAL - 586)) | (1 << (SQLParserNOT_EQUAL - 586)) | (1 << (SQLParserLTH - 586)) | (1 << (SQLParserLEQ - 586)) | (1 << (SQLParserGTH - 586)) | (1 << (SQLParserGEQ - 586)))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(5890)
					p.vex(13)
				}


			case 10:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5891)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(5892)
					p.Match(SQLParserIS)
				}
				p.SetState(5894)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5893)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(5896)
					p.Match(SQLParserDISTINCT)
				}
				{
					p.SetState(5897)
					p.Match(SQLParserFROM)
				}
				{
					p.SetState(5898)
					p.vex(11)
				}


			case 11:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5899)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(5900)
					p.Match(SQLParserAND)
				}
				{
					p.SetState(5901)
					p.vex(4)
				}


			case 12:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5902)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(5903)
					p.Match(SQLParserOR)
				}
				{
					p.SetState(5904)
					p.vex(3)
				}


			case 13:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5905)

				if !(p.Precpred(p.GetParserRuleContext(), 28)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 28)", ""))
				}
				{
					p.SetState(5906)
					p.Match(SQLParserCAST_EXPRESSION)
				}
				{
					p.SetState(5907)
					p.Data_type()
				}


			case 14:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5908)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(5909)
					p.Collate_identifier()
				}


			case 15:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5910)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(5911)
					p.Op()
				}


			case 16:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5912)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				p.SetState(5914)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5913)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(5916)
					p.Match(SQLParserIN)
				}
				{
					p.SetState(5917)
					p.Match(SQLParserLEFT_PAREN)
				}
				p.SetState(5927)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 749, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(5918)
						p.Select_stmt_no_parens()
					}


				case 2:
					{
						p.SetState(5919)
						p.vex(0)
					}
					p.SetState(5924)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					for _la == SQLParserCOMMA {
						{
							p.SetState(5920)
							p.Match(SQLParserCOMMA)
						}
						{
							p.SetState(5921)
							p.vex(0)
						}


						p.SetState(5926)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}

				}
				{
					p.SetState(5929)
					p.Match(SQLParserRIGHT_PAREN)
				}


			case 17:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5931)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(5932)
					p.Match(SQLParserIS)
				}
				p.SetState(5934)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5933)
						p.Match(SQLParserNOT)
					}

				}
				p.SetState(5938)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserFALSE, SQLParserON, SQLParserTRUE:
					{
						p.SetState(5936)
						p.Truth_value()
					}


				case SQLParserNULL:
					{
						p.SetState(5937)
						p.Match(SQLParserNULL)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}


			case 18:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5940)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(5941)
					p.Match(SQLParserIS)
				}
				p.SetState(5943)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5942)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(5945)
					p.Match(SQLParserDOCUMENT)
				}


			case 19:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5946)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(5947)
					p.Match(SQLParserIS)
				}
				p.SetState(5949)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5948)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(5951)
					p.Match(SQLParserUNKNOWN)
				}


			case 20:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5952)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(5953)
					p.Match(SQLParserIS)
				}
				p.SetState(5955)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(5954)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(5957)
					p.Match(SQLParserOF)
				}
				{
					p.SetState(5958)
					p.Match(SQLParserLEFT_PAREN)
				}
				{
					p.SetState(5959)
					p.Type_list()
				}
				{
					p.SetState(5960)
					p.Match(SQLParserRIGHT_PAREN)
				}


			case 21:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5962)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(5963)
					p.Match(SQLParserISNULL)
				}


			case 22:
				localctx = NewVexContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex)
				p.SetState(5964)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(5965)
					p.Match(SQLParserNOTNULL)
				}

			}

		}
		p.SetState(5970)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 756, p.GetParserRuleContext())
	}



	return localctx
}


// IVex_bContext is an interface to support dynamic dispatch.
type IVex_bContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVex_bContext differentiates from other interfaces.
	IsVex_bContext()
}

type Vex_bContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVex_bContext() *Vex_bContext {
	var p = new(Vex_bContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_vex_b
	return p
}

func (*Vex_bContext) IsVex_bContext() {}

func NewVex_bContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vex_bContext {
	var p = new(Vex_bContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_vex_b

	return p
}

func (s *Vex_bContext) GetParser() antlr.Parser { return s.parser }

func (s *Vex_bContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Vex_bContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Vex_bContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Vex_bContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Vex_bContext) Indirection_list() IIndirection_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirection_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndirection_listContext)
}

func (s *Vex_bContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Vex_bContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Vex_bContext) AllVex_b() []IVex_bContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVex_bContext)(nil)).Elem())
	var tst = make([]IVex_bContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVex_bContext)
		}
	}

	return tst
}

func (s *Vex_bContext) Vex_b(i int) IVex_bContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVex_bContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVex_bContext)
}

func (s *Vex_bContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLParserPLUS, 0)
}

func (s *Vex_bContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLParserMINUS, 0)
}

func (s *Vex_bContext) Op() IOpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpContext)
}

func (s *Vex_bContext) Value_expression_primary() IValue_expression_primaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValue_expression_primaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValue_expression_primaryContext)
}

func (s *Vex_bContext) EXP() antlr.TerminalNode {
	return s.GetToken(SQLParserEXP, 0)
}

func (s *Vex_bContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Vex_bContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(SQLParserDIVIDE, 0)
}

func (s *Vex_bContext) MODULAR() antlr.TerminalNode {
	return s.GetToken(SQLParserMODULAR, 0)
}

func (s *Vex_bContext) LTH() antlr.TerminalNode {
	return s.GetToken(SQLParserLTH, 0)
}

func (s *Vex_bContext) GTH() antlr.TerminalNode {
	return s.GetToken(SQLParserGTH, 0)
}

func (s *Vex_bContext) LEQ() antlr.TerminalNode {
	return s.GetToken(SQLParserLEQ, 0)
}

func (s *Vex_bContext) GEQ() antlr.TerminalNode {
	return s.GetToken(SQLParserGEQ, 0)
}

func (s *Vex_bContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Vex_bContext) NOT_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT_EQUAL, 0)
}

func (s *Vex_bContext) IS() antlr.TerminalNode {
	return s.GetToken(SQLParserIS, 0)
}

func (s *Vex_bContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLParserDISTINCT, 0)
}

func (s *Vex_bContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Vex_bContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Vex_bContext) CAST_EXPRESSION() antlr.TerminalNode {
	return s.GetToken(SQLParserCAST_EXPRESSION, 0)
}

func (s *Vex_bContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Vex_bContext) DOCUMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOCUMENT, 0)
}

func (s *Vex_bContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(SQLParserUNKNOWN, 0)
}

func (s *Vex_bContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *Vex_bContext) Type_list() IType_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_listContext)
}

func (s *Vex_bContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vex_bContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Vex_bContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterVex_b(s)
	}
}

func (s *Vex_bContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitVex_b(s)
	}
}





func (p *SQLParser) Vex_b() (localctx IVex_bContext) {
	return p.vex_b(0)
}

func (p *SQLParser) vex_b(_p int) (localctx IVex_bContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewVex_bContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IVex_bContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 588
	p.EnterRecursionRule(localctx, 588, SQLParserRULE_vex_b, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5994)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 759, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5972)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5973)
			p.vex(0)
		}
		{
			p.SetState(5974)
			p.Match(SQLParserRIGHT_PAREN)
		}
		p.SetState(5976)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 757, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5975)
				p.Indirection_list()
			}


		}


	case 2:
		{
			p.SetState(5978)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(5979)
			p.vex(0)
		}
		p.SetState(5982)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == SQLParserCOMMA {
			{
				p.SetState(5980)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(5981)
				p.vex(0)
			}


			p.SetState(5984)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5986)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case 3:
		{
			p.SetState(5988)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserPLUS || _la == SQLParserMINUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(5989)
			p.vex_b(13)
		}


	case 4:
		{
			p.SetState(5990)
			p.Op()
		}
		{
			p.SetState(5991)
			p.vex_b(8)
		}


	case 5:
		{
			p.SetState(5993)
			p.Value_expression_primary()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6049)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 765, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(6047)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 764, p.GetParserRuleContext()) {
			case 1:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(5996)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(5997)
					p.Match(SQLParserEXP)
				}
				{
					p.SetState(5998)
					p.vex_b(13)
				}


			case 2:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(5999)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(6000)
					_la = p.GetTokenStream().LA(1)

					if !(((((_la - 599)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 599))) & ((1 << (SQLParserMULTIPLY - 599)) | (1 << (SQLParserDIVIDE - 599)) | (1 << (SQLParserMODULAR - 599)))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(6001)
					p.vex_b(12)
				}


			case 3:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6002)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(6003)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLParserPLUS || _la == SQLParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(6004)
					p.vex_b(11)
				}


			case 4:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6005)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(6006)
					p.Op()
				}
				{
					p.SetState(6007)
					p.vex_b(10)
				}


			case 5:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6009)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(6010)
					_la = p.GetTokenStream().LA(1)

					if !(((((_la - 586)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 586))) & ((1 << (SQLParserEQUAL - 586)) | (1 << (SQLParserNOT_EQUAL - 586)) | (1 << (SQLParserLTH - 586)) | (1 << (SQLParserLEQ - 586)) | (1 << (SQLParserGTH - 586)) | (1 << (SQLParserGEQ - 586)))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(6011)
					p.vex_b(7)
				}


			case 6:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6012)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(6013)
					p.Match(SQLParserIS)
				}
				p.SetState(6015)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(6014)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(6017)
					p.Match(SQLParserDISTINCT)
				}
				{
					p.SetState(6018)
					p.Match(SQLParserFROM)
				}
				{
					p.SetState(6019)
					p.vex_b(6)
				}


			case 7:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6020)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(6021)
					p.Match(SQLParserCAST_EXPRESSION)
				}
				{
					p.SetState(6022)
					p.Data_type()
				}


			case 8:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6023)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(6024)
					p.Op()
				}


			case 9:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6025)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(6026)
					p.Match(SQLParserIS)
				}
				p.SetState(6028)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(6027)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(6030)
					p.Match(SQLParserDOCUMENT)
				}


			case 10:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6031)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(6032)
					p.Match(SQLParserIS)
				}
				p.SetState(6034)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(6033)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(6036)
					p.Match(SQLParserUNKNOWN)
				}


			case 11:
				localctx = NewVex_bContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_vex_b)
				p.SetState(6037)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(6038)
					p.Match(SQLParserIS)
				}
				p.SetState(6040)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserNOT {
					{
						p.SetState(6039)
						p.Match(SQLParserNOT)
					}

				}
				{
					p.SetState(6042)
					p.Match(SQLParserOF)
				}
				{
					p.SetState(6043)
					p.Match(SQLParserLEFT_PAREN)
				}
				{
					p.SetState(6044)
					p.Type_list()
				}
				{
					p.SetState(6045)
					p.Match(SQLParserRIGHT_PAREN)
				}

			}

		}
		p.SetState(6051)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 765, p.GetParserRuleContext())
	}



	return localctx
}


// IOpContext is an interface to support dynamic dispatch.
type IOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpContext differentiates from other interfaces.
	IsOpContext()
}

type OpContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpContext() *OpContext {
	var p = new(OpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_op
	return p
}

func (*OpContext) IsOpContext() {}

func NewOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpContext {
	var p = new(OpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_op

	return p
}

func (s *OpContext) GetParser() antlr.Parser { return s.parser }

func (s *OpContext) Op_chars() IOp_charsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOp_charsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOp_charsContext)
}

func (s *OpContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *OpContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *OpContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *OpContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *OpContext) All_simple_op() IAll_simple_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_simple_opContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_simple_opContext)
}

func (s *OpContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *OpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *OpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOp(s)
	}
}

func (s *OpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOp(s)
	}
}




func (p *SQLParser) Op() (localctx IOpContext) {
	localctx = NewOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, SQLParserRULE_op)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6060)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6052)
			p.Op_chars()
		}


	case SQLParserOPERATOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6053)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(6054)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6055)
			p.Identifier()
		}
		{
			p.SetState(6056)
			p.Match(SQLParserDOT)
		}
		{
			p.SetState(6057)
			p.All_simple_op()
		}
		{
			p.SetState(6058)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAll_op_refContext is an interface to support dynamic dispatch.
type IAll_op_refContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAll_op_refContext differentiates from other interfaces.
	IsAll_op_refContext()
}

type All_op_refContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_op_refContext() *All_op_refContext {
	var p = new(All_op_refContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_all_op_ref
	return p
}

func (*All_op_refContext) IsAll_op_refContext() {}

func NewAll_op_refContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_op_refContext {
	var p = new(All_op_refContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_all_op_ref

	return p
}

func (s *All_op_refContext) GetParser() antlr.Parser { return s.parser }

func (s *All_op_refContext) All_simple_op() IAll_simple_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_simple_opContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_simple_opContext)
}

func (s *All_op_refContext) OPERATOR() antlr.TerminalNode {
	return s.GetToken(SQLParserOPERATOR, 0)
}

func (s *All_op_refContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *All_op_refContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *All_op_refContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, 0)
}

func (s *All_op_refContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *All_op_refContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_op_refContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *All_op_refContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAll_op_ref(s)
	}
}

func (s *All_op_refContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAll_op_ref(s)
	}
}




func (p *SQLParser) All_op_ref() (localctx IAll_op_refContext) {
	localctx = NewAll_op_refContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, SQLParserRULE_all_op_ref)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6070)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserEQUAL, SQLParserNOT_EQUAL, SQLParserLTH, SQLParserLEQ, SQLParserGTH, SQLParserGEQ, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserDIVIDE, SQLParserMODULAR, SQLParserEXP, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6062)
			p.All_simple_op()
		}


	case SQLParserOPERATOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6063)
			p.Match(SQLParserOPERATOR)
		}
		{
			p.SetState(6064)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6065)
			p.Identifier()
		}
		{
			p.SetState(6066)
			p.Match(SQLParserDOT)
		}
		{
			p.SetState(6067)
			p.All_simple_op()
		}
		{
			p.SetState(6068)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDatetime_overlapsContext is an interface to support dynamic dispatch.
type IDatetime_overlapsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatetime_overlapsContext differentiates from other interfaces.
	IsDatetime_overlapsContext()
}

type Datetime_overlapsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatetime_overlapsContext() *Datetime_overlapsContext {
	var p = new(Datetime_overlapsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_datetime_overlaps
	return p
}

func (*Datetime_overlapsContext) IsDatetime_overlapsContext() {}

func NewDatetime_overlapsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Datetime_overlapsContext {
	var p = new(Datetime_overlapsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_datetime_overlaps

	return p
}

func (s *Datetime_overlapsContext) GetParser() antlr.Parser { return s.parser }

func (s *Datetime_overlapsContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_PAREN)
}

func (s *Datetime_overlapsContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, i)
}

func (s *Datetime_overlapsContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Datetime_overlapsContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Datetime_overlapsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Datetime_overlapsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Datetime_overlapsContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_PAREN)
}

func (s *Datetime_overlapsContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, i)
}

func (s *Datetime_overlapsContext) OVERLAPS() antlr.TerminalNode {
	return s.GetToken(SQLParserOVERLAPS, 0)
}

func (s *Datetime_overlapsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Datetime_overlapsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Datetime_overlapsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDatetime_overlaps(s)
	}
}

func (s *Datetime_overlapsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDatetime_overlaps(s)
	}
}




func (p *SQLParser) Datetime_overlaps() (localctx IDatetime_overlapsContext) {
	localctx = NewDatetime_overlapsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, SQLParserRULE_datetime_overlaps)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6072)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(6073)
		p.vex(0)
	}
	{
		p.SetState(6074)
		p.Match(SQLParserCOMMA)
	}
	{
		p.SetState(6075)
		p.vex(0)
	}
	{
		p.SetState(6076)
		p.Match(SQLParserRIGHT_PAREN)
	}
	{
		p.SetState(6077)
		p.Match(SQLParserOVERLAPS)
	}
	{
		p.SetState(6078)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(6079)
		p.vex(0)
	}
	{
		p.SetState(6080)
		p.Match(SQLParserCOMMA)
	}
	{
		p.SetState(6081)
		p.vex(0)
	}
	{
		p.SetState(6082)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IValue_expression_primaryContext is an interface to support dynamic dispatch.
type IValue_expression_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValue_expression_primaryContext differentiates from other interfaces.
	IsValue_expression_primaryContext()
}

type Value_expression_primaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValue_expression_primaryContext() *Value_expression_primaryContext {
	var p = new(Value_expression_primaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_value_expression_primary
	return p
}

func (*Value_expression_primaryContext) IsValue_expression_primaryContext() {}

func NewValue_expression_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Value_expression_primaryContext {
	var p = new(Value_expression_primaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_value_expression_primary

	return p
}

func (s *Value_expression_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Value_expression_primaryContext) Unsigned_value_specification() IUnsigned_value_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnsigned_value_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnsigned_value_specificationContext)
}

func (s *Value_expression_primaryContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Value_expression_primaryContext) Select_stmt_no_parens() ISelect_stmt_no_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmt_no_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmt_no_parensContext)
}

func (s *Value_expression_primaryContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Value_expression_primaryContext) Indirection_list() IIndirection_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirection_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndirection_listContext)
}

func (s *Value_expression_primaryContext) Case_expression() ICase_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_expressionContext)
}

func (s *Value_expression_primaryContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Value_expression_primaryContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Value_expression_primaryContext) Comparison_mod() IComparison_modContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_modContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_modContext)
}

func (s *Value_expression_primaryContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLParserEXISTS, 0)
}

func (s *Value_expression_primaryContext) Table_subquery() ITable_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_subqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_subqueryContext)
}

func (s *Value_expression_primaryContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Value_expression_primaryContext) Indirection_var() IIndirection_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirection_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndirection_varContext)
}

func (s *Value_expression_primaryContext) Array_expression() IArray_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_expressionContext)
}

func (s *Value_expression_primaryContext) Type_coercion() IType_coercionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_coercionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_coercionContext)
}

func (s *Value_expression_primaryContext) Datetime_overlaps() IDatetime_overlapsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatetime_overlapsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatetime_overlapsContext)
}

func (s *Value_expression_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Value_expression_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Value_expression_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterValue_expression_primary(s)
	}
}

func (s *Value_expression_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitValue_expression_primary(s)
	}
}




func (p *SQLParser) Value_expression_primary() (localctx IValue_expression_primaryContext) {
	localctx = NewValue_expression_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, SQLParserRULE_value_expression_primary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6102)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 769, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6084)
			p.Unsigned_value_specification()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6085)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6086)
			p.Select_stmt_no_parens()
		}
		{
			p.SetState(6087)
			p.Match(SQLParserRIGHT_PAREN)
		}
		p.SetState(6089)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 768, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6088)
				p.Indirection_list()
			}


		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6091)
			p.Case_expression()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6092)
			p.Match(SQLParserNULL)
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6093)
			p.Match(SQLParserMULTIPLY)
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6094)
			p.Comparison_mod()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6095)
			p.Match(SQLParserEXISTS)
		}
		{
			p.SetState(6096)
			p.Table_subquery()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6097)
			p.Function_call()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6098)
			p.Indirection_var()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6099)
			p.Array_expression()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6100)
			p.Type_coercion()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6101)
			p.Datetime_overlaps()
		}

	}


	return localctx
}


// IUnsigned_value_specificationContext is an interface to support dynamic dispatch.
type IUnsigned_value_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnsigned_value_specificationContext differentiates from other interfaces.
	IsUnsigned_value_specificationContext()
}

type Unsigned_value_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnsigned_value_specificationContext() *Unsigned_value_specificationContext {
	var p = new(Unsigned_value_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_unsigned_value_specification
	return p
}

func (*Unsigned_value_specificationContext) IsUnsigned_value_specificationContext() {}

func NewUnsigned_value_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unsigned_value_specificationContext {
	var p = new(Unsigned_value_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_unsigned_value_specification

	return p
}

func (s *Unsigned_value_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Unsigned_value_specificationContext) Unsigned_numeric_literal() IUnsigned_numeric_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnsigned_numeric_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnsigned_numeric_literalContext)
}

func (s *Unsigned_value_specificationContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Unsigned_value_specificationContext) Truth_value() ITruth_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruth_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruth_valueContext)
}

func (s *Unsigned_value_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unsigned_value_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Unsigned_value_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUnsigned_value_specification(s)
	}
}

func (s *Unsigned_value_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUnsigned_value_specification(s)
	}
}




func (p *SQLParser) Unsigned_value_specification() (localctx IUnsigned_value_specificationContext) {
	localctx = NewUnsigned_value_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, SQLParserRULE_unsigned_value_specification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6107)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6104)
			p.Unsigned_numeric_literal()
		}


	case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6105)
			p.Character_string()
		}


	case SQLParserFALSE, SQLParserON, SQLParserTRUE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6106)
			p.Truth_value()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IUnsigned_numeric_literalContext is an interface to support dynamic dispatch.
type IUnsigned_numeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnsigned_numeric_literalContext differentiates from other interfaces.
	IsUnsigned_numeric_literalContext()
}

type Unsigned_numeric_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnsigned_numeric_literalContext() *Unsigned_numeric_literalContext {
	var p = new(Unsigned_numeric_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_unsigned_numeric_literal
	return p
}

func (*Unsigned_numeric_literalContext) IsUnsigned_numeric_literalContext() {}

func NewUnsigned_numeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unsigned_numeric_literalContext {
	var p = new(Unsigned_numeric_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_unsigned_numeric_literal

	return p
}

func (s *Unsigned_numeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Unsigned_numeric_literalContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Unsigned_numeric_literalContext) REAL_NUMBER() antlr.TerminalNode {
	return s.GetToken(SQLParserREAL_NUMBER, 0)
}

func (s *Unsigned_numeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unsigned_numeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Unsigned_numeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUnsigned_numeric_literal(s)
	}
}

func (s *Unsigned_numeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUnsigned_numeric_literal(s)
	}
}




func (p *SQLParser) Unsigned_numeric_literal() (localctx IUnsigned_numeric_literalContext) {
	localctx = NewUnsigned_numeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, SQLParserRULE_unsigned_numeric_literal)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6109)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserNUMBER_LITERAL || _la == SQLParserREAL_NUMBER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITruth_valueContext is an interface to support dynamic dispatch.
type ITruth_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruth_valueContext differentiates from other interfaces.
	IsTruth_valueContext()
}

type Truth_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruth_valueContext() *Truth_valueContext {
	var p = new(Truth_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_truth_value
	return p
}

func (*Truth_valueContext) IsTruth_valueContext() {}

func NewTruth_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truth_valueContext {
	var p = new(Truth_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_truth_value

	return p
}

func (s *Truth_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Truth_valueContext) TRUE() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUE, 0)
}

func (s *Truth_valueContext) FALSE() antlr.TerminalNode {
	return s.GetToken(SQLParserFALSE, 0)
}

func (s *Truth_valueContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Truth_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truth_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Truth_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTruth_value(s)
	}
}

func (s *Truth_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTruth_value(s)
	}
}




func (p *SQLParser) Truth_value() (localctx ITruth_valueContext) {
	localctx = NewTruth_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, SQLParserRULE_truth_value)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6111)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserFALSE || _la == SQLParserON || _la == SQLParserTRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ICase_expressionContext is an interface to support dynamic dispatch.
type ICase_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_vex returns the _vex rule contexts.
	Get_vex() IVexContext


	// Set_vex sets the _vex rule contexts.
	Set_vex(IVexContext)


	// GetR returns the r rule context list.
	GetR() []IVexContext


	// SetR sets the r rule context list.
	SetR([]IVexContext) 


	// IsCase_expressionContext differentiates from other interfaces.
	IsCase_expressionContext()
}

type Case_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	_vex IVexContext 
	r []IVexContext
}

func NewEmptyCase_expressionContext() *Case_expressionContext {
	var p = new(Case_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_case_expression
	return p
}

func (*Case_expressionContext) IsCase_expressionContext() {}

func NewCase_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_expressionContext {
	var p = new(Case_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_case_expression

	return p
}

func (s *Case_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_expressionContext) Get_vex() IVexContext { return s._vex }


func (s *Case_expressionContext) Set_vex(v IVexContext) { s._vex = v }


func (s *Case_expressionContext) GetR() []IVexContext { return s.r }


func (s *Case_expressionContext) SetR(v []IVexContext) { s.r = v }


func (s *Case_expressionContext) CASE() antlr.TerminalNode {
	return s.GetToken(SQLParserCASE, 0)
}

func (s *Case_expressionContext) END() antlr.TerminalNode {
	return s.GetToken(SQLParserEND, 0)
}

func (s *Case_expressionContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Case_expressionContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserWHEN)
}

func (s *Case_expressionContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserWHEN, i)
}

func (s *Case_expressionContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserTHEN)
}

func (s *Case_expressionContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserTHEN, i)
}

func (s *Case_expressionContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SQLParserELSE, 0)
}

func (s *Case_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Case_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCase_expression(s)
	}
}

func (s *Case_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCase_expression(s)
	}
}




func (p *SQLParser) Case_expression() (localctx ICase_expressionContext) {
	localctx = NewCase_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, SQLParserRULE_case_expression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6113)
		p.Match(SQLParserCASE)
	}
	p.SetState(6115)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)) | (1 << (SQLParserALL - 352)) | (1 << (SQLParserANY - 352)) | (1 << (SQLParserARRAY - 352)) | (1 << (SQLParserCASE - 352)))) != 0) || ((((_la - 384)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 384))) & ((1 << (SQLParserCAST - 384)) | (1 << (SQLParserCURRENT_CATALOG - 384)) | (1 << (SQLParserCURRENT_DATE - 384)) | (1 << (SQLParserCURRENT_TIME - 384)) | (1 << (SQLParserCURRENT_TIMESTAMP - 384)) | (1 << (SQLParserCURRENT_USER - 384)) | (1 << (SQLParserFALSE - 384)))) != 0) || ((((_la - 419)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 419))) & ((1 << (SQLParserLOCALTIME - 419)) | (1 << (SQLParserLOCALTIMESTAMP - 419)) | (1 << (SQLParserNOT - 419)) | (1 << (SQLParserNULL - 419)) | (1 << (SQLParserON - 419)) | (1 << (SQLParserSESSION_USER - 419)) | (1 << (SQLParserSOME - 419)) | (1 << (SQLParserTRUE - 419)) | (1 << (SQLParserUSER - 419)) | (1 << (SQLParserALIGNMENT - 419)))) != 0) || ((((_la - 451)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 451))) & ((1 << (SQLParserALLOW_CONNECTIONS - 451)) | (1 << (SQLParserBASETYPE - 451)) | (1 << (SQLParserBUFFERS - 451)) | (1 << (SQLParserBYPASSRLS - 451)) | (1 << (SQLParserCANONICAL - 451)) | (1 << (SQLParserCATEGORY - 451)) | (1 << (SQLParserCOLLATABLE - 451)) | (1 << (SQLParserCOMBINEFUNC - 451)) | (1 << (SQLParserCOMMUTATOR - 451)) | (1 << (SQLParserCONNECT - 451)) | (1 << (SQLParserCOSTS - 451)) | (1 << (SQLParserCREATEDB - 451)) | (1 << (SQLParserCREATEROLE - 451)) | (1 << (SQLParserDESERIALFUNC - 451)) | (1 << (SQLParserDETERMINISTIC - 451)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 451)) | (1 << (SQLParserELEMENT - 451)) | (1 << (SQLParserEXTENDED - 451)) | (1 << (SQLParserFINALFUNC - 451)) | (1 << (SQLParserFINALFUNC_EXTRA - 451)) | (1 << (SQLParserFINALFUNC_MODIFY - 451)) | (1 << (SQLParserFORCE_NOT_NULL - 451)) | (1 << (SQLParserFORCE_NULL - 451)) | (1 << (SQLParserFORCE_QUOTE - 451)) | (1 << (SQLParserFORMAT - 451)) | (1 << (SQLParserGETTOKEN - 451)) | (1 << (SQLParserHASH - 451)) | (1 << (SQLParserHASHES - 451)) | (1 << (SQLParserHEADLINE - 451)) | (1 << (SQLParserHYPOTHETICAL - 451)) | (1 << (SQLParserINDEX_CLEANUP - 451)) | (1 << (SQLParserINIT - 451)))) != 0) || ((((_la - 483)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 483))) & ((1 << (SQLParserINITCOND - 483)) | (1 << (SQLParserINTERNALLENGTH - 483)) | (1 << (SQLParserIS_TEMPLATE - 483)) | (1 << (SQLParserJSON - 483)) | (1 << (SQLParserLC_COLLATE - 483)) | (1 << (SQLParserLC_CTYPE - 483)) | (1 << (SQLParserLEFTARG - 483)) | (1 << (SQLParserLEXIZE - 483)) | (1 << (SQLParserLEXTYPES - 483)) | (1 << (SQLParserLIST - 483)) | (1 << (SQLParserLOCALE - 483)) | (1 << (SQLParserLOGIN - 483)) | (1 << (SQLParserMAIN - 483)) | (1 << (SQLParserMERGES - 483)) | (1 << (SQLParserMFINALFUNC - 483)) | (1 << (SQLParserMFINALFUNC_EXTRA - 483)) | (1 << (SQLParserMFINALFUNC_MODIFY - 483)) | (1 << (SQLParserMINITCOND - 483)) | (1 << (SQLParserMINVFUNC - 483)) | (1 << (SQLParserMODULUS - 483)) | (1 << (SQLParserMSFUNC - 483)) | (1 << (SQLParserMSSPACE - 483)) | (1 << (SQLParserMSTYPE - 483)) | (1 << (SQLParserNEGATOR - 483)) | (1 << (SQLParserNOBYPASSRLS - 483)) | (1 << (SQLParserNOCREATEDB - 483)) | (1 << (SQLParserNOCREATEROLE - 483)) | (1 << (SQLParserNOINHERIT - 483)) | (1 << (SQLParserNOLOGIN - 483)) | (1 << (SQLParserNOREPLICATION - 483)) | (1 << (SQLParserNOSUPERUSER - 483)) | (1 << (SQLParserOUTPUT - 483)))) != 0) || ((((_la - 515)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 515))) & ((1 << (SQLParserPASSEDBYVALUE - 515)) | (1 << (SQLParserPATH - 515)) | (1 << (SQLParserPERMISSIVE - 515)) | (1 << (SQLParserPLAIN - 515)) | (1 << (SQLParserPREFERRED - 515)) | (1 << (SQLParserPROVIDER - 515)) | (1 << (SQLParserREAD_ONLY - 515)) | (1 << (SQLParserREAD_WRITE - 515)) | (1 << (SQLParserRECEIVE - 515)) | (1 << (SQLParserREMAINDER - 515)) | (1 << (SQLParserREPLICATION - 515)) | (1 << (SQLParserRESTRICTED - 515)) | (1 << (SQLParserRESTRICTIVE - 515)) | (1 << (SQLParserRIGHTARG - 515)) | (1 << (SQLParserSAFE - 515)) | (1 << (SQLParserSEND - 515)) | (1 << (SQLParserSERIALFUNC - 515)) | (1 << (SQLParserSETTINGS - 515)) | (1 << (SQLParserSFUNC - 515)) | (1 << (SQLParserSHAREABLE - 515)) | (1 << (SQLParserSKIP_LOCKED - 515)) | (1 << (SQLParserSORTOP - 515)) | (1 << (SQLParserSSPACE - 515)) | (1 << (SQLParserSTYPE - 515)) | (1 << (SQLParserSUBTYPE_DIFF - 515)) | (1 << (SQLParserSUBTYPE_OPCLASS - 515)) | (1 << (SQLParserSUBTYPE - 515)) | (1 << (SQLParserSUMMARY - 515)) | (1 << (SQLParserSUPERUSER - 515)) | (1 << (SQLParserTIMING - 515)) | (1 << (SQLParserTYPMOD_IN - 515)) | (1 << (SQLParserTYPMOD_OUT - 515)))) != 0) || ((((_la - 547)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 547))) & ((1 << (SQLParserUNSAFE - 547)) | (1 << (SQLParserUSAGE - 547)) | (1 << (SQLParserVARIABLE - 547)) | (1 << (SQLParserWAL - 547)) | (1 << (SQLParserYAML - 547)) | (1 << (SQLParserALIAS - 547)) | (1 << (SQLParserASSERT - 547)) | (1 << (SQLParserCONSTANT - 547)) | (1 << (SQLParserDATATYPE - 547)) | (1 << (SQLParserDEBUG - 547)) | (1 << (SQLParserDETAIL - 547)) | (1 << (SQLParserDIAGNOSTICS - 547)) | (1 << (SQLParserELSEIF - 547)) | (1 << (SQLParserELSIF - 547)) | (1 << (SQLParserERRCODE - 547)) | (1 << (SQLParserEXIT - 547)) | (1 << (SQLParserEXCEPTION - 547)) | (1 << (SQLParserFOREACH - 547)) | (1 << (SQLParserGET - 547)) | (1 << (SQLParserHINT - 547)) | (1 << (SQLParserINFO - 547)) | (1 << (SQLParserLOG - 547)) | (1 << (SQLParserLOOP - 547)) | (1 << (SQLParserMESSAGE - 547)) | (1 << (SQLParserNOTICE - 547)) | (1 << (SQLParserOPEN - 547)) | (1 << (SQLParserPERFORM - 547)) | (1 << (SQLParserQUERY - 547)) | (1 << (SQLParserRAISE - 547)) | (1 << (SQLParserRECORD - 547)) | (1 << (SQLParserRETURN - 547)) | (1 << (SQLParserREVERSE - 547)))) != 0) || ((((_la - 579)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 579))) & ((1 << (SQLParserROWTYPE - 579)) | (1 << (SQLParserSLICE - 579)) | (1 << (SQLParserSQLSTATE - 579)) | (1 << (SQLParserSTACKED - 579)) | (1 << (SQLParserWARNING - 579)) | (1 << (SQLParserWHILE - 579)) | (1 << (SQLParserLEFT_PAREN - 579)) | (1 << (SQLParserPLUS - 579)) | (1 << (SQLParserMINUS - 579)) | (1 << (SQLParserMULTIPLY - 579)))) != 0) || ((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)) | (1 << (SQLParserNUMBER_LITERAL - 611)) | (1 << (SQLParserREAL_NUMBER - 611)) | (1 << (SQLParserDOLLAR_NUMBER - 611)) | (1 << (SQLParserIdentifier - 611)) | (1 << (SQLParserQuotedIdentifier - 611)) | (1 << (SQLParserCharacter_String_Literal - 611)) | (1 << (SQLParserBeginDollarStringConstant - 611)))) != 0) {
		{
			p.SetState(6114)
			p.vex(0)
		}

	}
	p.SetState(6122)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == SQLParserWHEN {
		{
			p.SetState(6117)
			p.Match(SQLParserWHEN)
		}
		{
			p.SetState(6118)
			p.vex(0)
		}
		{
			p.SetState(6119)
			p.Match(SQLParserTHEN)
		}
		{
			p.SetState(6120)

			var _x = p.vex(0)

			localctx.(*Case_expressionContext)._vex = _x
		}
		localctx.(*Case_expressionContext).r = append(localctx.(*Case_expressionContext).r, localctx.(*Case_expressionContext)._vex)


		p.SetState(6124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(6128)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserELSE {
		{
			p.SetState(6126)
			p.Match(SQLParserELSE)
		}
		{
			p.SetState(6127)

			var _x = p.vex(0)

			localctx.(*Case_expressionContext)._vex = _x
		}
		localctx.(*Case_expressionContext).r = append(localctx.(*Case_expressionContext).r, localctx.(*Case_expressionContext)._vex)

	}
	{
		p.SetState(6130)
		p.Match(SQLParserEND)
	}



	return localctx
}


// ICast_specificationContext is an interface to support dynamic dispatch.
type ICast_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCast_specificationContext differentiates from other interfaces.
	IsCast_specificationContext()
}

type Cast_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCast_specificationContext() *Cast_specificationContext {
	var p = new(Cast_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_cast_specification
	return p
}

func (*Cast_specificationContext) IsCast_specificationContext() {}

func NewCast_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cast_specificationContext {
	var p = new(Cast_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_cast_specification

	return p
}

func (s *Cast_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Cast_specificationContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Cast_specificationContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Cast_specificationContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Cast_specificationContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Cast_specificationContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Cast_specificationContext) CAST() antlr.TerminalNode {
	return s.GetToken(SQLParserCAST, 0)
}

func (s *Cast_specificationContext) TREAT() antlr.TerminalNode {
	return s.GetToken(SQLParserTREAT, 0)
}

func (s *Cast_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cast_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cast_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCast_specification(s)
	}
}

func (s *Cast_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCast_specification(s)
	}
}




func (p *SQLParser) Cast_specification() (localctx ICast_specificationContext) {
	localctx = NewCast_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, SQLParserRULE_cast_specification)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6132)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserTREAT || _la == SQLParserCAST) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(6133)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(6134)
		p.vex(0)
	}
	{
		p.SetState(6135)
		p.Match(SQLParserAS)
	}
	{
		p.SetState(6136)
		p.Data_type()
	}
	{
		p.SetState(6137)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IFunction_callContext is an interface to support dynamic dispatch.
type IFunction_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_callContext differentiates from other interfaces.
	IsFunction_callContext()
}

type Function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_callContext() *Function_callContext {
	var p = new(Function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_call
	return p
}

func (*Function_callContext) IsFunction_callContext() {}

func NewFunction_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_callContext {
	var p = new(Function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_call

	return p
}

func (s *Function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_callContext) Schema_qualified_name_nontype() ISchema_qualified_name_nontypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_name_nontypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_name_nontypeContext)
}

func (s *Function_callContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_PAREN)
}

func (s *Function_callContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, i)
}

func (s *Function_callContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_PAREN)
}

func (s *Function_callContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, i)
}

func (s *Function_callContext) AllVex_or_named_notation() []IVex_or_named_notationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVex_or_named_notationContext)(nil)).Elem())
	var tst = make([]IVex_or_named_notationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVex_or_named_notationContext)
		}
	}

	return tst
}

func (s *Function_callContext) Vex_or_named_notation(i int) IVex_or_named_notationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVex_or_named_notationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVex_or_named_notationContext)
}

func (s *Function_callContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(SQLParserWITHIN, 0)
}

func (s *Function_callContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *Function_callContext) AllOrderby_clause() []IOrderby_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderby_clauseContext)(nil)).Elem())
	var tst = make([]IOrderby_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderby_clauseContext)
		}
	}

	return tst
}

func (s *Function_callContext) Orderby_clause(i int) IOrderby_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderby_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderby_clauseContext)
}

func (s *Function_callContext) Filter_clause() IFilter_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilter_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilter_clauseContext)
}

func (s *Function_callContext) OVER() antlr.TerminalNode {
	return s.GetToken(SQLParserOVER, 0)
}

func (s *Function_callContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_callContext) Window_definition() IWindow_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_definitionContext)
}

func (s *Function_callContext) Set_qualifier() ISet_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_qualifierContext)
}

func (s *Function_callContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Function_callContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Function_callContext) Function_construct() IFunction_constructContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_constructContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_constructContext)
}

func (s *Function_callContext) Extract_function() IExtract_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExtract_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExtract_functionContext)
}

func (s *Function_callContext) System_function() ISystem_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISystem_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISystem_functionContext)
}

func (s *Function_callContext) Date_time_function() IDate_time_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDate_time_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDate_time_functionContext)
}

func (s *Function_callContext) String_value_function() IString_value_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_value_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_value_functionContext)
}

func (s *Function_callContext) Xml_function() IXml_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXml_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXml_functionContext)
}

func (s *Function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_callContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_call(s)
	}
}

func (s *Function_callContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_call(s)
	}
}




func (p *SQLParser) Function_call() (localctx IFunction_callContext) {
	localctx = NewFunction_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, SQLParserRULE_function_call)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6182)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 782, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6139)
			p.Schema_qualified_name_nontype()
		}
		{
			p.SetState(6140)
			p.Match(SQLParserLEFT_PAREN)
		}
		p.SetState(6155)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)) | (1 << (SQLParserALL - 352)) | (1 << (SQLParserANY - 352)) | (1 << (SQLParserARRAY - 352)) | (1 << (SQLParserCASE - 352)))) != 0) || ((((_la - 384)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 384))) & ((1 << (SQLParserCAST - 384)) | (1 << (SQLParserCURRENT_CATALOG - 384)) | (1 << (SQLParserCURRENT_DATE - 384)) | (1 << (SQLParserCURRENT_TIME - 384)) | (1 << (SQLParserCURRENT_TIMESTAMP - 384)) | (1 << (SQLParserCURRENT_USER - 384)) | (1 << (SQLParserDISTINCT - 384)) | (1 << (SQLParserFALSE - 384)))) != 0) || ((((_la - 419)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 419))) & ((1 << (SQLParserLOCALTIME - 419)) | (1 << (SQLParserLOCALTIMESTAMP - 419)) | (1 << (SQLParserNOT - 419)) | (1 << (SQLParserNULL - 419)) | (1 << (SQLParserON - 419)) | (1 << (SQLParserSESSION_USER - 419)) | (1 << (SQLParserSOME - 419)) | (1 << (SQLParserTRUE - 419)) | (1 << (SQLParserUSER - 419)) | (1 << (SQLParserVARIADIC - 419)) | (1 << (SQLParserALIGNMENT - 419)))) != 0) || ((((_la - 451)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 451))) & ((1 << (SQLParserALLOW_CONNECTIONS - 451)) | (1 << (SQLParserBASETYPE - 451)) | (1 << (SQLParserBUFFERS - 451)) | (1 << (SQLParserBYPASSRLS - 451)) | (1 << (SQLParserCANONICAL - 451)) | (1 << (SQLParserCATEGORY - 451)) | (1 << (SQLParserCOLLATABLE - 451)) | (1 << (SQLParserCOMBINEFUNC - 451)) | (1 << (SQLParserCOMMUTATOR - 451)) | (1 << (SQLParserCONNECT - 451)) | (1 << (SQLParserCOSTS - 451)) | (1 << (SQLParserCREATEDB - 451)) | (1 << (SQLParserCREATEROLE - 451)) | (1 << (SQLParserDESERIALFUNC - 451)) | (1 << (SQLParserDETERMINISTIC - 451)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 451)) | (1 << (SQLParserELEMENT - 451)) | (1 << (SQLParserEXTENDED - 451)) | (1 << (SQLParserFINALFUNC - 451)) | (1 << (SQLParserFINALFUNC_EXTRA - 451)) | (1 << (SQLParserFINALFUNC_MODIFY - 451)) | (1 << (SQLParserFORCE_NOT_NULL - 451)) | (1 << (SQLParserFORCE_NULL - 451)) | (1 << (SQLParserFORCE_QUOTE - 451)) | (1 << (SQLParserFORMAT - 451)) | (1 << (SQLParserGETTOKEN - 451)) | (1 << (SQLParserHASH - 451)) | (1 << (SQLParserHASHES - 451)) | (1 << (SQLParserHEADLINE - 451)) | (1 << (SQLParserHYPOTHETICAL - 451)) | (1 << (SQLParserINDEX_CLEANUP - 451)) | (1 << (SQLParserINIT - 451)))) != 0) || ((((_la - 483)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 483))) & ((1 << (SQLParserINITCOND - 483)) | (1 << (SQLParserINTERNALLENGTH - 483)) | (1 << (SQLParserIS_TEMPLATE - 483)) | (1 << (SQLParserJSON - 483)) | (1 << (SQLParserLC_COLLATE - 483)) | (1 << (SQLParserLC_CTYPE - 483)) | (1 << (SQLParserLEFTARG - 483)) | (1 << (SQLParserLEXIZE - 483)) | (1 << (SQLParserLEXTYPES - 483)) | (1 << (SQLParserLIST - 483)) | (1 << (SQLParserLOCALE - 483)) | (1 << (SQLParserLOGIN - 483)) | (1 << (SQLParserMAIN - 483)) | (1 << (SQLParserMERGES - 483)) | (1 << (SQLParserMFINALFUNC - 483)) | (1 << (SQLParserMFINALFUNC_EXTRA - 483)) | (1 << (SQLParserMFINALFUNC_MODIFY - 483)) | (1 << (SQLParserMINITCOND - 483)) | (1 << (SQLParserMINVFUNC - 483)) | (1 << (SQLParserMODULUS - 483)) | (1 << (SQLParserMSFUNC - 483)) | (1 << (SQLParserMSSPACE - 483)) | (1 << (SQLParserMSTYPE - 483)) | (1 << (SQLParserNEGATOR - 483)) | (1 << (SQLParserNOBYPASSRLS - 483)) | (1 << (SQLParserNOCREATEDB - 483)) | (1 << (SQLParserNOCREATEROLE - 483)) | (1 << (SQLParserNOINHERIT - 483)) | (1 << (SQLParserNOLOGIN - 483)) | (1 << (SQLParserNOREPLICATION - 483)) | (1 << (SQLParserNOSUPERUSER - 483)) | (1 << (SQLParserOUTPUT - 483)))) != 0) || ((((_la - 515)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 515))) & ((1 << (SQLParserPASSEDBYVALUE - 515)) | (1 << (SQLParserPATH - 515)) | (1 << (SQLParserPERMISSIVE - 515)) | (1 << (SQLParserPLAIN - 515)) | (1 << (SQLParserPREFERRED - 515)) | (1 << (SQLParserPROVIDER - 515)) | (1 << (SQLParserREAD_ONLY - 515)) | (1 << (SQLParserREAD_WRITE - 515)) | (1 << (SQLParserRECEIVE - 515)) | (1 << (SQLParserREMAINDER - 515)) | (1 << (SQLParserREPLICATION - 515)) | (1 << (SQLParserRESTRICTED - 515)) | (1 << (SQLParserRESTRICTIVE - 515)) | (1 << (SQLParserRIGHTARG - 515)) | (1 << (SQLParserSAFE - 515)) | (1 << (SQLParserSEND - 515)) | (1 << (SQLParserSERIALFUNC - 515)) | (1 << (SQLParserSETTINGS - 515)) | (1 << (SQLParserSFUNC - 515)) | (1 << (SQLParserSHAREABLE - 515)) | (1 << (SQLParserSKIP_LOCKED - 515)) | (1 << (SQLParserSORTOP - 515)) | (1 << (SQLParserSSPACE - 515)) | (1 << (SQLParserSTYPE - 515)) | (1 << (SQLParserSUBTYPE_DIFF - 515)) | (1 << (SQLParserSUBTYPE_OPCLASS - 515)) | (1 << (SQLParserSUBTYPE - 515)) | (1 << (SQLParserSUMMARY - 515)) | (1 << (SQLParserSUPERUSER - 515)) | (1 << (SQLParserTIMING - 515)) | (1 << (SQLParserTYPMOD_IN - 515)) | (1 << (SQLParserTYPMOD_OUT - 515)))) != 0) || ((((_la - 547)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 547))) & ((1 << (SQLParserUNSAFE - 547)) | (1 << (SQLParserUSAGE - 547)) | (1 << (SQLParserVARIABLE - 547)) | (1 << (SQLParserWAL - 547)) | (1 << (SQLParserYAML - 547)) | (1 << (SQLParserALIAS - 547)) | (1 << (SQLParserASSERT - 547)) | (1 << (SQLParserCONSTANT - 547)) | (1 << (SQLParserDATATYPE - 547)) | (1 << (SQLParserDEBUG - 547)) | (1 << (SQLParserDETAIL - 547)) | (1 << (SQLParserDIAGNOSTICS - 547)) | (1 << (SQLParserELSEIF - 547)) | (1 << (SQLParserELSIF - 547)) | (1 << (SQLParserERRCODE - 547)) | (1 << (SQLParserEXIT - 547)) | (1 << (SQLParserEXCEPTION - 547)) | (1 << (SQLParserFOREACH - 547)) | (1 << (SQLParserGET - 547)) | (1 << (SQLParserHINT - 547)) | (1 << (SQLParserINFO - 547)) | (1 << (SQLParserLOG - 547)) | (1 << (SQLParserLOOP - 547)) | (1 << (SQLParserMESSAGE - 547)) | (1 << (SQLParserNOTICE - 547)) | (1 << (SQLParserOPEN - 547)) | (1 << (SQLParserPERFORM - 547)) | (1 << (SQLParserQUERY - 547)) | (1 << (SQLParserRAISE - 547)) | (1 << (SQLParserRECORD - 547)) | (1 << (SQLParserRETURN - 547)) | (1 << (SQLParserREVERSE - 547)))) != 0) || ((((_la - 579)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 579))) & ((1 << (SQLParserROWTYPE - 579)) | (1 << (SQLParserSLICE - 579)) | (1 << (SQLParserSQLSTATE - 579)) | (1 << (SQLParserSTACKED - 579)) | (1 << (SQLParserWARNING - 579)) | (1 << (SQLParserWHILE - 579)) | (1 << (SQLParserLEFT_PAREN - 579)) | (1 << (SQLParserPLUS - 579)) | (1 << (SQLParserMINUS - 579)) | (1 << (SQLParserMULTIPLY - 579)))) != 0) || ((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)) | (1 << (SQLParserNUMBER_LITERAL - 611)) | (1 << (SQLParserREAL_NUMBER - 611)) | (1 << (SQLParserDOLLAR_NUMBER - 611)) | (1 << (SQLParserIdentifier - 611)) | (1 << (SQLParserQuotedIdentifier - 611)) | (1 << (SQLParserCharacter_String_Literal - 611)) | (1 << (SQLParserBeginDollarStringConstant - 611)))) != 0) {
			p.SetState(6142)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 774, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(6141)
					p.Set_qualifier()
				}


			}
			{
				p.SetState(6144)
				p.Vex_or_named_notation()
			}
			p.SetState(6149)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(6145)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(6146)
					p.Vex_or_named_notation()
				}


				p.SetState(6151)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(6153)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserORDER {
				{
					p.SetState(6152)
					p.Orderby_clause()
				}

			}

		}
		{
			p.SetState(6157)
			p.Match(SQLParserRIGHT_PAREN)
		}
		p.SetState(6164)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 778, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6158)
				p.Match(SQLParserWITHIN)
			}
			{
				p.SetState(6159)
				p.Match(SQLParserGROUP)
			}
			{
				p.SetState(6160)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(6161)
				p.Orderby_clause()
			}
			{
				p.SetState(6162)
				p.Match(SQLParserRIGHT_PAREN)
			}


		}
		p.SetState(6167)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 779, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6166)
				p.Filter_clause()
			}


		}
		p.SetState(6174)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 781, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6169)
				p.Match(SQLParserOVER)
			}
			p.SetState(6172)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
				{
					p.SetState(6170)
					p.Identifier()
				}


			case SQLParserLEFT_PAREN:
				{
					p.SetState(6171)
					p.Window_definition()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6176)
			p.Function_construct()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6177)
			p.Extract_function()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6178)
			p.System_function()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6179)
			p.Date_time_function()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6180)
			p.String_value_function()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6181)
			p.Xml_function()
		}

	}


	return localctx
}


// IVex_or_named_notationContext is an interface to support dynamic dispatch.
type IVex_or_named_notationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArgname returns the argname rule contexts.
	GetArgname() IIdentifierContext


	// SetArgname sets the argname rule contexts.
	SetArgname(IIdentifierContext)


	// IsVex_or_named_notationContext differentiates from other interfaces.
	IsVex_or_named_notationContext()
}

type Vex_or_named_notationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	argname IIdentifierContext 
}

func NewEmptyVex_or_named_notationContext() *Vex_or_named_notationContext {
	var p = new(Vex_or_named_notationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_vex_or_named_notation
	return p
}

func (*Vex_or_named_notationContext) IsVex_or_named_notationContext() {}

func NewVex_or_named_notationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vex_or_named_notationContext {
	var p = new(Vex_or_named_notationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_vex_or_named_notation

	return p
}

func (s *Vex_or_named_notationContext) GetParser() antlr.Parser { return s.parser }

func (s *Vex_or_named_notationContext) GetArgname() IIdentifierContext { return s.argname }


func (s *Vex_or_named_notationContext) SetArgname(v IIdentifierContext) { s.argname = v }


func (s *Vex_or_named_notationContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Vex_or_named_notationContext) VARIADIC() antlr.TerminalNode {
	return s.GetToken(SQLParserVARIADIC, 0)
}

func (s *Vex_or_named_notationContext) Pointer() IPointerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerContext)
}

func (s *Vex_or_named_notationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Vex_or_named_notationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vex_or_named_notationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Vex_or_named_notationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterVex_or_named_notation(s)
	}
}

func (s *Vex_or_named_notationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitVex_or_named_notation(s)
	}
}




func (p *SQLParser) Vex_or_named_notation() (localctx IVex_or_named_notationContext) {
	localctx = NewVex_or_named_notationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, SQLParserRULE_vex_or_named_notation)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6185)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserVARIADIC {
		{
			p.SetState(6184)
			p.Match(SQLParserVARIADIC)
		}

	}
	p.SetState(6190)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 784, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6187)

			var _x = p.Identifier()


			localctx.(*Vex_or_named_notationContext).argname = _x
		}
		{
			p.SetState(6188)
			p.Pointer()
		}


	}
	{
		p.SetState(6192)
		p.vex(0)
	}



	return localctx
}


// IPointerContext is an interface to support dynamic dispatch.
type IPointerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPointerContext differentiates from other interfaces.
	IsPointerContext()
}

type PointerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerContext() *PointerContext {
	var p = new(PointerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_pointer
	return p
}

func (*PointerContext) IsPointerContext() {}

func NewPointerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerContext {
	var p = new(PointerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_pointer

	return p
}

func (s *PointerContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerContext) EQUAL_GTH() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL_GTH, 0)
}

func (s *PointerContext) COLON_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLON_EQUAL, 0)
}

func (s *PointerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PointerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPointer(s)
	}
}

func (s *PointerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPointer(s)
	}
}




func (p *SQLParser) Pointer() (localctx IPointerContext) {
	localctx = NewPointerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, SQLParserRULE_pointer)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6194)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserEQUAL_GTH || _la == SQLParserCOLON_EQUAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IFunction_constructContext is an interface to support dynamic dispatch.
type IFunction_constructContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_constructContext differentiates from other interfaces.
	IsFunction_constructContext()
}

type Function_constructContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_constructContext() *Function_constructContext {
	var p = new(Function_constructContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_construct
	return p
}

func (*Function_constructContext) IsFunction_constructContext() {}

func NewFunction_constructContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_constructContext {
	var p = new(Function_constructContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_construct

	return p
}

func (s *Function_constructContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_constructContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Function_constructContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Function_constructContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Function_constructContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Function_constructContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(SQLParserCOALESCE, 0)
}

func (s *Function_constructContext) GREATEST() antlr.TerminalNode {
	return s.GetToken(SQLParserGREATEST, 0)
}

func (s *Function_constructContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUPING, 0)
}

func (s *Function_constructContext) LEAST() antlr.TerminalNode {
	return s.GetToken(SQLParserLEAST, 0)
}

func (s *Function_constructContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(SQLParserNULLIF, 0)
}

func (s *Function_constructContext) XMLCONCAT() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLCONCAT, 0)
}

func (s *Function_constructContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Function_constructContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Function_constructContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *Function_constructContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_constructContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_constructContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_construct(s)
	}
}

func (s *Function_constructContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_construct(s)
	}
}




func (p *SQLParser) Function_construct() (localctx IFunction_constructContext) {
	localctx = NewFunction_constructContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, SQLParserRULE_function_construct)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6221)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCOALESCE, SQLParserGREATEST, SQLParserGROUPING, SQLParserLEAST, SQLParserNULLIF, SQLParserXMLCONCAT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6196)
			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 306)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 306))) & ((1 << (SQLParserCOALESCE - 306)) | (1 << (SQLParserGREATEST - 306)) | (1 << (SQLParserGROUPING - 306)) | (1 << (SQLParserLEAST - 306)) | (1 << (SQLParserNULLIF - 306)))) != 0) || _la == SQLParserXMLCONCAT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6197)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6198)
			p.vex(0)
		}
		p.SetState(6203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(6199)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6200)
				p.vex(0)
			}


			p.SetState(6205)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6206)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserROW:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6208)
			p.Match(SQLParserROW)
		}
		{
			p.SetState(6209)
			p.Match(SQLParserLEFT_PAREN)
		}
		p.SetState(6218)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)) | (1 << (SQLParserALL - 352)) | (1 << (SQLParserANY - 352)) | (1 << (SQLParserARRAY - 352)) | (1 << (SQLParserCASE - 352)))) != 0) || ((((_la - 384)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 384))) & ((1 << (SQLParserCAST - 384)) | (1 << (SQLParserCURRENT_CATALOG - 384)) | (1 << (SQLParserCURRENT_DATE - 384)) | (1 << (SQLParserCURRENT_TIME - 384)) | (1 << (SQLParserCURRENT_TIMESTAMP - 384)) | (1 << (SQLParserCURRENT_USER - 384)) | (1 << (SQLParserFALSE - 384)))) != 0) || ((((_la - 419)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 419))) & ((1 << (SQLParserLOCALTIME - 419)) | (1 << (SQLParserLOCALTIMESTAMP - 419)) | (1 << (SQLParserNOT - 419)) | (1 << (SQLParserNULL - 419)) | (1 << (SQLParserON - 419)) | (1 << (SQLParserSESSION_USER - 419)) | (1 << (SQLParserSOME - 419)) | (1 << (SQLParserTRUE - 419)) | (1 << (SQLParserUSER - 419)) | (1 << (SQLParserALIGNMENT - 419)))) != 0) || ((((_la - 451)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 451))) & ((1 << (SQLParserALLOW_CONNECTIONS - 451)) | (1 << (SQLParserBASETYPE - 451)) | (1 << (SQLParserBUFFERS - 451)) | (1 << (SQLParserBYPASSRLS - 451)) | (1 << (SQLParserCANONICAL - 451)) | (1 << (SQLParserCATEGORY - 451)) | (1 << (SQLParserCOLLATABLE - 451)) | (1 << (SQLParserCOMBINEFUNC - 451)) | (1 << (SQLParserCOMMUTATOR - 451)) | (1 << (SQLParserCONNECT - 451)) | (1 << (SQLParserCOSTS - 451)) | (1 << (SQLParserCREATEDB - 451)) | (1 << (SQLParserCREATEROLE - 451)) | (1 << (SQLParserDESERIALFUNC - 451)) | (1 << (SQLParserDETERMINISTIC - 451)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 451)) | (1 << (SQLParserELEMENT - 451)) | (1 << (SQLParserEXTENDED - 451)) | (1 << (SQLParserFINALFUNC - 451)) | (1 << (SQLParserFINALFUNC_EXTRA - 451)) | (1 << (SQLParserFINALFUNC_MODIFY - 451)) | (1 << (SQLParserFORCE_NOT_NULL - 451)) | (1 << (SQLParserFORCE_NULL - 451)) | (1 << (SQLParserFORCE_QUOTE - 451)) | (1 << (SQLParserFORMAT - 451)) | (1 << (SQLParserGETTOKEN - 451)) | (1 << (SQLParserHASH - 451)) | (1 << (SQLParserHASHES - 451)) | (1 << (SQLParserHEADLINE - 451)) | (1 << (SQLParserHYPOTHETICAL - 451)) | (1 << (SQLParserINDEX_CLEANUP - 451)) | (1 << (SQLParserINIT - 451)))) != 0) || ((((_la - 483)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 483))) & ((1 << (SQLParserINITCOND - 483)) | (1 << (SQLParserINTERNALLENGTH - 483)) | (1 << (SQLParserIS_TEMPLATE - 483)) | (1 << (SQLParserJSON - 483)) | (1 << (SQLParserLC_COLLATE - 483)) | (1 << (SQLParserLC_CTYPE - 483)) | (1 << (SQLParserLEFTARG - 483)) | (1 << (SQLParserLEXIZE - 483)) | (1 << (SQLParserLEXTYPES - 483)) | (1 << (SQLParserLIST - 483)) | (1 << (SQLParserLOCALE - 483)) | (1 << (SQLParserLOGIN - 483)) | (1 << (SQLParserMAIN - 483)) | (1 << (SQLParserMERGES - 483)) | (1 << (SQLParserMFINALFUNC - 483)) | (1 << (SQLParserMFINALFUNC_EXTRA - 483)) | (1 << (SQLParserMFINALFUNC_MODIFY - 483)) | (1 << (SQLParserMINITCOND - 483)) | (1 << (SQLParserMINVFUNC - 483)) | (1 << (SQLParserMODULUS - 483)) | (1 << (SQLParserMSFUNC - 483)) | (1 << (SQLParserMSSPACE - 483)) | (1 << (SQLParserMSTYPE - 483)) | (1 << (SQLParserNEGATOR - 483)) | (1 << (SQLParserNOBYPASSRLS - 483)) | (1 << (SQLParserNOCREATEDB - 483)) | (1 << (SQLParserNOCREATEROLE - 483)) | (1 << (SQLParserNOINHERIT - 483)) | (1 << (SQLParserNOLOGIN - 483)) | (1 << (SQLParserNOREPLICATION - 483)) | (1 << (SQLParserNOSUPERUSER - 483)) | (1 << (SQLParserOUTPUT - 483)))) != 0) || ((((_la - 515)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 515))) & ((1 << (SQLParserPASSEDBYVALUE - 515)) | (1 << (SQLParserPATH - 515)) | (1 << (SQLParserPERMISSIVE - 515)) | (1 << (SQLParserPLAIN - 515)) | (1 << (SQLParserPREFERRED - 515)) | (1 << (SQLParserPROVIDER - 515)) | (1 << (SQLParserREAD_ONLY - 515)) | (1 << (SQLParserREAD_WRITE - 515)) | (1 << (SQLParserRECEIVE - 515)) | (1 << (SQLParserREMAINDER - 515)) | (1 << (SQLParserREPLICATION - 515)) | (1 << (SQLParserRESTRICTED - 515)) | (1 << (SQLParserRESTRICTIVE - 515)) | (1 << (SQLParserRIGHTARG - 515)) | (1 << (SQLParserSAFE - 515)) | (1 << (SQLParserSEND - 515)) | (1 << (SQLParserSERIALFUNC - 515)) | (1 << (SQLParserSETTINGS - 515)) | (1 << (SQLParserSFUNC - 515)) | (1 << (SQLParserSHAREABLE - 515)) | (1 << (SQLParserSKIP_LOCKED - 515)) | (1 << (SQLParserSORTOP - 515)) | (1 << (SQLParserSSPACE - 515)) | (1 << (SQLParserSTYPE - 515)) | (1 << (SQLParserSUBTYPE_DIFF - 515)) | (1 << (SQLParserSUBTYPE_OPCLASS - 515)) | (1 << (SQLParserSUBTYPE - 515)) | (1 << (SQLParserSUMMARY - 515)) | (1 << (SQLParserSUPERUSER - 515)) | (1 << (SQLParserTIMING - 515)) | (1 << (SQLParserTYPMOD_IN - 515)) | (1 << (SQLParserTYPMOD_OUT - 515)))) != 0) || ((((_la - 547)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 547))) & ((1 << (SQLParserUNSAFE - 547)) | (1 << (SQLParserUSAGE - 547)) | (1 << (SQLParserVARIABLE - 547)) | (1 << (SQLParserWAL - 547)) | (1 << (SQLParserYAML - 547)) | (1 << (SQLParserALIAS - 547)) | (1 << (SQLParserASSERT - 547)) | (1 << (SQLParserCONSTANT - 547)) | (1 << (SQLParserDATATYPE - 547)) | (1 << (SQLParserDEBUG - 547)) | (1 << (SQLParserDETAIL - 547)) | (1 << (SQLParserDIAGNOSTICS - 547)) | (1 << (SQLParserELSEIF - 547)) | (1 << (SQLParserELSIF - 547)) | (1 << (SQLParserERRCODE - 547)) | (1 << (SQLParserEXIT - 547)) | (1 << (SQLParserEXCEPTION - 547)) | (1 << (SQLParserFOREACH - 547)) | (1 << (SQLParserGET - 547)) | (1 << (SQLParserHINT - 547)) | (1 << (SQLParserINFO - 547)) | (1 << (SQLParserLOG - 547)) | (1 << (SQLParserLOOP - 547)) | (1 << (SQLParserMESSAGE - 547)) | (1 << (SQLParserNOTICE - 547)) | (1 << (SQLParserOPEN - 547)) | (1 << (SQLParserPERFORM - 547)) | (1 << (SQLParserQUERY - 547)) | (1 << (SQLParserRAISE - 547)) | (1 << (SQLParserRECORD - 547)) | (1 << (SQLParserRETURN - 547)) | (1 << (SQLParserREVERSE - 547)))) != 0) || ((((_la - 579)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 579))) & ((1 << (SQLParserROWTYPE - 579)) | (1 << (SQLParserSLICE - 579)) | (1 << (SQLParserSQLSTATE - 579)) | (1 << (SQLParserSTACKED - 579)) | (1 << (SQLParserWARNING - 579)) | (1 << (SQLParserWHILE - 579)) | (1 << (SQLParserLEFT_PAREN - 579)) | (1 << (SQLParserPLUS - 579)) | (1 << (SQLParserMINUS - 579)) | (1 << (SQLParserMULTIPLY - 579)))) != 0) || ((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)) | (1 << (SQLParserNUMBER_LITERAL - 611)) | (1 << (SQLParserREAL_NUMBER - 611)) | (1 << (SQLParserDOLLAR_NUMBER - 611)) | (1 << (SQLParserIdentifier - 611)) | (1 << (SQLParserQuotedIdentifier - 611)) | (1 << (SQLParserCharacter_String_Literal - 611)) | (1 << (SQLParserBeginDollarStringConstant - 611)))) != 0) {
			{
				p.SetState(6210)
				p.vex(0)
			}
			p.SetState(6215)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(6211)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(6212)
					p.vex(0)
				}


				p.SetState(6217)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(6220)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IExtract_functionContext is an interface to support dynamic dispatch.
type IExtract_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExtract_functionContext differentiates from other interfaces.
	IsExtract_functionContext()
}

type Extract_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtract_functionContext() *Extract_functionContext {
	var p = new(Extract_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_extract_function
	return p
}

func (*Extract_functionContext) IsExtract_functionContext() {}

func NewExtract_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extract_functionContext {
	var p = new(Extract_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_extract_function

	return p
}

func (s *Extract_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Extract_functionContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXTRACT, 0)
}

func (s *Extract_functionContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Extract_functionContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Extract_functionContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Extract_functionContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Extract_functionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Extract_functionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Extract_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extract_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Extract_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterExtract_function(s)
	}
}

func (s *Extract_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitExtract_function(s)
	}
}




func (p *SQLParser) Extract_function() (localctx IExtract_functionContext) {
	localctx = NewExtract_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, SQLParserRULE_extract_function)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6223)
		p.Match(SQLParserEXTRACT)
	}
	{
		p.SetState(6224)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(6227)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(6225)
			p.Identifier()
		}


	case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
		{
			p.SetState(6226)
			p.Character_string()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6229)
		p.Match(SQLParserFROM)
	}
	{
		p.SetState(6230)
		p.vex(0)
	}
	{
		p.SetState(6231)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// ISystem_functionContext is an interface to support dynamic dispatch.
type ISystem_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSystem_functionContext differentiates from other interfaces.
	IsSystem_functionContext()
}

type System_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySystem_functionContext() *System_functionContext {
	var p = new(System_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_system_function
	return p
}

func (*System_functionContext) IsSystem_functionContext() {}

func NewSystem_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *System_functionContext {
	var p = new(System_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_system_function

	return p
}

func (s *System_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *System_functionContext) CURRENT_CATALOG() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_CATALOG, 0)
}

func (s *System_functionContext) CURRENT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_SCHEMA, 0)
}

func (s *System_functionContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_USER, 0)
}

func (s *System_functionContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(SQLParserSESSION_USER, 0)
}

func (s *System_functionContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *System_functionContext) Cast_specification() ICast_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICast_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICast_specificationContext)
}

func (s *System_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *System_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *System_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSystem_function(s)
	}
}

func (s *System_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSystem_function(s)
	}
}




func (p *SQLParser) System_function() (localctx ISystem_functionContext) {
	localctx = NewSystem_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, SQLParserRULE_system_function)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6239)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCURRENT_CATALOG:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6233)
			p.Match(SQLParserCURRENT_CATALOG)
		}


	case SQLParserCURRENT_SCHEMA:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6234)
			p.Match(SQLParserCURRENT_SCHEMA)
		}


	case SQLParserCURRENT_USER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6235)
			p.Match(SQLParserCURRENT_USER)
		}


	case SQLParserSESSION_USER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6236)
			p.Match(SQLParserSESSION_USER)
		}


	case SQLParserUSER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6237)
			p.Match(SQLParserUSER)
		}


	case SQLParserTREAT, SQLParserCAST:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6238)
			p.Cast_specification()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IDate_time_functionContext is an interface to support dynamic dispatch.
type IDate_time_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDate_time_functionContext differentiates from other interfaces.
	IsDate_time_functionContext()
}

type Date_time_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_time_functionContext() *Date_time_functionContext {
	var p = new(Date_time_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_date_time_function
	return p
}

func (*Date_time_functionContext) IsDate_time_functionContext() {}

func NewDate_time_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_time_functionContext {
	var p = new(Date_time_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_date_time_function

	return p
}

func (s *Date_time_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_time_functionContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_DATE, 0)
}

func (s *Date_time_functionContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_TIME, 0)
}

func (s *Date_time_functionContext) Type_length() IType_lengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_lengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_lengthContext)
}

func (s *Date_time_functionContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT_TIMESTAMP, 0)
}

func (s *Date_time_functionContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCALTIME, 0)
}

func (s *Date_time_functionContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCALTIMESTAMP, 0)
}

func (s *Date_time_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_time_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Date_time_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDate_time_function(s)
	}
}

func (s *Date_time_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDate_time_function(s)
	}
}




func (p *SQLParser) Date_time_function() (localctx IDate_time_functionContext) {
	localctx = NewDate_time_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, SQLParserRULE_date_time_function)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6258)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCURRENT_DATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6241)
			p.Match(SQLParserCURRENT_DATE)
		}


	case SQLParserCURRENT_TIME:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6242)
			p.Match(SQLParserCURRENT_TIME)
		}
		p.SetState(6244)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 791, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6243)
				p.Type_length()
			}


		}


	case SQLParserCURRENT_TIMESTAMP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6246)
			p.Match(SQLParserCURRENT_TIMESTAMP)
		}
		p.SetState(6248)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 792, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6247)
				p.Type_length()
			}


		}


	case SQLParserLOCALTIME:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6250)
			p.Match(SQLParserLOCALTIME)
		}
		p.SetState(6252)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 793, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6251)
				p.Type_length()
			}


		}


	case SQLParserLOCALTIMESTAMP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6254)
			p.Match(SQLParserLOCALTIMESTAMP)
		}
		p.SetState(6256)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 794, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6255)
				p.Type_length()
			}


		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IString_value_functionContext is an interface to support dynamic dispatch.
type IString_value_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetChars returns the chars rule contexts.
	GetChars() IVexContext

	// GetStr returns the str rule contexts.
	GetStr() IVexContext


	// SetChars sets the chars rule contexts.
	SetChars(IVexContext)

	// SetStr sets the str rule contexts.
	SetStr(IVexContext)


	// IsString_value_functionContext differentiates from other interfaces.
	IsString_value_functionContext()
}

type String_value_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	chars IVexContext 
	str IVexContext 
}

func NewEmptyString_value_functionContext() *String_value_functionContext {
	var p = new(String_value_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_string_value_function
	return p
}

func (*String_value_functionContext) IsString_value_functionContext() {}

func NewString_value_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_value_functionContext {
	var p = new(String_value_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_string_value_function

	return p
}

func (s *String_value_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *String_value_functionContext) GetChars() IVexContext { return s.chars }

func (s *String_value_functionContext) GetStr() IVexContext { return s.str }


func (s *String_value_functionContext) SetChars(v IVexContext) { s.chars = v }

func (s *String_value_functionContext) SetStr(v IVexContext) { s.str = v }


func (s *String_value_functionContext) TRIM() antlr.TerminalNode {
	return s.GetToken(SQLParserTRIM, 0)
}

func (s *String_value_functionContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *String_value_functionContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *String_value_functionContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *String_value_functionContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *String_value_functionContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *String_value_functionContext) LEADING() antlr.TerminalNode {
	return s.GetToken(SQLParserLEADING, 0)
}

func (s *String_value_functionContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(SQLParserTRAILING, 0)
}

func (s *String_value_functionContext) BOTH() antlr.TerminalNode {
	return s.GetToken(SQLParserBOTH, 0)
}

func (s *String_value_functionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *String_value_functionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *String_value_functionContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(SQLParserSUBSTRING, 0)
}

func (s *String_value_functionContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *String_value_functionContext) POSITION() antlr.TerminalNode {
	return s.GetToken(SQLParserPOSITION, 0)
}

func (s *String_value_functionContext) Vex_b() IVex_bContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVex_bContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVex_bContext)
}

func (s *String_value_functionContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *String_value_functionContext) OVERLAY() antlr.TerminalNode {
	return s.GetToken(SQLParserOVERLAY, 0)
}

func (s *String_value_functionContext) PLACING() antlr.TerminalNode {
	return s.GetToken(SQLParserPLACING, 0)
}

func (s *String_value_functionContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLLATION, 0)
}

func (s *String_value_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_value_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *String_value_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterString_value_function(s)
	}
}

func (s *String_value_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitString_value_function(s)
	}
}




func (p *SQLParser) String_value_function() (localctx IString_value_functionContext) {
	localctx = NewString_value_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, SQLParserRULE_string_value_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6327)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserTRIM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6260)
			p.Match(SQLParserTRIM)
		}
		{
			p.SetState(6261)
			p.Match(SQLParserLEFT_PAREN)
		}
		p.SetState(6263)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserBOTH || _la == SQLParserLEADING || _la == SQLParserTRAILING {
			{
				p.SetState(6262)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserBOTH || _la == SQLParserLEADING || _la == SQLParserTRAILING) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		p.SetState(6277)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 799, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6265)

				var _x = p.vex(0)

				localctx.(*String_value_functionContext).chars = _x
			}
			{
				p.SetState(6266)
				p.Match(SQLParserFROM)
			}
			{
				p.SetState(6267)

				var _x = p.vex(0)

				localctx.(*String_value_functionContext).str = _x
			}


		case 2:
			p.SetState(6270)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserFROM {
				{
					p.SetState(6269)
					p.Match(SQLParserFROM)
				}

			}
			{
				p.SetState(6272)

				var _x = p.vex(0)

				localctx.(*String_value_functionContext).str = _x
			}
			p.SetState(6275)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserCOMMA {
				{
					p.SetState(6273)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(6274)

					var _x = p.vex(0)

					localctx.(*String_value_functionContext).chars = _x
				}

			}

		}
		{
			p.SetState(6279)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserSUBSTRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6281)
			p.Match(SQLParserSUBSTRING)
		}
		{
			p.SetState(6282)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6283)
			p.vex(0)
		}
		p.SetState(6288)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(6284)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6285)
				p.vex(0)
			}


			p.SetState(6290)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(6293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFROM {
			{
				p.SetState(6291)
				p.Match(SQLParserFROM)
			}
			{
				p.SetState(6292)
				p.vex(0)
			}

		}
		p.SetState(6297)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFOR {
			{
				p.SetState(6295)
				p.Match(SQLParserFOR)
			}
			{
				p.SetState(6296)
				p.vex(0)
			}

		}
		{
			p.SetState(6299)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserPOSITION:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6301)
			p.Match(SQLParserPOSITION)
		}
		{
			p.SetState(6302)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6303)
			p.vex_b(0)
		}
		{
			p.SetState(6304)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(6305)
			p.vex(0)
		}
		{
			p.SetState(6306)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserOVERLAY:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6308)
			p.Match(SQLParserOVERLAY)
		}
		{
			p.SetState(6309)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6310)
			p.vex(0)
		}
		{
			p.SetState(6311)
			p.Match(SQLParserPLACING)
		}
		{
			p.SetState(6312)
			p.vex(0)
		}
		{
			p.SetState(6313)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(6314)
			p.vex(0)
		}
		p.SetState(6317)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFOR {
			{
				p.SetState(6315)
				p.Match(SQLParserFOR)
			}
			{
				p.SetState(6316)
				p.vex(0)
			}

		}
		{
			p.SetState(6319)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserCOLLATION:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6321)
			p.Match(SQLParserCOLLATION)
		}
		{
			p.SetState(6322)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(6323)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6324)
			p.vex(0)
		}
		{
			p.SetState(6325)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IXml_functionContext is an interface to support dynamic dispatch.
type IXml_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetAttname returns the attname rule contexts.
	GetAttname() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetAttname sets the attname rule contexts.
	SetAttname(IIdentifierContext)


	// IsXml_functionContext differentiates from other interfaces.
	IsXml_functionContext()
}

type Xml_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
	attname IIdentifierContext 
}

func NewEmptyXml_functionContext() *Xml_functionContext {
	var p = new(Xml_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_xml_function
	return p
}

func (*Xml_functionContext) IsXml_functionContext() {}

func NewXml_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xml_functionContext {
	var p = new(Xml_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_xml_function

	return p
}

func (s *Xml_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Xml_functionContext) GetName() IIdentifierContext { return s.name }

func (s *Xml_functionContext) GetAttname() IIdentifierContext { return s.attname }


func (s *Xml_functionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *Xml_functionContext) SetAttname(v IIdentifierContext) { s.attname = v }


func (s *Xml_functionContext) XMLELEMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLELEMENT, 0)
}

func (s *Xml_functionContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_PAREN)
}

func (s *Xml_functionContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, i)
}

func (s *Xml_functionContext) NAME() antlr.TerminalNode {
	return s.GetToken(SQLParserNAME, 0)
}

func (s *Xml_functionContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_PAREN)
}

func (s *Xml_functionContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, i)
}

func (s *Xml_functionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Xml_functionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Xml_functionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Xml_functionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Xml_functionContext) XMLATTRIBUTES() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLATTRIBUTES, 0)
}

func (s *Xml_functionContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Xml_functionContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Xml_functionContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(SQLParserAS)
}

func (s *Xml_functionContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserAS, i)
}

func (s *Xml_functionContext) XMLFOREST() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLFOREST, 0)
}

func (s *Xml_functionContext) XMLPI() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLPI, 0)
}

func (s *Xml_functionContext) XMLROOT() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLROOT, 0)
}

func (s *Xml_functionContext) VERSION() antlr.TerminalNode {
	return s.GetToken(SQLParserVERSION, 0)
}

func (s *Xml_functionContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(SQLParserNO)
}

func (s *Xml_functionContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserNO, i)
}

func (s *Xml_functionContext) AllVALUE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserVALUE)
}

func (s *Xml_functionContext) VALUE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserVALUE, i)
}

func (s *Xml_functionContext) STANDALONE() antlr.TerminalNode {
	return s.GetToken(SQLParserSTANDALONE, 0)
}

func (s *Xml_functionContext) YES() antlr.TerminalNode {
	return s.GetToken(SQLParserYES, 0)
}

func (s *Xml_functionContext) XMLEXISTS() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLEXISTS, 0)
}

func (s *Xml_functionContext) PASSING() antlr.TerminalNode {
	return s.GetToken(SQLParserPASSING, 0)
}

func (s *Xml_functionContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(SQLParserBY)
}

func (s *Xml_functionContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserBY, i)
}

func (s *Xml_functionContext) AllREF() []antlr.TerminalNode {
	return s.GetTokens(SQLParserREF)
}

func (s *Xml_functionContext) REF(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserREF, i)
}

func (s *Xml_functionContext) XMLPARSE() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLPARSE, 0)
}

func (s *Xml_functionContext) DOCUMENT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOCUMENT, 0)
}

func (s *Xml_functionContext) CONTENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONTENT, 0)
}

func (s *Xml_functionContext) XMLSERIALIZE() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLSERIALIZE, 0)
}

func (s *Xml_functionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Xml_functionContext) XMLTABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLTABLE, 0)
}

func (s *Xml_functionContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMNS, 0)
}

func (s *Xml_functionContext) AllXml_table_column() []IXml_table_columnContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IXml_table_columnContext)(nil)).Elem())
	var tst = make([]IXml_table_columnContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IXml_table_columnContext)
		}
	}

	return tst
}

func (s *Xml_functionContext) Xml_table_column(i int) IXml_table_columnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXml_table_columnContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IXml_table_columnContext)
}

func (s *Xml_functionContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(SQLParserXMLNAMESPACES, 0)
}

func (s *Xml_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xml_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Xml_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterXml_function(s)
	}
}

func (s *Xml_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitXml_function(s)
	}
}




func (p *SQLParser) Xml_function() (localctx IXml_functionContext) {
	localctx = NewXml_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, SQLParserRULE_xml_function)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6490)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserXMLELEMENT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6329)
			p.Match(SQLParserXMLELEMENT)
		}
		{
			p.SetState(6330)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6331)
			p.Match(SQLParserNAME)
		}
		{
			p.SetState(6332)

			var _x = p.Identifier()


			localctx.(*Xml_functionContext).name = _x
		}
		p.SetState(6354)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 808, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6333)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6334)
				p.Match(SQLParserXMLATTRIBUTES)
			}
			{
				p.SetState(6335)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(6336)
				p.vex(0)
			}
			p.SetState(6339)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserAS {
				{
					p.SetState(6337)
					p.Match(SQLParserAS)
				}
				{
					p.SetState(6338)

					var _x = p.Identifier()


					localctx.(*Xml_functionContext).attname = _x
				}

			}
			p.SetState(6349)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(6341)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(6342)
					p.vex(0)
				}
				p.SetState(6345)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if _la == SQLParserAS {
					{
						p.SetState(6343)
						p.Match(SQLParserAS)
					}
					{
						p.SetState(6344)

						var _x = p.Identifier()


						localctx.(*Xml_functionContext).attname = _x
					}

				}


				p.SetState(6351)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(6352)
				p.Match(SQLParserRIGHT_PAREN)
			}


		}
		p.SetState(6360)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(6356)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6357)
				p.vex(0)
			}


			p.SetState(6362)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6363)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserXMLFOREST:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6365)
			p.Match(SQLParserXMLFOREST)
		}
		{
			p.SetState(6366)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6367)
			p.vex(0)
		}
		p.SetState(6370)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAS {
			{
				p.SetState(6368)
				p.Match(SQLParserAS)
			}
			{
				p.SetState(6369)

				var _x = p.Identifier()


				localctx.(*Xml_functionContext).name = _x
			}

		}
		p.SetState(6380)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(6372)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6373)
				p.vex(0)
			}
			p.SetState(6376)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserAS {
				{
					p.SetState(6374)
					p.Match(SQLParserAS)
				}
				{
					p.SetState(6375)

					var _x = p.Identifier()


					localctx.(*Xml_functionContext).name = _x
				}

			}


			p.SetState(6382)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6383)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserXMLPI:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6385)
			p.Match(SQLParserXMLPI)
		}
		{
			p.SetState(6386)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6387)
			p.Match(SQLParserNAME)
		}
		{
			p.SetState(6388)

			var _x = p.Identifier()


			localctx.(*Xml_functionContext).name = _x
		}
		p.SetState(6391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOMMA {
			{
				p.SetState(6389)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6390)
				p.vex(0)
			}

		}
		{
			p.SetState(6393)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserXMLROOT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6395)
			p.Match(SQLParserXMLROOT)
		}
		{
			p.SetState(6396)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6397)
			p.vex(0)
		}
		{
			p.SetState(6398)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(6399)
			p.Match(SQLParserVERSION)
		}
		p.SetState(6403)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 814, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6400)
				p.vex(0)
			}


		case 2:
			{
				p.SetState(6401)
				p.Match(SQLParserNO)
			}
			{
				p.SetState(6402)
				p.Match(SQLParserVALUE)
			}

		}
		p.SetState(6413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOMMA {
			{
				p.SetState(6405)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6406)
				p.Match(SQLParserSTANDALONE)
			}
			p.SetState(6411)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 815, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(6407)
					p.Match(SQLParserYES)
				}


			case 2:
				{
					p.SetState(6408)
					p.Match(SQLParserNO)
				}


			case 3:
				{
					p.SetState(6409)
					p.Match(SQLParserNO)
				}
				{
					p.SetState(6410)
					p.Match(SQLParserVALUE)
				}

			}

		}
		{
			p.SetState(6415)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserXMLEXISTS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6417)
			p.Match(SQLParserXMLEXISTS)
		}
		{
			p.SetState(6418)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6419)
			p.vex(0)
		}
		{
			p.SetState(6420)
			p.Match(SQLParserPASSING)
		}
		p.SetState(6423)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 817, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6421)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(6422)
				p.Match(SQLParserREF)
			}


		}
		{
			p.SetState(6425)
			p.vex(0)
		}
		p.SetState(6428)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserBY {
			{
				p.SetState(6426)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(6427)
				p.Match(SQLParserREF)
			}

		}
		{
			p.SetState(6430)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserXMLPARSE:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6432)
			p.Match(SQLParserXMLPARSE)
		}
		{
			p.SetState(6433)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6434)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCONTENT || _la == SQLParserDOCUMENT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6435)
			p.vex(0)
		}
		{
			p.SetState(6436)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserXMLSERIALIZE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6438)
			p.Match(SQLParserXMLSERIALIZE)
		}
		{
			p.SetState(6439)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6440)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCONTENT || _la == SQLParserDOCUMENT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(6441)
			p.vex(0)
		}
		{
			p.SetState(6442)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(6443)
			p.Data_type()
		}
		{
			p.SetState(6444)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserXMLTABLE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6446)
			p.Match(SQLParserXMLTABLE)
		}
		{
			p.SetState(6447)
			p.Match(SQLParserLEFT_PAREN)
		}
		p.SetState(6466)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 820, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6448)
				p.Match(SQLParserXMLNAMESPACES)
			}
			{
				p.SetState(6449)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(6450)
				p.vex(0)
			}
			{
				p.SetState(6451)
				p.Match(SQLParserAS)
			}
			{
				p.SetState(6452)

				var _x = p.Identifier()


				localctx.(*Xml_functionContext).name = _x
			}
			p.SetState(6460)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(6453)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(6454)
					p.vex(0)
				}
				{
					p.SetState(6455)
					p.Match(SQLParserAS)
				}
				{
					p.SetState(6456)

					var _x = p.Identifier()


					localctx.(*Xml_functionContext).name = _x
				}


				p.SetState(6462)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(6463)
				p.Match(SQLParserRIGHT_PAREN)
			}
			{
				p.SetState(6464)
				p.Match(SQLParserCOMMA)
			}


		}
		{
			p.SetState(6468)
			p.vex(0)
		}
		{
			p.SetState(6469)
			p.Match(SQLParserPASSING)
		}
		p.SetState(6472)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 821, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6470)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(6471)
				p.Match(SQLParserREF)
			}


		}
		{
			p.SetState(6474)
			p.vex(0)
		}
		p.SetState(6477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserBY {
			{
				p.SetState(6475)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(6476)
				p.Match(SQLParserREF)
			}

		}
		{
			p.SetState(6479)
			p.Match(SQLParserCOLUMNS)
		}
		{
			p.SetState(6480)
			p.Xml_table_column()
		}
		p.SetState(6485)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(6481)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6482)
				p.Xml_table_column()
			}


			p.SetState(6487)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6488)
			p.Match(SQLParserRIGHT_PAREN)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IXml_table_columnContext is an interface to support dynamic dispatch.
type IXml_table_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext


	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)


	// IsXml_table_columnContext differentiates from other interfaces.
	IsXml_table_columnContext()
}

type Xml_table_columnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name IIdentifierContext 
}

func NewEmptyXml_table_columnContext() *Xml_table_columnContext {
	var p = new(Xml_table_columnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_xml_table_column
	return p
}

func (*Xml_table_columnContext) IsXml_table_columnContext() {}

func NewXml_table_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xml_table_columnContext {
	var p = new(Xml_table_columnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_xml_table_column

	return p
}

func (s *Xml_table_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Xml_table_columnContext) GetName() IIdentifierContext { return s.name }


func (s *Xml_table_columnContext) SetName(v IIdentifierContext) { s.name = v }


func (s *Xml_table_columnContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Xml_table_columnContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Xml_table_columnContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Xml_table_columnContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(SQLParserORDINALITY, 0)
}

func (s *Xml_table_columnContext) PATH() antlr.TerminalNode {
	return s.GetToken(SQLParserPATH, 0)
}

func (s *Xml_table_columnContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Xml_table_columnContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Xml_table_columnContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Xml_table_columnContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Xml_table_columnContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Xml_table_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xml_table_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Xml_table_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterXml_table_column(s)
	}
}

func (s *Xml_table_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitXml_table_column(s)
	}
}




func (p *SQLParser) Xml_table_column() (localctx IXml_table_columnContext) {
	localctx = NewXml_table_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, SQLParserRULE_xml_table_column)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6492)

		var _x = p.Identifier()


		localctx.(*Xml_table_columnContext).name = _x
	}
	p.SetState(6510)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(6493)
			p.Data_type()
		}
		p.SetState(6496)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserPATH {
			{
				p.SetState(6494)
				p.Match(SQLParserPATH)
			}
			{
				p.SetState(6495)
				p.vex(0)
			}

		}
		p.SetState(6500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserDEFAULT {
			{
				p.SetState(6498)
				p.Match(SQLParserDEFAULT)
			}
			{
				p.SetState(6499)
				p.vex(0)
			}

		}
		p.SetState(6506)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT || _la == SQLParserNULL {
			p.SetState(6503)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserNOT {
				{
					p.SetState(6502)
					p.Match(SQLParserNOT)
				}

			}
			{
				p.SetState(6505)
				p.Match(SQLParserNULL)
			}

		}


	case SQLParserFOR:
		{
			p.SetState(6508)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(6509)
			p.Match(SQLParserORDINALITY)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IComparison_modContext is an interface to support dynamic dispatch.
type IComparison_modContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparison_modContext differentiates from other interfaces.
	IsComparison_modContext()
}

type Comparison_modContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparison_modContext() *Comparison_modContext {
	var p = new(Comparison_modContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_comparison_mod
	return p
}

func (*Comparison_modContext) IsComparison_modContext() {}

func NewComparison_modContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparison_modContext {
	var p = new(Comparison_modContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_comparison_mod

	return p
}

func (s *Comparison_modContext) GetParser() antlr.Parser { return s.parser }

func (s *Comparison_modContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Comparison_modContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Comparison_modContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Comparison_modContext) ANY() antlr.TerminalNode {
	return s.GetToken(SQLParserANY, 0)
}

func (s *Comparison_modContext) SOME() antlr.TerminalNode {
	return s.GetToken(SQLParserSOME, 0)
}

func (s *Comparison_modContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Comparison_modContext) Select_stmt_no_parens() ISelect_stmt_no_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmt_no_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmt_no_parensContext)
}

func (s *Comparison_modContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_modContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Comparison_modContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterComparison_mod(s)
	}
}

func (s *Comparison_modContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitComparison_mod(s)
	}
}




func (p *SQLParser) Comparison_mod() (localctx IComparison_modContext) {
	localctx = NewComparison_modContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, SQLParserRULE_comparison_mod)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6512)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserALL || _la == SQLParserANY || _la == SQLParserSOME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(6513)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(6516)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 830, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6514)
			p.vex(0)
		}


	case 2:
		{
			p.SetState(6515)
			p.Select_stmt_no_parens()
		}

	}
	{
		p.SetState(6518)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IFilter_clauseContext is an interface to support dynamic dispatch.
type IFilter_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilter_clauseContext differentiates from other interfaces.
	IsFilter_clauseContext()
}

type Filter_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilter_clauseContext() *Filter_clauseContext {
	var p = new(Filter_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_filter_clause
	return p
}

func (*Filter_clauseContext) IsFilter_clauseContext() {}

func NewFilter_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Filter_clauseContext {
	var p = new(Filter_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_filter_clause

	return p
}

func (s *Filter_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Filter_clauseContext) FILTER() antlr.TerminalNode {
	return s.GetToken(SQLParserFILTER, 0)
}

func (s *Filter_clauseContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Filter_clauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Filter_clauseContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Filter_clauseContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Filter_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Filter_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Filter_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFilter_clause(s)
	}
}

func (s *Filter_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFilter_clause(s)
	}
}




func (p *SQLParser) Filter_clause() (localctx IFilter_clauseContext) {
	localctx = NewFilter_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, SQLParserRULE_filter_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6520)
		p.Match(SQLParserFILTER)
	}
	{
		p.SetState(6521)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(6522)
		p.Match(SQLParserWHERE)
	}
	{
		p.SetState(6523)
		p.vex(0)
	}
	{
		p.SetState(6524)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IWindow_definitionContext is an interface to support dynamic dispatch.
type IWindow_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_definitionContext differentiates from other interfaces.
	IsWindow_definitionContext()
}

type Window_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_definitionContext() *Window_definitionContext {
	var p = new(Window_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_window_definition
	return p
}

func (*Window_definitionContext) IsWindow_definitionContext() {}

func NewWindow_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_definitionContext {
	var p = new(Window_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_window_definition

	return p
}

func (s *Window_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_definitionContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Window_definitionContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Window_definitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_definitionContext) Partition_by_columns() IPartition_by_columnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_by_columnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartition_by_columnsContext)
}

func (s *Window_definitionContext) Orderby_clause() IOrderby_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderby_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderby_clauseContext)
}

func (s *Window_definitionContext) Frame_clause() IFrame_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrame_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrame_clauseContext)
}

func (s *Window_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Window_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterWindow_definition(s)
	}
}

func (s *Window_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitWindow_definition(s)
	}
}




func (p *SQLParser) Window_definition() (localctx IWindow_definitionContext) {
	localctx = NewWindow_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, SQLParserRULE_window_definition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6526)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(6528)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 831, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6527)
			p.Identifier()
		}


	}
	p.SetState(6531)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserPARTITION {
		{
			p.SetState(6530)
			p.Partition_by_columns()
		}

	}
	p.SetState(6534)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserORDER {
		{
			p.SetState(6533)
			p.Orderby_clause()
		}

	}
	p.SetState(6537)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserGROUPS || _la == SQLParserRANGE || _la == SQLParserROWS {
		{
			p.SetState(6536)
			p.Frame_clause()
		}

	}
	{
		p.SetState(6539)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IFrame_clauseContext is an interface to support dynamic dispatch.
type IFrame_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrame_clauseContext differentiates from other interfaces.
	IsFrame_clauseContext()
}

type Frame_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_clauseContext() *Frame_clauseContext {
	var p = new(Frame_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_frame_clause
	return p
}

func (*Frame_clauseContext) IsFrame_clauseContext() {}

func NewFrame_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_clauseContext {
	var p = new(Frame_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_frame_clause

	return p
}

func (s *Frame_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_clauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(SQLParserRANGE, 0)
}

func (s *Frame_clauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SQLParserROWS, 0)
}

func (s *Frame_clauseContext) GROUPS() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUPS, 0)
}

func (s *Frame_clauseContext) AllFrame_bound() []IFrame_boundContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrame_boundContext)(nil)).Elem())
	var tst = make([]IFrame_boundContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrame_boundContext)
		}
	}

	return tst
}

func (s *Frame_clauseContext) Frame_bound(i int) IFrame_boundContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrame_boundContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrame_boundContext)
}

func (s *Frame_clauseContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLParserBETWEEN, 0)
}

func (s *Frame_clauseContext) AND() antlr.TerminalNode {
	return s.GetToken(SQLParserAND, 0)
}

func (s *Frame_clauseContext) EXCLUDE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCLUDE, 0)
}

func (s *Frame_clauseContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT, 0)
}

func (s *Frame_clauseContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *Frame_clauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *Frame_clauseContext) TIES() antlr.TerminalNode {
	return s.GetToken(SQLParserTIES, 0)
}

func (s *Frame_clauseContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Frame_clauseContext) OTHERS() antlr.TerminalNode {
	return s.GetToken(SQLParserOTHERS, 0)
}

func (s *Frame_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Frame_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFrame_clause(s)
	}
}

func (s *Frame_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFrame_clause(s)
	}
}




func (p *SQLParser) Frame_clause() (localctx IFrame_clauseContext) {
	localctx = NewFrame_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, SQLParserRULE_frame_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6541)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserGROUPS || _la == SQLParserRANGE || _la == SQLParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(6548)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 835, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6542)
			p.Frame_bound()
		}


	case 2:
		{
			p.SetState(6543)
			p.Match(SQLParserBETWEEN)
		}
		{
			p.SetState(6544)
			p.Frame_bound()
		}
		{
			p.SetState(6545)
			p.Match(SQLParserAND)
		}
		{
			p.SetState(6546)
			p.Frame_bound()
		}

	}
	p.SetState(6559)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserEXCLUDE {
		{
			p.SetState(6550)
			p.Match(SQLParserEXCLUDE)
		}
		p.SetState(6557)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserCURRENT:
			{
				p.SetState(6551)
				p.Match(SQLParserCURRENT)
			}
			{
				p.SetState(6552)
				p.Match(SQLParserROW)
			}


		case SQLParserGROUP:
			{
				p.SetState(6553)
				p.Match(SQLParserGROUP)
			}


		case SQLParserTIES:
			{
				p.SetState(6554)
				p.Match(SQLParserTIES)
			}


		case SQLParserNO:
			{
				p.SetState(6555)
				p.Match(SQLParserNO)
			}
			{
				p.SetState(6556)
				p.Match(SQLParserOTHERS)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}



	return localctx
}


// IFrame_boundContext is an interface to support dynamic dispatch.
type IFrame_boundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrame_boundContext differentiates from other interfaces.
	IsFrame_boundContext()
}

type Frame_boundContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_boundContext() *Frame_boundContext {
	var p = new(Frame_boundContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_frame_bound
	return p
}

func (*Frame_boundContext) IsFrame_boundContext() {}

func NewFrame_boundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_boundContext {
	var p = new(Frame_boundContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_frame_bound

	return p
}

func (s *Frame_boundContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_boundContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Frame_boundContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(SQLParserPRECEDING, 0)
}

func (s *Frame_boundContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(SQLParserFOLLOWING, 0)
}

func (s *Frame_boundContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT, 0)
}

func (s *Frame_boundContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *Frame_boundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_boundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Frame_boundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFrame_bound(s)
	}
}

func (s *Frame_boundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFrame_bound(s)
	}
}




func (p *SQLParser) Frame_bound() (localctx IFrame_boundContext) {
	localctx = NewFrame_boundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, SQLParserRULE_frame_bound)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6566)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 838, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6561)
			p.vex(0)
		}
		{
			p.SetState(6562)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserFOLLOWING || _la == SQLParserPRECEDING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6564)
			p.Match(SQLParserCURRENT)
		}
		{
			p.SetState(6565)
			p.Match(SQLParserROW)
		}

	}


	return localctx
}


// IArray_expressionContext is an interface to support dynamic dispatch.
type IArray_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_expressionContext differentiates from other interfaces.
	IsArray_expressionContext()
}

type Array_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_expressionContext() *Array_expressionContext {
	var p = new(Array_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_array_expression
	return p
}

func (*Array_expressionContext) IsArray_expressionContext() {}

func NewArray_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_expressionContext {
	var p = new(Array_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_array_expression

	return p
}

func (s *Array_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_expressionContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SQLParserARRAY, 0)
}

func (s *Array_expressionContext) Array_elements() IArray_elementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_elementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_elementsContext)
}

func (s *Array_expressionContext) Table_subquery() ITable_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_subqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_subqueryContext)
}

func (s *Array_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Array_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterArray_expression(s)
	}
}

func (s *Array_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitArray_expression(s)
	}
}




func (p *SQLParser) Array_expression() (localctx IArray_expressionContext) {
	localctx = NewArray_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, SQLParserRULE_array_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6568)
		p.Match(SQLParserARRAY)
	}
	p.SetState(6571)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserLEFT_BRACKET:
		{
			p.SetState(6569)
			p.Array_elements()
		}


	case SQLParserLEFT_PAREN:
		{
			p.SetState(6570)
			p.Table_subquery()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IArray_elementsContext is an interface to support dynamic dispatch.
type IArray_elementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_elementsContext differentiates from other interfaces.
	IsArray_elementsContext()
}

type Array_elementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_elementsContext() *Array_elementsContext {
	var p = new(Array_elementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_array_elements
	return p
}

func (*Array_elementsContext) IsArray_elementsContext() {}

func NewArray_elementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_elementsContext {
	var p = new(Array_elementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_array_elements

	return p
}

func (s *Array_elementsContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_elementsContext) LEFT_BRACKET() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_BRACKET, 0)
}

func (s *Array_elementsContext) RIGHT_BRACKET() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_BRACKET, 0)
}

func (s *Array_elementsContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Array_elementsContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Array_elementsContext) AllArray_elements() []IArray_elementsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArray_elementsContext)(nil)).Elem())
	var tst = make([]IArray_elementsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArray_elementsContext)
		}
	}

	return tst
}

func (s *Array_elementsContext) Array_elements(i int) IArray_elementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_elementsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArray_elementsContext)
}

func (s *Array_elementsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Array_elementsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Array_elementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_elementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Array_elementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterArray_elements(s)
	}
}

func (s *Array_elementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitArray_elements(s)
	}
}




func (p *SQLParser) Array_elements() (localctx IArray_elementsContext) {
	localctx = NewArray_elementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, SQLParserRULE_array_elements)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6573)
		p.Match(SQLParserLEFT_BRACKET)
	}
	p.SetState(6588)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)) | (1 << (SQLParserALL - 352)) | (1 << (SQLParserANY - 352)) | (1 << (SQLParserARRAY - 352)) | (1 << (SQLParserCASE - 352)))) != 0) || ((((_la - 384)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 384))) & ((1 << (SQLParserCAST - 384)) | (1 << (SQLParserCURRENT_CATALOG - 384)) | (1 << (SQLParserCURRENT_DATE - 384)) | (1 << (SQLParserCURRENT_TIME - 384)) | (1 << (SQLParserCURRENT_TIMESTAMP - 384)) | (1 << (SQLParserCURRENT_USER - 384)) | (1 << (SQLParserFALSE - 384)))) != 0) || ((((_la - 419)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 419))) & ((1 << (SQLParserLOCALTIME - 419)) | (1 << (SQLParserLOCALTIMESTAMP - 419)) | (1 << (SQLParserNOT - 419)) | (1 << (SQLParserNULL - 419)) | (1 << (SQLParserON - 419)) | (1 << (SQLParserSESSION_USER - 419)) | (1 << (SQLParserSOME - 419)) | (1 << (SQLParserTRUE - 419)) | (1 << (SQLParserUSER - 419)) | (1 << (SQLParserALIGNMENT - 419)))) != 0) || ((((_la - 451)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 451))) & ((1 << (SQLParserALLOW_CONNECTIONS - 451)) | (1 << (SQLParserBASETYPE - 451)) | (1 << (SQLParserBUFFERS - 451)) | (1 << (SQLParserBYPASSRLS - 451)) | (1 << (SQLParserCANONICAL - 451)) | (1 << (SQLParserCATEGORY - 451)) | (1 << (SQLParserCOLLATABLE - 451)) | (1 << (SQLParserCOMBINEFUNC - 451)) | (1 << (SQLParserCOMMUTATOR - 451)) | (1 << (SQLParserCONNECT - 451)) | (1 << (SQLParserCOSTS - 451)) | (1 << (SQLParserCREATEDB - 451)) | (1 << (SQLParserCREATEROLE - 451)) | (1 << (SQLParserDESERIALFUNC - 451)) | (1 << (SQLParserDETERMINISTIC - 451)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 451)) | (1 << (SQLParserELEMENT - 451)) | (1 << (SQLParserEXTENDED - 451)) | (1 << (SQLParserFINALFUNC - 451)) | (1 << (SQLParserFINALFUNC_EXTRA - 451)) | (1 << (SQLParserFINALFUNC_MODIFY - 451)) | (1 << (SQLParserFORCE_NOT_NULL - 451)) | (1 << (SQLParserFORCE_NULL - 451)) | (1 << (SQLParserFORCE_QUOTE - 451)) | (1 << (SQLParserFORMAT - 451)) | (1 << (SQLParserGETTOKEN - 451)) | (1 << (SQLParserHASH - 451)) | (1 << (SQLParserHASHES - 451)) | (1 << (SQLParserHEADLINE - 451)) | (1 << (SQLParserHYPOTHETICAL - 451)) | (1 << (SQLParserINDEX_CLEANUP - 451)) | (1 << (SQLParserINIT - 451)))) != 0) || ((((_la - 483)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 483))) & ((1 << (SQLParserINITCOND - 483)) | (1 << (SQLParserINTERNALLENGTH - 483)) | (1 << (SQLParserIS_TEMPLATE - 483)) | (1 << (SQLParserJSON - 483)) | (1 << (SQLParserLC_COLLATE - 483)) | (1 << (SQLParserLC_CTYPE - 483)) | (1 << (SQLParserLEFTARG - 483)) | (1 << (SQLParserLEXIZE - 483)) | (1 << (SQLParserLEXTYPES - 483)) | (1 << (SQLParserLIST - 483)) | (1 << (SQLParserLOCALE - 483)) | (1 << (SQLParserLOGIN - 483)) | (1 << (SQLParserMAIN - 483)) | (1 << (SQLParserMERGES - 483)) | (1 << (SQLParserMFINALFUNC - 483)) | (1 << (SQLParserMFINALFUNC_EXTRA - 483)) | (1 << (SQLParserMFINALFUNC_MODIFY - 483)) | (1 << (SQLParserMINITCOND - 483)) | (1 << (SQLParserMINVFUNC - 483)) | (1 << (SQLParserMODULUS - 483)) | (1 << (SQLParserMSFUNC - 483)) | (1 << (SQLParserMSSPACE - 483)) | (1 << (SQLParserMSTYPE - 483)) | (1 << (SQLParserNEGATOR - 483)) | (1 << (SQLParserNOBYPASSRLS - 483)) | (1 << (SQLParserNOCREATEDB - 483)) | (1 << (SQLParserNOCREATEROLE - 483)) | (1 << (SQLParserNOINHERIT - 483)) | (1 << (SQLParserNOLOGIN - 483)) | (1 << (SQLParserNOREPLICATION - 483)) | (1 << (SQLParserNOSUPERUSER - 483)) | (1 << (SQLParserOUTPUT - 483)))) != 0) || ((((_la - 515)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 515))) & ((1 << (SQLParserPASSEDBYVALUE - 515)) | (1 << (SQLParserPATH - 515)) | (1 << (SQLParserPERMISSIVE - 515)) | (1 << (SQLParserPLAIN - 515)) | (1 << (SQLParserPREFERRED - 515)) | (1 << (SQLParserPROVIDER - 515)) | (1 << (SQLParserREAD_ONLY - 515)) | (1 << (SQLParserREAD_WRITE - 515)) | (1 << (SQLParserRECEIVE - 515)) | (1 << (SQLParserREMAINDER - 515)) | (1 << (SQLParserREPLICATION - 515)) | (1 << (SQLParserRESTRICTED - 515)) | (1 << (SQLParserRESTRICTIVE - 515)) | (1 << (SQLParserRIGHTARG - 515)) | (1 << (SQLParserSAFE - 515)) | (1 << (SQLParserSEND - 515)) | (1 << (SQLParserSERIALFUNC - 515)) | (1 << (SQLParserSETTINGS - 515)) | (1 << (SQLParserSFUNC - 515)) | (1 << (SQLParserSHAREABLE - 515)) | (1 << (SQLParserSKIP_LOCKED - 515)) | (1 << (SQLParserSORTOP - 515)) | (1 << (SQLParserSSPACE - 515)) | (1 << (SQLParserSTYPE - 515)) | (1 << (SQLParserSUBTYPE_DIFF - 515)) | (1 << (SQLParserSUBTYPE_OPCLASS - 515)) | (1 << (SQLParserSUBTYPE - 515)) | (1 << (SQLParserSUMMARY - 515)) | (1 << (SQLParserSUPERUSER - 515)) | (1 << (SQLParserTIMING - 515)) | (1 << (SQLParserTYPMOD_IN - 515)) | (1 << (SQLParserTYPMOD_OUT - 515)))) != 0) || ((((_la - 547)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 547))) & ((1 << (SQLParserUNSAFE - 547)) | (1 << (SQLParserUSAGE - 547)) | (1 << (SQLParserVARIABLE - 547)) | (1 << (SQLParserWAL - 547)) | (1 << (SQLParserYAML - 547)) | (1 << (SQLParserALIAS - 547)) | (1 << (SQLParserASSERT - 547)) | (1 << (SQLParserCONSTANT - 547)) | (1 << (SQLParserDATATYPE - 547)) | (1 << (SQLParserDEBUG - 547)) | (1 << (SQLParserDETAIL - 547)) | (1 << (SQLParserDIAGNOSTICS - 547)) | (1 << (SQLParserELSEIF - 547)) | (1 << (SQLParserELSIF - 547)) | (1 << (SQLParserERRCODE - 547)) | (1 << (SQLParserEXIT - 547)) | (1 << (SQLParserEXCEPTION - 547)) | (1 << (SQLParserFOREACH - 547)) | (1 << (SQLParserGET - 547)) | (1 << (SQLParserHINT - 547)) | (1 << (SQLParserINFO - 547)) | (1 << (SQLParserLOG - 547)) | (1 << (SQLParserLOOP - 547)) | (1 << (SQLParserMESSAGE - 547)) | (1 << (SQLParserNOTICE - 547)) | (1 << (SQLParserOPEN - 547)) | (1 << (SQLParserPERFORM - 547)) | (1 << (SQLParserQUERY - 547)) | (1 << (SQLParserRAISE - 547)) | (1 << (SQLParserRECORD - 547)) | (1 << (SQLParserRETURN - 547)) | (1 << (SQLParserREVERSE - 547)))) != 0) || ((((_la - 579)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 579))) & ((1 << (SQLParserROWTYPE - 579)) | (1 << (SQLParserSLICE - 579)) | (1 << (SQLParserSQLSTATE - 579)) | (1 << (SQLParserSTACKED - 579)) | (1 << (SQLParserWARNING - 579)) | (1 << (SQLParserWHILE - 579)) | (1 << (SQLParserLEFT_PAREN - 579)) | (1 << (SQLParserPLUS - 579)) | (1 << (SQLParserMINUS - 579)) | (1 << (SQLParserMULTIPLY - 579)) | (1 << (SQLParserLEFT_BRACKET - 579)))) != 0) || ((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)) | (1 << (SQLParserNUMBER_LITERAL - 611)) | (1 << (SQLParserREAL_NUMBER - 611)) | (1 << (SQLParserDOLLAR_NUMBER - 611)) | (1 << (SQLParserIdentifier - 611)) | (1 << (SQLParserQuotedIdentifier - 611)) | (1 << (SQLParserCharacter_String_Literal - 611)) | (1 << (SQLParserBeginDollarStringConstant - 611)))) != 0) {
		p.SetState(6576)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALL, SQLParserANY, SQLParserARRAY, SQLParserCASE, SQLParserCAST, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserFALSE, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserON, SQLParserSESSION_USER, SQLParserSOME, SQLParserTRUE, SQLParserUSER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserLEFT_PAREN, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER, SQLParserDOLLAR_NUMBER, SQLParserIdentifier, SQLParserQuotedIdentifier, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(6574)
				p.vex(0)
			}


		case SQLParserLEFT_BRACKET:
			{
				p.SetState(6575)
				p.Array_elements()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(6585)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(6578)
				p.Match(SQLParserCOMMA)
			}
			p.SetState(6581)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALL, SQLParserANY, SQLParserARRAY, SQLParserCASE, SQLParserCAST, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserFALSE, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserON, SQLParserSESSION_USER, SQLParserSOME, SQLParserTRUE, SQLParserUSER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserLEFT_PAREN, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER, SQLParserDOLLAR_NUMBER, SQLParserIdentifier, SQLParserQuotedIdentifier, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
				{
					p.SetState(6579)
					p.vex(0)
				}


			case SQLParserLEFT_BRACKET:
				{
					p.SetState(6580)
					p.Array_elements()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}


			p.SetState(6587)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(6590)
		p.Match(SQLParserRIGHT_BRACKET)
	}



	return localctx
}


// IType_coercionContext is an interface to support dynamic dispatch.
type IType_coercionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_coercionContext differentiates from other interfaces.
	IsType_coercionContext()
}

type Type_coercionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_coercionContext() *Type_coercionContext {
	var p = new(Type_coercionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_type_coercion
	return p
}

func (*Type_coercionContext) IsType_coercionContext() {}

func NewType_coercionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_coercionContext {
	var p = new(Type_coercionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_type_coercion

	return p
}

func (s *Type_coercionContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_coercionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Type_coercionContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Type_coercionContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(SQLParserINTERVAL, 0)
}

func (s *Type_coercionContext) Interval_field() IInterval_fieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_fieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterval_fieldContext)
}

func (s *Type_coercionContext) Type_length() IType_lengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_lengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_lengthContext)
}

func (s *Type_coercionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_coercionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_coercionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterType_coercion(s)
	}
}

func (s *Type_coercionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitType_coercion(s)
	}
}




func (p *SQLParser) Type_coercion() (localctx IType_coercionContext) {
	localctx = NewType_coercionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, SQLParserRULE_type_coercion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6601)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 845, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6592)
			p.Data_type()
		}
		{
			p.SetState(6593)
			p.Character_string()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6595)
			p.Match(SQLParserINTERVAL)
		}
		{
			p.SetState(6596)
			p.Character_string()
		}
		{
			p.SetState(6597)
			p.Interval_field()
		}
		p.SetState(6599)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 844, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6598)
				p.Type_length()
			}


		}

	}


	return localctx
}


// ISchema_qualified_nameContext is an interface to support dynamic dispatch.
type ISchema_qualified_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_qualified_nameContext differentiates from other interfaces.
	IsSchema_qualified_nameContext()
}

type Schema_qualified_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_qualified_nameContext() *Schema_qualified_nameContext {
	var p = new(Schema_qualified_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_schema_qualified_name
	return p
}

func (*Schema_qualified_nameContext) IsSchema_qualified_nameContext() {}

func NewSchema_qualified_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_qualified_nameContext {
	var p = new(Schema_qualified_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_schema_qualified_name

	return p
}

func (s *Schema_qualified_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_qualified_nameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Schema_qualified_nameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Schema_qualified_nameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDOT)
}

func (s *Schema_qualified_nameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDOT, i)
}

func (s *Schema_qualified_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_qualified_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Schema_qualified_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSchema_qualified_name(s)
	}
}

func (s *Schema_qualified_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSchema_qualified_name(s)
	}
}




func (p *SQLParser) Schema_qualified_name() (localctx ISchema_qualified_nameContext) {
	localctx = NewSchema_qualified_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, SQLParserRULE_schema_qualified_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6603)
		p.Identifier()
	}
	p.SetState(6610)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 847, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6604)
			p.Match(SQLParserDOT)
		}
		{
			p.SetState(6605)
			p.Identifier()
		}
		p.SetState(6608)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 846, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6606)
				p.Match(SQLParserDOT)
			}
			{
				p.SetState(6607)
				p.Identifier()
			}


		}


	}



	return localctx
}


// ISet_qualifierContext is an interface to support dynamic dispatch.
type ISet_qualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_qualifierContext differentiates from other interfaces.
	IsSet_qualifierContext()
}

type Set_qualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_qualifierContext() *Set_qualifierContext {
	var p = new(Set_qualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_set_qualifier
	return p
}

func (*Set_qualifierContext) IsSet_qualifierContext() {}

func NewSet_qualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_qualifierContext {
	var p = new(Set_qualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_set_qualifier

	return p
}

func (s *Set_qualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_qualifierContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLParserDISTINCT, 0)
}

func (s *Set_qualifierContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *Set_qualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_qualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Set_qualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSet_qualifier(s)
	}
}

func (s *Set_qualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSet_qualifier(s)
	}
}




func (p *SQLParser) Set_qualifier() (localctx ISet_qualifierContext) {
	localctx = NewSet_qualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, SQLParserRULE_set_qualifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6612)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserALL || _la == SQLParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// ITable_subqueryContext is an interface to support dynamic dispatch.
type ITable_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_subqueryContext differentiates from other interfaces.
	IsTable_subqueryContext()
}

type Table_subqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_subqueryContext() *Table_subqueryContext {
	var p = new(Table_subqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_table_subquery
	return p
}

func (*Table_subqueryContext) IsTable_subqueryContext() {}

func NewTable_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_subqueryContext {
	var p = new(Table_subqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_table_subquery

	return p
}

func (s *Table_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_subqueryContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Table_subqueryContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Table_subqueryContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Table_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Table_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTable_subquery(s)
	}
}

func (s *Table_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTable_subquery(s)
	}
}




func (p *SQLParser) Table_subquery() (localctx ITable_subqueryContext) {
	localctx = NewTable_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, SQLParserRULE_table_subquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6614)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(6615)
		p.Select_stmt()
	}
	{
		p.SetState(6616)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// ISelect_stmtContext is an interface to support dynamic dispatch.
type ISelect_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_stmtContext differentiates from other interfaces.
	IsSelect_stmtContext()
}

type Select_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_stmtContext() *Select_stmtContext {
	var p = new(Select_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_select_stmt
	return p
}

func (*Select_stmtContext) IsSelect_stmtContext() {}

func NewSelect_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_stmtContext {
	var p = new(Select_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_select_stmt

	return p
}

func (s *Select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_stmtContext) Select_ops() ISelect_opsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_opsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_opsContext)
}

func (s *Select_stmtContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Select_stmtContext) AllAfter_ops() []IAfter_opsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAfter_opsContext)(nil)).Elem())
	var tst = make([]IAfter_opsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAfter_opsContext)
		}
	}

	return tst
}

func (s *Select_stmtContext) After_ops(i int) IAfter_opsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAfter_opsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAfter_opsContext)
}

func (s *Select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSelect_stmt(s)
	}
}

func (s *Select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSelect_stmt(s)
	}
}




func (p *SQLParser) Select_stmt() (localctx ISelect_stmtContext) {
	localctx = NewSelect_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, SQLParserRULE_select_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6619)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(6618)
			p.With_clause()
		}

	}
	{
		p.SetState(6621)
		p.select_ops(0)
	}
	p.SetState(6625)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ((((_la - 405)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 405))) & ((1 << (SQLParserFETCH - 405)) | (1 << (SQLParserFOR - 405)) | (1 << (SQLParserLIMIT - 405)) | (1 << (SQLParserOFFSET - 405)) | (1 << (SQLParserORDER - 405)))) != 0) {
		{
			p.SetState(6622)
			p.After_ops()
		}


		p.SetState(6627)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAfter_opsContext is an interface to support dynamic dispatch.
type IAfter_opsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAfter_opsContext differentiates from other interfaces.
	IsAfter_opsContext()
}

type After_opsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAfter_opsContext() *After_opsContext {
	var p = new(After_opsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_after_ops
	return p
}

func (*After_opsContext) IsAfter_opsContext() {}

func NewAfter_opsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *After_opsContext {
	var p = new(After_opsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_after_ops

	return p
}

func (s *After_opsContext) GetParser() antlr.Parser { return s.parser }

func (s *After_opsContext) Orderby_clause() IOrderby_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderby_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderby_clauseContext)
}

func (s *After_opsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserLIMIT, 0)
}

func (s *After_opsContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *After_opsContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLParserALL, 0)
}

func (s *After_opsContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(SQLParserOFFSET, 0)
}

func (s *After_opsContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *After_opsContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SQLParserROWS, 0)
}

func (s *After_opsContext) FETCH() antlr.TerminalNode {
	return s.GetToken(SQLParserFETCH, 0)
}

func (s *After_opsContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SQLParserFIRST, 0)
}

func (s *After_opsContext) NEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserNEXT, 0)
}

func (s *After_opsContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *After_opsContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *After_opsContext) TIES() antlr.TerminalNode {
	return s.GetToken(SQLParserTIES, 0)
}

func (s *After_opsContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *After_opsContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *After_opsContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *After_opsContext) KEY() antlr.TerminalNode {
	return s.GetToken(SQLParserKEY, 0)
}

func (s *After_opsContext) SHARE() antlr.TerminalNode {
	return s.GetToken(SQLParserSHARE, 0)
}

func (s *After_opsContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *After_opsContext) AllSchema_qualified_name() []ISchema_qualified_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem())
	var tst = make([]ISchema_qualified_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISchema_qualified_nameContext)
		}
	}

	return tst
}

func (s *After_opsContext) Schema_qualified_name(i int) ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *After_opsContext) NOWAIT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOWAIT, 0)
}

func (s *After_opsContext) SKIP_() antlr.TerminalNode {
	return s.GetToken(SQLParserSKIP_, 0)
}

func (s *After_opsContext) LOCKED() antlr.TerminalNode {
	return s.GetToken(SQLParserLOCKED, 0)
}

func (s *After_opsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *After_opsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *After_opsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *After_opsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *After_opsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAfter_ops(s)
	}
}

func (s *After_opsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAfter_ops(s)
	}
}




func (p *SQLParser) After_ops() (localctx IAfter_opsContext) {
	localctx = NewAfter_opsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, SQLParserRULE_after_ops)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6676)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserORDER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6628)
			p.Orderby_clause()
		}


	case SQLParserLIMIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6629)
			p.Match(SQLParserLIMIT)
		}
		p.SetState(6632)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 850, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6630)
				p.vex(0)
			}


		case 2:
			{
				p.SetState(6631)
				p.Match(SQLParserALL)
			}

		}


	case SQLParserOFFSET:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6634)
			p.Match(SQLParserOFFSET)
		}
		{
			p.SetState(6635)
			p.vex(0)
		}
		p.SetState(6637)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserROWS || _la == SQLParserROW {
			{
				p.SetState(6636)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserROWS || _la == SQLParserROW) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}


	case SQLParserFETCH:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6639)
			p.Match(SQLParserFETCH)
		}
		{
			p.SetState(6640)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserFIRST || _la == SQLParserNEXT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6642)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 852, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6641)
				p.vex(0)
			}


		}
		{
			p.SetState(6644)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserROWS || _la == SQLParserROW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6648)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 853, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6645)
				p.Match(SQLParserONLY)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 853, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(6646)
				p.Match(SQLParserWITH)
			}
			{
				p.SetState(6647)
				p.Match(SQLParserTIES)
			}


		}


	case SQLParserFOR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6650)
			p.Match(SQLParserFOR)
		}
		p.SetState(6658)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserUPDATE:
			{
				p.SetState(6651)
				p.Match(SQLParserUPDATE)
			}


		case SQLParserNO:
			{
				p.SetState(6652)
				p.Match(SQLParserNO)
			}
			{
				p.SetState(6653)
				p.Match(SQLParserKEY)
			}
			{
				p.SetState(6654)
				p.Match(SQLParserUPDATE)
			}


		case SQLParserSHARE:
			{
				p.SetState(6655)
				p.Match(SQLParserSHARE)
			}


		case SQLParserKEY:
			{
				p.SetState(6656)
				p.Match(SQLParserKEY)
			}
			{
				p.SetState(6657)
				p.Match(SQLParserSHARE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(6669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserOF {
			{
				p.SetState(6660)
				p.Match(SQLParserOF)
			}
			{
				p.SetState(6661)
				p.Schema_qualified_name()
			}
			p.SetState(6666)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(6662)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(6663)
					p.Schema_qualified_name()
				}


				p.SetState(6668)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(6674)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserNOWAIT:
			{
				p.SetState(6671)
				p.Match(SQLParserNOWAIT)
			}


		case SQLParserSKIP_:
			{
				p.SetState(6672)
				p.Match(SQLParserSKIP_)
			}
			{
				p.SetState(6673)
				p.Match(SQLParserLOCKED)
			}


		case SQLParserEOF, SQLParserFETCH, SQLParserFOR, SQLParserLIMIT, SQLParserOFFSET, SQLParserON, SQLParserORDER, SQLParserRETURNING, SQLParserWITH, SQLParserLOOP, SQLParserSEMI_COLON, SQLParserRIGHT_PAREN:



		default:
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISelect_stmt_no_parensContext is an interface to support dynamic dispatch.
type ISelect_stmt_no_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_stmt_no_parensContext differentiates from other interfaces.
	IsSelect_stmt_no_parensContext()
}

type Select_stmt_no_parensContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_stmt_no_parensContext() *Select_stmt_no_parensContext {
	var p = new(Select_stmt_no_parensContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_select_stmt_no_parens
	return p
}

func (*Select_stmt_no_parensContext) IsSelect_stmt_no_parensContext() {}

func NewSelect_stmt_no_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_stmt_no_parensContext {
	var p = new(Select_stmt_no_parensContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_select_stmt_no_parens

	return p
}

func (s *Select_stmt_no_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_stmt_no_parensContext) Select_ops_no_parens() ISelect_ops_no_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_ops_no_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_ops_no_parensContext)
}

func (s *Select_stmt_no_parensContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Select_stmt_no_parensContext) AllAfter_ops() []IAfter_opsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAfter_opsContext)(nil)).Elem())
	var tst = make([]IAfter_opsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAfter_opsContext)
		}
	}

	return tst
}

func (s *Select_stmt_no_parensContext) After_ops(i int) IAfter_opsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAfter_opsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAfter_opsContext)
}

func (s *Select_stmt_no_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_stmt_no_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_stmt_no_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSelect_stmt_no_parens(s)
	}
}

func (s *Select_stmt_no_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSelect_stmt_no_parens(s)
	}
}




func (p *SQLParser) Select_stmt_no_parens() (localctx ISelect_stmt_no_parensContext) {
	localctx = NewSelect_stmt_no_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, SQLParserRULE_select_stmt_no_parens)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6679)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(6678)
			p.With_clause()
		}

	}
	{
		p.SetState(6681)
		p.Select_ops_no_parens()
	}
	p.SetState(6685)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ((((_la - 405)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 405))) & ((1 << (SQLParserFETCH - 405)) | (1 << (SQLParserFOR - 405)) | (1 << (SQLParserLIMIT - 405)) | (1 << (SQLParserOFFSET - 405)) | (1 << (SQLParserORDER - 405)))) != 0) {
		{
			p.SetState(6682)
			p.After_ops()
		}


		p.SetState(6687)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_with_clause
	return p
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *With_clauseContext) AllWith_query() []IWith_queryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWith_queryContext)(nil)).Elem())
	var tst = make([]IWith_queryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWith_queryContext)
		}
	}

	return tst
}

func (s *With_clauseContext) With_query(i int) IWith_queryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_queryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWith_queryContext)
}

func (s *With_clauseContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLParserRECURSIVE, 0)
}

func (s *With_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *With_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitWith_clause(s)
	}
}




func (p *SQLParser) With_clause() (localctx IWith_clauseContext) {
	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, SQLParserRULE_with_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6688)
		p.Match(SQLParserWITH)
	}
	p.SetState(6690)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 861, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6689)
			p.Match(SQLParserRECURSIVE)
		}


	}
	{
		p.SetState(6692)
		p.With_query()
	}
	p.SetState(6697)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(6693)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(6694)
			p.With_query()
		}


		p.SetState(6699)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IWith_queryContext is an interface to support dynamic dispatch.
type IWith_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQuery_name returns the query_name rule contexts.
	GetQuery_name() IIdentifierContext

	// Get_identifier returns the _identifier rule contexts.
	Get_identifier() IIdentifierContext


	// SetQuery_name sets the query_name rule contexts.
	SetQuery_name(IIdentifierContext)

	// Set_identifier sets the _identifier rule contexts.
	Set_identifier(IIdentifierContext)


	// GetColumn_name returns the column_name rule context list.
	GetColumn_name() []IIdentifierContext


	// SetColumn_name sets the column_name rule context list.
	SetColumn_name([]IIdentifierContext) 


	// IsWith_queryContext differentiates from other interfaces.
	IsWith_queryContext()
}

type With_queryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	query_name IIdentifierContext 
	_identifier IIdentifierContext 
	column_name []IIdentifierContext
}

func NewEmptyWith_queryContext() *With_queryContext {
	var p = new(With_queryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_with_query
	return p
}

func (*With_queryContext) IsWith_queryContext() {}

func NewWith_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_queryContext {
	var p = new(With_queryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_with_query

	return p
}

func (s *With_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *With_queryContext) GetQuery_name() IIdentifierContext { return s.query_name }

func (s *With_queryContext) Get_identifier() IIdentifierContext { return s._identifier }


func (s *With_queryContext) SetQuery_name(v IIdentifierContext) { s.query_name = v }

func (s *With_queryContext) Set_identifier(v IIdentifierContext) { s._identifier = v }


func (s *With_queryContext) GetColumn_name() []IIdentifierContext { return s.column_name }


func (s *With_queryContext) SetColumn_name(v []IIdentifierContext) { s.column_name = v }


func (s *With_queryContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *With_queryContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_PAREN)
}

func (s *With_queryContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, i)
}

func (s *With_queryContext) Data_statement() IData_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_statementContext)
}

func (s *With_queryContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_PAREN)
}

func (s *With_queryContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, i)
}

func (s *With_queryContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *With_queryContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *With_queryContext) MATERIALIZED() antlr.TerminalNode {
	return s.GetToken(SQLParserMATERIALIZED, 0)
}

func (s *With_queryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *With_queryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *With_queryContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *With_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *With_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterWith_query(s)
	}
}

func (s *With_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitWith_query(s)
	}
}




func (p *SQLParser) With_query() (localctx IWith_queryContext) {
	localctx = NewWith_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, SQLParserRULE_with_query)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6700)

		var _x = p.Identifier()


		localctx.(*With_queryContext).query_name = _x
	}
	p.SetState(6712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLEFT_PAREN {
		{
			p.SetState(6701)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6702)

			var _x = p.Identifier()


			localctx.(*With_queryContext)._identifier = _x
		}
		localctx.(*With_queryContext).column_name = append(localctx.(*With_queryContext).column_name, localctx.(*With_queryContext)._identifier)
		p.SetState(6707)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(6703)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6704)

				var _x = p.Identifier()


				localctx.(*With_queryContext)._identifier = _x
			}
			localctx.(*With_queryContext).column_name = append(localctx.(*With_queryContext).column_name, localctx.(*With_queryContext)._identifier)


			p.SetState(6709)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6710)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}
	{
		p.SetState(6714)
		p.Match(SQLParserAS)
	}
	p.SetState(6719)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserMATERIALIZED || _la == SQLParserNOT {
		p.SetState(6716)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT {
			{
				p.SetState(6715)
				p.Match(SQLParserNOT)
			}

		}
		{
			p.SetState(6718)
			p.Match(SQLParserMATERIALIZED)
		}

	}
	{
		p.SetState(6721)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(6722)
		p.Data_statement()
	}
	{
		p.SetState(6723)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// ISelect_opsContext is an interface to support dynamic dispatch.
type ISelect_opsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_opsContext differentiates from other interfaces.
	IsSelect_opsContext()
}

type Select_opsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_opsContext() *Select_opsContext {
	var p = new(Select_opsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_select_ops
	return p
}

func (*Select_opsContext) IsSelect_opsContext() {}

func NewSelect_opsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_opsContext {
	var p = new(Select_opsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_select_ops

	return p
}

func (s *Select_opsContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_opsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Select_opsContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Select_opsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Select_opsContext) Select_primary() ISelect_primaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_primaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_primaryContext)
}

func (s *Select_opsContext) AllSelect_ops() []ISelect_opsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_opsContext)(nil)).Elem())
	var tst = make([]ISelect_opsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_opsContext)
		}
	}

	return tst
}

func (s *Select_opsContext) Select_ops(i int) ISelect_opsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_opsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_opsContext)
}

func (s *Select_opsContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLParserINTERSECT, 0)
}

func (s *Select_opsContext) UNION() antlr.TerminalNode {
	return s.GetToken(SQLParserUNION, 0)
}

func (s *Select_opsContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCEPT, 0)
}

func (s *Select_opsContext) Set_qualifier() ISet_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_qualifierContext)
}

func (s *Select_opsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_opsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_opsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSelect_ops(s)
	}
}

func (s *Select_opsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSelect_ops(s)
	}
}





func (p *SQLParser) Select_ops() (localctx ISelect_opsContext) {
	return p.select_ops(0)
}

func (p *SQLParser) select_ops(_p int) (localctx ISelect_opsContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewSelect_opsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISelect_opsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 660
	p.EnterRecursionRule(localctx, 660, SQLParserRULE_select_ops, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6731)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserLEFT_PAREN:
		{
			p.SetState(6726)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6727)
			p.Select_stmt()
		}
		{
			p.SetState(6728)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case SQLParserVALUES, SQLParserSELECT, SQLParserTABLE:
		{
			p.SetState(6730)
			p.Select_primary()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6741)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 869, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewSelect_opsContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_select_ops)
			p.SetState(6733)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(6734)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserEXCEPT || _la == SQLParserINTERSECT || _la == SQLParserUNION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(6736)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserALL || _la == SQLParserDISTINCT {
				{
					p.SetState(6735)
					p.Set_qualifier()
				}

			}
			{
				p.SetState(6738)
				p.select_ops(3)
			}


		}
		p.SetState(6743)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 869, p.GetParserRuleContext())
	}



	return localctx
}


// ISelect_ops_no_parensContext is an interface to support dynamic dispatch.
type ISelect_ops_no_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_ops_no_parensContext differentiates from other interfaces.
	IsSelect_ops_no_parensContext()
}

type Select_ops_no_parensContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_ops_no_parensContext() *Select_ops_no_parensContext {
	var p = new(Select_ops_no_parensContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_select_ops_no_parens
	return p
}

func (*Select_ops_no_parensContext) IsSelect_ops_no_parensContext() {}

func NewSelect_ops_no_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_ops_no_parensContext {
	var p = new(Select_ops_no_parensContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_select_ops_no_parens

	return p
}

func (s *Select_ops_no_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_ops_no_parensContext) Select_ops() ISelect_opsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_opsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_opsContext)
}

func (s *Select_ops_no_parensContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLParserINTERSECT, 0)
}

func (s *Select_ops_no_parensContext) UNION() antlr.TerminalNode {
	return s.GetToken(SQLParserUNION, 0)
}

func (s *Select_ops_no_parensContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCEPT, 0)
}

func (s *Select_ops_no_parensContext) Select_primary() ISelect_primaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_primaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_primaryContext)
}

func (s *Select_ops_no_parensContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Select_ops_no_parensContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Select_ops_no_parensContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Select_ops_no_parensContext) Set_qualifier() ISet_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_qualifierContext)
}

func (s *Select_ops_no_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_ops_no_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_ops_no_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSelect_ops_no_parens(s)
	}
}

func (s *Select_ops_no_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSelect_ops_no_parens(s)
	}
}




func (p *SQLParser) Select_ops_no_parens() (localctx ISelect_ops_no_parensContext) {
	localctx = NewSelect_ops_no_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, SQLParserRULE_select_ops_no_parens)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6757)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 872, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6744)
			p.select_ops(0)
		}
		{
			p.SetState(6745)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserEXCEPT || _la == SQLParserINTERSECT || _la == SQLParserUNION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(6747)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserALL || _la == SQLParserDISTINCT {
			{
				p.SetState(6746)
				p.Set_qualifier()
			}

		}
		p.SetState(6754)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserVALUES, SQLParserSELECT, SQLParserTABLE:
			{
				p.SetState(6749)
				p.Select_primary()
			}


		case SQLParserLEFT_PAREN:
			{
				p.SetState(6750)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(6751)
				p.Select_stmt()
			}
			{
				p.SetState(6752)
				p.Match(SQLParserRIGHT_PAREN)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6756)
			p.Select_primary()
		}

	}


	return localctx
}


// ISelect_primaryContext is an interface to support dynamic dispatch.
type ISelect_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_primaryContext differentiates from other interfaces.
	IsSelect_primaryContext()
}

type Select_primaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_primaryContext() *Select_primaryContext {
	var p = new(Select_primaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_select_primary
	return p
}

func (*Select_primaryContext) IsSelect_primaryContext() {}

func NewSelect_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_primaryContext {
	var p = new(Select_primaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_select_primary

	return p
}

func (s *Select_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_primaryContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SQLParserSELECT, 0)
}

func (s *Select_primaryContext) Set_qualifier() ISet_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_qualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_qualifierContext)
}

func (s *Select_primaryContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Select_primaryContext) Into_table() IInto_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInto_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInto_tableContext)
}

func (s *Select_primaryContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Select_primaryContext) AllFrom_item() []IFrom_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem())
	var tst = make([]IFrom_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrom_itemContext)
		}
	}

	return tst
}

func (s *Select_primaryContext) From_item(i int) IFrom_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *Select_primaryContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Select_primaryContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Select_primaryContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Select_primaryContext) Groupby_clause() IGroupby_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupby_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupby_clauseContext)
}

func (s *Select_primaryContext) HAVING() antlr.TerminalNode {
	return s.GetToken(SQLParserHAVING, 0)
}

func (s *Select_primaryContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(SQLParserWINDOW, 0)
}

func (s *Select_primaryContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Select_primaryContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Select_primaryContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(SQLParserAS)
}

func (s *Select_primaryContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserAS, i)
}

func (s *Select_primaryContext) AllWindow_definition() []IWindow_definitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_definitionContext)(nil)).Elem())
	var tst = make([]IWindow_definitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_definitionContext)
		}
	}

	return tst
}

func (s *Select_primaryContext) Window_definition(i int) IWindow_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_definitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_definitionContext)
}

func (s *Select_primaryContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Select_primaryContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Select_primaryContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Select_primaryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Select_primaryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Select_primaryContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Select_primaryContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Select_primaryContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *Select_primaryContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Select_primaryContext) Values_stmt() IValues_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValues_stmtContext)
}

func (s *Select_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSelect_primary(s)
	}
}

func (s *Select_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSelect_primary(s)
	}
}




func (p *SQLParser) Select_primary() (localctx ISelect_primaryContext) {
	localctx = NewSelect_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, SQLParserRULE_select_primary)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(6830)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserSELECT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6759)
			p.Match(SQLParserSELECT)
		}
		p.SetState(6775)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 875, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6760)
				p.Set_qualifier()
			}
			p.SetState(6773)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 874, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(6761)
					p.Match(SQLParserON)
				}
				{
					p.SetState(6762)
					p.Match(SQLParserLEFT_PAREN)
				}
				{
					p.SetState(6763)
					p.vex(0)
				}
				p.SetState(6768)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SQLParserCOMMA {
					{
						p.SetState(6764)
						p.Match(SQLParserCOMMA)
					}
					{
						p.SetState(6765)
						p.vex(0)
					}


					p.SetState(6770)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(6771)
					p.Match(SQLParserRIGHT_PAREN)
				}


			}


		}
		p.SetState(6778)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 876, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6777)
				p.Select_list()
			}


		}
		p.SetState(6781)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 877, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6780)
				p.Into_table()
			}


		}
		p.SetState(6792)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 879, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6783)
				p.Match(SQLParserFROM)
			}
			{
				p.SetState(6784)
				p.from_item(0)
			}
			p.SetState(6789)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 878, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(6785)
						p.Match(SQLParserCOMMA)
					}
					{
						p.SetState(6786)
						p.from_item(0)
					}


				}
				p.SetState(6791)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 878, p.GetParserRuleContext())
			}


		}
		p.SetState(6796)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 880, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6794)
				p.Match(SQLParserWHERE)
			}
			{
				p.SetState(6795)
				p.vex(0)
			}


		}
		p.SetState(6799)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 881, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6798)
				p.Groupby_clause()
			}


		}
		p.SetState(6803)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 882, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6801)
				p.Match(SQLParserHAVING)
			}
			{
				p.SetState(6802)
				p.vex(0)
			}


		}
		p.SetState(6819)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 884, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6805)
				p.Match(SQLParserWINDOW)
			}
			{
				p.SetState(6806)
				p.Identifier()
			}
			{
				p.SetState(6807)
				p.Match(SQLParserAS)
			}
			{
				p.SetState(6808)
				p.Window_definition()
			}
			p.SetState(6816)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 883, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(6809)
						p.Match(SQLParserCOMMA)
					}
					{
						p.SetState(6810)
						p.Identifier()
					}
					{
						p.SetState(6811)
						p.Match(SQLParserAS)
					}
					{
						p.SetState(6812)
						p.Window_definition()
					}


				}
				p.SetState(6818)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 883, p.GetParserRuleContext())
			}


		}


	case SQLParserTABLE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6821)
			p.Match(SQLParserTABLE)
		}
		p.SetState(6823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserONLY {
			{
				p.SetState(6822)
				p.Match(SQLParserONLY)
			}

		}
		{
			p.SetState(6825)
			p.Schema_qualified_name()
		}
		p.SetState(6827)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 886, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6826)
				p.Match(SQLParserMULTIPLY)
			}


		}


	case SQLParserVALUES:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6829)
			p.Values_stmt()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_select_list
	return p
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_sublist() []ISelect_sublistContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_sublistContext)(nil)).Elem())
	var tst = make([]ISelect_sublistContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_sublistContext)
		}
	}

	return tst
}

func (s *Select_listContext) Select_sublist(i int) ISelect_sublistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_sublistContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_sublistContext)
}

func (s *Select_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Select_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSelect_list(s)
	}
}




func (p *SQLParser) Select_list() (localctx ISelect_listContext) {
	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, SQLParserRULE_select_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6832)
		p.Select_sublist()
	}
	p.SetState(6837)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 888, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6833)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6834)
				p.Select_sublist()
			}


		}
		p.SetState(6839)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 888, p.GetParserRuleContext())
	}



	return localctx
}


// ISelect_sublistContext is an interface to support dynamic dispatch.
type ISelect_sublistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_sublistContext differentiates from other interfaces.
	IsSelect_sublistContext()
}

type Select_sublistContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_sublistContext() *Select_sublistContext {
	var p = new(Select_sublistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_select_sublist
	return p
}

func (*Select_sublistContext) IsSelect_sublistContext() {}

func NewSelect_sublistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_sublistContext {
	var p = new(Select_sublistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_select_sublist

	return p
}

func (s *Select_sublistContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_sublistContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Select_sublistContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Select_sublistContext) Col_label() ICol_labelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICol_labelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICol_labelContext)
}

func (s *Select_sublistContext) Id_token() IId_tokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_tokenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_tokenContext)
}

func (s *Select_sublistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_sublistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Select_sublistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSelect_sublist(s)
	}
}

func (s *Select_sublistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSelect_sublist(s)
	}
}




func (p *SQLParser) Select_sublist() (localctx ISelect_sublistContext) {
	localctx = NewSelect_sublistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, SQLParserRULE_select_sublist)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6840)
		p.vex(0)
	}
	p.SetState(6844)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 889, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6841)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(6842)
			p.Col_label()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 889, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(6843)
			p.Id_token()
		}


	}



	return localctx
}


// IInto_tableContext is an interface to support dynamic dispatch.
type IInto_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInto_tableContext differentiates from other interfaces.
	IsInto_tableContext()
}

type Into_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInto_tableContext() *Into_tableContext {
	var p = new(Into_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_into_table
	return p
}

func (*Into_tableContext) IsInto_tableContext() {}

func NewInto_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Into_tableContext {
	var p = new(Into_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_into_table

	return p
}

func (s *Into_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Into_tableContext) INTO() antlr.TerminalNode {
	return s.GetToken(SQLParserINTO, 0)
}

func (s *Into_tableContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Into_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Into_tableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMPORARY, 0)
}

func (s *Into_tableContext) TEMP() antlr.TerminalNode {
	return s.GetToken(SQLParserTEMP, 0)
}

func (s *Into_tableContext) UNLOGGED() antlr.TerminalNode {
	return s.GetToken(SQLParserUNLOGGED, 0)
}

func (s *Into_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Into_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Into_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterInto_table(s)
	}
}

func (s *Into_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitInto_table(s)
	}
}




func (p *SQLParser) Into_table() (localctx IInto_tableContext) {
	localctx = NewInto_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, SQLParserRULE_into_table)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6846)
		p.Match(SQLParserINTO)
	}
	p.SetState(6848)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 890, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6847)
			_la = p.GetTokenStream().LA(1)

			if !(((((_la - 259)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 259))) & ((1 << (SQLParserTEMP - 259)) | (1 << (SQLParserTEMPORARY - 259)) | (1 << (SQLParserUNLOGGED - 259)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}


	}
	p.SetState(6851)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTABLE {
		{
			p.SetState(6850)
			p.Match(SQLParserTABLE)
		}

	}
	{
		p.SetState(6853)
		p.Schema_qualified_name()
	}



	return localctx
}


// IFrom_itemContext is an interface to support dynamic dispatch.
type IFrom_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrom_itemContext differentiates from other interfaces.
	IsFrom_itemContext()
}

type From_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_itemContext() *From_itemContext {
	var p = new(From_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_from_item
	return p
}

func (*From_itemContext) IsFrom_itemContext() {}

func NewFrom_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_itemContext {
	var p = new(From_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_from_item

	return p
}

func (s *From_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *From_itemContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *From_itemContext) AllFrom_item() []IFrom_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem())
	var tst = make([]IFrom_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrom_itemContext)
		}
	}

	return tst
}

func (s *From_itemContext) From_item(i int) IFrom_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *From_itemContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *From_itemContext) Alias_clause() IAlias_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlias_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlias_clauseContext)
}

func (s *From_itemContext) From_primary() IFrom_primaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_primaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrom_primaryContext)
}

func (s *From_itemContext) CROSS() antlr.TerminalNode {
	return s.GetToken(SQLParserCROSS, 0)
}

func (s *From_itemContext) JOIN() antlr.TerminalNode {
	return s.GetToken(SQLParserJOIN, 0)
}

func (s *From_itemContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNATURAL, 0)
}

func (s *From_itemContext) INNER() antlr.TerminalNode {
	return s.GetToken(SQLParserINNER, 0)
}

func (s *From_itemContext) LEFT() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT, 0)
}

func (s *From_itemContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT, 0)
}

func (s *From_itemContext) FULL() antlr.TerminalNode {
	return s.GetToken(SQLParserFULL, 0)
}

func (s *From_itemContext) OUTER() antlr.TerminalNode {
	return s.GetToken(SQLParserOUTER, 0)
}

func (s *From_itemContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *From_itemContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *From_itemContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *From_itemContext) Names_in_parens() INames_in_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INames_in_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INames_in_parensContext)
}

func (s *From_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *From_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFrom_item(s)
	}
}

func (s *From_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFrom_item(s)
	}
}





func (p *SQLParser) From_item() (localctx IFrom_itemContext) {
	return p.from_item(0)
}

func (p *SQLParser) from_item(_p int) (localctx IFrom_itemContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewFrom_itemContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFrom_itemContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 672
	p.EnterRecursionRule(localctx, 672, SQLParserRULE_from_item, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6863)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 893, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6856)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6857)
			p.from_item(0)
		}
		{
			p.SetState(6858)
			p.Match(SQLParserRIGHT_PAREN)
		}
		p.SetState(6860)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 892, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6859)
				p.Alias_clause()
			}


		}


	case 2:
		{
			p.SetState(6862)
			p.From_primary()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6908)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 901, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(6906)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 900, p.GetParserRuleContext()) {
			case 1:
				localctx = NewFrom_itemContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_from_item)
				p.SetState(6865)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(6866)
					p.Match(SQLParserCROSS)
				}
				{
					p.SetState(6867)
					p.Match(SQLParserJOIN)
				}
				{
					p.SetState(6868)
					p.from_item(6)
				}


			case 2:
				localctx = NewFrom_itemContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_from_item)
				p.SetState(6869)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(6870)
					p.Match(SQLParserNATURAL)
				}
				p.SetState(6876)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserINNER:
					{
						p.SetState(6871)
						p.Match(SQLParserINNER)
					}


				case SQLParserFULL, SQLParserLEFT, SQLParserRIGHT:
					{
						p.SetState(6872)
						_la = p.GetTokenStream().LA(1)

						if !(((((_la - 358)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 358))) & ((1 << (SQLParserFULL - 358)) | (1 << (SQLParserLEFT - 358)) | (1 << (SQLParserRIGHT - 358)))) != 0)) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}
					p.SetState(6874)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					if _la == SQLParserOUTER {
						{
							p.SetState(6873)
							p.Match(SQLParserOUTER)
						}

					}


				case SQLParserJOIN:



				default:
				}
				{
					p.SetState(6878)
					p.Match(SQLParserJOIN)
				}
				{
					p.SetState(6879)
					p.from_item(3)
				}


			case 3:
				localctx = NewFrom_itemContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_from_item)
				p.SetState(6880)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(6886)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserINNER:
					{
						p.SetState(6881)
						p.Match(SQLParserINNER)
					}


				case SQLParserFULL, SQLParserLEFT, SQLParserRIGHT:
					{
						p.SetState(6882)
						_la = p.GetTokenStream().LA(1)

						if !(((((_la - 358)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 358))) & ((1 << (SQLParserFULL - 358)) | (1 << (SQLParserLEFT - 358)) | (1 << (SQLParserRIGHT - 358)))) != 0)) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}
					p.SetState(6884)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					if _la == SQLParserOUTER {
						{
							p.SetState(6883)
							p.Match(SQLParserOUTER)
						}

					}


				case SQLParserJOIN:



				default:
				}
				{
					p.SetState(6888)
					p.Match(SQLParserJOIN)
				}
				{
					p.SetState(6889)
					p.from_item(0)
				}
				{
					p.SetState(6890)
					p.Match(SQLParserON)
				}
				{
					p.SetState(6891)
					p.vex(0)
				}


			case 4:
				localctx = NewFrom_itemContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLParserRULE_from_item)
				p.SetState(6893)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(6899)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserINNER:
					{
						p.SetState(6894)
						p.Match(SQLParserINNER)
					}


				case SQLParserFULL, SQLParserLEFT, SQLParserRIGHT:
					{
						p.SetState(6895)
						_la = p.GetTokenStream().LA(1)

						if !(((((_la - 358)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 358))) & ((1 << (SQLParserFULL - 358)) | (1 << (SQLParserLEFT - 358)) | (1 << (SQLParserRIGHT - 358)))) != 0)) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}
					}
					p.SetState(6897)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					if _la == SQLParserOUTER {
						{
							p.SetState(6896)
							p.Match(SQLParserOUTER)
						}

					}


				case SQLParserJOIN:



				default:
				}
				{
					p.SetState(6901)
					p.Match(SQLParserJOIN)
				}
				{
					p.SetState(6902)
					p.from_item(0)
				}
				{
					p.SetState(6903)
					p.Match(SQLParserUSING)
				}
				{
					p.SetState(6904)
					p.Names_in_parens()
				}

			}

		}
		p.SetState(6910)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 901, p.GetParserRuleContext())
	}



	return localctx
}


// IFrom_primaryContext is an interface to support dynamic dispatch.
type IFrom_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMethod returns the method rule contexts.
	GetMethod() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// Get_identifier returns the _identifier rule contexts.
	Get_identifier() IIdentifierContext


	// SetMethod sets the method rule contexts.
	SetMethod(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// Set_identifier sets the _identifier rule contexts.
	Set_identifier(IIdentifierContext)


	// GetColumn_alias returns the column_alias rule context list.
	GetColumn_alias() []IIdentifierContext


	// SetColumn_alias sets the column_alias rule context list.
	SetColumn_alias([]IIdentifierContext) 


	// IsFrom_primaryContext differentiates from other interfaces.
	IsFrom_primaryContext()
}

type From_primaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	method IIdentifierContext 
	alias IIdentifierContext 
	_identifier IIdentifierContext 
	column_alias []IIdentifierContext
}

func NewEmptyFrom_primaryContext() *From_primaryContext {
	var p = new(From_primaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_from_primary
	return p
}

func (*From_primaryContext) IsFrom_primaryContext() {}

func NewFrom_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_primaryContext {
	var p = new(From_primaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_from_primary

	return p
}

func (s *From_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *From_primaryContext) GetMethod() IIdentifierContext { return s.method }

func (s *From_primaryContext) GetAlias() IIdentifierContext { return s.alias }

func (s *From_primaryContext) Get_identifier() IIdentifierContext { return s._identifier }


func (s *From_primaryContext) SetMethod(v IIdentifierContext) { s.method = v }

func (s *From_primaryContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *From_primaryContext) Set_identifier(v IIdentifierContext) { s._identifier = v }


func (s *From_primaryContext) GetColumn_alias() []IIdentifierContext { return s.column_alias }


func (s *From_primaryContext) SetColumn_alias(v []IIdentifierContext) { s.column_alias = v }


func (s *From_primaryContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *From_primaryContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *From_primaryContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *From_primaryContext) Alias_clause() IAlias_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlias_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlias_clauseContext)
}

func (s *From_primaryContext) TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLESAMPLE, 0)
}

func (s *From_primaryContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_PAREN)
}

func (s *From_primaryContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, i)
}

func (s *From_primaryContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *From_primaryContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *From_primaryContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_PAREN)
}

func (s *From_primaryContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, i)
}

func (s *From_primaryContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *From_primaryContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *From_primaryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *From_primaryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *From_primaryContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserREPEATABLE, 0)
}

func (s *From_primaryContext) Table_subquery() ITable_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_subqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_subqueryContext)
}

func (s *From_primaryContext) LATERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserLATERAL, 0)
}

func (s *From_primaryContext) AllFunction_call() []IFunction_callContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_callContext)(nil)).Elem())
	var tst = make([]IFunction_callContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_callContext)
		}
	}

	return tst
}

func (s *From_primaryContext) Function_call(i int) IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *From_primaryContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLParserWITH, 0)
}

func (s *From_primaryContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(SQLParserORDINALITY, 0)
}

func (s *From_primaryContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(SQLParserAS)
}

func (s *From_primaryContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserAS, i)
}

func (s *From_primaryContext) AllFrom_function_column_def() []IFrom_function_column_defContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrom_function_column_defContext)(nil)).Elem())
	var tst = make([]IFrom_function_column_defContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrom_function_column_defContext)
		}
	}

	return tst
}

func (s *From_primaryContext) From_function_column_def(i int) IFrom_function_column_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_function_column_defContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrom_function_column_defContext)
}

func (s *From_primaryContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SQLParserROWS, 0)
}

func (s *From_primaryContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *From_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *From_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFrom_primary(s)
	}
}

func (s *From_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFrom_primary(s)
	}
}




func (p *SQLParser) From_primary() (localctx IFrom_primaryContext) {
	localctx = NewFrom_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 674, SQLParserRULE_from_primary)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7021)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 924, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(6912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserONLY {
			{
				p.SetState(6911)
				p.Match(SQLParserONLY)
			}

		}
		{
			p.SetState(6914)
			p.Schema_qualified_name()
		}
		p.SetState(6916)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 903, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6915)
				p.Match(SQLParserMULTIPLY)
			}


		}
		p.SetState(6919)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 904, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6918)
				p.Alias_clause()
			}


		}
		p.SetState(6937)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 907, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6921)
				p.Match(SQLParserTABLESAMPLE)
			}
			{
				p.SetState(6922)

				var _x = p.Identifier()


				localctx.(*From_primaryContext).method = _x
			}
			{
				p.SetState(6923)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(6924)
				p.vex(0)
			}
			p.SetState(6929)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(6925)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(6926)
					p.vex(0)
				}


				p.SetState(6931)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(6932)
				p.Match(SQLParserRIGHT_PAREN)
			}
			p.SetState(6935)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 906, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(6933)
					p.Match(SQLParserREPEATABLE)
				}
				{
					p.SetState(6934)
					p.vex(0)
				}


			}


		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(6940)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLATERAL {
			{
				p.SetState(6939)
				p.Match(SQLParserLATERAL)
			}

		}
		{
			p.SetState(6942)
			p.Table_subquery()
		}
		{
			p.SetState(6943)
			p.Alias_clause()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(6946)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLATERAL {
			{
				p.SetState(6945)
				p.Match(SQLParserLATERAL)
			}

		}
		{
			p.SetState(6948)
			p.Function_call()
		}
		p.SetState(6951)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 910, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6949)
				p.Match(SQLParserWITH)
			}
			{
				p.SetState(6950)
				p.Match(SQLParserORDINALITY)
			}


		}
		p.SetState(6973)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 914, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6953)
				p.Match(SQLParserAS)
			}
			{
				p.SetState(6954)
				p.From_function_column_def()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 914, p.GetParserRuleContext()) == 2 {
			p.SetState(6956)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserAS {
				{
					p.SetState(6955)
					p.Match(SQLParserAS)
				}

			}
			{
				p.SetState(6958)

				var _x = p.Identifier()


				localctx.(*From_primaryContext).alias = _x
			}
			p.SetState(6971)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 913, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(6959)
					p.Match(SQLParserLEFT_PAREN)
				}
				{
					p.SetState(6960)

					var _x = p.Identifier()


					localctx.(*From_primaryContext)._identifier = _x
				}
				localctx.(*From_primaryContext).column_alias = append(localctx.(*From_primaryContext).column_alias, localctx.(*From_primaryContext)._identifier)
				p.SetState(6965)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SQLParserCOMMA {
					{
						p.SetState(6961)
						p.Match(SQLParserCOMMA)
					}
					{
						p.SetState(6962)

						var _x = p.Identifier()


						localctx.(*From_primaryContext)._identifier = _x
					}
					localctx.(*From_primaryContext).column_alias = append(localctx.(*From_primaryContext).column_alias, localctx.(*From_primaryContext)._identifier)


					p.SetState(6967)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(6968)
					p.Match(SQLParserRIGHT_PAREN)
				}

			} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 913, p.GetParserRuleContext()) == 2 {
				{
					p.SetState(6970)
					p.From_function_column_def()
				}


			}


		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(6976)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLATERAL {
			{
				p.SetState(6975)
				p.Match(SQLParserLATERAL)
			}

		}
		{
			p.SetState(6978)
			p.Match(SQLParserROWS)
		}
		{
			p.SetState(6979)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(6980)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(6981)
			p.Function_call()
		}
		p.SetState(6984)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAS {
			{
				p.SetState(6982)
				p.Match(SQLParserAS)
			}
			{
				p.SetState(6983)
				p.From_function_column_def()
			}

		}
		p.SetState(6994)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(6986)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(6987)
				p.Function_call()
			}
			p.SetState(6990)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserAS {
				{
					p.SetState(6988)
					p.Match(SQLParserAS)
				}
				{
					p.SetState(6989)
					p.From_function_column_def()
				}

			}


			p.SetState(6996)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6997)
			p.Match(SQLParserRIGHT_PAREN)
		}
		p.SetState(7000)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 919, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6998)
				p.Match(SQLParserWITH)
			}
			{
				p.SetState(6999)
				p.Match(SQLParserORDINALITY)
			}


		}
		p.SetState(7019)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 923, p.GetParserRuleContext()) == 1 {
			p.SetState(7003)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserAS {
				{
					p.SetState(7002)
					p.Match(SQLParserAS)
				}

			}
			{
				p.SetState(7005)
				p.Identifier()
			}
			p.SetState(7017)
			p.GetErrorHandler().Sync(p)


			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 922, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(7006)
					p.Match(SQLParserLEFT_PAREN)
				}
				{
					p.SetState(7007)
					p.Identifier()
				}
				p.SetState(7012)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == SQLParserCOMMA {
					{
						p.SetState(7008)
						p.Match(SQLParserCOMMA)
					}
					{
						p.SetState(7009)
						p.Identifier()
					}


					p.SetState(7014)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(7015)
					p.Match(SQLParserRIGHT_PAREN)
				}


			}


		}

	}


	return localctx
}


// IAlias_clauseContext is an interface to support dynamic dispatch.
type IAlias_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// Get_identifier returns the _identifier rule contexts.
	Get_identifier() IIdentifierContext


	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// Set_identifier sets the _identifier rule contexts.
	Set_identifier(IIdentifierContext)


	// GetColumn_alias returns the column_alias rule context list.
	GetColumn_alias() []IIdentifierContext


	// SetColumn_alias sets the column_alias rule context list.
	SetColumn_alias([]IIdentifierContext) 


	// IsAlias_clauseContext differentiates from other interfaces.
	IsAlias_clauseContext()
}

type Alias_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	alias IIdentifierContext 
	_identifier IIdentifierContext 
	column_alias []IIdentifierContext
}

func NewEmptyAlias_clauseContext() *Alias_clauseContext {
	var p = new(Alias_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_alias_clause
	return p
}

func (*Alias_clauseContext) IsAlias_clauseContext() {}

func NewAlias_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alias_clauseContext {
	var p = new(Alias_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_alias_clause

	return p
}

func (s *Alias_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alias_clauseContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Alias_clauseContext) Get_identifier() IIdentifierContext { return s._identifier }


func (s *Alias_clauseContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Alias_clauseContext) Set_identifier(v IIdentifierContext) { s._identifier = v }


func (s *Alias_clauseContext) GetColumn_alias() []IIdentifierContext { return s.column_alias }


func (s *Alias_clauseContext) SetColumn_alias(v []IIdentifierContext) { s.column_alias = v }


func (s *Alias_clauseContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Alias_clauseContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alias_clauseContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Alias_clauseContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Alias_clauseContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Alias_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Alias_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Alias_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alias_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Alias_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAlias_clause(s)
	}
}

func (s *Alias_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAlias_clause(s)
	}
}




func (p *SQLParser) Alias_clause() (localctx IAlias_clauseContext) {
	localctx = NewAlias_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 676, SQLParserRULE_alias_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7024)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserAS {
		{
			p.SetState(7023)
			p.Match(SQLParserAS)
		}

	}
	{
		p.SetState(7026)

		var _x = p.Identifier()


		localctx.(*Alias_clauseContext).alias = _x
	}
	p.SetState(7038)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 927, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7027)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(7028)

			var _x = p.Identifier()


			localctx.(*Alias_clauseContext)._identifier = _x
		}
		localctx.(*Alias_clauseContext).column_alias = append(localctx.(*Alias_clauseContext).column_alias, localctx.(*Alias_clauseContext)._identifier)
		p.SetState(7033)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7029)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7030)

				var _x = p.Identifier()


				localctx.(*Alias_clauseContext)._identifier = _x
			}
			localctx.(*Alias_clauseContext).column_alias = append(localctx.(*Alias_clauseContext).column_alias, localctx.(*Alias_clauseContext)._identifier)


			p.SetState(7035)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(7036)
			p.Match(SQLParserRIGHT_PAREN)
		}


	}



	return localctx
}


// IFrom_function_column_defContext is an interface to support dynamic dispatch.
type IFrom_function_column_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifier returns the _identifier rule contexts.
	Get_identifier() IIdentifierContext


	// Set_identifier sets the _identifier rule contexts.
	Set_identifier(IIdentifierContext)


	// GetColumn_alias returns the column_alias rule context list.
	GetColumn_alias() []IIdentifierContext


	// SetColumn_alias sets the column_alias rule context list.
	SetColumn_alias([]IIdentifierContext) 


	// IsFrom_function_column_defContext differentiates from other interfaces.
	IsFrom_function_column_defContext()
}

type From_function_column_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	_identifier IIdentifierContext 
	column_alias []IIdentifierContext
}

func NewEmptyFrom_function_column_defContext() *From_function_column_defContext {
	var p = new(From_function_column_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_from_function_column_def
	return p
}

func (*From_function_column_defContext) IsFrom_function_column_defContext() {}

func NewFrom_function_column_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_function_column_defContext {
	var p = new(From_function_column_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_from_function_column_def

	return p
}

func (s *From_function_column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *From_function_column_defContext) Get_identifier() IIdentifierContext { return s._identifier }


func (s *From_function_column_defContext) Set_identifier(v IIdentifierContext) { s._identifier = v }


func (s *From_function_column_defContext) GetColumn_alias() []IIdentifierContext { return s.column_alias }


func (s *From_function_column_defContext) SetColumn_alias(v []IIdentifierContext) { s.column_alias = v }


func (s *From_function_column_defContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *From_function_column_defContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *From_function_column_defContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *From_function_column_defContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *From_function_column_defContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *From_function_column_defContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *From_function_column_defContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *From_function_column_defContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *From_function_column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_function_column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *From_function_column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFrom_function_column_def(s)
	}
}

func (s *From_function_column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFrom_function_column_def(s)
	}
}




func (p *SQLParser) From_function_column_def() (localctx IFrom_function_column_defContext) {
	localctx = NewFrom_function_column_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 678, SQLParserRULE_from_function_column_def)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7040)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(7041)

		var _x = p.Identifier()


		localctx.(*From_function_column_defContext)._identifier = _x
	}
	localctx.(*From_function_column_defContext).column_alias = append(localctx.(*From_function_column_defContext).column_alias, localctx.(*From_function_column_defContext)._identifier)
	{
		p.SetState(7042)
		p.Data_type()
	}
	p.SetState(7049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7043)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7044)

			var _x = p.Identifier()


			localctx.(*From_function_column_defContext)._identifier = _x
		}
		localctx.(*From_function_column_defContext).column_alias = append(localctx.(*From_function_column_defContext).column_alias, localctx.(*From_function_column_defContext)._identifier)
		{
			p.SetState(7045)
			p.Data_type()
		}


		p.SetState(7051)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7052)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IGroupby_clauseContext is an interface to support dynamic dispatch.
type IGroupby_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupby_clauseContext differentiates from other interfaces.
	IsGroupby_clauseContext()
}

type Groupby_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupby_clauseContext() *Groupby_clauseContext {
	var p = new(Groupby_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_groupby_clause
	return p
}

func (*Groupby_clauseContext) IsGroupby_clauseContext() {}

func NewGroupby_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Groupby_clauseContext {
	var p = new(Groupby_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_groupby_clause

	return p
}

func (s *Groupby_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Groupby_clauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUP, 0)
}

func (s *Groupby_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Groupby_clauseContext) Grouping_element_list() IGrouping_element_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrouping_element_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrouping_element_listContext)
}

func (s *Groupby_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Groupby_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Groupby_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterGroupby_clause(s)
	}
}

func (s *Groupby_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitGroupby_clause(s)
	}
}




func (p *SQLParser) Groupby_clause() (localctx IGroupby_clauseContext) {
	localctx = NewGroupby_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, SQLParserRULE_groupby_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7054)
		p.Match(SQLParserGROUP)
	}
	{
		p.SetState(7055)
		p.Match(SQLParserBY)
	}
	{
		p.SetState(7056)
		p.Grouping_element_list()
	}



	return localctx
}


// IGrouping_element_listContext is an interface to support dynamic dispatch.
type IGrouping_element_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrouping_element_listContext differentiates from other interfaces.
	IsGrouping_element_listContext()
}

type Grouping_element_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_element_listContext() *Grouping_element_listContext {
	var p = new(Grouping_element_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_grouping_element_list
	return p
}

func (*Grouping_element_listContext) IsGrouping_element_listContext() {}

func NewGrouping_element_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_element_listContext {
	var p = new(Grouping_element_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_grouping_element_list

	return p
}

func (s *Grouping_element_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_element_listContext) AllGrouping_element() []IGrouping_elementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGrouping_elementContext)(nil)).Elem())
	var tst = make([]IGrouping_elementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGrouping_elementContext)
		}
	}

	return tst
}

func (s *Grouping_element_listContext) Grouping_element(i int) IGrouping_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrouping_elementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGrouping_elementContext)
}

func (s *Grouping_element_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Grouping_element_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Grouping_element_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_element_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Grouping_element_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterGrouping_element_list(s)
	}
}

func (s *Grouping_element_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitGrouping_element_list(s)
	}
}




func (p *SQLParser) Grouping_element_list() (localctx IGrouping_element_listContext) {
	localctx = NewGrouping_element_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 682, SQLParserRULE_grouping_element_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7058)
		p.Grouping_element()
	}
	p.SetState(7063)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 929, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(7059)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7060)
				p.Grouping_element()
			}


		}
		p.SetState(7065)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 929, p.GetParserRuleContext())
	}



	return localctx
}


// IGrouping_elementContext is an interface to support dynamic dispatch.
type IGrouping_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrouping_elementContext differentiates from other interfaces.
	IsGrouping_elementContext()
}

type Grouping_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_elementContext() *Grouping_elementContext {
	var p = new(Grouping_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_grouping_element
	return p
}

func (*Grouping_elementContext) IsGrouping_elementContext() {}

func NewGrouping_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_elementContext {
	var p = new(Grouping_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_grouping_element

	return p
}

func (s *Grouping_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_elementContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Grouping_elementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Grouping_elementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Grouping_elementContext) Grouping_element_list() IGrouping_element_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrouping_element_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrouping_element_listContext)
}

func (s *Grouping_elementContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(SQLParserROLLUP, 0)
}

func (s *Grouping_elementContext) CUBE() antlr.TerminalNode {
	return s.GetToken(SQLParserCUBE, 0)
}

func (s *Grouping_elementContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(SQLParserGROUPING, 0)
}

func (s *Grouping_elementContext) SETS() antlr.TerminalNode {
	return s.GetToken(SQLParserSETS, 0)
}

func (s *Grouping_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Grouping_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterGrouping_element(s)
	}
}

func (s *Grouping_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitGrouping_element(s)
	}
}




func (p *SQLParser) Grouping_element() (localctx IGrouping_elementContext) {
	localctx = NewGrouping_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 684, SQLParserRULE_grouping_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7079)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 931, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7066)
			p.vex(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7067)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(7068)
			p.Match(SQLParserRIGHT_PAREN)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(7073)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserROLLUP:
			{
				p.SetState(7069)
				p.Match(SQLParserROLLUP)
			}


		case SQLParserCUBE:
			{
				p.SetState(7070)
				p.Match(SQLParserCUBE)
			}


		case SQLParserGROUPING:
			{
				p.SetState(7071)
				p.Match(SQLParserGROUPING)
			}
			{
				p.SetState(7072)
				p.Match(SQLParserSETS)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(7075)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(7076)
			p.Grouping_element_list()
		}
		{
			p.SetState(7077)
			p.Match(SQLParserRIGHT_PAREN)
		}

	}


	return localctx
}


// IValues_stmtContext is an interface to support dynamic dispatch.
type IValues_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValues_stmtContext differentiates from other interfaces.
	IsValues_stmtContext()
}

type Values_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValues_stmtContext() *Values_stmtContext {
	var p = new(Values_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_values_stmt
	return p
}

func (*Values_stmtContext) IsValues_stmtContext() {}

func NewValues_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Values_stmtContext {
	var p = new(Values_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_values_stmt

	return p
}

func (s *Values_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Values_stmtContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SQLParserVALUES, 0)
}

func (s *Values_stmtContext) AllValues_values() []IValues_valuesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValues_valuesContext)(nil)).Elem())
	var tst = make([]IValues_valuesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValues_valuesContext)
		}
	}

	return tst
}

func (s *Values_stmtContext) Values_values(i int) IValues_valuesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValues_valuesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValues_valuesContext)
}

func (s *Values_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Values_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Values_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Values_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Values_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterValues_stmt(s)
	}
}

func (s *Values_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitValues_stmt(s)
	}
}




func (p *SQLParser) Values_stmt() (localctx IValues_stmtContext) {
	localctx = NewValues_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, SQLParserRULE_values_stmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7081)
		p.Match(SQLParserVALUES)
	}
	{
		p.SetState(7082)
		p.Values_values()
	}
	p.SetState(7087)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 932, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(7083)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7084)
				p.Values_values()
			}


		}
		p.SetState(7089)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 932, p.GetParserRuleContext())
	}



	return localctx
}


// IValues_valuesContext is an interface to support dynamic dispatch.
type IValues_valuesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValues_valuesContext differentiates from other interfaces.
	IsValues_valuesContext()
}

type Values_valuesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValues_valuesContext() *Values_valuesContext {
	var p = new(Values_valuesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_values_values
	return p
}

func (*Values_valuesContext) IsValues_valuesContext() {}

func NewValues_valuesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Values_valuesContext {
	var p = new(Values_valuesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_values_values

	return p
}

func (s *Values_valuesContext) GetParser() antlr.Parser { return s.parser }

func (s *Values_valuesContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Values_valuesContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Values_valuesContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Values_valuesContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Values_valuesContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDEFAULT)
}

func (s *Values_valuesContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, i)
}

func (s *Values_valuesContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Values_valuesContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Values_valuesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Values_valuesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Values_valuesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterValues_values(s)
	}
}

func (s *Values_valuesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitValues_values(s)
	}
}




func (p *SQLParser) Values_values() (localctx IValues_valuesContext) {
	localctx = NewValues_valuesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, SQLParserRULE_values_values)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7090)
		p.Match(SQLParserLEFT_PAREN)
	}
	p.SetState(7093)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALL, SQLParserANY, SQLParserARRAY, SQLParserCASE, SQLParserCAST, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserFALSE, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserON, SQLParserSESSION_USER, SQLParserSOME, SQLParserTRUE, SQLParserUSER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserLEFT_PAREN, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER, SQLParserDOLLAR_NUMBER, SQLParserIdentifier, SQLParserQuotedIdentifier, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
		{
			p.SetState(7091)
			p.vex(0)
		}


	case SQLParserDEFAULT:
		{
			p.SetState(7092)
			p.Match(SQLParserDEFAULT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(7102)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7095)
			p.Match(SQLParserCOMMA)
		}
		p.SetState(7098)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALL, SQLParserANY, SQLParserARRAY, SQLParserCASE, SQLParserCAST, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserFALSE, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserON, SQLParserSESSION_USER, SQLParserSOME, SQLParserTRUE, SQLParserUSER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserLEFT_PAREN, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER, SQLParserDOLLAR_NUMBER, SQLParserIdentifier, SQLParserQuotedIdentifier, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(7096)
				p.vex(0)
			}


		case SQLParserDEFAULT:
			{
				p.SetState(7097)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


		p.SetState(7104)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7105)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IOrderby_clauseContext is an interface to support dynamic dispatch.
type IOrderby_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderby_clauseContext differentiates from other interfaces.
	IsOrderby_clauseContext()
}

type Orderby_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderby_clauseContext() *Orderby_clauseContext {
	var p = new(Orderby_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_orderby_clause
	return p
}

func (*Orderby_clauseContext) IsOrderby_clauseContext() {}

func NewOrderby_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Orderby_clauseContext {
	var p = new(Orderby_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_orderby_clause

	return p
}

func (s *Orderby_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Orderby_clauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SQLParserORDER, 0)
}

func (s *Orderby_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Orderby_clauseContext) AllSort_specifier() []ISort_specifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISort_specifierContext)(nil)).Elem())
	var tst = make([]ISort_specifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISort_specifierContext)
		}
	}

	return tst
}

func (s *Orderby_clauseContext) Sort_specifier(i int) ISort_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISort_specifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISort_specifierContext)
}

func (s *Orderby_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Orderby_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Orderby_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Orderby_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Orderby_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOrderby_clause(s)
	}
}

func (s *Orderby_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOrderby_clause(s)
	}
}




func (p *SQLParser) Orderby_clause() (localctx IOrderby_clauseContext) {
	localctx = NewOrderby_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 690, SQLParserRULE_orderby_clause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7107)
		p.Match(SQLParserORDER)
	}
	{
		p.SetState(7108)
		p.Match(SQLParserBY)
	}
	{
		p.SetState(7109)
		p.Sort_specifier()
	}
	p.SetState(7114)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7110)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7111)
			p.Sort_specifier()
		}


		p.SetState(7116)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ISort_specifierContext is an interface to support dynamic dispatch.
type ISort_specifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSort_specifierContext differentiates from other interfaces.
	IsSort_specifierContext()
}

type Sort_specifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySort_specifierContext() *Sort_specifierContext {
	var p = new(Sort_specifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_sort_specifier
	return p
}

func (*Sort_specifierContext) IsSort_specifierContext() {}

func NewSort_specifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sort_specifierContext {
	var p = new(Sort_specifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_sort_specifier

	return p
}

func (s *Sort_specifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Sort_specifierContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Sort_specifierContext) Order_specification() IOrder_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_specificationContext)
}

func (s *Sort_specifierContext) Null_ordering() INull_orderingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_orderingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_orderingContext)
}

func (s *Sort_specifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sort_specifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Sort_specifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterSort_specifier(s)
	}
}

func (s *Sort_specifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitSort_specifier(s)
	}
}




func (p *SQLParser) Sort_specifier() (localctx ISort_specifierContext) {
	localctx = NewSort_specifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, SQLParserRULE_sort_specifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7117)
		p.vex(0)
	}
	p.SetState(7119)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserASC || _la == SQLParserDESC || _la == SQLParserUSING {
		{
			p.SetState(7118)
			p.Order_specification()
		}

	}
	p.SetState(7122)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserNULLS {
		{
			p.SetState(7121)
			p.Null_ordering()
		}

	}



	return localctx
}


// IOrder_specificationContext is an interface to support dynamic dispatch.
type IOrder_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_specificationContext differentiates from other interfaces.
	IsOrder_specificationContext()
}

type Order_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_specificationContext() *Order_specificationContext {
	var p = new(Order_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_order_specification
	return p
}

func (*Order_specificationContext) IsOrder_specificationContext() {}

func NewOrder_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_specificationContext {
	var p = new(Order_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_order_specification

	return p
}

func (s *Order_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_specificationContext) ASC() antlr.TerminalNode {
	return s.GetToken(SQLParserASC, 0)
}

func (s *Order_specificationContext) DESC() antlr.TerminalNode {
	return s.GetToken(SQLParserDESC, 0)
}

func (s *Order_specificationContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Order_specificationContext) All_op_ref() IAll_op_refContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_op_refContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_op_refContext)
}

func (s *Order_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Order_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOrder_specification(s)
	}
}

func (s *Order_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOrder_specification(s)
	}
}




func (p *SQLParser) Order_specification() (localctx IOrder_specificationContext) {
	localctx = NewOrder_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, SQLParserRULE_order_specification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7128)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserASC:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7124)
			p.Match(SQLParserASC)
		}


	case SQLParserDESC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7125)
			p.Match(SQLParserDESC)
		}


	case SQLParserUSING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7126)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(7127)
			p.All_op_ref()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// INull_orderingContext is an interface to support dynamic dispatch.
type INull_orderingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNull_orderingContext differentiates from other interfaces.
	IsNull_orderingContext()
}

type Null_orderingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_orderingContext() *Null_orderingContext {
	var p = new(Null_orderingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_null_ordering
	return p
}

func (*Null_orderingContext) IsNull_orderingContext() {}

func NewNull_orderingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_orderingContext {
	var p = new(Null_orderingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_null_ordering

	return p
}

func (s *Null_orderingContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_orderingContext) NULLS() antlr.TerminalNode {
	return s.GetToken(SQLParserNULLS, 0)
}

func (s *Null_orderingContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SQLParserFIRST, 0)
}

func (s *Null_orderingContext) LAST() antlr.TerminalNode {
	return s.GetToken(SQLParserLAST, 0)
}

func (s *Null_orderingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_orderingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Null_orderingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterNull_ordering(s)
	}
}

func (s *Null_orderingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitNull_ordering(s)
	}
}




func (p *SQLParser) Null_ordering() (localctx INull_orderingContext) {
	localctx = NewNull_orderingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 696, SQLParserRULE_null_ordering)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7130)
		p.Match(SQLParserNULLS)
	}
	{
		p.SetState(7131)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserFIRST || _la == SQLParserLAST) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IInsert_stmt_for_psqlContext is an interface to support dynamic dispatch.
type IInsert_stmt_for_psqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInsert_table_name returns the insert_table_name rule contexts.
	GetInsert_table_name() ISchema_qualified_nameContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext


	// SetInsert_table_name sets the insert_table_name rule contexts.
	SetInsert_table_name(ISchema_qualified_nameContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)


	// IsInsert_stmt_for_psqlContext differentiates from other interfaces.
	IsInsert_stmt_for_psqlContext()
}

type Insert_stmt_for_psqlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	insert_table_name ISchema_qualified_nameContext 
	alias IIdentifierContext 
}

func NewEmptyInsert_stmt_for_psqlContext() *Insert_stmt_for_psqlContext {
	var p = new(Insert_stmt_for_psqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_insert_stmt_for_psql
	return p
}

func (*Insert_stmt_for_psqlContext) IsInsert_stmt_for_psqlContext() {}

func NewInsert_stmt_for_psqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_stmt_for_psqlContext {
	var p = new(Insert_stmt_for_psqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_insert_stmt_for_psql

	return p
}

func (s *Insert_stmt_for_psqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_stmt_for_psqlContext) GetInsert_table_name() ISchema_qualified_nameContext { return s.insert_table_name }

func (s *Insert_stmt_for_psqlContext) GetAlias() IIdentifierContext { return s.alias }


func (s *Insert_stmt_for_psqlContext) SetInsert_table_name(v ISchema_qualified_nameContext) { s.insert_table_name = v }

func (s *Insert_stmt_for_psqlContext) SetAlias(v IIdentifierContext) { s.alias = v }


func (s *Insert_stmt_for_psqlContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SQLParserINSERT, 0)
}

func (s *Insert_stmt_for_psqlContext) INTO() antlr.TerminalNode {
	return s.GetToken(SQLParserINTO, 0)
}

func (s *Insert_stmt_for_psqlContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Insert_stmt_for_psqlContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Insert_stmt_for_psqlContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Insert_stmt_for_psqlContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SQLParserVALUES, 0)
}

func (s *Insert_stmt_for_psqlContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Insert_stmt_for_psqlContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Insert_stmt_for_psqlContext) OVERRIDING() antlr.TerminalNode {
	return s.GetToken(SQLParserOVERRIDING, 0)
}

func (s *Insert_stmt_for_psqlContext) VALUE() antlr.TerminalNode {
	return s.GetToken(SQLParserVALUE, 0)
}

func (s *Insert_stmt_for_psqlContext) Insert_columns() IInsert_columnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_columnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_columnsContext)
}

func (s *Insert_stmt_for_psqlContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Insert_stmt_for_psqlContext) CONFLICT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONFLICT, 0)
}

func (s *Insert_stmt_for_psqlContext) Conflict_action() IConflict_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConflict_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConflict_actionContext)
}

func (s *Insert_stmt_for_psqlContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURNING, 0)
}

func (s *Insert_stmt_for_psqlContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Insert_stmt_for_psqlContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Insert_stmt_for_psqlContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(SQLParserSYSTEM, 0)
}

func (s *Insert_stmt_for_psqlContext) USER() antlr.TerminalNode {
	return s.GetToken(SQLParserUSER, 0)
}

func (s *Insert_stmt_for_psqlContext) Conflict_object() IConflict_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConflict_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConflict_objectContext)
}

func (s *Insert_stmt_for_psqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_stmt_for_psqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Insert_stmt_for_psqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterInsert_stmt_for_psql(s)
	}
}

func (s *Insert_stmt_for_psqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitInsert_stmt_for_psql(s)
	}
}




func (p *SQLParser) Insert_stmt_for_psql() (localctx IInsert_stmt_for_psqlContext) {
	localctx = NewInsert_stmt_for_psqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 698, SQLParserRULE_insert_stmt_for_psql)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7134)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(7133)
			p.With_clause()
		}

	}
	{
		p.SetState(7136)
		p.Match(SQLParserINSERT)
	}
	{
		p.SetState(7137)
		p.Match(SQLParserINTO)
	}
	{
		p.SetState(7138)

		var _x = p.Schema_qualified_name()


		localctx.(*Insert_stmt_for_psqlContext).insert_table_name = _x
	}
	p.SetState(7141)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserAS {
		{
			p.SetState(7139)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(7140)

			var _x = p.Identifier()


			localctx.(*Insert_stmt_for_psqlContext).alias = _x
		}

	}
	p.SetState(7146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserOVERRIDING {
		{
			p.SetState(7143)
			p.Match(SQLParserOVERRIDING)
		}
		{
			p.SetState(7144)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserSYSTEM || _la == SQLParserUSER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(7145)
			p.Match(SQLParserVALUE)
		}

	}
	p.SetState(7149)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 943, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7148)
			p.Insert_columns()
		}


	}
	p.SetState(7154)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserVALUES, SQLParserSELECT, SQLParserTABLE, SQLParserWITH, SQLParserLEFT_PAREN:
		{
			p.SetState(7151)
			p.Select_stmt()
		}


	case SQLParserDEFAULT:
		{
			p.SetState(7152)
			p.Match(SQLParserDEFAULT)
		}
		{
			p.SetState(7153)
			p.Match(SQLParserVALUES)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(7162)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserON {
		{
			p.SetState(7156)
			p.Match(SQLParserON)
		}
		{
			p.SetState(7157)
			p.Match(SQLParserCONFLICT)
		}
		p.SetState(7159)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserON || _la == SQLParserLEFT_PAREN {
			{
				p.SetState(7158)
				p.Conflict_object()
			}

		}
		{
			p.SetState(7161)
			p.Conflict_action()
		}

	}
	p.SetState(7166)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserRETURNING {
		{
			p.SetState(7164)
			p.Match(SQLParserRETURNING)
		}
		{
			p.SetState(7165)
			p.Select_list()
		}

	}



	return localctx
}


// IInsert_columnsContext is an interface to support dynamic dispatch.
type IInsert_columnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_columnsContext differentiates from other interfaces.
	IsInsert_columnsContext()
}

type Insert_columnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_columnsContext() *Insert_columnsContext {
	var p = new(Insert_columnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_insert_columns
	return p
}

func (*Insert_columnsContext) IsInsert_columnsContext() {}

func NewInsert_columnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_columnsContext {
	var p = new(Insert_columnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_insert_columns

	return p
}

func (s *Insert_columnsContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_columnsContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Insert_columnsContext) AllIndirection_identifier() []IIndirection_identifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndirection_identifierContext)(nil)).Elem())
	var tst = make([]IIndirection_identifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndirection_identifierContext)
		}
	}

	return tst
}

func (s *Insert_columnsContext) Indirection_identifier(i int) IIndirection_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirection_identifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndirection_identifierContext)
}

func (s *Insert_columnsContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Insert_columnsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Insert_columnsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Insert_columnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_columnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Insert_columnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterInsert_columns(s)
	}
}

func (s *Insert_columnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitInsert_columns(s)
	}
}




func (p *SQLParser) Insert_columns() (localctx IInsert_columnsContext) {
	localctx = NewInsert_columnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 700, SQLParserRULE_insert_columns)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7168)
		p.Match(SQLParserLEFT_PAREN)
	}
	{
		p.SetState(7169)
		p.Indirection_identifier()
	}
	p.SetState(7174)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7170)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7171)
			p.Indirection_identifier()
		}


		p.SetState(7176)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7177)
		p.Match(SQLParserRIGHT_PAREN)
	}



	return localctx
}


// IIndirection_identifierContext is an interface to support dynamic dispatch.
type IIndirection_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndirection_identifierContext differentiates from other interfaces.
	IsIndirection_identifierContext()
}

type Indirection_identifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndirection_identifierContext() *Indirection_identifierContext {
	var p = new(Indirection_identifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_indirection_identifier
	return p
}

func (*Indirection_identifierContext) IsIndirection_identifierContext() {}

func NewIndirection_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Indirection_identifierContext {
	var p = new(Indirection_identifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_indirection_identifier

	return p
}

func (s *Indirection_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Indirection_identifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Indirection_identifierContext) Indirection_list() IIndirection_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirection_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndirection_listContext)
}

func (s *Indirection_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Indirection_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Indirection_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIndirection_identifier(s)
	}
}

func (s *Indirection_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIndirection_identifier(s)
	}
}




func (p *SQLParser) Indirection_identifier() (localctx IIndirection_identifierContext) {
	localctx = NewIndirection_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 702, SQLParserRULE_indirection_identifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7179)
		p.Identifier()
	}
	p.SetState(7181)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserDOT || _la == SQLParserLEFT_BRACKET {
		{
			p.SetState(7180)
			p.Indirection_list()
		}

	}



	return localctx
}


// IConflict_objectContext is an interface to support dynamic dispatch.
type IConflict_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConflict_objectContext differentiates from other interfaces.
	IsConflict_objectContext()
}

type Conflict_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflict_objectContext() *Conflict_objectContext {
	var p = new(Conflict_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_conflict_object
	return p
}

func (*Conflict_objectContext) IsConflict_objectContext() {}

func NewConflict_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conflict_objectContext {
	var p = new(Conflict_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_conflict_object

	return p
}

func (s *Conflict_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Conflict_objectContext) Index_sort() IIndex_sortContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_sortContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_sortContext)
}

func (s *Conflict_objectContext) Index_where() IIndex_whereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_whereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_whereContext)
}

func (s *Conflict_objectContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Conflict_objectContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Conflict_objectContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Conflict_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conflict_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Conflict_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterConflict_object(s)
	}
}

func (s *Conflict_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitConflict_object(s)
	}
}




func (p *SQLParser) Conflict_object() (localctx IConflict_objectContext) {
	localctx = NewConflict_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 704, SQLParserRULE_conflict_object)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7190)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7183)
			p.Index_sort()
		}
		p.SetState(7185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWHERE {
			{
				p.SetState(7184)
				p.Index_where()
			}

		}


	case SQLParserON:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7187)
			p.Match(SQLParserON)
		}
		{
			p.SetState(7188)
			p.Match(SQLParserCONSTRAINT)
		}
		{
			p.SetState(7189)
			p.Identifier()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IConflict_actionContext is an interface to support dynamic dispatch.
type IConflict_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConflict_actionContext differentiates from other interfaces.
	IsConflict_actionContext()
}

type Conflict_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflict_actionContext() *Conflict_actionContext {
	var p = new(Conflict_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_conflict_action
	return p
}

func (*Conflict_actionContext) IsConflict_actionContext() {}

func NewConflict_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conflict_actionContext {
	var p = new(Conflict_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_conflict_action

	return p
}

func (s *Conflict_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Conflict_actionContext) DO() antlr.TerminalNode {
	return s.GetToken(SQLParserDO, 0)
}

func (s *Conflict_actionContext) NOTHING() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTHING, 0)
}

func (s *Conflict_actionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Conflict_actionContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Conflict_actionContext) AllUpdate_set() []IUpdate_setContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_setContext)(nil)).Elem())
	var tst = make([]IUpdate_setContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_setContext)
		}
	}

	return tst
}

func (s *Conflict_actionContext) Update_set(i int) IUpdate_setContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_setContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_setContext)
}

func (s *Conflict_actionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Conflict_actionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Conflict_actionContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Conflict_actionContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Conflict_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conflict_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Conflict_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterConflict_action(s)
	}
}

func (s *Conflict_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitConflict_action(s)
	}
}




func (p *SQLParser) Conflict_action() (localctx IConflict_actionContext) {
	localctx = NewConflict_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 706, SQLParserRULE_conflict_action)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7209)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 954, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7192)
			p.Match(SQLParserDO)
		}
		{
			p.SetState(7193)
			p.Match(SQLParserNOTHING)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7194)
			p.Match(SQLParserDO)
		}
		{
			p.SetState(7195)
			p.Match(SQLParserUPDATE)
		}
		{
			p.SetState(7196)
			p.Match(SQLParserSET)
		}
		{
			p.SetState(7197)
			p.Update_set()
		}
		p.SetState(7202)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7198)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7199)
				p.Update_set()
			}


			p.SetState(7204)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(7207)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWHERE {
			{
				p.SetState(7205)
				p.Match(SQLParserWHERE)
			}
			{
				p.SetState(7206)
				p.vex(0)
			}

		}

	}


	return localctx
}


// IDelete_stmt_for_psqlContext is an interface to support dynamic dispatch.
type IDelete_stmt_for_psqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDelete_table_name returns the delete_table_name rule contexts.
	GetDelete_table_name() ISchema_qualified_nameContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetCursor returns the cursor rule contexts.
	GetCursor() IIdentifierContext


	// SetDelete_table_name sets the delete_table_name rule contexts.
	SetDelete_table_name(ISchema_qualified_nameContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetCursor sets the cursor rule contexts.
	SetCursor(IIdentifierContext)


	// IsDelete_stmt_for_psqlContext differentiates from other interfaces.
	IsDelete_stmt_for_psqlContext()
}

type Delete_stmt_for_psqlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	delete_table_name ISchema_qualified_nameContext 
	alias IIdentifierContext 
	cursor IIdentifierContext 
}

func NewEmptyDelete_stmt_for_psqlContext() *Delete_stmt_for_psqlContext {
	var p = new(Delete_stmt_for_psqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_delete_stmt_for_psql
	return p
}

func (*Delete_stmt_for_psqlContext) IsDelete_stmt_for_psqlContext() {}

func NewDelete_stmt_for_psqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmt_for_psqlContext {
	var p = new(Delete_stmt_for_psqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_delete_stmt_for_psql

	return p
}

func (s *Delete_stmt_for_psqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmt_for_psqlContext) GetDelete_table_name() ISchema_qualified_nameContext { return s.delete_table_name }

func (s *Delete_stmt_for_psqlContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Delete_stmt_for_psqlContext) GetCursor() IIdentifierContext { return s.cursor }


func (s *Delete_stmt_for_psqlContext) SetDelete_table_name(v ISchema_qualified_nameContext) { s.delete_table_name = v }

func (s *Delete_stmt_for_psqlContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Delete_stmt_for_psqlContext) SetCursor(v IIdentifierContext) { s.cursor = v }


func (s *Delete_stmt_for_psqlContext) DELETE() antlr.TerminalNode {
	return s.GetToken(SQLParserDELETE, 0)
}

func (s *Delete_stmt_for_psqlContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Delete_stmt_for_psqlContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Delete_stmt_for_psqlContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmt_for_psqlContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *Delete_stmt_for_psqlContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Delete_stmt_for_psqlContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Delete_stmt_for_psqlContext) AllFrom_item() []IFrom_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem())
	var tst = make([]IFrom_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrom_itemContext)
		}
	}

	return tst
}

func (s *Delete_stmt_for_psqlContext) From_item(i int) IFrom_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *Delete_stmt_for_psqlContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Delete_stmt_for_psqlContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURNING, 0)
}

func (s *Delete_stmt_for_psqlContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Delete_stmt_for_psqlContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Delete_stmt_for_psqlContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Delete_stmt_for_psqlContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Delete_stmt_for_psqlContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT, 0)
}

func (s *Delete_stmt_for_psqlContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *Delete_stmt_for_psqlContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Delete_stmt_for_psqlContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Delete_stmt_for_psqlContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Delete_stmt_for_psqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmt_for_psqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Delete_stmt_for_psqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDelete_stmt_for_psql(s)
	}
}

func (s *Delete_stmt_for_psqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDelete_stmt_for_psql(s)
	}
}




func (p *SQLParser) Delete_stmt_for_psql() (localctx IDelete_stmt_for_psqlContext) {
	localctx = NewDelete_stmt_for_psqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 708, SQLParserRULE_delete_stmt_for_psql)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7212)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(7211)
			p.With_clause()
		}

	}
	{
		p.SetState(7214)
		p.Match(SQLParserDELETE)
	}
	{
		p.SetState(7215)
		p.Match(SQLParserFROM)
	}
	p.SetState(7217)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserONLY {
		{
			p.SetState(7216)
			p.Match(SQLParserONLY)
		}

	}
	{
		p.SetState(7219)

		var _x = p.Schema_qualified_name()


		localctx.(*Delete_stmt_for_psqlContext).delete_table_name = _x
	}
	p.SetState(7221)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserMULTIPLY {
		{
			p.SetState(7220)
			p.Match(SQLParserMULTIPLY)
		}

	}
	p.SetState(7227)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 959, p.GetParserRuleContext()) == 1 {
		p.SetState(7224)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAS {
			{
				p.SetState(7223)
				p.Match(SQLParserAS)
			}

		}
		{
			p.SetState(7226)

			var _x = p.Identifier()


			localctx.(*Delete_stmt_for_psqlContext).alias = _x
		}


	}
	p.SetState(7238)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUSING {
		{
			p.SetState(7229)
			p.Match(SQLParserUSING)
		}
		{
			p.SetState(7230)
			p.from_item(0)
		}
		p.SetState(7235)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7231)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7232)
				p.from_item(0)
			}


			p.SetState(7237)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(7247)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWHERE {
		{
			p.SetState(7240)
			p.Match(SQLParserWHERE)
		}
		p.SetState(7245)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 962, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(7241)
				p.vex(0)
			}


		case 2:
			{
				p.SetState(7242)
				p.Match(SQLParserCURRENT)
			}
			{
				p.SetState(7243)
				p.Match(SQLParserOF)
			}
			{
				p.SetState(7244)

				var _x = p.Identifier()


				localctx.(*Delete_stmt_for_psqlContext).cursor = _x
			}

		}

	}
	p.SetState(7251)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserRETURNING {
		{
			p.SetState(7249)
			p.Match(SQLParserRETURNING)
		}
		{
			p.SetState(7250)
			p.Select_list()
		}

	}



	return localctx
}


// IUpdate_stmt_for_psqlContext is an interface to support dynamic dispatch.
type IUpdate_stmt_for_psqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUpdate_table_name returns the update_table_name rule contexts.
	GetUpdate_table_name() ISchema_qualified_nameContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetCursor returns the cursor rule contexts.
	GetCursor() IIdentifierContext


	// SetUpdate_table_name sets the update_table_name rule contexts.
	SetUpdate_table_name(ISchema_qualified_nameContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetCursor sets the cursor rule contexts.
	SetCursor(IIdentifierContext)


	// IsUpdate_stmt_for_psqlContext differentiates from other interfaces.
	IsUpdate_stmt_for_psqlContext()
}

type Update_stmt_for_psqlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	update_table_name ISchema_qualified_nameContext 
	alias IIdentifierContext 
	cursor IIdentifierContext 
}

func NewEmptyUpdate_stmt_for_psqlContext() *Update_stmt_for_psqlContext {
	var p = new(Update_stmt_for_psqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_update_stmt_for_psql
	return p
}

func (*Update_stmt_for_psqlContext) IsUpdate_stmt_for_psqlContext() {}

func NewUpdate_stmt_for_psqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmt_for_psqlContext {
	var p = new(Update_stmt_for_psqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_update_stmt_for_psql

	return p
}

func (s *Update_stmt_for_psqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmt_for_psqlContext) GetUpdate_table_name() ISchema_qualified_nameContext { return s.update_table_name }

func (s *Update_stmt_for_psqlContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Update_stmt_for_psqlContext) GetCursor() IIdentifierContext { return s.cursor }


func (s *Update_stmt_for_psqlContext) SetUpdate_table_name(v ISchema_qualified_nameContext) { s.update_table_name = v }

func (s *Update_stmt_for_psqlContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Update_stmt_for_psqlContext) SetCursor(v IIdentifierContext) { s.cursor = v }


func (s *Update_stmt_for_psqlContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(SQLParserUPDATE, 0)
}

func (s *Update_stmt_for_psqlContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLParserSET, 0)
}

func (s *Update_stmt_for_psqlContext) AllUpdate_set() []IUpdate_setContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_setContext)(nil)).Elem())
	var tst = make([]IUpdate_setContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_setContext)
		}
	}

	return tst
}

func (s *Update_stmt_for_psqlContext) Update_set(i int) IUpdate_setContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_setContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_setContext)
}

func (s *Update_stmt_for_psqlContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Update_stmt_for_psqlContext) With_clause() IWith_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmt_for_psqlContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLParserONLY, 0)
}

func (s *Update_stmt_for_psqlContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(SQLParserMULTIPLY, 0)
}

func (s *Update_stmt_for_psqlContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Update_stmt_for_psqlContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Update_stmt_for_psqlContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Update_stmt_for_psqlContext) AllFrom_item() []IFrom_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem())
	var tst = make([]IFrom_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrom_itemContext)
		}
	}

	return tst
}

func (s *Update_stmt_for_psqlContext) From_item(i int) IFrom_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *Update_stmt_for_psqlContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Update_stmt_for_psqlContext) RETURNING() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURNING, 0)
}

func (s *Update_stmt_for_psqlContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Update_stmt_for_psqlContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Update_stmt_for_psqlContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Update_stmt_for_psqlContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Update_stmt_for_psqlContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT, 0)
}

func (s *Update_stmt_for_psqlContext) OF() antlr.TerminalNode {
	return s.GetToken(SQLParserOF, 0)
}

func (s *Update_stmt_for_psqlContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLParserAS, 0)
}

func (s *Update_stmt_for_psqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmt_for_psqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Update_stmt_for_psqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUpdate_stmt_for_psql(s)
	}
}

func (s *Update_stmt_for_psqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUpdate_stmt_for_psql(s)
	}
}




func (p *SQLParser) Update_stmt_for_psql() (localctx IUpdate_stmt_for_psqlContext) {
	localctx = NewUpdate_stmt_for_psqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 710, SQLParserRULE_update_stmt_for_psql)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7254)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWITH {
		{
			p.SetState(7253)
			p.With_clause()
		}

	}
	{
		p.SetState(7256)
		p.Match(SQLParserUPDATE)
	}
	p.SetState(7258)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserONLY {
		{
			p.SetState(7257)
			p.Match(SQLParserONLY)
		}

	}
	{
		p.SetState(7260)

		var _x = p.Schema_qualified_name()


		localctx.(*Update_stmt_for_psqlContext).update_table_name = _x
	}
	p.SetState(7262)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserMULTIPLY {
		{
			p.SetState(7261)
			p.Match(SQLParserMULTIPLY)
		}

	}
	p.SetState(7268)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 969, p.GetParserRuleContext()) == 1 {
		p.SetState(7265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAS {
			{
				p.SetState(7264)
				p.Match(SQLParserAS)
			}

		}
		{
			p.SetState(7267)

			var _x = p.Identifier()


			localctx.(*Update_stmt_for_psqlContext).alias = _x
		}


	}
	{
		p.SetState(7270)
		p.Match(SQLParserSET)
	}
	{
		p.SetState(7271)
		p.Update_set()
	}
	p.SetState(7276)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7272)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7273)
			p.Update_set()
		}


		p.SetState(7278)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFROM {
		{
			p.SetState(7279)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(7280)
			p.from_item(0)
		}
		p.SetState(7285)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7281)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7282)
				p.from_item(0)
			}


			p.SetState(7287)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(7297)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWHERE {
		{
			p.SetState(7290)
			p.Match(SQLParserWHERE)
		}
		p.SetState(7295)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 973, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(7291)
				p.vex(0)
			}


		case 2:
			{
				p.SetState(7292)
				p.Match(SQLParserCURRENT)
			}
			{
				p.SetState(7293)
				p.Match(SQLParserOF)
			}
			{
				p.SetState(7294)

				var _x = p.Identifier()


				localctx.(*Update_stmt_for_psqlContext).cursor = _x
			}

		}

	}
	p.SetState(7301)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserRETURNING {
		{
			p.SetState(7299)
			p.Match(SQLParserRETURNING)
		}
		{
			p.SetState(7300)
			p.Select_list()
		}

	}



	return localctx
}


// IUpdate_setContext is an interface to support dynamic dispatch.
type IUpdate_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_indirection_identifier returns the _indirection_identifier rule contexts.
	Get_indirection_identifier() IIndirection_identifierContext

	// Get_vex returns the _vex rule contexts.
	Get_vex() IVexContext


	// Set_indirection_identifier sets the _indirection_identifier rule contexts.
	Set_indirection_identifier(IIndirection_identifierContext)

	// Set_vex sets the _vex rule contexts.
	Set_vex(IVexContext)


	// GetColumn returns the column rule context list.
	GetColumn() []IIndirection_identifierContext

	// GetValue returns the value rule context list.
	GetValue() []IVexContext


	// SetColumn sets the column rule context list.
	SetColumn([]IIndirection_identifierContext) 

	// SetValue sets the value rule context list.
	SetValue([]IVexContext) 


	// IsUpdate_setContext differentiates from other interfaces.
	IsUpdate_setContext()
}

type Update_setContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	_indirection_identifier IIndirection_identifierContext 
	column []IIndirection_identifierContext
	_vex IVexContext 
	value []IVexContext
}

func NewEmptyUpdate_setContext() *Update_setContext {
	var p = new(Update_setContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_update_set
	return p
}

func (*Update_setContext) IsUpdate_setContext() {}

func NewUpdate_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_setContext {
	var p = new(Update_setContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_update_set

	return p
}

func (s *Update_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_setContext) Get_indirection_identifier() IIndirection_identifierContext { return s._indirection_identifier }

func (s *Update_setContext) Get_vex() IVexContext { return s._vex }


func (s *Update_setContext) Set_indirection_identifier(v IIndirection_identifierContext) { s._indirection_identifier = v }

func (s *Update_setContext) Set_vex(v IVexContext) { s._vex = v }


func (s *Update_setContext) GetColumn() []IIndirection_identifierContext { return s.column }

func (s *Update_setContext) GetValue() []IVexContext { return s.value }


func (s *Update_setContext) SetColumn(v []IIndirection_identifierContext) { s.column = v }

func (s *Update_setContext) SetValue(v []IVexContext) { s.value = v }


func (s *Update_setContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Update_setContext) AllIndirection_identifier() []IIndirection_identifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndirection_identifierContext)(nil)).Elem())
	var tst = make([]IIndirection_identifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndirection_identifierContext)
		}
	}

	return tst
}

func (s *Update_setContext) Indirection_identifier(i int) IIndirection_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndirection_identifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndirection_identifierContext)
}

func (s *Update_setContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDEFAULT)
}

func (s *Update_setContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, i)
}

func (s *Update_setContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Update_setContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Update_setContext) AllLEFT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_PAREN)
}

func (s *Update_setContext) LEFT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, i)
}

func (s *Update_setContext) AllRIGHT_PAREN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_PAREN)
}

func (s *Update_setContext) RIGHT_PAREN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, i)
}

func (s *Update_setContext) Table_subquery() ITable_subqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_subqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_subqueryContext)
}

func (s *Update_setContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Update_setContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Update_setContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLParserROW, 0)
}

func (s *Update_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Update_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUpdate_set(s)
	}
}

func (s *Update_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUpdate_set(s)
	}
}




func (p *SQLParser) Update_set() (localctx IUpdate_setContext) {
	localctx = NewUpdate_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 712, SQLParserRULE_update_set)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7342)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7303)

			var _x = p.Indirection_identifier()


			localctx.(*Update_setContext)._indirection_identifier = _x
		}
		localctx.(*Update_setContext).column = append(localctx.(*Update_setContext).column, localctx.(*Update_setContext)._indirection_identifier)
		{
			p.SetState(7304)
			p.Match(SQLParserEQUAL)
		}
		p.SetState(7307)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALL, SQLParserANY, SQLParserARRAY, SQLParserCASE, SQLParserCAST, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserFALSE, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserON, SQLParserSESSION_USER, SQLParserSOME, SQLParserTRUE, SQLParserUSER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserLEFT_PAREN, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER, SQLParserDOLLAR_NUMBER, SQLParserIdentifier, SQLParserQuotedIdentifier, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(7305)

				var _x = p.vex(0)

				localctx.(*Update_setContext)._vex = _x
			}
			localctx.(*Update_setContext).value = append(localctx.(*Update_setContext).value, localctx.(*Update_setContext)._vex)


		case SQLParserDEFAULT:
			{
				p.SetState(7306)
				p.Match(SQLParserDEFAULT)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case SQLParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7309)
			p.Match(SQLParserLEFT_PAREN)
		}
		{
			p.SetState(7310)

			var _x = p.Indirection_identifier()


			localctx.(*Update_setContext)._indirection_identifier = _x
		}
		localctx.(*Update_setContext).column = append(localctx.(*Update_setContext).column, localctx.(*Update_setContext)._indirection_identifier)
		p.SetState(7315)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7311)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7312)

				var _x = p.Indirection_identifier()


				localctx.(*Update_setContext)._indirection_identifier = _x
			}
			localctx.(*Update_setContext).column = append(localctx.(*Update_setContext).column, localctx.(*Update_setContext)._indirection_identifier)


			p.SetState(7317)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(7318)
			p.Match(SQLParserRIGHT_PAREN)
		}
		{
			p.SetState(7319)
			p.Match(SQLParserEQUAL)
		}
		p.SetState(7321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserROW {
			{
				p.SetState(7320)
				p.Match(SQLParserROW)
			}

		}
		p.SetState(7340)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 982, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(7323)
				p.Match(SQLParserLEFT_PAREN)
			}
			p.SetState(7326)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALL, SQLParserANY, SQLParserARRAY, SQLParserCASE, SQLParserCAST, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserFALSE, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserON, SQLParserSESSION_USER, SQLParserSOME, SQLParserTRUE, SQLParserUSER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserLEFT_PAREN, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER, SQLParserDOLLAR_NUMBER, SQLParserIdentifier, SQLParserQuotedIdentifier, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
				{
					p.SetState(7324)

					var _x = p.vex(0)

					localctx.(*Update_setContext)._vex = _x
				}
				localctx.(*Update_setContext).value = append(localctx.(*Update_setContext).value, localctx.(*Update_setContext)._vex)


			case SQLParserDEFAULT:
				{
					p.SetState(7325)
					p.Match(SQLParserDEFAULT)
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(7335)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(7328)
					p.Match(SQLParserCOMMA)
				}
				p.SetState(7331)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserAUTHORIZATION, SQLParserBINARY, SQLParserCOLLATION, SQLParserCONCURRENTLY, SQLParserCROSS, SQLParserCURRENT_SCHEMA, SQLParserFREEZE, SQLParserFULL, SQLParserILIKE, SQLParserINNER, SQLParserIS, SQLParserISNULL, SQLParserJOIN, SQLParserLEFT, SQLParserLIKE, SQLParserNATURAL, SQLParserNOTNULL, SQLParserOUTER, SQLParserOVERLAPS, SQLParserRIGHT, SQLParserSIMILAR, SQLParserTABLESAMPLE, SQLParserVERBOSE, SQLParserALL, SQLParserANY, SQLParserARRAY, SQLParserCASE, SQLParserCAST, SQLParserCURRENT_CATALOG, SQLParserCURRENT_DATE, SQLParserCURRENT_TIME, SQLParserCURRENT_TIMESTAMP, SQLParserCURRENT_USER, SQLParserFALSE, SQLParserLOCALTIME, SQLParserLOCALTIMESTAMP, SQLParserNOT, SQLParserNULL, SQLParserON, SQLParserSESSION_USER, SQLParserSOME, SQLParserTRUE, SQLParserUSER, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserLEFT_PAREN, SQLParserPLUS, SQLParserMINUS, SQLParserMULTIPLY, SQLParserLESS_LESS, SQLParserGREATER_GREATER, SQLParserHASH_SIGN, SQLParserOP_CHARS, SQLParserNUMBER_LITERAL, SQLParserREAL_NUMBER, SQLParserDOLLAR_NUMBER, SQLParserIdentifier, SQLParserQuotedIdentifier, SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
					{
						p.SetState(7329)

						var _x = p.vex(0)

						localctx.(*Update_setContext)._vex = _x
					}
					localctx.(*Update_setContext).value = append(localctx.(*Update_setContext).value, localctx.(*Update_setContext)._vex)


				case SQLParserDEFAULT:
					{
						p.SetState(7330)
						p.Match(SQLParserDEFAULT)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}


				p.SetState(7337)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(7338)
				p.Match(SQLParserRIGHT_PAREN)
			}


		case 2:
			{
				p.SetState(7339)
				p.Table_subquery()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// INotify_stmtContext is an interface to support dynamic dispatch.
type INotify_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetChannel returns the channel rule contexts.
	GetChannel() IIdentifierContext

	// GetPayload returns the payload rule contexts.
	GetPayload() ICharacter_stringContext


	// SetChannel sets the channel rule contexts.
	SetChannel(IIdentifierContext)

	// SetPayload sets the payload rule contexts.
	SetPayload(ICharacter_stringContext)


	// IsNotify_stmtContext differentiates from other interfaces.
	IsNotify_stmtContext()
}

type Notify_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	channel IIdentifierContext 
	payload ICharacter_stringContext 
}

func NewEmptyNotify_stmtContext() *Notify_stmtContext {
	var p = new(Notify_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_notify_stmt
	return p
}

func (*Notify_stmtContext) IsNotify_stmtContext() {}

func NewNotify_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Notify_stmtContext {
	var p = new(Notify_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_notify_stmt

	return p
}

func (s *Notify_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Notify_stmtContext) GetChannel() IIdentifierContext { return s.channel }

func (s *Notify_stmtContext) GetPayload() ICharacter_stringContext { return s.payload }


func (s *Notify_stmtContext) SetChannel(v IIdentifierContext) { s.channel = v }

func (s *Notify_stmtContext) SetPayload(v ICharacter_stringContext) { s.payload = v }


func (s *Notify_stmtContext) NOTIFY() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTIFY, 0)
}

func (s *Notify_stmtContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Notify_stmtContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, 0)
}

func (s *Notify_stmtContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Notify_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Notify_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Notify_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterNotify_stmt(s)
	}
}

func (s *Notify_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitNotify_stmt(s)
	}
}




func (p *SQLParser) Notify_stmt() (localctx INotify_stmtContext) {
	localctx = NewNotify_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 714, SQLParserRULE_notify_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7344)
		p.Match(SQLParserNOTIFY)
	}
	{
		p.SetState(7345)

		var _x = p.Identifier()


		localctx.(*Notify_stmtContext).channel = _x
	}
	p.SetState(7348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCOMMA {
		{
			p.SetState(7346)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7347)

			var _x = p.Character_string()


			localctx.(*Notify_stmtContext).payload = _x
		}

	}



	return localctx
}


// ITruncate_stmtContext is an interface to support dynamic dispatch.
type ITruncate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncate_stmtContext differentiates from other interfaces.
	IsTruncate_stmtContext()
}

type Truncate_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncate_stmtContext() *Truncate_stmtContext {
	var p = new(Truncate_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_truncate_stmt
	return p
}

func (*Truncate_stmtContext) IsTruncate_stmtContext() {}

func NewTruncate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truncate_stmtContext {
	var p = new(Truncate_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_truncate_stmt

	return p
}

func (s *Truncate_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Truncate_stmtContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(SQLParserTRUNCATE, 0)
}

func (s *Truncate_stmtContext) AllOnly_table_multiply() []IOnly_table_multiplyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOnly_table_multiplyContext)(nil)).Elem())
	var tst = make([]IOnly_table_multiplyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOnly_table_multiplyContext)
		}
	}

	return tst
}

func (s *Truncate_stmtContext) Only_table_multiply(i int) IOnly_table_multiplyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOnly_table_multiplyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOnly_table_multiplyContext)
}

func (s *Truncate_stmtContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Truncate_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Truncate_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Truncate_stmtContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(SQLParserIDENTITY, 0)
}

func (s *Truncate_stmtContext) Cascade_restrict() ICascade_restrictContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICascade_restrictContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICascade_restrictContext)
}

func (s *Truncate_stmtContext) RESTART() antlr.TerminalNode {
	return s.GetToken(SQLParserRESTART, 0)
}

func (s *Truncate_stmtContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(SQLParserCONTINUE, 0)
}

func (s *Truncate_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truncate_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Truncate_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTruncate_stmt(s)
	}
}

func (s *Truncate_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTruncate_stmt(s)
	}
}




func (p *SQLParser) Truncate_stmt() (localctx ITruncate_stmtContext) {
	localctx = NewTruncate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 716, SQLParserRULE_truncate_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7350)
		p.Match(SQLParserTRUNCATE)
	}
	p.SetState(7352)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserTABLE {
		{
			p.SetState(7351)
			p.Match(SQLParserTABLE)
		}

	}
	{
		p.SetState(7354)
		p.Only_table_multiply()
	}
	p.SetState(7359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7355)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7356)
			p.Only_table_multiply()
		}


		p.SetState(7361)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7364)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCONTINUE || _la == SQLParserRESTART {
		{
			p.SetState(7362)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCONTINUE || _la == SQLParserRESTART) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(7363)
			p.Match(SQLParserIDENTITY)
		}

	}
	p.SetState(7367)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserCASCADE || _la == SQLParserRESTRICT {
		{
			p.SetState(7366)
			p.Cascade_restrict()
		}

	}



	return localctx
}


// IIdentifier_listContext is an interface to support dynamic dispatch.
type IIdentifier_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_listContext differentiates from other interfaces.
	IsIdentifier_listContext()
}

type Identifier_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_listContext() *Identifier_listContext {
	var p = new(Identifier_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_identifier_list
	return p
}

func (*Identifier_listContext) IsIdentifier_listContext() {}

func NewIdentifier_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_listContext {
	var p = new(Identifier_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_identifier_list

	return p
}

func (s *Identifier_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_listContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Identifier_listContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Identifier_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Identifier_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Identifier_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIdentifier_list(s)
	}
}

func (s *Identifier_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIdentifier_list(s)
	}
}




func (p *SQLParser) Identifier_list() (localctx IIdentifier_listContext) {
	localctx = NewIdentifier_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 718, SQLParserRULE_identifier_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7369)
		p.Identifier()
	}
	p.SetState(7374)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 989, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(7370)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7371)
				p.Identifier()
			}


		}
		p.SetState(7376)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 989, p.GetParserRuleContext())
	}



	return localctx
}


// IAnonymous_blockContext is an interface to support dynamic dispatch.
type IAnonymous_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymous_blockContext differentiates from other interfaces.
	IsAnonymous_blockContext()
}

type Anonymous_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymous_blockContext() *Anonymous_blockContext {
	var p = new(Anonymous_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_anonymous_block
	return p
}

func (*Anonymous_blockContext) IsAnonymous_blockContext() {}

func NewAnonymous_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Anonymous_blockContext {
	var p = new(Anonymous_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_anonymous_block

	return p
}

func (s *Anonymous_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Anonymous_blockContext) DO() antlr.TerminalNode {
	return s.GetToken(SQLParserDO, 0)
}

func (s *Anonymous_blockContext) AllCharacter_string() []ICharacter_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem())
	var tst = make([]ICharacter_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICharacter_stringContext)
		}
	}

	return tst
}

func (s *Anonymous_blockContext) Character_string(i int) ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Anonymous_blockContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserLANGUAGE, 0)
}

func (s *Anonymous_blockContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Anonymous_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Anonymous_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Anonymous_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAnonymous_block(s)
	}
}

func (s *Anonymous_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAnonymous_block(s)
	}
}




func (p *SQLParser) Anonymous_block() (localctx IAnonymous_blockContext) {
	localctx = NewAnonymous_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 720, SQLParserRULE_anonymous_block)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7393)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 993, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7377)
			p.Match(SQLParserDO)
		}
		p.SetState(7383)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLANGUAGE {
			{
				p.SetState(7378)
				p.Match(SQLParserLANGUAGE)
			}
			p.SetState(7381)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
				{
					p.SetState(7379)
					p.Identifier()
				}


			case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
				{
					p.SetState(7380)
					p.Character_string()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		{
			p.SetState(7385)
			p.Character_string()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7386)
			p.Match(SQLParserDO)
		}
		{
			p.SetState(7387)
			p.Character_string()
		}
		{
			p.SetState(7388)
			p.Match(SQLParserLANGUAGE)
		}
		p.SetState(7391)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(7389)
				p.Identifier()
			}


		case SQLParserCharacter_String_Literal, SQLParserBeginDollarStringConstant:
			{
				p.SetState(7390)
				p.Character_string()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}


	return localctx
}


// IComp_optionsContext is an interface to support dynamic dispatch.
type IComp_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComp_optionsContext differentiates from other interfaces.
	IsComp_optionsContext()
}

type Comp_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComp_optionsContext() *Comp_optionsContext {
	var p = new(Comp_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_comp_options
	return p
}

func (*Comp_optionsContext) IsComp_optionsContext() {}

func NewComp_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comp_optionsContext {
	var p = new(Comp_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_comp_options

	return p
}

func (s *Comp_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Comp_optionsContext) HASH_SIGN() antlr.TerminalNode {
	return s.GetToken(SQLParserHASH_SIGN, 0)
}

func (s *Comp_optionsContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Comp_optionsContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Comp_optionsContext) Truth_value() ITruth_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruth_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruth_valueContext)
}

func (s *Comp_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comp_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Comp_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterComp_options(s)
	}
}

func (s *Comp_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitComp_options(s)
	}
}




func (p *SQLParser) Comp_options() (localctx IComp_optionsContext) {
	localctx = NewComp_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 722, SQLParserRULE_comp_options)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7395)
		p.Match(SQLParserHASH_SIGN)
	}
	{
		p.SetState(7396)
		p.Identifier()
	}
	p.SetState(7399)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(7397)
			p.Identifier()
		}


	case SQLParserFALSE, SQLParserON, SQLParserTRUE:
		{
			p.SetState(7398)
			p.Truth_value()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IFunction_blockContext is an interface to support dynamic dispatch.
type IFunction_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEnd_label returns the end_label rule contexts.
	GetEnd_label() IIdentifierContext


	// SetEnd_label sets the end_label rule contexts.
	SetEnd_label(IIdentifierContext)


	// IsFunction_blockContext differentiates from other interfaces.
	IsFunction_blockContext()
}

type Function_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	end_label IIdentifierContext 
}

func NewEmptyFunction_blockContext() *Function_blockContext {
	var p = new(Function_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_block
	return p
}

func (*Function_blockContext) IsFunction_blockContext() {}

func NewFunction_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_blockContext {
	var p = new(Function_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_block

	return p
}

func (s *Function_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_blockContext) GetEnd_label() IIdentifierContext { return s.end_label }


func (s *Function_blockContext) SetEnd_label(v IIdentifierContext) { s.end_label = v }


func (s *Function_blockContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(SQLParserBEGIN, 0)
}

func (s *Function_blockContext) Function_statements() IFunction_statementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_statementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_statementsContext)
}

func (s *Function_blockContext) END() antlr.TerminalNode {
	return s.GetToken(SQLParserEND, 0)
}

func (s *Function_blockContext) Start_label() IStart_labelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStart_labelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStart_labelContext)
}

func (s *Function_blockContext) Declarations() IDeclarationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationsContext)
}

func (s *Function_blockContext) Exception_statement() IException_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IException_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IException_statementContext)
}

func (s *Function_blockContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_block(s)
	}
}

func (s *Function_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_block(s)
	}
}




func (p *SQLParser) Function_block() (localctx IFunction_blockContext) {
	localctx = NewFunction_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 724, SQLParserRULE_function_block)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7402)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserLESS_LESS {
		{
			p.SetState(7401)
			p.Start_label()
		}

	}
	p.SetState(7405)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserDECLARE {
		{
			p.SetState(7404)
			p.Declarations()
		}

	}
	{
		p.SetState(7407)
		p.Match(SQLParserBEGIN)
	}
	{
		p.SetState(7408)
		p.Function_statements()
	}
	p.SetState(7410)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserEXCEPTION {
		{
			p.SetState(7409)
			p.Exception_statement()
		}

	}
	{
		p.SetState(7412)
		p.Match(SQLParserEND)
	}
	p.SetState(7414)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
		{
			p.SetState(7413)

			var _x = p.Identifier()


			localctx.(*Function_blockContext).end_label = _x
		}

	}



	return localctx
}


// IStart_labelContext is an interface to support dynamic dispatch.
type IStart_labelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_labelContext differentiates from other interfaces.
	IsStart_labelContext()
}

type Start_labelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_labelContext() *Start_labelContext {
	var p = new(Start_labelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_start_label
	return p
}

func (*Start_labelContext) IsStart_labelContext() {}

func NewStart_labelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_labelContext {
	var p = new(Start_labelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_start_label

	return p
}

func (s *Start_labelContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_labelContext) LESS_LESS() antlr.TerminalNode {
	return s.GetToken(SQLParserLESS_LESS, 0)
}

func (s *Start_labelContext) Col_label() ICol_labelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICol_labelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICol_labelContext)
}

func (s *Start_labelContext) GREATER_GREATER() antlr.TerminalNode {
	return s.GetToken(SQLParserGREATER_GREATER, 0)
}

func (s *Start_labelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_labelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Start_labelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterStart_label(s)
	}
}

func (s *Start_labelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitStart_label(s)
	}
}




func (p *SQLParser) Start_label() (localctx IStart_labelContext) {
	localctx = NewStart_labelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 726, SQLParserRULE_start_label)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7416)
		p.Match(SQLParserLESS_LESS)
	}
	{
		p.SetState(7417)
		p.Col_label()
	}
	{
		p.SetState(7418)
		p.Match(SQLParserGREATER_GREATER)
	}



	return localctx
}


// IDeclarationsContext is an interface to support dynamic dispatch.
type IDeclarationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationsContext differentiates from other interfaces.
	IsDeclarationsContext()
}

type DeclarationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationsContext() *DeclarationsContext {
	var p = new(DeclarationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_declarations
	return p
}

func (*DeclarationsContext) IsDeclarationsContext() {}

func NewDeclarationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationsContext {
	var p = new(DeclarationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_declarations

	return p
}

func (s *DeclarationsContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationsContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(SQLParserDECLARE, 0)
}

func (s *DeclarationsContext) AllDeclaration() []IDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclarationContext)(nil)).Elem())
	var tst = make([]IDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclarationContext)
		}
	}

	return tst
}

func (s *DeclarationsContext) Declaration(i int) IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *DeclarationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclarationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDeclarations(s)
	}
}

func (s *DeclarationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDeclarations(s)
	}
}




func (p *SQLParser) Declarations() (localctx IDeclarationsContext) {
	localctx = NewDeclarationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 728, SQLParserRULE_declarations)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7420)
		p.Match(SQLParserDECLARE)
	}
	p.SetState(7424)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 999, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(7421)
				p.Declaration()
			}


		}
		p.SetState(7426)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 999, p.GetParserRuleContext())
	}



	return localctx
}


// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DeclarationContext) Type_declaration() IType_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_declarationContext)
}

func (s *DeclarationContext) SEMI_COLON() antlr.TerminalNode {
	return s.GetToken(SQLParserSEMI_COLON, 0)
}

func (s *DeclarationContext) AllDECLARE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserDECLARE)
}

func (s *DeclarationContext) DECLARE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserDECLARE, i)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDeclaration(s)
	}
}




func (p *SQLParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 730, SQLParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7430)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1000, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(7427)
				p.Match(SQLParserDECLARE)
			}


		}
		p.SetState(7432)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1000, p.GetParserRuleContext())
	}
	{
		p.SetState(7433)
		p.Identifier()
	}
	{
		p.SetState(7434)
		p.Type_declaration()
	}
	{
		p.SetState(7435)
		p.Match(SQLParserSEMI_COLON)
	}



	return localctx
}


// IType_declarationContext is an interface to support dynamic dispatch.
type IType_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_declarationContext differentiates from other interfaces.
	IsType_declarationContext()
}

type Type_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_declarationContext() *Type_declarationContext {
	var p = new(Type_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_type_declaration
	return p
}

func (*Type_declarationContext) IsType_declarationContext() {}

func NewType_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_declarationContext {
	var p = new(Type_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_type_declaration

	return p
}

func (s *Type_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_declarationContext) Data_type_dec() IData_type_decContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_decContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_decContext)
}

func (s *Type_declarationContext) CONSTANT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTANT, 0)
}

func (s *Type_declarationContext) Collate_identifier() ICollate_identifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollate_identifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollate_identifierContext)
}

func (s *Type_declarationContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLParserNOT, 0)
}

func (s *Type_declarationContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Type_declarationContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Type_declarationContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(SQLParserDEFAULT, 0)
}

func (s *Type_declarationContext) COLON_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLON_EQUAL, 0)
}

func (s *Type_declarationContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Type_declarationContext) ALIAS() antlr.TerminalNode {
	return s.GetToken(SQLParserALIAS, 0)
}

func (s *Type_declarationContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Type_declarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Type_declarationContext) DOLLAR_NUMBER() antlr.TerminalNode {
	return s.GetToken(SQLParserDOLLAR_NUMBER, 0)
}

func (s *Type_declarationContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(SQLParserCURSOR, 0)
}

func (s *Type_declarationContext) Select_stmt() ISelect_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Type_declarationContext) IS() antlr.TerminalNode {
	return s.GetToken(SQLParserIS, 0)
}

func (s *Type_declarationContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(SQLParserSCROLL, 0)
}

func (s *Type_declarationContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Type_declarationContext) Arguments_list() IArguments_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArguments_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArguments_listContext)
}

func (s *Type_declarationContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Type_declarationContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Type_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Type_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterType_declaration(s)
	}
}

func (s *Type_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitType_declaration(s)
	}
}




func (p *SQLParser) Type_declaration() (localctx IType_declarationContext) {
	localctx = NewType_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 732, SQLParserRULE_type_declaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7473)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1009, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7438)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1001, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7437)
				p.Match(SQLParserCONSTANT)
			}


		}
		{
			p.SetState(7440)
			p.Data_type_dec()
		}
		p.SetState(7442)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOLLATE {
			{
				p.SetState(7441)
				p.Collate_identifier()
			}

		}
		p.SetState(7446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNOT {
			{
				p.SetState(7444)
				p.Match(SQLParserNOT)
			}
			{
				p.SetState(7445)
				p.Match(SQLParserNULL)
			}

		}
		p.SetState(7450)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserDEFAULT || _la == SQLParserEQUAL || _la == SQLParserCOLON_EQUAL {
			{
				p.SetState(7448)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserDEFAULT || _la == SQLParserEQUAL || _la == SQLParserCOLON_EQUAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(7449)
				p.vex(0)
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7452)
			p.Match(SQLParserALIAS)
		}
		{
			p.SetState(7453)
			p.Match(SQLParserFOR)
		}
		p.SetState(7456)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
			{
				p.SetState(7454)
				p.Identifier()
			}


		case SQLParserDOLLAR_NUMBER:
			{
				p.SetState(7455)
				p.Match(SQLParserDOLLAR_NUMBER)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(7462)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO || _la == SQLParserSCROLL {
			p.SetState(7459)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserNO {
				{
					p.SetState(7458)
					p.Match(SQLParserNO)
				}

			}
			{
				p.SetState(7461)
				p.Match(SQLParserSCROLL)
			}

		}
		{
			p.SetState(7464)
			p.Match(SQLParserCURSOR)
		}
		p.SetState(7469)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(7465)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(7466)
				p.Arguments_list()
			}
			{
				p.SetState(7467)
				p.Match(SQLParserRIGHT_PAREN)
			}

		}
		{
			p.SetState(7471)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserIS || _la == SQLParserFOR) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(7472)
			p.Select_stmt()
		}

	}


	return localctx
}


// IArguments_listContext is an interface to support dynamic dispatch.
type IArguments_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArguments_listContext differentiates from other interfaces.
	IsArguments_listContext()
}

type Arguments_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArguments_listContext() *Arguments_listContext {
	var p = new(Arguments_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_arguments_list
	return p
}

func (*Arguments_listContext) IsArguments_listContext() {}

func NewArguments_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arguments_listContext {
	var p = new(Arguments_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_arguments_list

	return p
}

func (s *Arguments_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Arguments_listContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Arguments_listContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Arguments_listContext) AllData_type() []IData_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_typeContext)(nil)).Elem())
	var tst = make([]IData_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_typeContext)
		}
	}

	return tst
}

func (s *Arguments_listContext) Data_type(i int) IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Arguments_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Arguments_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Arguments_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arguments_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Arguments_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterArguments_list(s)
	}
}

func (s *Arguments_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitArguments_list(s)
	}
}




func (p *SQLParser) Arguments_list() (localctx IArguments_listContext) {
	localctx = NewArguments_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 734, SQLParserRULE_arguments_list)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7475)
		p.Identifier()
	}
	{
		p.SetState(7476)
		p.Data_type()
	}
	p.SetState(7483)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7477)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7478)
			p.Identifier()
		}
		{
			p.SetState(7479)
			p.Data_type()
		}


		p.SetState(7485)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IData_type_decContext is an interface to support dynamic dispatch.
type IData_type_decContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_decContext differentiates from other interfaces.
	IsData_type_decContext()
}

type Data_type_decContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_decContext() *Data_type_decContext {
	var p = new(Data_type_decContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_data_type_dec
	return p
}

func (*Data_type_decContext) IsData_type_decContext() {}

func NewData_type_decContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_decContext {
	var p = new(Data_type_decContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_data_type_dec

	return p
}

func (s *Data_type_decContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_decContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Data_type_decContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *Data_type_decContext) MODULAR() antlr.TerminalNode {
	return s.GetToken(SQLParserMODULAR, 0)
}

func (s *Data_type_decContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserTYPE, 0)
}

func (s *Data_type_decContext) Schema_qualified_name_nontype() ISchema_qualified_name_nontypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_name_nontypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_name_nontypeContext)
}

func (s *Data_type_decContext) ROWTYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserROWTYPE, 0)
}

func (s *Data_type_decContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_decContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Data_type_decContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterData_type_dec(s)
	}
}

func (s *Data_type_decContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitData_type_dec(s)
	}
}




func (p *SQLParser) Data_type_dec() (localctx IData_type_decContext) {
	localctx = NewData_type_decContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 736, SQLParserRULE_data_type_dec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7495)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1011, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7486)
			p.Data_type()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7487)
			p.Schema_qualified_name()
		}
		{
			p.SetState(7488)
			p.Match(SQLParserMODULAR)
		}
		{
			p.SetState(7489)
			p.Match(SQLParserTYPE)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7491)
			p.Schema_qualified_name_nontype()
		}
		{
			p.SetState(7492)
			p.Match(SQLParserMODULAR)
		}
		{
			p.SetState(7493)
			p.Match(SQLParserROWTYPE)
		}

	}


	return localctx
}


// IException_statementContext is an interface to support dynamic dispatch.
type IException_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsException_statementContext differentiates from other interfaces.
	IsException_statementContext()
}

type Exception_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyException_statementContext() *Exception_statementContext {
	var p = new(Exception_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_exception_statement
	return p
}

func (*Exception_statementContext) IsException_statementContext() {}

func NewException_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Exception_statementContext {
	var p = new(Exception_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_exception_statement

	return p
}

func (s *Exception_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Exception_statementContext) EXCEPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCEPTION, 0)
}

func (s *Exception_statementContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserWHEN)
}

func (s *Exception_statementContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserWHEN, i)
}

func (s *Exception_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Exception_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Exception_statementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserTHEN)
}

func (s *Exception_statementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserTHEN, i)
}

func (s *Exception_statementContext) AllFunction_statements() []IFunction_statementsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_statementsContext)(nil)).Elem())
	var tst = make([]IFunction_statementsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_statementsContext)
		}
	}

	return tst
}

func (s *Exception_statementContext) Function_statements(i int) IFunction_statementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_statementsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_statementsContext)
}

func (s *Exception_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exception_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Exception_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterException_statement(s)
	}
}

func (s *Exception_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitException_statement(s)
	}
}




func (p *SQLParser) Exception_statement() (localctx IException_statementContext) {
	localctx = NewException_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 738, SQLParserRULE_exception_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7497)
		p.Match(SQLParserEXCEPTION)
	}
	p.SetState(7503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == SQLParserWHEN {
		{
			p.SetState(7498)
			p.Match(SQLParserWHEN)
		}
		{
			p.SetState(7499)
			p.vex(0)
		}
		{
			p.SetState(7500)
			p.Match(SQLParserTHEN)
		}
		{
			p.SetState(7501)
			p.Function_statements()
		}


		p.SetState(7505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IFunction_statementsContext is an interface to support dynamic dispatch.
type IFunction_statementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_statementsContext differentiates from other interfaces.
	IsFunction_statementsContext()
}

type Function_statementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_statementsContext() *Function_statementsContext {
	var p = new(Function_statementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_statements
	return p
}

func (*Function_statementsContext) IsFunction_statementsContext() {}

func NewFunction_statementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_statementsContext {
	var p = new(Function_statementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_statements

	return p
}

func (s *Function_statementsContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_statementsContext) AllFunction_statement() []IFunction_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_statementContext)(nil)).Elem())
	var tst = make([]IFunction_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_statementContext)
		}
	}

	return tst
}

func (s *Function_statementsContext) Function_statement(i int) IFunction_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_statementContext)
}

func (s *Function_statementsContext) AllSEMI_COLON() []antlr.TerminalNode {
	return s.GetTokens(SQLParserSEMI_COLON)
}

func (s *Function_statementsContext) SEMI_COLON(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserSEMI_COLON, i)
}

func (s *Function_statementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_statementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_statementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_statements(s)
	}
}

func (s *Function_statementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_statements(s)
	}
}




func (p *SQLParser) Function_statements() (localctx IFunction_statementsContext) {
	localctx = NewFunction_statementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 740, SQLParserRULE_function_statements)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7512)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1013, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(7507)
				p.Function_statement()
			}
			{
				p.SetState(7508)
				p.Match(SQLParserSEMI_COLON)
			}


		}
		p.SetState(7514)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1013, p.GetParserRuleContext())
	}



	return localctx
}


// IFunction_statementContext is an interface to support dynamic dispatch.
type IFunction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_statementContext differentiates from other interfaces.
	IsFunction_statementContext()
}

type Function_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_statementContext() *Function_statementContext {
	var p = new(Function_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_function_statement
	return p
}

func (*Function_statementContext) IsFunction_statementContext() {}

func NewFunction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_statementContext {
	var p = new(Function_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_function_statement

	return p
}

func (s *Function_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_statementContext) Function_block() IFunction_blockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_blockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_blockContext)
}

func (s *Function_statementContext) Base_statement() IBase_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBase_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBase_statementContext)
}

func (s *Function_statementContext) Control_statement() IControl_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_statementContext)
}

func (s *Function_statementContext) Transaction_statement() ITransaction_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_statementContext)
}

func (s *Function_statementContext) Cursor_statement() ICursor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_statementContext)
}

func (s *Function_statementContext) Message_statement() IMessage_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMessage_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMessage_statementContext)
}

func (s *Function_statementContext) Schema_statement() ISchema_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_statementContext)
}

func (s *Function_statementContext) Plpgsql_query() IPlpgsql_queryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlpgsql_queryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlpgsql_queryContext)
}

func (s *Function_statementContext) Additional_statement() IAdditional_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditional_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditional_statementContext)
}

func (s *Function_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Function_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterFunction_statement(s)
	}
}

func (s *Function_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitFunction_statement(s)
	}
}




func (p *SQLParser) Function_statement() (localctx IFunction_statementContext) {
	localctx = NewFunction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 742, SQLParserRULE_function_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7524)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1014, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7515)
			p.Function_block()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7516)
			p.Base_statement()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7517)
			p.Control_statement()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7518)
			p.Transaction_statement()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7519)
			p.Cursor_statement()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7520)
			p.Message_statement()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7521)
			p.Schema_statement()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(7522)
			p.Plpgsql_query()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(7523)
			p.Additional_statement()
		}

	}


	return localctx
}


// IBase_statementContext is an interface to support dynamic dispatch.
type IBase_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBase_statementContext differentiates from other interfaces.
	IsBase_statementContext()
}

type Base_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase_statementContext() *Base_statementContext {
	var p = new(Base_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_base_statement
	return p
}

func (*Base_statementContext) IsBase_statementContext() {}

func NewBase_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base_statementContext {
	var p = new(Base_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_base_statement

	return p
}

func (s *Base_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Base_statementContext) Assign_stmt() IAssign_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssign_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssign_stmtContext)
}

func (s *Base_statementContext) PERFORM() antlr.TerminalNode {
	return s.GetToken(SQLParserPERFORM, 0)
}

func (s *Base_statementContext) Perform_stmt() IPerform_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPerform_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPerform_stmtContext)
}

func (s *Base_statementContext) GET() antlr.TerminalNode {
	return s.GetToken(SQLParserGET, 0)
}

func (s *Base_statementContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(SQLParserDIAGNOSTICS, 0)
}

func (s *Base_statementContext) AllDiagnostic_option() []IDiagnostic_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDiagnostic_optionContext)(nil)).Elem())
	var tst = make([]IDiagnostic_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDiagnostic_optionContext)
		}
	}

	return tst
}

func (s *Base_statementContext) Diagnostic_option(i int) IDiagnostic_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDiagnostic_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDiagnostic_optionContext)
}

func (s *Base_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Base_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Base_statementContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLParserCURRENT, 0)
}

func (s *Base_statementContext) STACKED() antlr.TerminalNode {
	return s.GetToken(SQLParserSTACKED, 0)
}

func (s *Base_statementContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLParserNULL, 0)
}

func (s *Base_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Base_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterBase_statement(s)
	}
}

func (s *Base_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitBase_statement(s)
	}
}




func (p *SQLParser) Base_statement() (localctx IBase_statementContext) {
	localctx = NewBase_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 744, SQLParserRULE_base_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7543)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1017, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7526)
			p.Assign_stmt()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7527)
			p.Match(SQLParserPERFORM)
		}
		{
			p.SetState(7528)
			p.Perform_stmt()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7529)
			p.Match(SQLParserGET)
		}
		p.SetState(7531)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCURRENT || _la == SQLParserSTACKED {
			{
				p.SetState(7530)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserCURRENT || _la == SQLParserSTACKED) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(7533)
			p.Match(SQLParserDIAGNOSTICS)
		}
		{
			p.SetState(7534)
			p.Diagnostic_option()
		}
		p.SetState(7539)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7535)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7536)
				p.Diagnostic_option()
			}


			p.SetState(7541)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7542)
			p.Match(SQLParserNULL)
		}

	}


	return localctx
}


// IX_varContext is an interface to support dynamic dispatch.
type IX_varContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsX_varContext differentiates from other interfaces.
	IsX_varContext()
}

type X_varContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyX_varContext() *X_varContext {
	var p = new(X_varContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_x_var
	return p
}

func (*X_varContext) IsX_varContext() {}

func NewX_varContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *X_varContext {
	var p = new(X_varContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_x_var

	return p
}

func (s *X_varContext) GetParser() antlr.Parser { return s.parser }

func (s *X_varContext) Schema_qualified_name() ISchema_qualified_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_qualified_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_qualified_nameContext)
}

func (s *X_varContext) DOLLAR_NUMBER() antlr.TerminalNode {
	return s.GetToken(SQLParserDOLLAR_NUMBER, 0)
}

func (s *X_varContext) AllLEFT_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLEFT_BRACKET)
}

func (s *X_varContext) LEFT_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_BRACKET, i)
}

func (s *X_varContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *X_varContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *X_varContext) AllRIGHT_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(SQLParserRIGHT_BRACKET)
}

func (s *X_varContext) RIGHT_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_BRACKET, i)
}

func (s *X_varContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *X_varContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *X_varContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterX_var(s)
	}
}

func (s *X_varContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitX_var(s)
	}
}




func (p *SQLParser) X_var() (localctx IX_varContext) {
	localctx = NewX_varContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 746, SQLParserRULE_x_var)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7547)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserABORT, SQLParserABSOLUTE, SQLParserACCESS, SQLParserACTION, SQLParserADD, SQLParserADMIN, SQLParserAFTER, SQLParserAGGREGATE, SQLParserALSO, SQLParserALTER, SQLParserALWAYS, SQLParserASSERTION, SQLParserASSIGNMENT, SQLParserAT, SQLParserATTACH, SQLParserATTRIBUTE, SQLParserBACKWARD, SQLParserBEFORE, SQLParserBEGIN, SQLParserBY, SQLParserCACHE, SQLParserCALL, SQLParserCALLED, SQLParserCASCADE, SQLParserCASCADED, SQLParserCATALOG, SQLParserCHAIN, SQLParserCHARACTERISTICS, SQLParserCHECKPOINT, SQLParserCLASS, SQLParserCLOSE, SQLParserCLUSTER, SQLParserCOLUMNS, SQLParserCOMMENT, SQLParserCOMMENTS, SQLParserCOMMIT, SQLParserCOMMITTED, SQLParserCONFIGURATION, SQLParserCONFLICT, SQLParserCONNECTION, SQLParserCONSTRAINTS, SQLParserCONTENT, SQLParserCONTINUE, SQLParserCONVERSION, SQLParserCOPY, SQLParserCOST, SQLParserCSV, SQLParserCUBE, SQLParserCURRENT, SQLParserCURSOR, SQLParserCYCLE, SQLParserDATA, SQLParserDATABASE, SQLParserDAY, SQLParserDEALLOCATE, SQLParserDECLARE, SQLParserDEFAULTS, SQLParserDEFERRED, SQLParserDEFINER, SQLParserDELETE, SQLParserDELIMITER, SQLParserDELIMITERS, SQLParserDEPENDS, SQLParserDETACH, SQLParserDICTIONARY, SQLParserDISABLE, SQLParserDISCARD, SQLParserDOCUMENT, SQLParserDOMAIN, SQLParserDOUBLE, SQLParserDROP, SQLParserEACH, SQLParserENABLE, SQLParserENCODING, SQLParserENCRYPTED, SQLParserENUM, SQLParserESCAPE, SQLParserEVENT, SQLParserEXCLUDE, SQLParserEXCLUDING, SQLParserEXCLUSIVE, SQLParserEXECUTE, SQLParserEXPLAIN, SQLParserEXPRESSION, SQLParserEXTENSION, SQLParserEXTERNAL, SQLParserFAMILY, SQLParserFILTER, SQLParserFIRST, SQLParserFOLLOWING, SQLParserFORCE, SQLParserFORWARD, SQLParserFUNCTION, SQLParserFUNCTIONS, SQLParserGENERATED, SQLParserGLOBAL, SQLParserGRANTED, SQLParserGROUPS, SQLParserHANDLER, SQLParserHEADER, SQLParserHOLD, SQLParserHOUR, SQLParserIDENTITY, SQLParserIF, SQLParserIMMEDIATE, SQLParserIMMUTABLE, SQLParserIMPLICIT, SQLParserIMPORT, SQLParserINCLUDE, SQLParserINCLUDING, SQLParserINCREMENT, SQLParserINDEX, SQLParserINDEXES, SQLParserINHERIT, SQLParserINHERITS, SQLParserINLINE, SQLParserINPUT, SQLParserINSENSITIVE, SQLParserINSERT, SQLParserINSTEAD, SQLParserINVOKER, SQLParserISOLATION, SQLParserKEY, SQLParserLABEL, SQLParserLANGUAGE, SQLParserLARGE, SQLParserLAST, SQLParserLEAKPROOF, SQLParserLEVEL, SQLParserLISTEN, SQLParserLOAD, SQLParserLOCAL, SQLParserLOCATION, SQLParserLOCK, SQLParserLOCKED, SQLParserLOGGED, SQLParserMAPPING, SQLParserMATCH, SQLParserMATERIALIZED, SQLParserMAXVALUE, SQLParserMETHOD, SQLParserMINUTE, SQLParserMINVALUE, SQLParserMODE, SQLParserMONTH, SQLParserMOVE, SQLParserNAME, SQLParserNAMES, SQLParserNEW, SQLParserNEXT, SQLParserNFC, SQLParserNFD, SQLParserNFKC, SQLParserNFKD, SQLParserNO, SQLParserNORMALIZED, SQLParserNOTHING, SQLParserNOTIFY, SQLParserNOWAIT, SQLParserNULLS, SQLParserOBJECT, SQLParserOF, SQLParserOFF, SQLParserOIDS, SQLParserOLD, SQLParserOPERATOR, SQLParserOPTION, SQLParserOPTIONS, SQLParserORDINALITY, SQLParserOTHERS, SQLParserOVER, SQLParserOVERRIDING, SQLParserOWNED, SQLParserOWNER, SQLParserPARALLEL, SQLParserPARSER, SQLParserPARTIAL, SQLParserPARTITION, SQLParserPASSING, SQLParserPASSWORD, SQLParserPLANS, SQLParserPOLICY, SQLParserPRECEDING, SQLParserPREPARE, SQLParserPREPARED, SQLParserPRESERVE, SQLParserPRIOR, SQLParserPRIVILEGES, SQLParserPROCEDURAL, SQLParserPROCEDURE, SQLParserPROCEDURES, SQLParserPROGRAM, SQLParserPUBLICATION, SQLParserQUOTE, SQLParserRANGE, SQLParserREAD, SQLParserREASSIGN, SQLParserRECHECK, SQLParserRECURSIVE, SQLParserREF, SQLParserREFERENCING, SQLParserREFRESH, SQLParserREINDEX, SQLParserRELATIVE, SQLParserRELEASE, SQLParserRENAME, SQLParserREPEATABLE, SQLParserREPLACE, SQLParserREPLICA, SQLParserRESET, SQLParserRESTART, SQLParserRESTRICT, SQLParserRETURNS, SQLParserREVOKE, SQLParserROLE, SQLParserROLLBACK, SQLParserROLLUP, SQLParserROUTINE, SQLParserROUTINES, SQLParserROWS, SQLParserRULE, SQLParserSAVEPOINT, SQLParserSCHEMA, SQLParserSCHEMAS, SQLParserSCROLL, SQLParserSEARCH, SQLParserSECOND, SQLParserSECURITY, SQLParserSEQUENCE, SQLParserSEQUENCES, SQLParserSERIALIZABLE, SQLParserSERVER, SQLParserSESSION, SQLParserSET, SQLParserSETS, SQLParserSHARE, SQLParserSHOW, SQLParserSIMPLE, SQLParserSKIP_, SQLParserSNAPSHOT, SQLParserSQL, SQLParserSTABLE, SQLParserSTANDALONE, SQLParserSTART, SQLParserSTATEMENT, SQLParserSTATISTICS, SQLParserSTDIN, SQLParserSTDOUT, SQLParserSTORAGE, SQLParserSTORED, SQLParserSTRICT, SQLParserSTRIP, SQLParserSUBSCRIPTION, SQLParserSUPPORT, SQLParserSYSID, SQLParserSYSTEM, SQLParserTABLES, SQLParserTABLESPACE, SQLParserTEMP, SQLParserTEMPLATE, SQLParserTEMPORARY, SQLParserTEXT, SQLParserTIES, SQLParserTRANSACTION, SQLParserTRANSFORM, SQLParserTRIGGER, SQLParserTRUNCATE, SQLParserTRUSTED, SQLParserTYPE, SQLParserTYPES, SQLParserUESCAPE, SQLParserUNBOUNDED, SQLParserUNCOMMITTED, SQLParserUNENCRYPTED, SQLParserUNKNOWN, SQLParserUNLISTEN, SQLParserUNLOGGED, SQLParserUNTIL, SQLParserUPDATE, SQLParserVACUUM, SQLParserVALID, SQLParserVALIDATE, SQLParserVALIDATOR, SQLParserVALUE, SQLParserVARYING, SQLParserVERSION, SQLParserVIEW, SQLParserVIEWS, SQLParserVOLATILE, SQLParserWHITESPACE, SQLParserWITHIN, SQLParserWITHOUT, SQLParserWORK, SQLParserWRAPPER, SQLParserWRITE, SQLParserXML, SQLParserYEAR, SQLParserYES, SQLParserZONE, SQLParserBETWEEN, SQLParserBIGINT, SQLParserBIT, SQLParserBOOLEAN, SQLParserCHAR, SQLParserCHARACTER, SQLParserCOALESCE, SQLParserDEC, SQLParserDECIMAL, SQLParserEXISTS, SQLParserEXTRACT, SQLParserFLOAT, SQLParserGREATEST, SQLParserGROUPING, SQLParserINOUT, SQLParserINT, SQLParserINTEGER, SQLParserINTERVAL, SQLParserLEAST, SQLParserNATIONAL, SQLParserNCHAR, SQLParserNONE, SQLParserNORMALIZE, SQLParserNULLIF, SQLParserNUMERIC, SQLParserOUT, SQLParserOVERLAY, SQLParserPOSITION, SQLParserPRECISION, SQLParserREAL, SQLParserROW, SQLParserSETOF, SQLParserSMALLINT, SQLParserSUBSTRING, SQLParserTIME, SQLParserTIMESTAMP, SQLParserTREAT, SQLParserTRIM, SQLParserVALUES, SQLParserVARCHAR, SQLParserXMLATTRIBUTES, SQLParserXMLCONCAT, SQLParserXMLELEMENT, SQLParserXMLEXISTS, SQLParserXMLFOREST, SQLParserXMLNAMESPACES, SQLParserXMLPARSE, SQLParserXMLPI, SQLParserXMLROOT, SQLParserXMLSERIALIZE, SQLParserXMLTABLE, SQLParserALIGNMENT, SQLParserALLOW_CONNECTIONS, SQLParserBASETYPE, SQLParserBUFFERS, SQLParserBYPASSRLS, SQLParserCANONICAL, SQLParserCATEGORY, SQLParserCOLLATABLE, SQLParserCOMBINEFUNC, SQLParserCOMMUTATOR, SQLParserCONNECT, SQLParserCOSTS, SQLParserCREATEDB, SQLParserCREATEROLE, SQLParserDESERIALFUNC, SQLParserDETERMINISTIC, SQLParserDISABLE_PAGE_SKIPPING, SQLParserELEMENT, SQLParserEXTENDED, SQLParserFINALFUNC, SQLParserFINALFUNC_EXTRA, SQLParserFINALFUNC_MODIFY, SQLParserFORCE_NOT_NULL, SQLParserFORCE_NULL, SQLParserFORCE_QUOTE, SQLParserFORMAT, SQLParserGETTOKEN, SQLParserHASH, SQLParserHASHES, SQLParserHEADLINE, SQLParserHYPOTHETICAL, SQLParserINDEX_CLEANUP, SQLParserINIT, SQLParserINITCOND, SQLParserINTERNALLENGTH, SQLParserIS_TEMPLATE, SQLParserJSON, SQLParserLC_COLLATE, SQLParserLC_CTYPE, SQLParserLEFTARG, SQLParserLEXIZE, SQLParserLEXTYPES, SQLParserLIST, SQLParserLOCALE, SQLParserLOGIN, SQLParserMAIN, SQLParserMERGES, SQLParserMFINALFUNC, SQLParserMFINALFUNC_EXTRA, SQLParserMFINALFUNC_MODIFY, SQLParserMINITCOND, SQLParserMINVFUNC, SQLParserMODULUS, SQLParserMSFUNC, SQLParserMSSPACE, SQLParserMSTYPE, SQLParserNEGATOR, SQLParserNOBYPASSRLS, SQLParserNOCREATEDB, SQLParserNOCREATEROLE, SQLParserNOINHERIT, SQLParserNOLOGIN, SQLParserNOREPLICATION, SQLParserNOSUPERUSER, SQLParserOUTPUT, SQLParserPASSEDBYVALUE, SQLParserPATH, SQLParserPERMISSIVE, SQLParserPLAIN, SQLParserPREFERRED, SQLParserPROVIDER, SQLParserREAD_ONLY, SQLParserREAD_WRITE, SQLParserRECEIVE, SQLParserREMAINDER, SQLParserREPLICATION, SQLParserRESTRICTED, SQLParserRESTRICTIVE, SQLParserRIGHTARG, SQLParserSAFE, SQLParserSEND, SQLParserSERIALFUNC, SQLParserSETTINGS, SQLParserSFUNC, SQLParserSHAREABLE, SQLParserSKIP_LOCKED, SQLParserSORTOP, SQLParserSSPACE, SQLParserSTYPE, SQLParserSUBTYPE_DIFF, SQLParserSUBTYPE_OPCLASS, SQLParserSUBTYPE, SQLParserSUMMARY, SQLParserSUPERUSER, SQLParserTIMING, SQLParserTYPMOD_IN, SQLParserTYPMOD_OUT, SQLParserUNSAFE, SQLParserUSAGE, SQLParserVARIABLE, SQLParserWAL, SQLParserYAML, SQLParserALIAS, SQLParserASSERT, SQLParserCONSTANT, SQLParserDATATYPE, SQLParserDEBUG, SQLParserDETAIL, SQLParserDIAGNOSTICS, SQLParserELSEIF, SQLParserELSIF, SQLParserERRCODE, SQLParserEXIT, SQLParserEXCEPTION, SQLParserFOREACH, SQLParserGET, SQLParserHINT, SQLParserINFO, SQLParserLOG, SQLParserLOOP, SQLParserMESSAGE, SQLParserNOTICE, SQLParserOPEN, SQLParserPERFORM, SQLParserQUERY, SQLParserRAISE, SQLParserRECORD, SQLParserRETURN, SQLParserREVERSE, SQLParserROWTYPE, SQLParserSLICE, SQLParserSQLSTATE, SQLParserSTACKED, SQLParserWARNING, SQLParserWHILE, SQLParserIdentifier, SQLParserQuotedIdentifier:
		{
			p.SetState(7545)
			p.Schema_qualified_name()
		}


	case SQLParserDOLLAR_NUMBER:
		{
			p.SetState(7546)
			p.Match(SQLParserDOLLAR_NUMBER)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(7555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserLEFT_BRACKET {
		{
			p.SetState(7549)
			p.Match(SQLParserLEFT_BRACKET)
		}
		{
			p.SetState(7550)
			p.vex(0)
		}
		{
			p.SetState(7551)
			p.Match(SQLParserRIGHT_BRACKET)
		}


		p.SetState(7557)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IDiagnostic_optionContext is an interface to support dynamic dispatch.
type IDiagnostic_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDiagnostic_optionContext differentiates from other interfaces.
	IsDiagnostic_optionContext()
}

type Diagnostic_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDiagnostic_optionContext() *Diagnostic_optionContext {
	var p = new(Diagnostic_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_diagnostic_option
	return p
}

func (*Diagnostic_optionContext) IsDiagnostic_optionContext() {}

func NewDiagnostic_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Diagnostic_optionContext {
	var p = new(Diagnostic_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_diagnostic_option

	return p
}

func (s *Diagnostic_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Diagnostic_optionContext) X_var() IX_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IX_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IX_varContext)
}

func (s *Diagnostic_optionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Diagnostic_optionContext) COLON_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLON_EQUAL, 0)
}

func (s *Diagnostic_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Diagnostic_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Diagnostic_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Diagnostic_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterDiagnostic_option(s)
	}
}

func (s *Diagnostic_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitDiagnostic_option(s)
	}
}




func (p *SQLParser) Diagnostic_option() (localctx IDiagnostic_optionContext) {
	localctx = NewDiagnostic_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 748, SQLParserRULE_diagnostic_option)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7558)
		p.X_var()
	}
	{
		p.SetState(7559)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserEQUAL || _la == SQLParserCOLON_EQUAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(7560)
		p.Identifier()
	}



	return localctx
}


// IPerform_stmtContext is an interface to support dynamic dispatch.
type IPerform_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPerform_stmtContext differentiates from other interfaces.
	IsPerform_stmtContext()
}

type Perform_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPerform_stmtContext() *Perform_stmtContext {
	var p = new(Perform_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_perform_stmt
	return p
}

func (*Perform_stmtContext) IsPerform_stmtContext() {}

func NewPerform_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Perform_stmtContext {
	var p = new(Perform_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_perform_stmt

	return p
}

func (s *Perform_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Perform_stmtContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Perform_stmtContext) AllSet_qualifier() []ISet_qualifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISet_qualifierContext)(nil)).Elem())
	var tst = make([]ISet_qualifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISet_qualifierContext)
		}
	}

	return tst
}

func (s *Perform_stmtContext) Set_qualifier(i int) ISet_qualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_qualifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISet_qualifierContext)
}

func (s *Perform_stmtContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Perform_stmtContext) AllFrom_item() []IFrom_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem())
	var tst = make([]IFrom_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrom_itemContext)
		}
	}

	return tst
}

func (s *Perform_stmtContext) From_item(i int) IFrom_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *Perform_stmtContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHERE, 0)
}

func (s *Perform_stmtContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Perform_stmtContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Perform_stmtContext) Groupby_clause() IGroupby_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupby_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupby_clauseContext)
}

func (s *Perform_stmtContext) HAVING() antlr.TerminalNode {
	return s.GetToken(SQLParserHAVING, 0)
}

func (s *Perform_stmtContext) WINDOW() antlr.TerminalNode {
	return s.GetToken(SQLParserWINDOW, 0)
}

func (s *Perform_stmtContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Perform_stmtContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Perform_stmtContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(SQLParserAS)
}

func (s *Perform_stmtContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserAS, i)
}

func (s *Perform_stmtContext) AllWindow_definition() []IWindow_definitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_definitionContext)(nil)).Elem())
	var tst = make([]IWindow_definitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_definitionContext)
		}
	}

	return tst
}

func (s *Perform_stmtContext) Window_definition(i int) IWindow_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_definitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_definitionContext)
}

func (s *Perform_stmtContext) Select_ops() ISelect_opsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_opsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_opsContext)
}

func (s *Perform_stmtContext) AllAfter_ops() []IAfter_opsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAfter_opsContext)(nil)).Elem())
	var tst = make([]IAfter_opsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAfter_opsContext)
		}
	}

	return tst
}

func (s *Perform_stmtContext) After_ops(i int) IAfter_opsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAfter_opsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAfter_opsContext)
}

func (s *Perform_stmtContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLParserINTERSECT, 0)
}

func (s *Perform_stmtContext) UNION() antlr.TerminalNode {
	return s.GetToken(SQLParserUNION, 0)
}

func (s *Perform_stmtContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCEPT, 0)
}

func (s *Perform_stmtContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLParserON, 0)
}

func (s *Perform_stmtContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Perform_stmtContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Perform_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Perform_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Perform_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Perform_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Perform_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPerform_stmt(s)
	}
}

func (s *Perform_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPerform_stmt(s)
	}
}




func (p *SQLParser) Perform_stmt() (localctx IPerform_stmtContext) {
	localctx = NewPerform_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 750, SQLParserRULE_perform_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7577)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1022, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7562)
			p.Set_qualifier()
		}
		p.SetState(7575)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1021, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7563)
				p.Match(SQLParserON)
			}
			{
				p.SetState(7564)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(7565)
				p.vex(0)
			}
			p.SetState(7570)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(7566)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(7567)
					p.vex(0)
				}


				p.SetState(7572)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(7573)
				p.Match(SQLParserRIGHT_PAREN)
			}


		}


	}
	{
		p.SetState(7579)
		p.Select_list()
	}
	p.SetState(7589)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserFROM {
		{
			p.SetState(7580)
			p.Match(SQLParserFROM)
		}
		{
			p.SetState(7581)
			p.from_item(0)
		}
		p.SetState(7586)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7582)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7583)
				p.from_item(0)
			}


			p.SetState(7588)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(7593)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWHERE {
		{
			p.SetState(7591)
			p.Match(SQLParserWHERE)
		}
		{
			p.SetState(7592)
			p.vex(0)
		}

	}
	p.SetState(7596)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserGROUP {
		{
			p.SetState(7595)
			p.Groupby_clause()
		}

	}
	p.SetState(7600)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserHAVING {
		{
			p.SetState(7598)
			p.Match(SQLParserHAVING)
		}
		{
			p.SetState(7599)
			p.vex(0)
		}

	}
	p.SetState(7616)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserWINDOW {
		{
			p.SetState(7602)
			p.Match(SQLParserWINDOW)
		}
		{
			p.SetState(7603)
			p.Identifier()
		}
		{
			p.SetState(7604)
			p.Match(SQLParserAS)
		}
		{
			p.SetState(7605)
			p.Window_definition()
		}
		p.SetState(7613)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7606)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7607)
				p.Identifier()
			}
			{
				p.SetState(7608)
				p.Match(SQLParserAS)
			}
			{
				p.SetState(7609)
				p.Window_definition()
			}


			p.SetState(7615)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(7623)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserEXCEPT || _la == SQLParserINTERSECT || _la == SQLParserUNION {
		{
			p.SetState(7618)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserEXCEPT || _la == SQLParserINTERSECT || _la == SQLParserUNION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(7620)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserALL || _la == SQLParserDISTINCT {
			{
				p.SetState(7619)
				p.Set_qualifier()
			}

		}
		{
			p.SetState(7622)
			p.select_ops(0)
		}

	}
	p.SetState(7628)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ((((_la - 405)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 405))) & ((1 << (SQLParserFETCH - 405)) | (1 << (SQLParserFOR - 405)) | (1 << (SQLParserLIMIT - 405)) | (1 << (SQLParserOFFSET - 405)) | (1 << (SQLParserORDER - 405)))) != 0) {
		{
			p.SetState(7625)
			p.After_ops()
		}


		p.SetState(7630)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAssign_stmtContext is an interface to support dynamic dispatch.
type IAssign_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssign_stmtContext differentiates from other interfaces.
	IsAssign_stmtContext()
}

type Assign_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssign_stmtContext() *Assign_stmtContext {
	var p = new(Assign_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_assign_stmt
	return p
}

func (*Assign_stmtContext) IsAssign_stmtContext() {}

func NewAssign_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assign_stmtContext {
	var p = new(Assign_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_assign_stmt

	return p
}

func (s *Assign_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Assign_stmtContext) X_var() IX_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IX_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IX_varContext)
}

func (s *Assign_stmtContext) COLON_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLON_EQUAL, 0)
}

func (s *Assign_stmtContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, 0)
}

func (s *Assign_stmtContext) Select_stmt_no_parens() ISelect_stmt_no_parensContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_stmt_no_parensContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_stmt_no_parensContext)
}

func (s *Assign_stmtContext) Perform_stmt() IPerform_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPerform_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPerform_stmtContext)
}

func (s *Assign_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assign_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Assign_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterAssign_stmt(s)
	}
}

func (s *Assign_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitAssign_stmt(s)
	}
}




func (p *SQLParser) Assign_stmt() (localctx IAssign_stmtContext) {
	localctx = NewAssign_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 752, SQLParserRULE_assign_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7631)
		p.X_var()
	}
	{
		p.SetState(7632)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserEQUAL || _la == SQLParserCOLON_EQUAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(7635)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1033, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(7633)
			p.Select_stmt_no_parens()
		}


	case 2:
		{
			p.SetState(7634)
			p.Perform_stmt()
		}

	}



	return localctx
}


// IExecute_stmtContext is an interface to support dynamic dispatch.
type IExecute_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_stmtContext differentiates from other interfaces.
	IsExecute_stmtContext()
}

type Execute_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_stmtContext() *Execute_stmtContext {
	var p = new(Execute_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_execute_stmt
	return p
}

func (*Execute_stmtContext) IsExecute_stmtContext() {}

func NewExecute_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_stmtContext {
	var p = new(Execute_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_execute_stmt

	return p
}

func (s *Execute_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_stmtContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(SQLParserEXECUTE, 0)
}

func (s *Execute_stmtContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Execute_stmtContext) Using_vex() IUsing_vexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsing_vexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsing_vexContext)
}

func (s *Execute_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Execute_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterExecute_stmt(s)
	}
}

func (s *Execute_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitExecute_stmt(s)
	}
}




func (p *SQLParser) Execute_stmt() (localctx IExecute_stmtContext) {
	localctx = NewExecute_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 754, SQLParserRULE_execute_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7637)
		p.Match(SQLParserEXECUTE)
	}
	{
		p.SetState(7638)
		p.vex(0)
	}
	p.SetState(7640)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserUSING {
		{
			p.SetState(7639)
			p.Using_vex()
		}

	}



	return localctx
}


// IControl_statementContext is an interface to support dynamic dispatch.
type IControl_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControl_statementContext differentiates from other interfaces.
	IsControl_statementContext()
}

type Control_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControl_statementContext() *Control_statementContext {
	var p = new(Control_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_control_statement
	return p
}

func (*Control_statementContext) IsControl_statementContext() {}

func NewControl_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_statementContext {
	var p = new(Control_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_control_statement

	return p
}

func (s *Control_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_statementContext) Return_stmt() IReturn_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturn_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturn_stmtContext)
}

func (s *Control_statementContext) CALL() antlr.TerminalNode {
	return s.GetToken(SQLParserCALL, 0)
}

func (s *Control_statementContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Control_statementContext) If_statement() IIf_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_statementContext)
}

func (s *Control_statementContext) Case_statement() ICase_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_statementContext)
}

func (s *Control_statementContext) Loop_statement() ILoop_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_statementContext)
}

func (s *Control_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Control_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterControl_statement(s)
	}
}

func (s *Control_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitControl_statement(s)
	}
}




func (p *SQLParser) Control_statement() (localctx IControl_statementContext) {
	localctx = NewControl_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 756, SQLParserRULE_control_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7648)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserRETURN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7642)
			p.Return_stmt()
		}


	case SQLParserCALL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7643)
			p.Match(SQLParserCALL)
		}
		{
			p.SetState(7644)
			p.Function_call()
		}


	case SQLParserIF:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7645)
			p.If_statement()
		}


	case SQLParserCASE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7646)
			p.Case_statement()
		}


	case SQLParserCONTINUE, SQLParserFOR, SQLParserEXIT, SQLParserFOREACH, SQLParserLOOP, SQLParserWHILE, SQLParserLESS_LESS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7647)
			p.Loop_statement()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICursor_statementContext is an interface to support dynamic dispatch.
type ICursor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_statementContext differentiates from other interfaces.
	IsCursor_statementContext()
}

type Cursor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_statementContext() *Cursor_statementContext {
	var p = new(Cursor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_cursor_statement
	return p
}

func (*Cursor_statementContext) IsCursor_statementContext() {}

func NewCursor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_statementContext {
	var p = new(Cursor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_cursor_statement

	return p
}

func (s *Cursor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(SQLParserOPEN, 0)
}

func (s *Cursor_statementContext) X_var() IX_varContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IX_varContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IX_varContext)
}

func (s *Cursor_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Cursor_statementContext) Plpgsql_query() IPlpgsql_queryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlpgsql_queryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlpgsql_queryContext)
}

func (s *Cursor_statementContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(SQLParserSCROLL, 0)
}

func (s *Cursor_statementContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Cursor_statementContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Cursor_statementContext) AllOption() []IOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptionContext)(nil)).Elem())
	var tst = make([]IOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptionContext)
		}
	}

	return tst
}

func (s *Cursor_statementContext) Option(i int) IOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptionContext)
}

func (s *Cursor_statementContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Cursor_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Cursor_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Cursor_statementContext) FETCH() antlr.TerminalNode {
	return s.GetToken(SQLParserFETCH, 0)
}

func (s *Cursor_statementContext) Fetch_move_direction() IFetch_move_directionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_move_directionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_move_directionContext)
}

func (s *Cursor_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLParserFROM, 0)
}

func (s *Cursor_statementContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Cursor_statementContext) MOVE() antlr.TerminalNode {
	return s.GetToken(SQLParserMOVE, 0)
}

func (s *Cursor_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(SQLParserCLOSE, 0)
}

func (s *Cursor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Cursor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCursor_statement(s)
	}
}

func (s *Cursor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCursor_statement(s)
	}
}




func (p *SQLParser) Cursor_statement() (localctx ICursor_statementContext) {
	localctx = NewCursor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 758, SQLParserRULE_cursor_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7694)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1044, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7650)
			p.Match(SQLParserOPEN)
		}
		{
			p.SetState(7651)
			p.X_var()
		}
		p.SetState(7656)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserNO || _la == SQLParserSCROLL {
			p.SetState(7653)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserNO {
				{
					p.SetState(7652)
					p.Match(SQLParserNO)
				}

			}
			{
				p.SetState(7655)
				p.Match(SQLParserSCROLL)
			}

		}
		{
			p.SetState(7658)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(7659)
			p.Plpgsql_query()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7661)
			p.Match(SQLParserOPEN)
		}
		{
			p.SetState(7662)
			p.X_var()
		}
		p.SetState(7674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(7663)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(7664)
				p.Option()
			}
			p.SetState(7669)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(7665)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(7666)
					p.Option()
				}


				p.SetState(7671)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(7672)
				p.Match(SQLParserRIGHT_PAREN)
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7676)
			p.Match(SQLParserFETCH)
		}
		p.SetState(7678)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1040, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7677)
				p.Fetch_move_direction()
			}


		}
		p.SetState(7681)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFROM || _la == SQLParserIN {
			{
				p.SetState(7680)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserFROM || _la == SQLParserIN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(7683)
			p.X_var()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7684)
			p.Match(SQLParserMOVE)
		}
		p.SetState(7686)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1042, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7685)
				p.Fetch_move_direction()
			}


		}
		p.SetState(7689)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFROM || _la == SQLParserIN {
			{
				p.SetState(7688)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLParserFROM || _la == SQLParserIN) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(7691)
			p.X_var()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7692)
			p.Match(SQLParserCLOSE)
		}
		{
			p.SetState(7693)
			p.X_var()
		}

	}


	return localctx
}


// IOptionContext is an interface to support dynamic dispatch.
type IOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionContext differentiates from other interfaces.
	IsOptionContext()
}

type OptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionContext() *OptionContext {
	var p = new(OptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_option
	return p
}

func (*OptionContext) IsOptionContext() {}

func NewOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionContext {
	var p = new(OptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_option

	return p
}

func (s *OptionContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *OptionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *OptionContext) COLON_EQUAL() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLON_EQUAL, 0)
}

func (s *OptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *OptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterOption(s)
	}
}

func (s *OptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitOption(s)
	}
}




func (p *SQLParser) Option() (localctx IOptionContext) {
	localctx = NewOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 760, SQLParserRULE_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7699)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1045, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7696)
			p.Identifier()
		}
		{
			p.SetState(7697)
			p.Match(SQLParserCOLON_EQUAL)
		}


	}
	{
		p.SetState(7701)
		p.vex(0)
	}



	return localctx
}


// ITransaction_statementContext is an interface to support dynamic dispatch.
type ITransaction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_statementContext differentiates from other interfaces.
	IsTransaction_statementContext()
}

type Transaction_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_statementContext() *Transaction_statementContext {
	var p = new(Transaction_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_transaction_statement
	return p
}

func (*Transaction_statementContext) IsTransaction_statementContext() {}

func NewTransaction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_statementContext {
	var p = new(Transaction_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_transaction_statement

	return p
}

func (s *Transaction_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_statementContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMIT, 0)
}

func (s *Transaction_statementContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLParserROLLBACK, 0)
}

func (s *Transaction_statementContext) AND() antlr.TerminalNode {
	return s.GetToken(SQLParserAND, 0)
}

func (s *Transaction_statementContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(SQLParserCHAIN, 0)
}

func (s *Transaction_statementContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLParserNO, 0)
}

func (s *Transaction_statementContext) Lock_table() ILock_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILock_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILock_tableContext)
}

func (s *Transaction_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Transaction_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterTransaction_statement(s)
	}
}

func (s *Transaction_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitTransaction_statement(s)
	}
}




func (p *SQLParser) Transaction_statement() (localctx ITransaction_statementContext) {
	localctx = NewTransaction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 762, SQLParserRULE_transaction_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7712)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserCOMMIT, SQLParserROLLBACK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7703)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCOMMIT || _la == SQLParserROLLBACK) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(7709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserAND {
			{
				p.SetState(7704)
				p.Match(SQLParserAND)
			}
			p.SetState(7706)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SQLParserNO {
				{
					p.SetState(7705)
					p.Match(SQLParserNO)
				}

			}
			{
				p.SetState(7708)
				p.Match(SQLParserCHAIN)
			}

		}


	case SQLParserLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7711)
			p.Lock_table()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IMessage_statementContext is an interface to support dynamic dispatch.
type IMessage_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMessage_statementContext differentiates from other interfaces.
	IsMessage_statementContext()
}

type Message_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMessage_statementContext() *Message_statementContext {
	var p = new(Message_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_message_statement
	return p
}

func (*Message_statementContext) IsMessage_statementContext() {}

func NewMessage_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Message_statementContext {
	var p = new(Message_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_message_statement

	return p
}

func (s *Message_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Message_statementContext) RAISE() antlr.TerminalNode {
	return s.GetToken(SQLParserRAISE, 0)
}

func (s *Message_statementContext) Log_level() ILog_levelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILog_levelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILog_levelContext)
}

func (s *Message_statementContext) Character_string() ICharacter_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharacter_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharacter_stringContext)
}

func (s *Message_statementContext) Raise_using() IRaise_usingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRaise_usingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRaise_usingContext)
}

func (s *Message_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Message_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Message_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Message_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Message_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Message_statementContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(SQLParserSQLSTATE, 0)
}

func (s *Message_statementContext) ASSERT() antlr.TerminalNode {
	return s.GetToken(SQLParserASSERT, 0)
}

func (s *Message_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Message_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Message_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterMessage_statement(s)
	}
}

func (s *Message_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitMessage_statement(s)
	}
}




func (p *SQLParser) Message_statement() (localctx IMessage_statementContext) {
	localctx = NewMessage_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 764, SQLParserRULE_message_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7754)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1058, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7714)
			p.Match(SQLParserRAISE)
		}
		p.SetState(7716)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 556)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 556))) & ((1 << (SQLParserDEBUG - 556)) | (1 << (SQLParserEXCEPTION - 556)) | (1 << (SQLParserINFO - 556)) | (1 << (SQLParserLOG - 556)) | (1 << (SQLParserNOTICE - 556)) | (1 << (SQLParserWARNING - 556)))) != 0) {
			{
				p.SetState(7715)
				p.Log_level()
			}

		}
		p.SetState(7726)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCharacter_String_Literal || _la == SQLParserBeginDollarStringConstant {
			{
				p.SetState(7718)
				p.Character_string()
			}
			p.SetState(7723)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(7719)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(7720)
					p.vex(0)
				}


				p.SetState(7725)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(7729)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserUSING {
			{
				p.SetState(7728)
				p.Raise_using()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7731)
			p.Match(SQLParserRAISE)
		}
		p.SetState(7733)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1053, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7732)
				p.Log_level()
			}


		}
		{
			p.SetState(7735)
			p.Identifier()
		}
		p.SetState(7737)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserUSING {
			{
				p.SetState(7736)
				p.Raise_using()
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7739)
			p.Match(SQLParserRAISE)
		}
		p.SetState(7741)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if ((((_la - 556)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 556))) & ((1 << (SQLParserDEBUG - 556)) | (1 << (SQLParserEXCEPTION - 556)) | (1 << (SQLParserINFO - 556)) | (1 << (SQLParserLOG - 556)) | (1 << (SQLParserNOTICE - 556)) | (1 << (SQLParserWARNING - 556)))) != 0) {
			{
				p.SetState(7740)
				p.Log_level()
			}

		}
		{
			p.SetState(7743)
			p.Match(SQLParserSQLSTATE)
		}
		{
			p.SetState(7744)
			p.Character_string()
		}
		p.SetState(7746)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserUSING {
			{
				p.SetState(7745)
				p.Raise_using()
			}

		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7748)
			p.Match(SQLParserASSERT)
		}
		{
			p.SetState(7749)
			p.vex(0)
		}
		p.SetState(7752)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserCOMMA {
			{
				p.SetState(7750)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7751)
				p.vex(0)
			}

		}

	}


	return localctx
}


// ILog_levelContext is an interface to support dynamic dispatch.
type ILog_levelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLog_levelContext differentiates from other interfaces.
	IsLog_levelContext()
}

type Log_levelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLog_levelContext() *Log_levelContext {
	var p = new(Log_levelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_log_level
	return p
}

func (*Log_levelContext) IsLog_levelContext() {}

func NewLog_levelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Log_levelContext {
	var p = new(Log_levelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_log_level

	return p
}

func (s *Log_levelContext) GetParser() antlr.Parser { return s.parser }

func (s *Log_levelContext) DEBUG() antlr.TerminalNode {
	return s.GetToken(SQLParserDEBUG, 0)
}

func (s *Log_levelContext) LOG() antlr.TerminalNode {
	return s.GetToken(SQLParserLOG, 0)
}

func (s *Log_levelContext) INFO() antlr.TerminalNode {
	return s.GetToken(SQLParserINFO, 0)
}

func (s *Log_levelContext) NOTICE() antlr.TerminalNode {
	return s.GetToken(SQLParserNOTICE, 0)
}

func (s *Log_levelContext) WARNING() antlr.TerminalNode {
	return s.GetToken(SQLParserWARNING, 0)
}

func (s *Log_levelContext) EXCEPTION() antlr.TerminalNode {
	return s.GetToken(SQLParserEXCEPTION, 0)
}

func (s *Log_levelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Log_levelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Log_levelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterLog_level(s)
	}
}

func (s *Log_levelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitLog_level(s)
	}
}




func (p *SQLParser) Log_level() (localctx ILog_levelContext) {
	localctx = NewLog_levelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 766, SQLParserRULE_log_level)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7756)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 556)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 556))) & ((1 << (SQLParserDEBUG - 556)) | (1 << (SQLParserEXCEPTION - 556)) | (1 << (SQLParserINFO - 556)) | (1 << (SQLParserLOG - 556)) | (1 << (SQLParserNOTICE - 556)) | (1 << (SQLParserWARNING - 556)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IRaise_usingContext is an interface to support dynamic dispatch.
type IRaise_usingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRaise_usingContext differentiates from other interfaces.
	IsRaise_usingContext()
}

type Raise_usingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaise_usingContext() *Raise_usingContext {
	var p = new(Raise_usingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_raise_using
	return p
}

func (*Raise_usingContext) IsRaise_usingContext() {}

func NewRaise_usingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raise_usingContext {
	var p = new(Raise_usingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_raise_using

	return p
}

func (s *Raise_usingContext) GetParser() antlr.Parser { return s.parser }

func (s *Raise_usingContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Raise_usingContext) AllRaise_param() []IRaise_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRaise_paramContext)(nil)).Elem())
	var tst = make([]IRaise_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRaise_paramContext)
		}
	}

	return tst
}

func (s *Raise_usingContext) Raise_param(i int) IRaise_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRaise_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRaise_paramContext)
}

func (s *Raise_usingContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(SQLParserEQUAL)
}

func (s *Raise_usingContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserEQUAL, i)
}

func (s *Raise_usingContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Raise_usingContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Raise_usingContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Raise_usingContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Raise_usingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_usingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Raise_usingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRaise_using(s)
	}
}

func (s *Raise_usingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRaise_using(s)
	}
}




func (p *SQLParser) Raise_using() (localctx IRaise_usingContext) {
	localctx = NewRaise_usingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 768, SQLParserRULE_raise_using)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7758)
		p.Match(SQLParserUSING)
	}
	{
		p.SetState(7759)
		p.Raise_param()
	}
	{
		p.SetState(7760)
		p.Match(SQLParserEQUAL)
	}
	{
		p.SetState(7761)
		p.vex(0)
	}
	p.SetState(7769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7762)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7763)
			p.Raise_param()
		}
		{
			p.SetState(7764)
			p.Match(SQLParserEQUAL)
		}
		{
			p.SetState(7765)
			p.vex(0)
		}


		p.SetState(7771)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IRaise_paramContext is an interface to support dynamic dispatch.
type IRaise_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRaise_paramContext differentiates from other interfaces.
	IsRaise_paramContext()
}

type Raise_paramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaise_paramContext() *Raise_paramContext {
	var p = new(Raise_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_raise_param
	return p
}

func (*Raise_paramContext) IsRaise_paramContext() {}

func NewRaise_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raise_paramContext {
	var p = new(Raise_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_raise_param

	return p
}

func (s *Raise_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Raise_paramContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(SQLParserMESSAGE, 0)
}

func (s *Raise_paramContext) DETAIL() antlr.TerminalNode {
	return s.GetToken(SQLParserDETAIL, 0)
}

func (s *Raise_paramContext) HINT() antlr.TerminalNode {
	return s.GetToken(SQLParserHINT, 0)
}

func (s *Raise_paramContext) ERRCODE() antlr.TerminalNode {
	return s.GetToken(SQLParserERRCODE, 0)
}

func (s *Raise_paramContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLParserCOLUMN, 0)
}

func (s *Raise_paramContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(SQLParserCONSTRAINT, 0)
}

func (s *Raise_paramContext) DATATYPE() antlr.TerminalNode {
	return s.GetToken(SQLParserDATATYPE, 0)
}

func (s *Raise_paramContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLParserTABLE, 0)
}

func (s *Raise_paramContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLParserSCHEMA, 0)
}

func (s *Raise_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Raise_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterRaise_param(s)
	}
}

func (s *Raise_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitRaise_param(s)
	}
}




func (p *SQLParser) Raise_param() (localctx IRaise_paramContext) {
	localctx = NewRaise_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 770, SQLParserRULE_raise_param)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7772)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLParserSCHEMA || _la == SQLParserCOLUMN || _la == SQLParserCONSTRAINT || _la == SQLParserTABLE || ((((_la - 555)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 555))) & ((1 << (SQLParserDATATYPE - 555)) | (1 << (SQLParserDETAIL - 555)) | (1 << (SQLParserERRCODE - 555)) | (1 << (SQLParserHINT - 555)) | (1 << (SQLParserMESSAGE - 555)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IReturn_stmtContext is an interface to support dynamic dispatch.
type IReturn_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturn_stmtContext differentiates from other interfaces.
	IsReturn_stmtContext()
}

type Return_stmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturn_stmtContext() *Return_stmtContext {
	var p = new(Return_stmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_return_stmt
	return p
}

func (*Return_stmtContext) IsReturn_stmtContext() {}

func NewReturn_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Return_stmtContext {
	var p = new(Return_stmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_return_stmt

	return p
}

func (s *Return_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Return_stmtContext) RETURN() antlr.TerminalNode {
	return s.GetToken(SQLParserRETURN, 0)
}

func (s *Return_stmtContext) Perform_stmt() IPerform_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPerform_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPerform_stmtContext)
}

func (s *Return_stmtContext) NEXT() antlr.TerminalNode {
	return s.GetToken(SQLParserNEXT, 0)
}

func (s *Return_stmtContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Return_stmtContext) QUERY() antlr.TerminalNode {
	return s.GetToken(SQLParserQUERY, 0)
}

func (s *Return_stmtContext) Plpgsql_query() IPlpgsql_queryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlpgsql_queryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlpgsql_queryContext)
}

func (s *Return_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Return_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterReturn_stmt(s)
	}
}

func (s *Return_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitReturn_stmt(s)
	}
}




func (p *SQLParser) Return_stmt() (localctx IReturn_stmtContext) {
	localctx = NewReturn_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 772, SQLParserRULE_return_stmt)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7784)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1061, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7774)
			p.Match(SQLParserRETURN)
		}
		p.SetState(7776)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)) | (1 << (SQLParserALL - 352)) | (1 << (SQLParserANY - 352)) | (1 << (SQLParserARRAY - 352)) | (1 << (SQLParserCASE - 352)))) != 0) || ((((_la - 384)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 384))) & ((1 << (SQLParserCAST - 384)) | (1 << (SQLParserCURRENT_CATALOG - 384)) | (1 << (SQLParserCURRENT_DATE - 384)) | (1 << (SQLParserCURRENT_TIME - 384)) | (1 << (SQLParserCURRENT_TIMESTAMP - 384)) | (1 << (SQLParserCURRENT_USER - 384)) | (1 << (SQLParserDISTINCT - 384)) | (1 << (SQLParserFALSE - 384)))) != 0) || ((((_la - 419)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 419))) & ((1 << (SQLParserLOCALTIME - 419)) | (1 << (SQLParserLOCALTIMESTAMP - 419)) | (1 << (SQLParserNOT - 419)) | (1 << (SQLParserNULL - 419)) | (1 << (SQLParserON - 419)) | (1 << (SQLParserSESSION_USER - 419)) | (1 << (SQLParserSOME - 419)) | (1 << (SQLParserTRUE - 419)) | (1 << (SQLParserUSER - 419)) | (1 << (SQLParserALIGNMENT - 419)))) != 0) || ((((_la - 451)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 451))) & ((1 << (SQLParserALLOW_CONNECTIONS - 451)) | (1 << (SQLParserBASETYPE - 451)) | (1 << (SQLParserBUFFERS - 451)) | (1 << (SQLParserBYPASSRLS - 451)) | (1 << (SQLParserCANONICAL - 451)) | (1 << (SQLParserCATEGORY - 451)) | (1 << (SQLParserCOLLATABLE - 451)) | (1 << (SQLParserCOMBINEFUNC - 451)) | (1 << (SQLParserCOMMUTATOR - 451)) | (1 << (SQLParserCONNECT - 451)) | (1 << (SQLParserCOSTS - 451)) | (1 << (SQLParserCREATEDB - 451)) | (1 << (SQLParserCREATEROLE - 451)) | (1 << (SQLParserDESERIALFUNC - 451)) | (1 << (SQLParserDETERMINISTIC - 451)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 451)) | (1 << (SQLParserELEMENT - 451)) | (1 << (SQLParserEXTENDED - 451)) | (1 << (SQLParserFINALFUNC - 451)) | (1 << (SQLParserFINALFUNC_EXTRA - 451)) | (1 << (SQLParserFINALFUNC_MODIFY - 451)) | (1 << (SQLParserFORCE_NOT_NULL - 451)) | (1 << (SQLParserFORCE_NULL - 451)) | (1 << (SQLParserFORCE_QUOTE - 451)) | (1 << (SQLParserFORMAT - 451)) | (1 << (SQLParserGETTOKEN - 451)) | (1 << (SQLParserHASH - 451)) | (1 << (SQLParserHASHES - 451)) | (1 << (SQLParserHEADLINE - 451)) | (1 << (SQLParserHYPOTHETICAL - 451)) | (1 << (SQLParserINDEX_CLEANUP - 451)) | (1 << (SQLParserINIT - 451)))) != 0) || ((((_la - 483)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 483))) & ((1 << (SQLParserINITCOND - 483)) | (1 << (SQLParserINTERNALLENGTH - 483)) | (1 << (SQLParserIS_TEMPLATE - 483)) | (1 << (SQLParserJSON - 483)) | (1 << (SQLParserLC_COLLATE - 483)) | (1 << (SQLParserLC_CTYPE - 483)) | (1 << (SQLParserLEFTARG - 483)) | (1 << (SQLParserLEXIZE - 483)) | (1 << (SQLParserLEXTYPES - 483)) | (1 << (SQLParserLIST - 483)) | (1 << (SQLParserLOCALE - 483)) | (1 << (SQLParserLOGIN - 483)) | (1 << (SQLParserMAIN - 483)) | (1 << (SQLParserMERGES - 483)) | (1 << (SQLParserMFINALFUNC - 483)) | (1 << (SQLParserMFINALFUNC_EXTRA - 483)) | (1 << (SQLParserMFINALFUNC_MODIFY - 483)) | (1 << (SQLParserMINITCOND - 483)) | (1 << (SQLParserMINVFUNC - 483)) | (1 << (SQLParserMODULUS - 483)) | (1 << (SQLParserMSFUNC - 483)) | (1 << (SQLParserMSSPACE - 483)) | (1 << (SQLParserMSTYPE - 483)) | (1 << (SQLParserNEGATOR - 483)) | (1 << (SQLParserNOBYPASSRLS - 483)) | (1 << (SQLParserNOCREATEDB - 483)) | (1 << (SQLParserNOCREATEROLE - 483)) | (1 << (SQLParserNOINHERIT - 483)) | (1 << (SQLParserNOLOGIN - 483)) | (1 << (SQLParserNOREPLICATION - 483)) | (1 << (SQLParserNOSUPERUSER - 483)) | (1 << (SQLParserOUTPUT - 483)))) != 0) || ((((_la - 515)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 515))) & ((1 << (SQLParserPASSEDBYVALUE - 515)) | (1 << (SQLParserPATH - 515)) | (1 << (SQLParserPERMISSIVE - 515)) | (1 << (SQLParserPLAIN - 515)) | (1 << (SQLParserPREFERRED - 515)) | (1 << (SQLParserPROVIDER - 515)) | (1 << (SQLParserREAD_ONLY - 515)) | (1 << (SQLParserREAD_WRITE - 515)) | (1 << (SQLParserRECEIVE - 515)) | (1 << (SQLParserREMAINDER - 515)) | (1 << (SQLParserREPLICATION - 515)) | (1 << (SQLParserRESTRICTED - 515)) | (1 << (SQLParserRESTRICTIVE - 515)) | (1 << (SQLParserRIGHTARG - 515)) | (1 << (SQLParserSAFE - 515)) | (1 << (SQLParserSEND - 515)) | (1 << (SQLParserSERIALFUNC - 515)) | (1 << (SQLParserSETTINGS - 515)) | (1 << (SQLParserSFUNC - 515)) | (1 << (SQLParserSHAREABLE - 515)) | (1 << (SQLParserSKIP_LOCKED - 515)) | (1 << (SQLParserSORTOP - 515)) | (1 << (SQLParserSSPACE - 515)) | (1 << (SQLParserSTYPE - 515)) | (1 << (SQLParserSUBTYPE_DIFF - 515)) | (1 << (SQLParserSUBTYPE_OPCLASS - 515)) | (1 << (SQLParserSUBTYPE - 515)) | (1 << (SQLParserSUMMARY - 515)) | (1 << (SQLParserSUPERUSER - 515)) | (1 << (SQLParserTIMING - 515)) | (1 << (SQLParserTYPMOD_IN - 515)) | (1 << (SQLParserTYPMOD_OUT - 515)))) != 0) || ((((_la - 547)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 547))) & ((1 << (SQLParserUNSAFE - 547)) | (1 << (SQLParserUSAGE - 547)) | (1 << (SQLParserVARIABLE - 547)) | (1 << (SQLParserWAL - 547)) | (1 << (SQLParserYAML - 547)) | (1 << (SQLParserALIAS - 547)) | (1 << (SQLParserASSERT - 547)) | (1 << (SQLParserCONSTANT - 547)) | (1 << (SQLParserDATATYPE - 547)) | (1 << (SQLParserDEBUG - 547)) | (1 << (SQLParserDETAIL - 547)) | (1 << (SQLParserDIAGNOSTICS - 547)) | (1 << (SQLParserELSEIF - 547)) | (1 << (SQLParserELSIF - 547)) | (1 << (SQLParserERRCODE - 547)) | (1 << (SQLParserEXIT - 547)) | (1 << (SQLParserEXCEPTION - 547)) | (1 << (SQLParserFOREACH - 547)) | (1 << (SQLParserGET - 547)) | (1 << (SQLParserHINT - 547)) | (1 << (SQLParserINFO - 547)) | (1 << (SQLParserLOG - 547)) | (1 << (SQLParserLOOP - 547)) | (1 << (SQLParserMESSAGE - 547)) | (1 << (SQLParserNOTICE - 547)) | (1 << (SQLParserOPEN - 547)) | (1 << (SQLParserPERFORM - 547)) | (1 << (SQLParserQUERY - 547)) | (1 << (SQLParserRAISE - 547)) | (1 << (SQLParserRECORD - 547)) | (1 << (SQLParserRETURN - 547)) | (1 << (SQLParserREVERSE - 547)))) != 0) || ((((_la - 579)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 579))) & ((1 << (SQLParserROWTYPE - 579)) | (1 << (SQLParserSLICE - 579)) | (1 << (SQLParserSQLSTATE - 579)) | (1 << (SQLParserSTACKED - 579)) | (1 << (SQLParserWARNING - 579)) | (1 << (SQLParserWHILE - 579)) | (1 << (SQLParserLEFT_PAREN - 579)) | (1 << (SQLParserPLUS - 579)) | (1 << (SQLParserMINUS - 579)) | (1 << (SQLParserMULTIPLY - 579)))) != 0) || ((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)) | (1 << (SQLParserNUMBER_LITERAL - 611)) | (1 << (SQLParserREAL_NUMBER - 611)) | (1 << (SQLParserDOLLAR_NUMBER - 611)) | (1 << (SQLParserIdentifier - 611)) | (1 << (SQLParserQuotedIdentifier - 611)) | (1 << (SQLParserCharacter_String_Literal - 611)) | (1 << (SQLParserBeginDollarStringConstant - 611)))) != 0) {
			{
				p.SetState(7775)
				p.Perform_stmt()
			}

		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7778)
			p.Match(SQLParserRETURN)
		}
		{
			p.SetState(7779)
			p.Match(SQLParserNEXT)
		}
		{
			p.SetState(7780)
			p.vex(0)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7781)
			p.Match(SQLParserRETURN)
		}
		{
			p.SetState(7782)
			p.Match(SQLParserQUERY)
		}
		{
			p.SetState(7783)
			p.Plpgsql_query()
		}

	}


	return localctx
}


// ILoop_statementContext is an interface to support dynamic dispatch.
type ILoop_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoop_statementContext differentiates from other interfaces.
	IsLoop_statementContext()
}

type Loop_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoop_statementContext() *Loop_statementContext {
	var p = new(Loop_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_loop_statement
	return p
}

func (*Loop_statementContext) IsLoop_statementContext() {}

func NewLoop_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Loop_statementContext {
	var p = new(Loop_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_loop_statement

	return p
}

func (s *Loop_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Loop_statementContext) AllLOOP() []antlr.TerminalNode {
	return s.GetTokens(SQLParserLOOP)
}

func (s *Loop_statementContext) LOOP(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserLOOP, i)
}

func (s *Loop_statementContext) Function_statements() IFunction_statementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_statementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_statementsContext)
}

func (s *Loop_statementContext) END() antlr.TerminalNode {
	return s.GetToken(SQLParserEND, 0)
}

func (s *Loop_statementContext) Start_label() IStart_labelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStart_labelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStart_labelContext)
}

func (s *Loop_statementContext) Loop_start() ILoop_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_startContext)
}

func (s *Loop_statementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Loop_statementContext) EXIT() antlr.TerminalNode {
	return s.GetToken(SQLParserEXIT, 0)
}

func (s *Loop_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(SQLParserCONTINUE, 0)
}

func (s *Loop_statementContext) Col_label() ICol_labelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICol_labelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICol_labelContext)
}

func (s *Loop_statementContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SQLParserWHEN, 0)
}

func (s *Loop_statementContext) Vex() IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Loop_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Loop_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Loop_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterLoop_statement(s)
	}
}

func (s *Loop_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitLoop_statement(s)
	}
}




func (p *SQLParser) Loop_statement() (localctx ILoop_statementContext) {
	localctx = NewLoop_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 774, SQLParserRULE_loop_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7807)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserFOR, SQLParserFOREACH, SQLParserLOOP, SQLParserWHILE, SQLParserLESS_LESS:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(7787)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLESS_LESS {
			{
				p.SetState(7786)
				p.Start_label()
			}

		}
		p.SetState(7790)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserFOR || _la == SQLParserFOREACH || _la == SQLParserWHILE {
			{
				p.SetState(7789)
				p.Loop_start()
			}

		}
		{
			p.SetState(7792)
			p.Match(SQLParserLOOP)
		}
		{
			p.SetState(7793)
			p.Function_statements()
		}
		{
			p.SetState(7794)
			p.Match(SQLParserEND)
		}
		{
			p.SetState(7795)
			p.Match(SQLParserLOOP)
		}
		p.SetState(7797)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)))) != 0) || ((((_la - 450)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 450))) & ((1 << (SQLParserALIGNMENT - 450)) | (1 << (SQLParserALLOW_CONNECTIONS - 450)) | (1 << (SQLParserBASETYPE - 450)) | (1 << (SQLParserBUFFERS - 450)) | (1 << (SQLParserBYPASSRLS - 450)) | (1 << (SQLParserCANONICAL - 450)) | (1 << (SQLParserCATEGORY - 450)) | (1 << (SQLParserCOLLATABLE - 450)) | (1 << (SQLParserCOMBINEFUNC - 450)) | (1 << (SQLParserCOMMUTATOR - 450)) | (1 << (SQLParserCONNECT - 450)) | (1 << (SQLParserCOSTS - 450)) | (1 << (SQLParserCREATEDB - 450)) | (1 << (SQLParserCREATEROLE - 450)) | (1 << (SQLParserDESERIALFUNC - 450)) | (1 << (SQLParserDETERMINISTIC - 450)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 450)) | (1 << (SQLParserELEMENT - 450)) | (1 << (SQLParserEXTENDED - 450)) | (1 << (SQLParserFINALFUNC - 450)) | (1 << (SQLParserFINALFUNC_EXTRA - 450)) | (1 << (SQLParserFINALFUNC_MODIFY - 450)) | (1 << (SQLParserFORCE_NOT_NULL - 450)) | (1 << (SQLParserFORCE_NULL - 450)) | (1 << (SQLParserFORCE_QUOTE - 450)) | (1 << (SQLParserFORMAT - 450)) | (1 << (SQLParserGETTOKEN - 450)) | (1 << (SQLParserHASH - 450)) | (1 << (SQLParserHASHES - 450)) | (1 << (SQLParserHEADLINE - 450)) | (1 << (SQLParserHYPOTHETICAL - 450)) | (1 << (SQLParserINDEX_CLEANUP - 450)))) != 0) || ((((_la - 482)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 482))) & ((1 << (SQLParserINIT - 482)) | (1 << (SQLParserINITCOND - 482)) | (1 << (SQLParserINTERNALLENGTH - 482)) | (1 << (SQLParserIS_TEMPLATE - 482)) | (1 << (SQLParserJSON - 482)) | (1 << (SQLParserLC_COLLATE - 482)) | (1 << (SQLParserLC_CTYPE - 482)) | (1 << (SQLParserLEFTARG - 482)) | (1 << (SQLParserLEXIZE - 482)) | (1 << (SQLParserLEXTYPES - 482)) | (1 << (SQLParserLIST - 482)) | (1 << (SQLParserLOCALE - 482)) | (1 << (SQLParserLOGIN - 482)) | (1 << (SQLParserMAIN - 482)) | (1 << (SQLParserMERGES - 482)) | (1 << (SQLParserMFINALFUNC - 482)) | (1 << (SQLParserMFINALFUNC_EXTRA - 482)) | (1 << (SQLParserMFINALFUNC_MODIFY - 482)) | (1 << (SQLParserMINITCOND - 482)) | (1 << (SQLParserMINVFUNC - 482)) | (1 << (SQLParserMODULUS - 482)) | (1 << (SQLParserMSFUNC - 482)) | (1 << (SQLParserMSSPACE - 482)) | (1 << (SQLParserMSTYPE - 482)) | (1 << (SQLParserNEGATOR - 482)) | (1 << (SQLParserNOBYPASSRLS - 482)) | (1 << (SQLParserNOCREATEDB - 482)) | (1 << (SQLParserNOCREATEROLE - 482)) | (1 << (SQLParserNOINHERIT - 482)) | (1 << (SQLParserNOLOGIN - 482)) | (1 << (SQLParserNOREPLICATION - 482)) | (1 << (SQLParserNOSUPERUSER - 482)))) != 0) || ((((_la - 514)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 514))) & ((1 << (SQLParserOUTPUT - 514)) | (1 << (SQLParserPASSEDBYVALUE - 514)) | (1 << (SQLParserPATH - 514)) | (1 << (SQLParserPERMISSIVE - 514)) | (1 << (SQLParserPLAIN - 514)) | (1 << (SQLParserPREFERRED - 514)) | (1 << (SQLParserPROVIDER - 514)) | (1 << (SQLParserREAD_ONLY - 514)) | (1 << (SQLParserREAD_WRITE - 514)) | (1 << (SQLParserRECEIVE - 514)) | (1 << (SQLParserREMAINDER - 514)) | (1 << (SQLParserREPLICATION - 514)) | (1 << (SQLParserRESTRICTED - 514)) | (1 << (SQLParserRESTRICTIVE - 514)) | (1 << (SQLParserRIGHTARG - 514)) | (1 << (SQLParserSAFE - 514)) | (1 << (SQLParserSEND - 514)) | (1 << (SQLParserSERIALFUNC - 514)) | (1 << (SQLParserSETTINGS - 514)) | (1 << (SQLParserSFUNC - 514)) | (1 << (SQLParserSHAREABLE - 514)) | (1 << (SQLParserSKIP_LOCKED - 514)) | (1 << (SQLParserSORTOP - 514)) | (1 << (SQLParserSSPACE - 514)) | (1 << (SQLParserSTYPE - 514)) | (1 << (SQLParserSUBTYPE_DIFF - 514)) | (1 << (SQLParserSUBTYPE_OPCLASS - 514)) | (1 << (SQLParserSUBTYPE - 514)) | (1 << (SQLParserSUMMARY - 514)) | (1 << (SQLParserSUPERUSER - 514)) | (1 << (SQLParserTIMING - 514)) | (1 << (SQLParserTYPMOD_IN - 514)))) != 0) || ((((_la - 546)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 546))) & ((1 << (SQLParserTYPMOD_OUT - 546)) | (1 << (SQLParserUNSAFE - 546)) | (1 << (SQLParserUSAGE - 546)) | (1 << (SQLParserVARIABLE - 546)) | (1 << (SQLParserWAL - 546)) | (1 << (SQLParserYAML - 546)) | (1 << (SQLParserALIAS - 546)) | (1 << (SQLParserASSERT - 546)) | (1 << (SQLParserCONSTANT - 546)) | (1 << (SQLParserDATATYPE - 546)) | (1 << (SQLParserDEBUG - 546)) | (1 << (SQLParserDETAIL - 546)) | (1 << (SQLParserDIAGNOSTICS - 546)) | (1 << (SQLParserELSEIF - 546)) | (1 << (SQLParserELSIF - 546)) | (1 << (SQLParserERRCODE - 546)) | (1 << (SQLParserEXIT - 546)) | (1 << (SQLParserEXCEPTION - 546)) | (1 << (SQLParserFOREACH - 546)) | (1 << (SQLParserGET - 546)) | (1 << (SQLParserHINT - 546)) | (1 << (SQLParserINFO - 546)) | (1 << (SQLParserLOG - 546)) | (1 << (SQLParserLOOP - 546)) | (1 << (SQLParserMESSAGE - 546)) | (1 << (SQLParserNOTICE - 546)) | (1 << (SQLParserOPEN - 546)) | (1 << (SQLParserPERFORM - 546)) | (1 << (SQLParserQUERY - 546)) | (1 << (SQLParserRAISE - 546)) | (1 << (SQLParserRECORD - 546)) | (1 << (SQLParserRETURN - 546)))) != 0) || ((((_la - 578)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 578))) & ((1 << (SQLParserREVERSE - 578)) | (1 << (SQLParserROWTYPE - 578)) | (1 << (SQLParserSLICE - 578)) | (1 << (SQLParserSQLSTATE - 578)) | (1 << (SQLParserSTACKED - 578)) | (1 << (SQLParserWARNING - 578)) | (1 << (SQLParserWHILE - 578)))) != 0) || _la == SQLParserIdentifier || _la == SQLParserQuotedIdentifier {
			{
				p.SetState(7796)
				p.Identifier()
			}

		}


	case SQLParserCONTINUE, SQLParserEXIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7799)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserCONTINUE || _la == SQLParserEXIT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(7801)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1065, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7800)
				p.Col_label()
			}


		}
		p.SetState(7805)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserWHEN {
			{
				p.SetState(7803)
				p.Match(SQLParserWHEN)
			}
			{
				p.SetState(7804)
				p.vex(0)
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ILoop_startContext is an interface to support dynamic dispatch.
type ILoop_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// GetCursor returns the cursor rule contexts.
	GetCursor() IIdentifierContext


	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// SetCursor sets the cursor rule contexts.
	SetCursor(IIdentifierContext)


	// IsLoop_startContext differentiates from other interfaces.
	IsLoop_startContext()
}

type Loop_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	alias IIdentifierContext 
	cursor IIdentifierContext 
}

func NewEmptyLoop_startContext() *Loop_startContext {
	var p = new(Loop_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_loop_start
	return p
}

func (*Loop_startContext) IsLoop_startContext() {}

func NewLoop_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Loop_startContext {
	var p = new(Loop_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_loop_start

	return p
}

func (s *Loop_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Loop_startContext) GetAlias() IIdentifierContext { return s.alias }

func (s *Loop_startContext) GetCursor() IIdentifierContext { return s.cursor }


func (s *Loop_startContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *Loop_startContext) SetCursor(v IIdentifierContext) { s.cursor = v }


func (s *Loop_startContext) WHILE() antlr.TerminalNode {
	return s.GetToken(SQLParserWHILE, 0)
}

func (s *Loop_startContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Loop_startContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Loop_startContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLParserFOR, 0)
}

func (s *Loop_startContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLParserIN, 0)
}

func (s *Loop_startContext) DOUBLE_DOT() antlr.TerminalNode {
	return s.GetToken(SQLParserDOUBLE_DOT, 0)
}

func (s *Loop_startContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Loop_startContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Loop_startContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(SQLParserREVERSE, 0)
}

func (s *Loop_startContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLParserBY, 0)
}

func (s *Loop_startContext) Identifier_list() IIdentifier_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Loop_startContext) Plpgsql_query() IPlpgsql_queryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlpgsql_queryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlpgsql_queryContext)
}

func (s *Loop_startContext) LEFT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserLEFT_PAREN, 0)
}

func (s *Loop_startContext) AllOption() []IOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptionContext)(nil)).Elem())
	var tst = make([]IOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptionContext)
		}
	}

	return tst
}

func (s *Loop_startContext) Option(i int) IOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptionContext)
}

func (s *Loop_startContext) RIGHT_PAREN() antlr.TerminalNode {
	return s.GetToken(SQLParserRIGHT_PAREN, 0)
}

func (s *Loop_startContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Loop_startContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Loop_startContext) FOREACH() antlr.TerminalNode {
	return s.GetToken(SQLParserFOREACH, 0)
}

func (s *Loop_startContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SQLParserARRAY, 0)
}

func (s *Loop_startContext) SLICE() antlr.TerminalNode {
	return s.GetToken(SQLParserSLICE, 0)
}

func (s *Loop_startContext) NUMBER_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLParserNUMBER_LITERAL, 0)
}

func (s *Loop_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Loop_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Loop_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterLoop_start(s)
	}
}

func (s *Loop_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitLoop_start(s)
	}
}




func (p *SQLParser) Loop_start() (localctx ILoop_startContext) {
	localctx = NewLoop_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 776, SQLParserRULE_loop_start)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7856)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1073, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7809)
			p.Match(SQLParserWHILE)
		}
		{
			p.SetState(7810)
			p.vex(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7811)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(7812)

			var _x = p.Identifier()


			localctx.(*Loop_startContext).alias = _x
		}
		{
			p.SetState(7813)
			p.Match(SQLParserIN)
		}
		p.SetState(7815)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1068, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7814)
				p.Match(SQLParserREVERSE)
			}


		}
		{
			p.SetState(7817)
			p.vex(0)
		}
		{
			p.SetState(7818)
			p.Match(SQLParserDOUBLE_DOT)
		}
		{
			p.SetState(7819)
			p.vex(0)
		}
		p.SetState(7822)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserBY {
			{
				p.SetState(7820)
				p.Match(SQLParserBY)
			}
			{
				p.SetState(7821)
				p.vex(0)
			}

		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7824)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(7825)
			p.Identifier_list()
		}
		{
			p.SetState(7826)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(7827)
			p.Plpgsql_query()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7829)
			p.Match(SQLParserFOR)
		}
		{
			p.SetState(7830)

			var _x = p.Identifier()


			localctx.(*Loop_startContext).cursor = _x
		}
		{
			p.SetState(7831)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(7832)
			p.Identifier()
		}
		p.SetState(7844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserLEFT_PAREN {
			{
				p.SetState(7833)
				p.Match(SQLParserLEFT_PAREN)
			}
			{
				p.SetState(7834)
				p.Option()
			}
			p.SetState(7839)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SQLParserCOMMA {
				{
					p.SetState(7835)
					p.Match(SQLParserCOMMA)
				}
				{
					p.SetState(7836)
					p.Option()
				}


				p.SetState(7841)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(7842)
				p.Match(SQLParserRIGHT_PAREN)
			}

		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7846)
			p.Match(SQLParserFOREACH)
		}
		{
			p.SetState(7847)
			p.Identifier_list()
		}
		p.SetState(7850)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SQLParserSLICE {
			{
				p.SetState(7848)
				p.Match(SQLParserSLICE)
			}
			{
				p.SetState(7849)
				p.Match(SQLParserNUMBER_LITERAL)
			}

		}
		{
			p.SetState(7852)
			p.Match(SQLParserIN)
		}
		{
			p.SetState(7853)
			p.Match(SQLParserARRAY)
		}
		{
			p.SetState(7854)
			p.vex(0)
		}

	}


	return localctx
}


// IUsing_vexContext is an interface to support dynamic dispatch.
type IUsing_vexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsing_vexContext differentiates from other interfaces.
	IsUsing_vexContext()
}

type Using_vexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsing_vexContext() *Using_vexContext {
	var p = new(Using_vexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_using_vex
	return p
}

func (*Using_vexContext) IsUsing_vexContext() {}

func NewUsing_vexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Using_vexContext {
	var p = new(Using_vexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_using_vex

	return p
}

func (s *Using_vexContext) GetParser() antlr.Parser { return s.parser }

func (s *Using_vexContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLParserUSING, 0)
}

func (s *Using_vexContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Using_vexContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Using_vexContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Using_vexContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Using_vexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Using_vexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Using_vexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterUsing_vex(s)
	}
}

func (s *Using_vexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitUsing_vex(s)
	}
}




func (p *SQLParser) Using_vex() (localctx IUsing_vexContext) {
	localctx = NewUsing_vexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 778, SQLParserRULE_using_vex)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7858)
		p.Match(SQLParserUSING)
	}
	{
		p.SetState(7859)
		p.vex(0)
	}
	p.SetState(7864)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserCOMMA {
		{
			p.SetState(7860)
			p.Match(SQLParserCOMMA)
		}
		{
			p.SetState(7861)
			p.vex(0)
		}


		p.SetState(7866)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IIf_statementContext is an interface to support dynamic dispatch.
type IIf_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_statementContext differentiates from other interfaces.
	IsIf_statementContext()
}

type If_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_statementContext() *If_statementContext {
	var p = new(If_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_if_statement
	return p
}

func (*If_statementContext) IsIf_statementContext() {}

func NewIf_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_statementContext {
	var p = new(If_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_if_statement

	return p
}

func (s *If_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_statementContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(SQLParserIF)
}

func (s *If_statementContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserIF, i)
}

func (s *If_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *If_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *If_statementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserTHEN)
}

func (s *If_statementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserTHEN, i)
}

func (s *If_statementContext) AllFunction_statements() []IFunction_statementsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_statementsContext)(nil)).Elem())
	var tst = make([]IFunction_statementsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_statementsContext)
		}
	}

	return tst
}

func (s *If_statementContext) Function_statements(i int) IFunction_statementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_statementsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_statementsContext)
}

func (s *If_statementContext) END() antlr.TerminalNode {
	return s.GetToken(SQLParserEND, 0)
}

func (s *If_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SQLParserELSE, 0)
}

func (s *If_statementContext) AllELSIF() []antlr.TerminalNode {
	return s.GetTokens(SQLParserELSIF)
}

func (s *If_statementContext) ELSIF(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserELSIF, i)
}

func (s *If_statementContext) AllELSEIF() []antlr.TerminalNode {
	return s.GetTokens(SQLParserELSEIF)
}

func (s *If_statementContext) ELSEIF(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserELSEIF, i)
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitIf_statement(s)
	}
}




func (p *SQLParser) If_statement() (localctx IIf_statementContext) {
	localctx = NewIf_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 780, SQLParserRULE_if_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7867)
		p.Match(SQLParserIF)
	}
	{
		p.SetState(7868)
		p.vex(0)
	}
	{
		p.SetState(7869)
		p.Match(SQLParserTHEN)
	}
	{
		p.SetState(7870)
		p.Function_statements()
	}
	p.SetState(7878)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SQLParserELSEIF || _la == SQLParserELSIF {
		{
			p.SetState(7871)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLParserELSEIF || _la == SQLParserELSIF) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(7872)
			p.vex(0)
		}
		{
			p.SetState(7873)
			p.Match(SQLParserTHEN)
		}
		{
			p.SetState(7874)
			p.Function_statements()
		}


		p.SetState(7880)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7883)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserELSE {
		{
			p.SetState(7881)
			p.Match(SQLParserELSE)
		}
		{
			p.SetState(7882)
			p.Function_statements()
		}

	}
	{
		p.SetState(7885)
		p.Match(SQLParserEND)
	}
	{
		p.SetState(7886)
		p.Match(SQLParserIF)
	}



	return localctx
}


// ICase_statementContext is an interface to support dynamic dispatch.
type ICase_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_statementContext differentiates from other interfaces.
	IsCase_statementContext()
}

type Case_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_statementContext() *Case_statementContext {
	var p = new(Case_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_case_statement
	return p
}

func (*Case_statementContext) IsCase_statementContext() {}

func NewCase_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_statementContext {
	var p = new(Case_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_case_statement

	return p
}

func (s *Case_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_statementContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCASE)
}

func (s *Case_statementContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCASE, i)
}

func (s *Case_statementContext) END() antlr.TerminalNode {
	return s.GetToken(SQLParserEND, 0)
}

func (s *Case_statementContext) AllVex() []IVexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVexContext)(nil)).Elem())
	var tst = make([]IVexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVexContext)
		}
	}

	return tst
}

func (s *Case_statementContext) Vex(i int) IVexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVexContext)
}

func (s *Case_statementContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserWHEN)
}

func (s *Case_statementContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserWHEN, i)
}

func (s *Case_statementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(SQLParserTHEN)
}

func (s *Case_statementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserTHEN, i)
}

func (s *Case_statementContext) AllFunction_statements() []IFunction_statementsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_statementsContext)(nil)).Elem())
	var tst = make([]IFunction_statementsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_statementsContext)
		}
	}

	return tst
}

func (s *Case_statementContext) Function_statements(i int) IFunction_statementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_statementsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_statementsContext)
}

func (s *Case_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SQLParserELSE, 0)
}

func (s *Case_statementContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLParserCOMMA)
}

func (s *Case_statementContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLParserCOMMA, i)
}

func (s *Case_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Case_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterCase_statement(s)
	}
}

func (s *Case_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitCase_statement(s)
	}
}




func (p *SQLParser) Case_statement() (localctx ICase_statementContext) {
	localctx = NewCase_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 782, SQLParserRULE_case_statement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7888)
		p.Match(SQLParserCASE)
	}
	p.SetState(7890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SQLParserABORT) | (1 << SQLParserABSOLUTE) | (1 << SQLParserACCESS) | (1 << SQLParserACTION) | (1 << SQLParserADD) | (1 << SQLParserADMIN) | (1 << SQLParserAFTER) | (1 << SQLParserAGGREGATE) | (1 << SQLParserALSO) | (1 << SQLParserALTER) | (1 << SQLParserALWAYS) | (1 << SQLParserASSERTION) | (1 << SQLParserASSIGNMENT) | (1 << SQLParserAT) | (1 << SQLParserATTACH) | (1 << SQLParserATTRIBUTE) | (1 << SQLParserBACKWARD) | (1 << SQLParserBEFORE) | (1 << SQLParserBEGIN) | (1 << SQLParserBY) | (1 << SQLParserCACHE) | (1 << SQLParserCALL) | (1 << SQLParserCALLED) | (1 << SQLParserCASCADE) | (1 << SQLParserCASCADED) | (1 << SQLParserCATALOG) | (1 << SQLParserCHAIN) | (1 << SQLParserCHARACTERISTICS) | (1 << SQLParserCHECKPOINT) | (1 << SQLParserCLASS) | (1 << SQLParserCLOSE))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SQLParserCLUSTER - 32)) | (1 << (SQLParserCOLUMNS - 32)) | (1 << (SQLParserCOMMENT - 32)) | (1 << (SQLParserCOMMENTS - 32)) | (1 << (SQLParserCOMMIT - 32)) | (1 << (SQLParserCOMMITTED - 32)) | (1 << (SQLParserCONFIGURATION - 32)) | (1 << (SQLParserCONFLICT - 32)) | (1 << (SQLParserCONNECTION - 32)) | (1 << (SQLParserCONSTRAINTS - 32)) | (1 << (SQLParserCONTENT - 32)) | (1 << (SQLParserCONTINUE - 32)) | (1 << (SQLParserCONVERSION - 32)) | (1 << (SQLParserCOPY - 32)) | (1 << (SQLParserCOST - 32)) | (1 << (SQLParserCSV - 32)) | (1 << (SQLParserCUBE - 32)) | (1 << (SQLParserCURRENT - 32)) | (1 << (SQLParserCURSOR - 32)) | (1 << (SQLParserCYCLE - 32)) | (1 << (SQLParserDATA - 32)) | (1 << (SQLParserDATABASE - 32)) | (1 << (SQLParserDAY - 32)) | (1 << (SQLParserDEALLOCATE - 32)) | (1 << (SQLParserDECLARE - 32)) | (1 << (SQLParserDEFAULTS - 32)) | (1 << (SQLParserDEFERRED - 32)) | (1 << (SQLParserDEFINER - 32)) | (1 << (SQLParserDELETE - 32)) | (1 << (SQLParserDELIMITER - 32)) | (1 << (SQLParserDELIMITERS - 32)) | (1 << (SQLParserDEPENDS - 32)))) != 0) || ((((_la - 64)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 64))) & ((1 << (SQLParserDETACH - 64)) | (1 << (SQLParserDICTIONARY - 64)) | (1 << (SQLParserDISABLE - 64)) | (1 << (SQLParserDISCARD - 64)) | (1 << (SQLParserDOCUMENT - 64)) | (1 << (SQLParserDOMAIN - 64)) | (1 << (SQLParserDOUBLE - 64)) | (1 << (SQLParserDROP - 64)) | (1 << (SQLParserEACH - 64)) | (1 << (SQLParserENABLE - 64)) | (1 << (SQLParserENCODING - 64)) | (1 << (SQLParserENCRYPTED - 64)) | (1 << (SQLParserENUM - 64)) | (1 << (SQLParserESCAPE - 64)) | (1 << (SQLParserEVENT - 64)) | (1 << (SQLParserEXCLUDE - 64)) | (1 << (SQLParserEXCLUDING - 64)) | (1 << (SQLParserEXCLUSIVE - 64)) | (1 << (SQLParserEXECUTE - 64)) | (1 << (SQLParserEXPLAIN - 64)) | (1 << (SQLParserEXPRESSION - 64)) | (1 << (SQLParserEXTENSION - 64)) | (1 << (SQLParserEXTERNAL - 64)) | (1 << (SQLParserFAMILY - 64)) | (1 << (SQLParserFILTER - 64)) | (1 << (SQLParserFIRST - 64)) | (1 << (SQLParserFOLLOWING - 64)) | (1 << (SQLParserFORCE - 64)) | (1 << (SQLParserFORWARD - 64)) | (1 << (SQLParserFUNCTION - 64)) | (1 << (SQLParserFUNCTIONS - 64)) | (1 << (SQLParserGENERATED - 64)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SQLParserGLOBAL - 96)) | (1 << (SQLParserGRANTED - 96)) | (1 << (SQLParserGROUPS - 96)) | (1 << (SQLParserHANDLER - 96)) | (1 << (SQLParserHEADER - 96)) | (1 << (SQLParserHOLD - 96)) | (1 << (SQLParserHOUR - 96)) | (1 << (SQLParserIDENTITY - 96)) | (1 << (SQLParserIF - 96)) | (1 << (SQLParserIMMEDIATE - 96)) | (1 << (SQLParserIMMUTABLE - 96)) | (1 << (SQLParserIMPLICIT - 96)) | (1 << (SQLParserIMPORT - 96)) | (1 << (SQLParserINCLUDE - 96)) | (1 << (SQLParserINCLUDING - 96)) | (1 << (SQLParserINCREMENT - 96)) | (1 << (SQLParserINDEX - 96)) | (1 << (SQLParserINDEXES - 96)) | (1 << (SQLParserINHERIT - 96)) | (1 << (SQLParserINHERITS - 96)) | (1 << (SQLParserINLINE - 96)) | (1 << (SQLParserINPUT - 96)) | (1 << (SQLParserINSENSITIVE - 96)) | (1 << (SQLParserINSERT - 96)) | (1 << (SQLParserINSTEAD - 96)) | (1 << (SQLParserINVOKER - 96)) | (1 << (SQLParserISOLATION - 96)) | (1 << (SQLParserKEY - 96)) | (1 << (SQLParserLABEL - 96)) | (1 << (SQLParserLANGUAGE - 96)) | (1 << (SQLParserLARGE - 96)) | (1 << (SQLParserLAST - 96)))) != 0) || ((((_la - 128)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 128))) & ((1 << (SQLParserLEAKPROOF - 128)) | (1 << (SQLParserLEVEL - 128)) | (1 << (SQLParserLISTEN - 128)) | (1 << (SQLParserLOAD - 128)) | (1 << (SQLParserLOCAL - 128)) | (1 << (SQLParserLOCATION - 128)) | (1 << (SQLParserLOCK - 128)) | (1 << (SQLParserLOCKED - 128)) | (1 << (SQLParserLOGGED - 128)) | (1 << (SQLParserMAPPING - 128)) | (1 << (SQLParserMATCH - 128)) | (1 << (SQLParserMATERIALIZED - 128)) | (1 << (SQLParserMAXVALUE - 128)) | (1 << (SQLParserMETHOD - 128)) | (1 << (SQLParserMINUTE - 128)) | (1 << (SQLParserMINVALUE - 128)) | (1 << (SQLParserMODE - 128)) | (1 << (SQLParserMONTH - 128)) | (1 << (SQLParserMOVE - 128)) | (1 << (SQLParserNAME - 128)) | (1 << (SQLParserNAMES - 128)) | (1 << (SQLParserNEW - 128)) | (1 << (SQLParserNEXT - 128)) | (1 << (SQLParserNFC - 128)) | (1 << (SQLParserNFD - 128)) | (1 << (SQLParserNFKC - 128)) | (1 << (SQLParserNFKD - 128)) | (1 << (SQLParserNO - 128)) | (1 << (SQLParserNORMALIZED - 128)) | (1 << (SQLParserNOTHING - 128)) | (1 << (SQLParserNOTIFY - 128)) | (1 << (SQLParserNOWAIT - 128)))) != 0) || ((((_la - 160)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 160))) & ((1 << (SQLParserNULLS - 160)) | (1 << (SQLParserOBJECT - 160)) | (1 << (SQLParserOF - 160)) | (1 << (SQLParserOFF - 160)) | (1 << (SQLParserOIDS - 160)) | (1 << (SQLParserOLD - 160)) | (1 << (SQLParserOPERATOR - 160)) | (1 << (SQLParserOPTION - 160)) | (1 << (SQLParserOPTIONS - 160)) | (1 << (SQLParserORDINALITY - 160)) | (1 << (SQLParserOTHERS - 160)) | (1 << (SQLParserOVER - 160)) | (1 << (SQLParserOVERRIDING - 160)) | (1 << (SQLParserOWNED - 160)) | (1 << (SQLParserOWNER - 160)) | (1 << (SQLParserPARALLEL - 160)) | (1 << (SQLParserPARSER - 160)) | (1 << (SQLParserPARTIAL - 160)) | (1 << (SQLParserPARTITION - 160)) | (1 << (SQLParserPASSING - 160)) | (1 << (SQLParserPASSWORD - 160)) | (1 << (SQLParserPLANS - 160)) | (1 << (SQLParserPOLICY - 160)) | (1 << (SQLParserPRECEDING - 160)) | (1 << (SQLParserPREPARE - 160)) | (1 << (SQLParserPREPARED - 160)) | (1 << (SQLParserPRESERVE - 160)) | (1 << (SQLParserPRIOR - 160)) | (1 << (SQLParserPRIVILEGES - 160)) | (1 << (SQLParserPROCEDURAL - 160)) | (1 << (SQLParserPROCEDURE - 160)) | (1 << (SQLParserPROCEDURES - 160)))) != 0) || ((((_la - 192)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 192))) & ((1 << (SQLParserPROGRAM - 192)) | (1 << (SQLParserPUBLICATION - 192)) | (1 << (SQLParserQUOTE - 192)) | (1 << (SQLParserRANGE - 192)) | (1 << (SQLParserREAD - 192)) | (1 << (SQLParserREASSIGN - 192)) | (1 << (SQLParserRECHECK - 192)) | (1 << (SQLParserRECURSIVE - 192)) | (1 << (SQLParserREF - 192)) | (1 << (SQLParserREFERENCING - 192)) | (1 << (SQLParserREFRESH - 192)) | (1 << (SQLParserREINDEX - 192)) | (1 << (SQLParserRELATIVE - 192)) | (1 << (SQLParserRELEASE - 192)) | (1 << (SQLParserRENAME - 192)) | (1 << (SQLParserREPEATABLE - 192)) | (1 << (SQLParserREPLACE - 192)) | (1 << (SQLParserREPLICA - 192)) | (1 << (SQLParserRESET - 192)) | (1 << (SQLParserRESTART - 192)) | (1 << (SQLParserRESTRICT - 192)) | (1 << (SQLParserRETURNS - 192)) | (1 << (SQLParserREVOKE - 192)) | (1 << (SQLParserROLE - 192)) | (1 << (SQLParserROLLBACK - 192)) | (1 << (SQLParserROLLUP - 192)) | (1 << (SQLParserROUTINE - 192)) | (1 << (SQLParserROUTINES - 192)) | (1 << (SQLParserROWS - 192)) | (1 << (SQLParserRULE - 192)) | (1 << (SQLParserSAVEPOINT - 192)) | (1 << (SQLParserSCHEMA - 192)))) != 0) || ((((_la - 224)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 224))) & ((1 << (SQLParserSCHEMAS - 224)) | (1 << (SQLParserSCROLL - 224)) | (1 << (SQLParserSEARCH - 224)) | (1 << (SQLParserSECOND - 224)) | (1 << (SQLParserSECURITY - 224)) | (1 << (SQLParserSEQUENCE - 224)) | (1 << (SQLParserSEQUENCES - 224)) | (1 << (SQLParserSERIALIZABLE - 224)) | (1 << (SQLParserSERVER - 224)) | (1 << (SQLParserSESSION - 224)) | (1 << (SQLParserSET - 224)) | (1 << (SQLParserSETS - 224)) | (1 << (SQLParserSHARE - 224)) | (1 << (SQLParserSHOW - 224)) | (1 << (SQLParserSIMPLE - 224)) | (1 << (SQLParserSKIP_ - 224)) | (1 << (SQLParserSNAPSHOT - 224)) | (1 << (SQLParserSQL - 224)) | (1 << (SQLParserSTABLE - 224)) | (1 << (SQLParserSTANDALONE - 224)) | (1 << (SQLParserSTART - 224)) | (1 << (SQLParserSTATEMENT - 224)) | (1 << (SQLParserSTATISTICS - 224)) | (1 << (SQLParserSTDIN - 224)) | (1 << (SQLParserSTDOUT - 224)) | (1 << (SQLParserSTORAGE - 224)) | (1 << (SQLParserSTORED - 224)) | (1 << (SQLParserSTRICT - 224)) | (1 << (SQLParserSTRIP - 224)) | (1 << (SQLParserSUBSCRIPTION - 224)) | (1 << (SQLParserSUPPORT - 224)) | (1 << (SQLParserSYSID - 224)))) != 0) || ((((_la - 256)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 256))) & ((1 << (SQLParserSYSTEM - 256)) | (1 << (SQLParserTABLES - 256)) | (1 << (SQLParserTABLESPACE - 256)) | (1 << (SQLParserTEMP - 256)) | (1 << (SQLParserTEMPLATE - 256)) | (1 << (SQLParserTEMPORARY - 256)) | (1 << (SQLParserTEXT - 256)) | (1 << (SQLParserTIES - 256)) | (1 << (SQLParserTRANSACTION - 256)) | (1 << (SQLParserTRANSFORM - 256)) | (1 << (SQLParserTRIGGER - 256)) | (1 << (SQLParserTRUNCATE - 256)) | (1 << (SQLParserTRUSTED - 256)) | (1 << (SQLParserTYPE - 256)) | (1 << (SQLParserTYPES - 256)) | (1 << (SQLParserUESCAPE - 256)) | (1 << (SQLParserUNBOUNDED - 256)) | (1 << (SQLParserUNCOMMITTED - 256)) | (1 << (SQLParserUNENCRYPTED - 256)) | (1 << (SQLParserUNKNOWN - 256)) | (1 << (SQLParserUNLISTEN - 256)) | (1 << (SQLParserUNLOGGED - 256)) | (1 << (SQLParserUNTIL - 256)) | (1 << (SQLParserUPDATE - 256)) | (1 << (SQLParserVACUUM - 256)) | (1 << (SQLParserVALID - 256)) | (1 << (SQLParserVALIDATE - 256)) | (1 << (SQLParserVALIDATOR - 256)) | (1 << (SQLParserVALUE - 256)) | (1 << (SQLParserVARYING - 256)) | (1 << (SQLParserVERSION - 256)) | (1 << (SQLParserVIEW - 256)))) != 0) || ((((_la - 288)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 288))) & ((1 << (SQLParserVIEWS - 288)) | (1 << (SQLParserVOLATILE - 288)) | (1 << (SQLParserWHITESPACE - 288)) | (1 << (SQLParserWITHIN - 288)) | (1 << (SQLParserWITHOUT - 288)) | (1 << (SQLParserWORK - 288)) | (1 << (SQLParserWRAPPER - 288)) | (1 << (SQLParserWRITE - 288)) | (1 << (SQLParserXML - 288)) | (1 << (SQLParserYEAR - 288)) | (1 << (SQLParserYES - 288)) | (1 << (SQLParserZONE - 288)) | (1 << (SQLParserBETWEEN - 288)) | (1 << (SQLParserBIGINT - 288)) | (1 << (SQLParserBIT - 288)) | (1 << (SQLParserBOOLEAN - 288)) | (1 << (SQLParserCHAR - 288)) | (1 << (SQLParserCHARACTER - 288)) | (1 << (SQLParserCOALESCE - 288)) | (1 << (SQLParserDEC - 288)) | (1 << (SQLParserDECIMAL - 288)) | (1 << (SQLParserEXISTS - 288)) | (1 << (SQLParserEXTRACT - 288)) | (1 << (SQLParserFLOAT - 288)) | (1 << (SQLParserGREATEST - 288)) | (1 << (SQLParserGROUPING - 288)) | (1 << (SQLParserINOUT - 288)) | (1 << (SQLParserINT - 288)) | (1 << (SQLParserINTEGER - 288)) | (1 << (SQLParserINTERVAL - 288)) | (1 << (SQLParserLEAST - 288)) | (1 << (SQLParserNATIONAL - 288)))) != 0) || ((((_la - 320)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 320))) & ((1 << (SQLParserNCHAR - 320)) | (1 << (SQLParserNONE - 320)) | (1 << (SQLParserNORMALIZE - 320)) | (1 << (SQLParserNULLIF - 320)) | (1 << (SQLParserNUMERIC - 320)) | (1 << (SQLParserOUT - 320)) | (1 << (SQLParserOVERLAY - 320)) | (1 << (SQLParserPOSITION - 320)) | (1 << (SQLParserPRECISION - 320)) | (1 << (SQLParserREAL - 320)) | (1 << (SQLParserROW - 320)) | (1 << (SQLParserSETOF - 320)) | (1 << (SQLParserSMALLINT - 320)) | (1 << (SQLParserSUBSTRING - 320)) | (1 << (SQLParserTIME - 320)) | (1 << (SQLParserTIMESTAMP - 320)) | (1 << (SQLParserTREAT - 320)) | (1 << (SQLParserTRIM - 320)) | (1 << (SQLParserVALUES - 320)) | (1 << (SQLParserVARCHAR - 320)) | (1 << (SQLParserXMLATTRIBUTES - 320)) | (1 << (SQLParserXMLCONCAT - 320)) | (1 << (SQLParserXMLELEMENT - 320)) | (1 << (SQLParserXMLEXISTS - 320)) | (1 << (SQLParserXMLFOREST - 320)) | (1 << (SQLParserXMLNAMESPACES - 320)) | (1 << (SQLParserXMLPARSE - 320)) | (1 << (SQLParserXMLPI - 320)) | (1 << (SQLParserXMLROOT - 320)) | (1 << (SQLParserXMLSERIALIZE - 320)) | (1 << (SQLParserXMLTABLE - 320)) | (1 << (SQLParserAUTHORIZATION - 320)))) != 0) || ((((_la - 352)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 352))) & ((1 << (SQLParserBINARY - 352)) | (1 << (SQLParserCOLLATION - 352)) | (1 << (SQLParserCONCURRENTLY - 352)) | (1 << (SQLParserCROSS - 352)) | (1 << (SQLParserCURRENT_SCHEMA - 352)) | (1 << (SQLParserFREEZE - 352)) | (1 << (SQLParserFULL - 352)) | (1 << (SQLParserILIKE - 352)) | (1 << (SQLParserINNER - 352)) | (1 << (SQLParserIS - 352)) | (1 << (SQLParserISNULL - 352)) | (1 << (SQLParserJOIN - 352)) | (1 << (SQLParserLEFT - 352)) | (1 << (SQLParserLIKE - 352)) | (1 << (SQLParserNATURAL - 352)) | (1 << (SQLParserNOTNULL - 352)) | (1 << (SQLParserOUTER - 352)) | (1 << (SQLParserOVERLAPS - 352)) | (1 << (SQLParserRIGHT - 352)) | (1 << (SQLParserSIMILAR - 352)) | (1 << (SQLParserTABLESAMPLE - 352)) | (1 << (SQLParserVERBOSE - 352)) | (1 << (SQLParserALL - 352)) | (1 << (SQLParserANY - 352)) | (1 << (SQLParserARRAY - 352)) | (1 << (SQLParserCASE - 352)))) != 0) || ((((_la - 384)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 384))) & ((1 << (SQLParserCAST - 384)) | (1 << (SQLParserCURRENT_CATALOG - 384)) | (1 << (SQLParserCURRENT_DATE - 384)) | (1 << (SQLParserCURRENT_TIME - 384)) | (1 << (SQLParserCURRENT_TIMESTAMP - 384)) | (1 << (SQLParserCURRENT_USER - 384)) | (1 << (SQLParserFALSE - 384)))) != 0) || ((((_la - 419)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 419))) & ((1 << (SQLParserLOCALTIME - 419)) | (1 << (SQLParserLOCALTIMESTAMP - 419)) | (1 << (SQLParserNOT - 419)) | (1 << (SQLParserNULL - 419)) | (1 << (SQLParserON - 419)) | (1 << (SQLParserSESSION_USER - 419)) | (1 << (SQLParserSOME - 419)) | (1 << (SQLParserTRUE - 419)) | (1 << (SQLParserUSER - 419)) | (1 << (SQLParserALIGNMENT - 419)))) != 0) || ((((_la - 451)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 451))) & ((1 << (SQLParserALLOW_CONNECTIONS - 451)) | (1 << (SQLParserBASETYPE - 451)) | (1 << (SQLParserBUFFERS - 451)) | (1 << (SQLParserBYPASSRLS - 451)) | (1 << (SQLParserCANONICAL - 451)) | (1 << (SQLParserCATEGORY - 451)) | (1 << (SQLParserCOLLATABLE - 451)) | (1 << (SQLParserCOMBINEFUNC - 451)) | (1 << (SQLParserCOMMUTATOR - 451)) | (1 << (SQLParserCONNECT - 451)) | (1 << (SQLParserCOSTS - 451)) | (1 << (SQLParserCREATEDB - 451)) | (1 << (SQLParserCREATEROLE - 451)) | (1 << (SQLParserDESERIALFUNC - 451)) | (1 << (SQLParserDETERMINISTIC - 451)) | (1 << (SQLParserDISABLE_PAGE_SKIPPING - 451)) | (1 << (SQLParserELEMENT - 451)) | (1 << (SQLParserEXTENDED - 451)) | (1 << (SQLParserFINALFUNC - 451)) | (1 << (SQLParserFINALFUNC_EXTRA - 451)) | (1 << (SQLParserFINALFUNC_MODIFY - 451)) | (1 << (SQLParserFORCE_NOT_NULL - 451)) | (1 << (SQLParserFORCE_NULL - 451)) | (1 << (SQLParserFORCE_QUOTE - 451)) | (1 << (SQLParserFORMAT - 451)) | (1 << (SQLParserGETTOKEN - 451)) | (1 << (SQLParserHASH - 451)) | (1 << (SQLParserHASHES - 451)) | (1 << (SQLParserHEADLINE - 451)) | (1 << (SQLParserHYPOTHETICAL - 451)) | (1 << (SQLParserINDEX_CLEANUP - 451)) | (1 << (SQLParserINIT - 451)))) != 0) || ((((_la - 483)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 483))) & ((1 << (SQLParserINITCOND - 483)) | (1 << (SQLParserINTERNALLENGTH - 483)) | (1 << (SQLParserIS_TEMPLATE - 483)) | (1 << (SQLParserJSON - 483)) | (1 << (SQLParserLC_COLLATE - 483)) | (1 << (SQLParserLC_CTYPE - 483)) | (1 << (SQLParserLEFTARG - 483)) | (1 << (SQLParserLEXIZE - 483)) | (1 << (SQLParserLEXTYPES - 483)) | (1 << (SQLParserLIST - 483)) | (1 << (SQLParserLOCALE - 483)) | (1 << (SQLParserLOGIN - 483)) | (1 << (SQLParserMAIN - 483)) | (1 << (SQLParserMERGES - 483)) | (1 << (SQLParserMFINALFUNC - 483)) | (1 << (SQLParserMFINALFUNC_EXTRA - 483)) | (1 << (SQLParserMFINALFUNC_MODIFY - 483)) | (1 << (SQLParserMINITCOND - 483)) | (1 << (SQLParserMINVFUNC - 483)) | (1 << (SQLParserMODULUS - 483)) | (1 << (SQLParserMSFUNC - 483)) | (1 << (SQLParserMSSPACE - 483)) | (1 << (SQLParserMSTYPE - 483)) | (1 << (SQLParserNEGATOR - 483)) | (1 << (SQLParserNOBYPASSRLS - 483)) | (1 << (SQLParserNOCREATEDB - 483)) | (1 << (SQLParserNOCREATEROLE - 483)) | (1 << (SQLParserNOINHERIT - 483)) | (1 << (SQLParserNOLOGIN - 483)) | (1 << (SQLParserNOREPLICATION - 483)) | (1 << (SQLParserNOSUPERUSER - 483)) | (1 << (SQLParserOUTPUT - 483)))) != 0) || ((((_la - 515)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 515))) & ((1 << (SQLParserPASSEDBYVALUE - 515)) | (1 << (SQLParserPATH - 515)) | (1 << (SQLParserPERMISSIVE - 515)) | (1 << (SQLParserPLAIN - 515)) | (1 << (SQLParserPREFERRED - 515)) | (1 << (SQLParserPROVIDER - 515)) | (1 << (SQLParserREAD_ONLY - 515)) | (1 << (SQLParserREAD_WRITE - 515)) | (1 << (SQLParserRECEIVE - 515)) | (1 << (SQLParserREMAINDER - 515)) | (1 << (SQLParserREPLICATION - 515)) | (1 << (SQLParserRESTRICTED - 515)) | (1 << (SQLParserRESTRICTIVE - 515)) | (1 << (SQLParserRIGHTARG - 515)) | (1 << (SQLParserSAFE - 515)) | (1 << (SQLParserSEND - 515)) | (1 << (SQLParserSERIALFUNC - 515)) | (1 << (SQLParserSETTINGS - 515)) | (1 << (SQLParserSFUNC - 515)) | (1 << (SQLParserSHAREABLE - 515)) | (1 << (SQLParserSKIP_LOCKED - 515)) | (1 << (SQLParserSORTOP - 515)) | (1 << (SQLParserSSPACE - 515)) | (1 << (SQLParserSTYPE - 515)) | (1 << (SQLParserSUBTYPE_DIFF - 515)) | (1 << (SQLParserSUBTYPE_OPCLASS - 515)) | (1 << (SQLParserSUBTYPE - 515)) | (1 << (SQLParserSUMMARY - 515)) | (1 << (SQLParserSUPERUSER - 515)) | (1 << (SQLParserTIMING - 515)) | (1 << (SQLParserTYPMOD_IN - 515)) | (1 << (SQLParserTYPMOD_OUT - 515)))) != 0) || ((((_la - 547)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 547))) & ((1 << (SQLParserUNSAFE - 547)) | (1 << (SQLParserUSAGE - 547)) | (1 << (SQLParserVARIABLE - 547)) | (1 << (SQLParserWAL - 547)) | (1 << (SQLParserYAML - 547)) | (1 << (SQLParserALIAS - 547)) | (1 << (SQLParserASSERT - 547)) | (1 << (SQLParserCONSTANT - 547)) | (1 << (SQLParserDATATYPE - 547)) | (1 << (SQLParserDEBUG - 547)) | (1 << (SQLParserDETAIL - 547)) | (1 << (SQLParserDIAGNOSTICS - 547)) | (1 << (SQLParserELSEIF - 547)) | (1 << (SQLParserELSIF - 547)) | (1 << (SQLParserERRCODE - 547)) | (1 << (SQLParserEXIT - 547)) | (1 << (SQLParserEXCEPTION - 547)) | (1 << (SQLParserFOREACH - 547)) | (1 << (SQLParserGET - 547)) | (1 << (SQLParserHINT - 547)) | (1 << (SQLParserINFO - 547)) | (1 << (SQLParserLOG - 547)) | (1 << (SQLParserLOOP - 547)) | (1 << (SQLParserMESSAGE - 547)) | (1 << (SQLParserNOTICE - 547)) | (1 << (SQLParserOPEN - 547)) | (1 << (SQLParserPERFORM - 547)) | (1 << (SQLParserQUERY - 547)) | (1 << (SQLParserRAISE - 547)) | (1 << (SQLParserRECORD - 547)) | (1 << (SQLParserRETURN - 547)) | (1 << (SQLParserREVERSE - 547)))) != 0) || ((((_la - 579)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 579))) & ((1 << (SQLParserROWTYPE - 579)) | (1 << (SQLParserSLICE - 579)) | (1 << (SQLParserSQLSTATE - 579)) | (1 << (SQLParserSTACKED - 579)) | (1 << (SQLParserWARNING - 579)) | (1 << (SQLParserWHILE - 579)) | (1 << (SQLParserLEFT_PAREN - 579)) | (1 << (SQLParserPLUS - 579)) | (1 << (SQLParserMINUS - 579)) | (1 << (SQLParserMULTIPLY - 579)))) != 0) || ((((_la - 611)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 611))) & ((1 << (SQLParserLESS_LESS - 611)) | (1 << (SQLParserGREATER_GREATER - 611)) | (1 << (SQLParserHASH_SIGN - 611)) | (1 << (SQLParserOP_CHARS - 611)) | (1 << (SQLParserNUMBER_LITERAL - 611)) | (1 << (SQLParserREAL_NUMBER - 611)) | (1 << (SQLParserDOLLAR_NUMBER - 611)) | (1 << (SQLParserIdentifier - 611)) | (1 << (SQLParserQuotedIdentifier - 611)) | (1 << (SQLParserCharacter_String_Literal - 611)) | (1 << (SQLParserBeginDollarStringConstant - 611)))) != 0) {
		{
			p.SetState(7889)
			p.vex(0)
		}

	}
	p.SetState(7904)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == SQLParserWHEN {
		{
			p.SetState(7892)
			p.Match(SQLParserWHEN)
		}
		{
			p.SetState(7893)
			p.vex(0)
		}
		p.SetState(7898)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SQLParserCOMMA {
			{
				p.SetState(7894)
				p.Match(SQLParserCOMMA)
			}
			{
				p.SetState(7895)
				p.vex(0)
			}


			p.SetState(7900)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(7901)
			p.Match(SQLParserTHEN)
		}
		{
			p.SetState(7902)
			p.Function_statements()
		}


		p.SetState(7906)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7910)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SQLParserELSE {
		{
			p.SetState(7908)
			p.Match(SQLParserELSE)
		}
		{
			p.SetState(7909)
			p.Function_statements()
		}

	}
	{
		p.SetState(7912)
		p.Match(SQLParserEND)
	}
	{
		p.SetState(7913)
		p.Match(SQLParserCASE)
	}



	return localctx
}


// IPlpgsql_queryContext is an interface to support dynamic dispatch.
type IPlpgsql_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlpgsql_queryContext differentiates from other interfaces.
	IsPlpgsql_queryContext()
}

type Plpgsql_queryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlpgsql_queryContext() *Plpgsql_queryContext {
	var p = new(Plpgsql_queryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLParserRULE_plpgsql_query
	return p
}

func (*Plpgsql_queryContext) IsPlpgsql_queryContext() {}

func NewPlpgsql_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Plpgsql_queryContext {
	var p = new(Plpgsql_queryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLParserRULE_plpgsql_query

	return p
}

func (s *Plpgsql_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Plpgsql_queryContext) Data_statement() IData_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_statementContext)
}

func (s *Plpgsql_queryContext) Execute_stmt() IExecute_stmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_stmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_stmtContext)
}

func (s *Plpgsql_queryContext) Show_statement() IShow_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShow_statementContext)
}

func (s *Plpgsql_queryContext) Explain_statement() IExplain_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplain_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplain_statementContext)
}

func (s *Plpgsql_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Plpgsql_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *Plpgsql_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.EnterPlpgsql_query(s)
	}
}

func (s *Plpgsql_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLParserListener); ok {
		listenerT.ExitPlpgsql_query(s)
	}
}




func (p *SQLParser) Plpgsql_query() (localctx IPlpgsql_queryContext) {
	localctx = NewPlpgsql_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 784, SQLParserRULE_plpgsql_query)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7919)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLParserDELETE, SQLParserINSERT, SQLParserUPDATE, SQLParserVALUES, SQLParserSELECT, SQLParserTABLE, SQLParserWITH, SQLParserLEFT_PAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7915)
			p.Data_statement()
		}


	case SQLParserEXECUTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7916)
			p.Execute_stmt()
		}


	case SQLParserSHOW:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7917)
			p.Show_statement()
		}


	case SQLParserEXPLAIN:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7918)
			p.Explain_statement()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


func (p *SQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 293:
			var t *VexContext = nil
			if localctx != nil { t = localctx.(*VexContext) }
			return p.Vex_Sempred(t, predIndex)

	case 294:
			var t *Vex_bContext = nil
			if localctx != nil { t = localctx.(*Vex_bContext) }
			return p.Vex_b_Sempred(t, predIndex)

	case 330:
			var t *Select_opsContext = nil
			if localctx != nil { t = localctx.(*Select_opsContext) }
			return p.Select_ops_Sempred(t, predIndex)

	case 336:
			var t *From_itemContext = nil
			if localctx != nil { t = localctx.(*From_itemContext) }
			return p.From_item_Sempred(t, predIndex)


	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SQLParser) Vex_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
			return p.Precpred(p.GetParserRuleContext(), 23)

	case 1:
			return p.Precpred(p.GetParserRuleContext(), 22)

	case 2:
			return p.Precpred(p.GetParserRuleContext(), 21)

	case 3:
			return p.Precpred(p.GetParserRuleContext(), 20)

	case 4:
			return p.Precpred(p.GetParserRuleContext(), 19)

	case 5:
			return p.Precpred(p.GetParserRuleContext(), 15)

	case 6:
			return p.Precpred(p.GetParserRuleContext(), 14)

	case 7:
			return p.Precpred(p.GetParserRuleContext(), 13)

	case 8:
			return p.Precpred(p.GetParserRuleContext(), 12)

	case 9:
			return p.Precpred(p.GetParserRuleContext(), 10)

	case 10:
			return p.Precpred(p.GetParserRuleContext(), 3)

	case 11:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 12:
			return p.Precpred(p.GetParserRuleContext(), 28)

	case 13:
			return p.Precpred(p.GetParserRuleContext(), 25)

	case 14:
			return p.Precpred(p.GetParserRuleContext(), 17)

	case 15:
			return p.Precpred(p.GetParserRuleContext(), 16)

	case 16:
			return p.Precpred(p.GetParserRuleContext(), 11)

	case 17:
			return p.Precpred(p.GetParserRuleContext(), 9)

	case 18:
			return p.Precpred(p.GetParserRuleContext(), 8)

	case 19:
			return p.Precpred(p.GetParserRuleContext(), 7)

	case 20:
			return p.Precpred(p.GetParserRuleContext(), 6)

	case 21:
			return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SQLParser) Vex_b_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 22:
			return p.Precpred(p.GetParserRuleContext(), 12)

	case 23:
			return p.Precpred(p.GetParserRuleContext(), 11)

	case 24:
			return p.Precpred(p.GetParserRuleContext(), 10)

	case 25:
			return p.Precpred(p.GetParserRuleContext(), 9)

	case 26:
			return p.Precpred(p.GetParserRuleContext(), 6)

	case 27:
			return p.Precpred(p.GetParserRuleContext(), 5)

	case 28:
			return p.Precpred(p.GetParserRuleContext(), 16)

	case 29:
			return p.Precpred(p.GetParserRuleContext(), 7)

	case 30:
			return p.Precpred(p.GetParserRuleContext(), 4)

	case 31:
			return p.Precpred(p.GetParserRuleContext(), 3)

	case 32:
			return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SQLParser) Select_ops_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 33:
			return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SQLParser) From_item_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 34:
			return p.Precpred(p.GetParserRuleContext(), 5)

	case 35:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 36:
			return p.Precpred(p.GetParserRuleContext(), 4)

	case 37:
			return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

